/*
 * This file generated by:
 * interrogate -D EXPCL_DTOOLCONFIG= -nodb -python -promiscuous -I~/panda3d/include -module panda3d.dtoolconfig -library dtoolconfig -true-names -do-module -oc pydtool.cxx ../../src/interrogatedb/interrogate_interface.h 
 *
 */

#include <sstream>

#include "../../src/interrogatedb/interrogate_interface.h"
#include "dtoolbase.h"

#undef _POSIX_C_SOURCE
#define PY_SSIZE_T_CLEAN 1

#if PYTHON_FRAMEWORK
  #include "Python/Python.h"
#else
  #include "Python.h"
#endif

static PyObject *_inPU7VHtbRf(PyObject *self, PyObject *args);
static PyObject *_inPU7VHda_g(PyObject *self, PyObject *args);
static PyObject *_inPU7VH4RgX(PyObject *self, PyObject *args);
static PyObject *_inPU7VH3Gip(PyObject *self, PyObject *args);
static PyObject *_inPU7VHRKDz(PyObject *self, PyObject *args);
static PyObject *_inPU7VHgZ9N(PyObject *self, PyObject *args);
static PyObject *_inPU7VHRQIx(PyObject *self, PyObject *args);
static PyObject *_inPU7VHGVSj(PyObject *self, PyObject *args);
static PyObject *_inPU7VHznM6(PyObject *self, PyObject *args);
static PyObject *_inPU7VHjiLg(PyObject *self, PyObject *args);
static PyObject *_inPU7VH_yjE(PyObject *self, PyObject *args);
static PyObject *_inPU7VHzK9F(PyObject *self, PyObject *args);
static PyObject *_inPU7VHJju_(PyObject *self, PyObject *args);
static PyObject *_inPU7VHZktk(PyObject *self, PyObject *args);
static PyObject *_inPU7VHG71J(PyObject *self, PyObject *args);
static PyObject *_inPU7VHgeUs(PyObject *self, PyObject *args);
static PyObject *_inPU7VH5Gsy(PyObject *self, PyObject *args);
static PyObject *_inPU7VHCSJJ(PyObject *self, PyObject *args);
static PyObject *_inPU7VHkg95(PyObject *self, PyObject *args);
static PyObject *_inPU7VHluRc(PyObject *self, PyObject *args);
static PyObject *_inPU7VHwtTf(PyObject *self, PyObject *args);
static PyObject *_inPU7VHrfao(PyObject *self, PyObject *args);
static PyObject *_inPU7VHcedk(PyObject *self, PyObject *args);
static PyObject *_inPU7VHXmoo(PyObject *self, PyObject *args);
static PyObject *_inPU7VHclIo(PyObject *self, PyObject *args);
static PyObject *_inPU7VHU2_B(PyObject *self, PyObject *args);
static PyObject *_inPU7VHHFO2(PyObject *self, PyObject *args);
static PyObject *_inPU7VHcfjm(PyObject *self, PyObject *args);
static PyObject *_inPU7VH3Sjw(PyObject *self, PyObject *args);
static PyObject *_inPU7VHgJcX(PyObject *self, PyObject *args);
static PyObject *_inPU7VHYlw6(PyObject *self, PyObject *args);
static PyObject *_inPU7VH3gns(PyObject *self, PyObject *args);
static PyObject *_inPU7VHN968(PyObject *self, PyObject *args);
static PyObject *_inPU7VHFJVJ(PyObject *self, PyObject *args);
static PyObject *_inPU7VHndTW(PyObject *self, PyObject *args);
static PyObject *_inPU7VHpjWj(PyObject *self, PyObject *args);
static PyObject *_inPU7VHNcQW(PyObject *self, PyObject *args);
static PyObject *_inPU7VHP_SX(PyObject *self, PyObject *args);
static PyObject *_inPU7VH1iRq(PyObject *self, PyObject *args);
static PyObject *_inPU7VHEmel(PyObject *self, PyObject *args);
static PyObject *_inPU7VH20Vx(PyObject *self, PyObject *args);
static PyObject *_inPU7VHKcdW(PyObject *self, PyObject *args);
static PyObject *_inPU7VHhUs9(PyObject *self, PyObject *args);
static PyObject *_inPU7VHhF25(PyObject *self, PyObject *args);
static PyObject *_inPU7VHu1qB(PyObject *self, PyObject *args);
static PyObject *_inPU7VHKMkY(PyObject *self, PyObject *args);
static PyObject *_inPU7VHRx9W(PyObject *self, PyObject *args);
static PyObject *_inPU7VH0C9G(PyObject *self, PyObject *args);
static PyObject *_inPU7VHhaPp(PyObject *self, PyObject *args);
static PyObject *_inPU7VHt_1v(PyObject *self, PyObject *args);
static PyObject *_inPU7VH8KQG(PyObject *self, PyObject *args);
static PyObject *_inPU7VHEtIl(PyObject *self, PyObject *args);
static PyObject *_inPU7VHRFmo(PyObject *self, PyObject *args);
static PyObject *_inPU7VHWHA0(PyObject *self, PyObject *args);
static PyObject *_inPU7VHcyIl(PyObject *self, PyObject *args);
static PyObject *_inPU7VHBnBv(PyObject *self, PyObject *args);
static PyObject *_inPU7VHUvW7(PyObject *self, PyObject *args);
static PyObject *_inPU7VHPdXf(PyObject *self, PyObject *args);
static PyObject *_inPU7VHd0dl(PyObject *self, PyObject *args);
static PyObject *_inPU7VHdVbH(PyObject *self, PyObject *args);
static PyObject *_inPU7VHBwF0(PyObject *self, PyObject *args);
static PyObject *_inPU7VH9dPK(PyObject *self, PyObject *args);
static PyObject *_inPU7VHhUwR(PyObject *self, PyObject *args);
static PyObject *_inPU7VHA1eF(PyObject *self, PyObject *args);
static PyObject *_inPU7VH8pBy(PyObject *self, PyObject *args);
static PyObject *_inPU7VH85oW(PyObject *self, PyObject *args);
static PyObject *_inPU7VHYZz0(PyObject *self, PyObject *args);
static PyObject *_inPU7VHzKCA(PyObject *self, PyObject *args);
static PyObject *_inPU7VHsxxs(PyObject *self, PyObject *args);
static PyObject *_inPU7VHMT0z(PyObject *self, PyObject *args);
static PyObject *_inPU7VHiW3v(PyObject *self, PyObject *args);
static PyObject *_inPU7VH4Px8(PyObject *self, PyObject *args);
static PyObject *_inPU7VHNHcs(PyObject *self, PyObject *args);
static PyObject *_inPU7VHqHrb(PyObject *self, PyObject *args);
static PyObject *_inPU7VHaOqq(PyObject *self, PyObject *args);
static PyObject *_inPU7VHvue5(PyObject *self, PyObject *args);
static PyObject *_inPU7VHB_n_(PyObject *self, PyObject *args);
static PyObject *_inPU7VHDFET(PyObject *self, PyObject *args);
static PyObject *_inPU7VHUyNE(PyObject *self, PyObject *args);
static PyObject *_inPU7VHpDlm(PyObject *self, PyObject *args);
static PyObject *_inPU7VHAscF(PyObject *self, PyObject *args);
static PyObject *_inPU7VHYjbU(PyObject *self, PyObject *args);
static PyObject *_inPU7VHWmpU(PyObject *self, PyObject *args);
static PyObject *_inPU7VHnegH(PyObject *self, PyObject *args);
static PyObject *_inPU7VHrrnF(PyObject *self, PyObject *args);
static PyObject *_inPU7VH7ShX(PyObject *self, PyObject *args);
static PyObject *_inPU7VHx_aO(PyObject *self, PyObject *args);
static PyObject *_inPU7VHpofZ(PyObject *self, PyObject *args);
static PyObject *_inPU7VH2J9C(PyObject *self, PyObject *args);
static PyObject *_inPU7VHA6iz(PyObject *self, PyObject *args);
static PyObject *_inPU7VHa78E(PyObject *self, PyObject *args);
static PyObject *_inPU7VHWD3W(PyObject *self, PyObject *args);
static PyObject *_inPU7VHYuud(PyObject *self, PyObject *args);
static PyObject *_inPU7VHlmJS(PyObject *self, PyObject *args);
static PyObject *_inPU7VHLlrr(PyObject *self, PyObject *args);
static PyObject *_inPU7VHw_wy(PyObject *self, PyObject *args);
static PyObject *_inPU7VHgk_l(PyObject *self, PyObject *args);
static PyObject *_inPU7VHXpHY(PyObject *self, PyObject *args);
static PyObject *_inPU7VHHhIg(PyObject *self, PyObject *args);
static PyObject *_inPU7VHff0T(PyObject *self, PyObject *args);
static PyObject *_inPU7VH5PPX(PyObject *self, PyObject *args);
static PyObject *_inPU7VHCIt5(PyObject *self, PyObject *args);
static PyObject *_inPU7VHPww5(PyObject *self, PyObject *args);
static PyObject *_inPU7VHPke3(PyObject *self, PyObject *args);
static PyObject *_inPU7VHJmw3(PyObject *self, PyObject *args);
static PyObject *_inPU7VHR0Lc(PyObject *self, PyObject *args);
static PyObject *_inPU7VHc6gE(PyObject *self, PyObject *args);
static PyObject *_inPU7VH1iT0(PyObject *self, PyObject *args);
static PyObject *_inPU7VHz1Mn(PyObject *self, PyObject *args);
static PyObject *_inPU7VHWlf2(PyObject *self, PyObject *args);
static PyObject *_inPU7VH1q8q(PyObject *self, PyObject *args);
static PyObject *_inPU7VHobo6(PyObject *self, PyObject *args);
static PyObject *_inPU7VHjevK(PyObject *self, PyObject *args);
static PyObject *_inPU7VHeBpM(PyObject *self, PyObject *args);
static PyObject *_inPU7VHfmeN(PyObject *self, PyObject *args);
static PyObject *_inPU7VHKBCl(PyObject *self, PyObject *args);
static PyObject *_inPU7VH936K(PyObject *self, PyObject *args);
static PyObject *_inPU7VHPPXQ(PyObject *self, PyObject *args);
static PyObject *_inPU7VHnu86(PyObject *self, PyObject *args);
static PyObject *_inPU7VHngiq(PyObject *self, PyObject *args);
static PyObject *_inPU7VHUXR0(PyObject *self, PyObject *args);
static PyObject *_inPU7VHDO7D(PyObject *self, PyObject *args);
static PyObject *_inPU7VHhZFz(PyObject *self, PyObject *args);
static PyObject *_inPU7VHnKPe(PyObject *self, PyObject *args);
static PyObject *_inPU7VHP3lS(PyObject *self, PyObject *args);
static PyObject *_inPU7VHUlLp(PyObject *self, PyObject *args);
static PyObject *_inPU7VH9Xei(PyObject *self, PyObject *args);
static PyObject *_inPU7VHaGkE(PyObject *self, PyObject *args);
static PyObject *_inPU7VHoe_l(PyObject *self, PyObject *args);
static PyObject *_inPU7VHuEdH(PyObject *self, PyObject *args);


/*
 * Python simple wrapper for
 * void interrogate_add_search_directory(char const *dirname)
 */
static PyObject *
_inPU7VHtbRf(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    interrogate_add_search_directory((char const *)param0);
    return Py_BuildValue("");
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * void interrogate_add_search_path(char const *pathstring)
 */
static PyObject *
_inPU7VHda_g(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    interrogate_add_search_path((char const *)param0);
    return Py_BuildValue("");
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_error_flag(void)
 */
static PyObject *
_inPU7VH4RgX(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    bool return_value = interrogate_error_flag();
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_number_of_manifests(void)
 */
static PyObject *
_inPU7VH3Gip(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    int return_value = interrogate_number_of_manifests();
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_manifest(int n)
 */
static PyObject *
_inPU7VHRKDz(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_get_manifest((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_manifest_by_name(char const *manifest_name)
 */
static PyObject *
_inPU7VHgZ9N(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_manifest_by_name((char const *)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_manifest_name(int manifest)
 */
static PyObject *
_inPU7VHRQIx(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_manifest_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_manifest_definition(int manifest)
 */
static PyObject *
_inPU7VHGVSj(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_manifest_definition((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_manifest_has_type(int manifest)
 */
static PyObject *
_inPU7VHznM6(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_manifest_has_type((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_manifest_get_type(int manifest)
 */
static PyObject *
_inPU7VHjiLg(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_manifest_get_type((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_manifest_has_getter(int manifest)
 */
static PyObject *
_inPU7VH_yjE(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_manifest_has_getter((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_manifest_getter(int manifest)
 */
static PyObject *
_inPU7VHzK9F(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_manifest_getter((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_manifest_has_int_value(int manifest)
 */
static PyObject *
_inPU7VHJju_(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_manifest_has_int_value((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_manifest_get_int_value(int manifest)
 */
static PyObject *
_inPU7VHZktk(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_manifest_get_int_value((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_element_name(int element)
 */
static PyObject *
_inPU7VHG71J(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_element_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_element_scoped_name(int element)
 */
static PyObject *
_inPU7VHgeUs(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_element_scoped_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_element_has_comment(int element)
 */
static PyObject *
_inPU7VH5Gsy(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_element_has_comment((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_element_comment(int element)
 */
static PyObject *
_inPU7VHCSJJ(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_element_comment((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_element_by_name(char const *element_name)
 */
static PyObject *
_inPU7VHkg95(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_element_by_name((char const *)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_element_by_scoped_name(char const *element_name)
 */
static PyObject *
_inPU7VHluRc(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_element_by_scoped_name((char const *)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_element_type(int element)
 */
static PyObject *
_inPU7VHwtTf(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_element_type((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_element_has_getter(int element)
 */
static PyObject *
_inPU7VHrfao(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_element_has_getter((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_element_getter(int element)
 */
static PyObject *
_inPU7VHcedk(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_element_getter((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_element_has_setter(int element)
 */
static PyObject *
_inPU7VHXmoo(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_element_has_setter((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_element_setter(int element)
 */
static PyObject *
_inPU7VHclIo(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_element_setter((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_number_of_globals(void)
 */
static PyObject *
_inPU7VHU2_B(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    int return_value = interrogate_number_of_globals();
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_global(int n)
 */
static PyObject *
_inPU7VHHFO2(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_get_global((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_number_of_global_functions(void)
 */
static PyObject *
_inPU7VHcfjm(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    int return_value = interrogate_number_of_global_functions();
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_global_function(int n)
 */
static PyObject *
_inPU7VH3Sjw(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_get_global_function((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_number_of_functions(void)
 */
static PyObject *
_inPU7VHgJcX(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    int return_value = interrogate_number_of_functions();
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_function(int n)
 */
static PyObject *
_inPU7VHYlw6(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_get_function((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_function_name(int function)
 */
static PyObject *
_inPU7VH3gns(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_function_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_function_scoped_name(int function)
 */
static PyObject *
_inPU7VHN968(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_function_scoped_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_function_has_comment(int function)
 */
static PyObject *
_inPU7VHFJVJ(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_function_has_comment((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_function_comment(int function)
 */
static PyObject *
_inPU7VHndTW(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_function_comment((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_function_prototype(int function)
 */
static PyObject *
_inPU7VHpjWj(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_function_prototype((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_function_is_method(int function)
 */
static PyObject *
_inPU7VHNcQW(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_function_is_method((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_function_class(int function)
 */
static PyObject *
_inPU7VHP_SX(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_function_class((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_function_has_module_name(int function)
 */
static PyObject *
_inPU7VH1iRq(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_function_has_module_name((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_function_module_name(int function)
 */
static PyObject *
_inPU7VHEmel(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_function_module_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_function_has_library_name(int function)
 */
static PyObject *
_inPU7VH20Vx(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_function_has_library_name((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_function_library_name(int function)
 */
static PyObject *
_inPU7VHKcdW(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_function_library_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_function_is_virtual(int function)
 */
static PyObject *
_inPU7VHhUs9(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_function_is_virtual((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_function_number_of_c_wrappers(int function)
 */
static PyObject *
_inPU7VHhF25(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_function_number_of_c_wrappers((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_function_c_wrapper(int function, int n)
 */
static PyObject *
_inPU7VHu1qB(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_function_c_wrapper((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_function_number_of_python_wrappers(int function)
 */
static PyObject *
_inPU7VHKMkY(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_function_number_of_python_wrappers((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_function_python_wrapper(int function, int n)
 */
static PyObject *
_inPU7VHRx9W(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_function_python_wrapper((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_wrapper_name(int wrapper)
 */
static PyObject *
_inPU7VH0C9G(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_wrapper_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_is_callable_by_name(int wrapper)
 */
static PyObject *
_inPU7VHhaPp(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_wrapper_is_callable_by_name((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_has_comment(int wrapper)
 */
static PyObject *
_inPU7VHt_1v(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_wrapper_has_comment((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_wrapper_comment(int wrapper)
 */
static PyObject *
_inPU7VH8KQG(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_wrapper_comment((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_has_return_value(int wrapper)
 */
static PyObject *
_inPU7VHEtIl(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_wrapper_has_return_value((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_wrapper_return_type(int wrapper)
 */
static PyObject *
_inPU7VHRFmo(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_wrapper_return_type((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_caller_manages_return_value(int wrapper)
 */
static PyObject *
_inPU7VHWHA0(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_wrapper_caller_manages_return_value((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_wrapper_return_value_destructor(int wrapper)
 */
static PyObject *
_inPU7VHcyIl(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_wrapper_return_value_destructor((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_wrapper_number_of_parameters(int wrapper)
 */
static PyObject *
_inPU7VHBnBv(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_wrapper_number_of_parameters((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_wrapper_parameter_type(int wrapper, int n)
 */
static PyObject *
_inPU7VHUvW7(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_wrapper_parameter_type((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_parameter_has_name(int wrapper, int n)
 */
static PyObject *
_inPU7VHPdXf(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    bool return_value = interrogate_wrapper_parameter_has_name((int)param0, (int)param1);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_wrapper_parameter_name(int wrapper, int n)
 */
static PyObject *
_inPU7VHd0dl(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    char const *return_value = interrogate_wrapper_parameter_name((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_parameter_is_this(int wrapper, int n)
 */
static PyObject *
_inPU7VHdVbH(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    bool return_value = interrogate_wrapper_parameter_is_this((int)param0, (int)param1);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_has_pointer(int wrapper)
 */
static PyObject *
_inPU7VHBwF0(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_wrapper_has_pointer((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * void *interrogate_wrapper_pointer(int wrapper)
 */
static PyObject *
_inPU7VH9dPK(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    interrogate_wrapper_pointer((int)param0);
    return Py_BuildValue("");
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_wrapper_unique_name(int wrapper)
 */
static PyObject *
_inPU7VHhUwR(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_wrapper_unique_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_wrapper_by_unique_name(char const *unique_name)
 */
static PyObject *
_inPU7VHA1eF(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_wrapper_by_unique_name((char const *)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_make_seq_class(int make_seq)
 */
static PyObject *
_inPU7VH8pBy(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_make_seq_class((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_make_seq_seq_name(int make_seq)
 */
static PyObject *
_inPU7VH85oW(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_make_seq_seq_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_make_seq_num_name(int make_seq)
 */
static PyObject *
_inPU7VHYZz0(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_make_seq_num_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_make_seq_element_name(int make_seq)
 */
static PyObject *
_inPU7VHzKCA(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_make_seq_element_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_number_of_global_types(void)
 */
static PyObject *
_inPU7VHsxxs(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    int return_value = interrogate_number_of_global_types();
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_global_type(int n)
 */
static PyObject *
_inPU7VHMT0z(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_get_global_type((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_number_of_types(void)
 */
static PyObject *
_inPU7VHiW3v(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    int return_value = interrogate_number_of_types();
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_type(int n)
 */
static PyObject *
_inPU7VH4Px8(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_get_type((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_type_by_name(char const *type_name)
 */
static PyObject *
_inPU7VHNHcs(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_type_by_name((char const *)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_type_by_scoped_name(char const *type_name)
 */
static PyObject *
_inPU7VHqHrb(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_type_by_scoped_name((char const *)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_type_by_true_name(char const *type_name)
 */
static PyObject *
_inPU7VHaOqq(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_type_by_true_name((char const *)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_name(int type)
 */
static PyObject *
_inPU7VHvue5(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_type_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_scoped_name(int type)
 */
static PyObject *
_inPU7VHB_n_(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_type_scoped_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_true_name(int type)
 */
static PyObject *
_inPU7VHDFET(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_type_true_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_nested(int type)
 */
static PyObject *
_inPU7VHUyNE(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_nested((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_outer_class(int type)
 */
static PyObject *
_inPU7VHpDlm(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_outer_class((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_has_comment(int type)
 */
static PyObject *
_inPU7VHAscF(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_has_comment((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_comment(int type)
 */
static PyObject *
_inPU7VHYjbU(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_type_comment((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_has_module_name(int type)
 */
static PyObject *
_inPU7VHWmpU(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_has_module_name((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_module_name(int type)
 */
static PyObject *
_inPU7VHnegH(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_type_module_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_has_library_name(int type)
 */
static PyObject *
_inPU7VHrrnF(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_has_library_name((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_library_name(int type)
 */
static PyObject *
_inPU7VH7ShX(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_type_library_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_atomic(int type)
 */
static PyObject *
_inPU7VHx_aO(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_atomic((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * AtomicToken interrogate_type_atomic_token(int type)
 */
static PyObject *
_inPU7VHpofZ(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    AtomicToken return_value = interrogate_type_atomic_token((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_unsigned(int type)
 */
static PyObject *
_inPU7VH2J9C(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_unsigned((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_signed(int type)
 */
static PyObject *
_inPU7VHA6iz(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_signed((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_long(int type)
 */
static PyObject *
_inPU7VHa78E(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_long((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_longlong(int type)
 */
static PyObject *
_inPU7VHWD3W(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_longlong((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_short(int type)
 */
static PyObject *
_inPU7VHYuud(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_short((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_wrapped(int type)
 */
static PyObject *
_inPU7VHlmJS(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_wrapped((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_pointer(int type)
 */
static PyObject *
_inPU7VHLlrr(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_pointer((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_const(int type)
 */
static PyObject *
_inPU7VHw_wy(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_const((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_wrapped_type(int type)
 */
static PyObject *
_inPU7VHgk_l(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_wrapped_type((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_enum(int type)
 */
static PyObject *
_inPU7VHXpHY(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_enum((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_enum_values(int type)
 */
static PyObject *
_inPU7VHHhIg(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_enum_values((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_enum_value_name(int type, int n)
 */
static PyObject *
_inPU7VHff0T(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    char const *return_value = interrogate_type_enum_value_name((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_enum_value_scoped_name(int type, int n)
 */
static PyObject *
_inPU7VH5PPX(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    char const *return_value = interrogate_type_enum_value_scoped_name((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_enum_value_comment(int type, int n)
 */
static PyObject *
_inPU7VHCIt5(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    char const *return_value = interrogate_type_enum_value_comment((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_enum_value(int type, int n)
 */
static PyObject *
_inPU7VHPww5(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_enum_value((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_struct(int type)
 */
static PyObject *
_inPU7VHPke3(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_struct((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_class(int type)
 */
static PyObject *
_inPU7VHJmw3(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_class((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_union(int type)
 */
static PyObject *
_inPU7VHR0Lc(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_union((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_fully_defined(int type)
 */
static PyObject *
_inPU7VHc6gE(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_fully_defined((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_unpublished(int type)
 */
static PyObject *
_inPU7VH1iT0(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_unpublished((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_constructors(int type)
 */
static PyObject *
_inPU7VHz1Mn(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_constructors((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_constructor(int type, int n)
 */
static PyObject *
_inPU7VHWlf2(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_constructor((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_has_destructor(int type)
 */
static PyObject *
_inPU7VH1q8q(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_has_destructor((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_destructor_is_inherited(int type)
 */
static PyObject *
_inPU7VHobo6(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_destructor_is_inherited((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_destructor(int type)
 */
static PyObject *
_inPU7VHjevK(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_get_destructor((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_elements(int type)
 */
static PyObject *
_inPU7VHeBpM(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_elements((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_element(int type, int n)
 */
static PyObject *
_inPU7VHfmeN(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_element((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_methods(int type)
 */
static PyObject *
_inPU7VHKBCl(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_methods((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_method(int type, int n)
 */
static PyObject *
_inPU7VH936K(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_method((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_make_seqs(int type)
 */
static PyObject *
_inPU7VHPPXQ(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_make_seqs((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_make_seq(int type, int n)
 */
static PyObject *
_inPU7VHnu86(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_make_seq((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_casts(int type)
 */
static PyObject *
_inPU7VHngiq(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_casts((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_cast(int type, int n)
 */
static PyObject *
_inPU7VHUXR0(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_cast((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_derivations(int type)
 */
static PyObject *
_inPU7VHDO7D(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_derivations((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_derivation(int type, int n)
 */
static PyObject *
_inPU7VHhZFz(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_derivation((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_derivation_has_upcast(int type, int n)
 */
static PyObject *
_inPU7VHnKPe(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    bool return_value = interrogate_type_derivation_has_upcast((int)param0, (int)param1);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_upcast(int type, int n)
 */
static PyObject *
_inPU7VHP3lS(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_upcast((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_derivation_downcast_is_impossible(int type, int n)
 */
static PyObject *
_inPU7VHUlLp(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    bool return_value = interrogate_type_derivation_downcast_is_impossible((int)param0, (int)param1);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_derivation_has_downcast(int type, int n)
 */
static PyObject *
_inPU7VH9Xei(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    bool return_value = interrogate_type_derivation_has_downcast((int)param0, (int)param1);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_downcast(int type, int n)
 */
static PyObject *
_inPU7VHaGkE(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_downcast((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_nested_types(int type)
 */
static PyObject *
_inPU7VHoe_l(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_nested_types((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_nested_type(int type, int n)
 */
static PyObject *
_inPU7VHuEdH(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_nested_type((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}


static PyMethodDef python_simple_funcs[] = {
  { "interrogate_add_search_directory", &_inPU7VHtbRf, METH_VARARGS },
  { "interrogate_add_search_path", &_inPU7VHda_g, METH_VARARGS },
  { "interrogate_error_flag", &_inPU7VH4RgX, METH_VARARGS },
  { "interrogate_number_of_manifests", &_inPU7VH3Gip, METH_VARARGS },
  { "interrogate_get_manifest", &_inPU7VHRKDz, METH_VARARGS },
  { "interrogate_get_manifest_by_name", &_inPU7VHgZ9N, METH_VARARGS },
  { "interrogate_manifest_name", &_inPU7VHRQIx, METH_VARARGS },
  { "interrogate_manifest_definition", &_inPU7VHGVSj, METH_VARARGS },
  { "interrogate_manifest_has_type", &_inPU7VHznM6, METH_VARARGS },
  { "interrogate_manifest_get_type", &_inPU7VHjiLg, METH_VARARGS },
  { "interrogate_manifest_has_getter", &_inPU7VH_yjE, METH_VARARGS },
  { "interrogate_manifest_getter", &_inPU7VHzK9F, METH_VARARGS },
  { "interrogate_manifest_has_int_value", &_inPU7VHJju_, METH_VARARGS },
  { "interrogate_manifest_get_int_value", &_inPU7VHZktk, METH_VARARGS },
  { "interrogate_element_name", &_inPU7VHG71J, METH_VARARGS },
  { "interrogate_element_scoped_name", &_inPU7VHgeUs, METH_VARARGS },
  { "interrogate_element_has_comment", &_inPU7VH5Gsy, METH_VARARGS },
  { "interrogate_element_comment", &_inPU7VHCSJJ, METH_VARARGS },
  { "interrogate_get_element_by_name", &_inPU7VHkg95, METH_VARARGS },
  { "interrogate_get_element_by_scoped_name", &_inPU7VHluRc, METH_VARARGS },
  { "interrogate_element_type", &_inPU7VHwtTf, METH_VARARGS },
  { "interrogate_element_has_getter", &_inPU7VHrfao, METH_VARARGS },
  { "interrogate_element_getter", &_inPU7VHcedk, METH_VARARGS },
  { "interrogate_element_has_setter", &_inPU7VHXmoo, METH_VARARGS },
  { "interrogate_element_setter", &_inPU7VHclIo, METH_VARARGS },
  { "interrogate_number_of_globals", &_inPU7VHU2_B, METH_VARARGS },
  { "interrogate_get_global", &_inPU7VHHFO2, METH_VARARGS },
  { "interrogate_number_of_global_functions", &_inPU7VHcfjm, METH_VARARGS },
  { "interrogate_get_global_function", &_inPU7VH3Sjw, METH_VARARGS },
  { "interrogate_number_of_functions", &_inPU7VHgJcX, METH_VARARGS },
  { "interrogate_get_function", &_inPU7VHYlw6, METH_VARARGS },
  { "interrogate_function_name", &_inPU7VH3gns, METH_VARARGS },
  { "interrogate_function_scoped_name", &_inPU7VHN968, METH_VARARGS },
  { "interrogate_function_has_comment", &_inPU7VHFJVJ, METH_VARARGS },
  { "interrogate_function_comment", &_inPU7VHndTW, METH_VARARGS },
  { "interrogate_function_prototype", &_inPU7VHpjWj, METH_VARARGS },
  { "interrogate_function_is_method", &_inPU7VHNcQW, METH_VARARGS },
  { "interrogate_function_class", &_inPU7VHP_SX, METH_VARARGS },
  { "interrogate_function_has_module_name", &_inPU7VH1iRq, METH_VARARGS },
  { "interrogate_function_module_name", &_inPU7VHEmel, METH_VARARGS },
  { "interrogate_function_has_library_name", &_inPU7VH20Vx, METH_VARARGS },
  { "interrogate_function_library_name", &_inPU7VHKcdW, METH_VARARGS },
  { "interrogate_function_is_virtual", &_inPU7VHhUs9, METH_VARARGS },
  { "interrogate_function_number_of_c_wrappers", &_inPU7VHhF25, METH_VARARGS },
  { "interrogate_function_c_wrapper", &_inPU7VHu1qB, METH_VARARGS },
  { "interrogate_function_number_of_python_wrappers", &_inPU7VHKMkY, METH_VARARGS },
  { "interrogate_function_python_wrapper", &_inPU7VHRx9W, METH_VARARGS },
  { "interrogate_wrapper_name", &_inPU7VH0C9G, METH_VARARGS },
  { "interrogate_wrapper_is_callable_by_name", &_inPU7VHhaPp, METH_VARARGS },
  { "interrogate_wrapper_has_comment", &_inPU7VHt_1v, METH_VARARGS },
  { "interrogate_wrapper_comment", &_inPU7VH8KQG, METH_VARARGS },
  { "interrogate_wrapper_has_return_value", &_inPU7VHEtIl, METH_VARARGS },
  { "interrogate_wrapper_return_type", &_inPU7VHRFmo, METH_VARARGS },
  { "interrogate_wrapper_caller_manages_return_value", &_inPU7VHWHA0, METH_VARARGS },
  { "interrogate_wrapper_return_value_destructor", &_inPU7VHcyIl, METH_VARARGS },
  { "interrogate_wrapper_number_of_parameters", &_inPU7VHBnBv, METH_VARARGS },
  { "interrogate_wrapper_parameter_type", &_inPU7VHUvW7, METH_VARARGS },
  { "interrogate_wrapper_parameter_has_name", &_inPU7VHPdXf, METH_VARARGS },
  { "interrogate_wrapper_parameter_name", &_inPU7VHd0dl, METH_VARARGS },
  { "interrogate_wrapper_parameter_is_this", &_inPU7VHdVbH, METH_VARARGS },
  { "interrogate_wrapper_has_pointer", &_inPU7VHBwF0, METH_VARARGS },
  { "interrogate_wrapper_pointer", &_inPU7VH9dPK, METH_VARARGS },
  { "interrogate_wrapper_unique_name", &_inPU7VHhUwR, METH_VARARGS },
  { "interrogate_get_wrapper_by_unique_name", &_inPU7VHA1eF, METH_VARARGS },
  { "interrogate_make_seq_class", &_inPU7VH8pBy, METH_VARARGS },
  { "interrogate_make_seq_seq_name", &_inPU7VH85oW, METH_VARARGS },
  { "interrogate_make_seq_num_name", &_inPU7VHYZz0, METH_VARARGS },
  { "interrogate_make_seq_element_name", &_inPU7VHzKCA, METH_VARARGS },
  { "interrogate_number_of_global_types", &_inPU7VHsxxs, METH_VARARGS },
  { "interrogate_get_global_type", &_inPU7VHMT0z, METH_VARARGS },
  { "interrogate_number_of_types", &_inPU7VHiW3v, METH_VARARGS },
  { "interrogate_get_type", &_inPU7VH4Px8, METH_VARARGS },
  { "interrogate_get_type_by_name", &_inPU7VHNHcs, METH_VARARGS },
  { "interrogate_get_type_by_scoped_name", &_inPU7VHqHrb, METH_VARARGS },
  { "interrogate_get_type_by_true_name", &_inPU7VHaOqq, METH_VARARGS },
  { "interrogate_type_name", &_inPU7VHvue5, METH_VARARGS },
  { "interrogate_type_scoped_name", &_inPU7VHB_n_, METH_VARARGS },
  { "interrogate_type_true_name", &_inPU7VHDFET, METH_VARARGS },
  { "interrogate_type_is_nested", &_inPU7VHUyNE, METH_VARARGS },
  { "interrogate_type_outer_class", &_inPU7VHpDlm, METH_VARARGS },
  { "interrogate_type_has_comment", &_inPU7VHAscF, METH_VARARGS },
  { "interrogate_type_comment", &_inPU7VHYjbU, METH_VARARGS },
  { "interrogate_type_has_module_name", &_inPU7VHWmpU, METH_VARARGS },
  { "interrogate_type_module_name", &_inPU7VHnegH, METH_VARARGS },
  { "interrogate_type_has_library_name", &_inPU7VHrrnF, METH_VARARGS },
  { "interrogate_type_library_name", &_inPU7VH7ShX, METH_VARARGS },
  { "interrogate_type_is_atomic", &_inPU7VHx_aO, METH_VARARGS },
  { "interrogate_type_atomic_token", &_inPU7VHpofZ, METH_VARARGS },
  { "interrogate_type_is_unsigned", &_inPU7VH2J9C, METH_VARARGS },
  { "interrogate_type_is_signed", &_inPU7VHA6iz, METH_VARARGS },
  { "interrogate_type_is_long", &_inPU7VHa78E, METH_VARARGS },
  { "interrogate_type_is_longlong", &_inPU7VHWD3W, METH_VARARGS },
  { "interrogate_type_is_short", &_inPU7VHYuud, METH_VARARGS },
  { "interrogate_type_is_wrapped", &_inPU7VHlmJS, METH_VARARGS },
  { "interrogate_type_is_pointer", &_inPU7VHLlrr, METH_VARARGS },
  { "interrogate_type_is_const", &_inPU7VHw_wy, METH_VARARGS },
  { "interrogate_type_wrapped_type", &_inPU7VHgk_l, METH_VARARGS },
  { "interrogate_type_is_enum", &_inPU7VHXpHY, METH_VARARGS },
  { "interrogate_type_number_of_enum_values", &_inPU7VHHhIg, METH_VARARGS },
  { "interrogate_type_enum_value_name", &_inPU7VHff0T, METH_VARARGS },
  { "interrogate_type_enum_value_scoped_name", &_inPU7VH5PPX, METH_VARARGS },
  { "interrogate_type_enum_value_comment", &_inPU7VHCIt5, METH_VARARGS },
  { "interrogate_type_enum_value", &_inPU7VHPww5, METH_VARARGS },
  { "interrogate_type_is_struct", &_inPU7VHPke3, METH_VARARGS },
  { "interrogate_type_is_class", &_inPU7VHJmw3, METH_VARARGS },
  { "interrogate_type_is_union", &_inPU7VHR0Lc, METH_VARARGS },
  { "interrogate_type_is_fully_defined", &_inPU7VHc6gE, METH_VARARGS },
  { "interrogate_type_is_unpublished", &_inPU7VH1iT0, METH_VARARGS },
  { "interrogate_type_number_of_constructors", &_inPU7VHz1Mn, METH_VARARGS },
  { "interrogate_type_get_constructor", &_inPU7VHWlf2, METH_VARARGS },
  { "interrogate_type_has_destructor", &_inPU7VH1q8q, METH_VARARGS },
  { "interrogate_type_destructor_is_inherited", &_inPU7VHobo6, METH_VARARGS },
  { "interrogate_type_get_destructor", &_inPU7VHjevK, METH_VARARGS },
  { "interrogate_type_number_of_elements", &_inPU7VHeBpM, METH_VARARGS },
  { "interrogate_type_get_element", &_inPU7VHfmeN, METH_VARARGS },
  { "interrogate_type_number_of_methods", &_inPU7VHKBCl, METH_VARARGS },
  { "interrogate_type_get_method", &_inPU7VH936K, METH_VARARGS },
  { "interrogate_type_number_of_make_seqs", &_inPU7VHPPXQ, METH_VARARGS },
  { "interrogate_type_get_make_seq", &_inPU7VHnu86, METH_VARARGS },
  { "interrogate_type_number_of_casts", &_inPU7VHngiq, METH_VARARGS },
  { "interrogate_type_get_cast", &_inPU7VHUXR0, METH_VARARGS },
  { "interrogate_type_number_of_derivations", &_inPU7VHDO7D, METH_VARARGS },
  { "interrogate_type_get_derivation", &_inPU7VHhZFz, METH_VARARGS },
  { "interrogate_type_derivation_has_upcast", &_inPU7VHnKPe, METH_VARARGS },
  { "interrogate_type_get_upcast", &_inPU7VHP3lS, METH_VARARGS },
  { "interrogate_type_derivation_downcast_is_impossible", &_inPU7VHUlLp, METH_VARARGS },
  { "interrogate_type_derivation_has_downcast", &_inPU7VH9Xei, METH_VARARGS },
  { "interrogate_type_get_downcast", &_inPU7VHaGkE, METH_VARARGS },
  { "interrogate_type_number_of_nested_types", &_inPU7VHoe_l, METH_VARARGS },
  { "interrogate_type_get_nested_type", &_inPU7VHuEdH, METH_VARARGS },
  { NULL, NULL }
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef python_simple_module = {
  PyModuleDef_HEAD_INIT,
  "dtoolconfig",
  NULL,
  -1,
  python_simple_funcs,
  NULL, NULL, NULL, NULL
};

#define INIT_FUNC PyObject *PyInit_dtoolconfig
#else
#define INIT_FUNC void initdtoolconfig
#endif

#ifdef _WIN32
extern "C" __declspec(dllexport) INIT_FUNC();
#else
extern "C" INIT_FUNC();
#endif

INIT_FUNC() {
#if PY_MAJOR_VERSION >= 3
  return PyModule_Create(&python_simple_module);
#else
  Py_InitModule("dtoolconfig", python_simple_funcs);
#endif
}

