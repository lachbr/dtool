/* A Bison parser, made by GNU Bison 2.7.  */

/* Bison implementation for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.7"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 2

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         cppyyparse
#define yylex           cppyylex
#define yyerror         cppyyerror
#define yylval          cppyylval
#define yychar          cppyychar
#define yydebug         cppyydebug
#define yynerrs         cppyynerrs
#define yylloc          cppyylloc

/* Copy the first part of user declarations.  */
/* Line 371 of yacc.c  */
#line 6 "dtool/src/cppparser/cppBison.yxx"


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppMakeProperty.h"
#include "cppMakeSeq.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedefType.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = NULL;
CPPScope *global_scope = NULL;
CPPPreprocessor *current_lexer = NULL;

static CPPStructType *current_struct = NULL;
static CPPEnumType *current_enum = NULL;
static int current_storage_class = 0;
static CPPType *current_type = NULL;
static CPPExpression *current_expr = NULL;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static vector<CPPScope *> last_scopes;
static vector<int> last_storage_classes;
static vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg, current_lexer->_last_token_loc);
}

static void
yyerror(YYLTYPE *loc, const string &msg) {
  current_lexer->error(msg, *loc);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;

}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = (CPPExpression *)NULL;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = (CPPType *)NULL;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != NULL) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}


/* Line 371 of yacc.c  */
#line 270 "built/tmp/cppBison.yxx.c"

# ifndef YY_NULL
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULL nullptr
#  else
#   define YY_NULL 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "cppBison.yxx.h".  */
#ifndef YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
# define YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int cppyydebug;
#endif

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     REAL = 258,
     INTEGER = 259,
     CHAR_TOK = 260,
     SIMPLE_STRING = 261,
     SIMPLE_IDENTIFIER = 262,
     STRING_LITERAL = 263,
     CUSTOM_LITERAL = 264,
     IDENTIFIER = 265,
     TYPENAME_IDENTIFIER = 266,
     SCOPING = 267,
     TYPEDEFNAME = 268,
     ELLIPSIS = 269,
     OROR = 270,
     ANDAND = 271,
     EQCOMPARE = 272,
     NECOMPARE = 273,
     LECOMPARE = 274,
     GECOMPARE = 275,
     LSHIFT = 276,
     RSHIFT = 277,
     POINTSAT_STAR = 278,
     DOT_STAR = 279,
     UNARY = 280,
     UNARY_NOT = 281,
     UNARY_NEGATE = 282,
     UNARY_MINUS = 283,
     UNARY_STAR = 284,
     UNARY_REF = 285,
     POINTSAT = 286,
     SCOPE = 287,
     PLUSPLUS = 288,
     MINUSMINUS = 289,
     TIMESEQUAL = 290,
     DIVIDEEQUAL = 291,
     MODEQUAL = 292,
     PLUSEQUAL = 293,
     MINUSEQUAL = 294,
     OREQUAL = 295,
     ANDEQUAL = 296,
     XOREQUAL = 297,
     LSHIFTEQUAL = 298,
     RSHIFTEQUAL = 299,
     KW_ALIGNAS = 300,
     KW_ALIGNOF = 301,
     KW_AUTO = 302,
     KW_BEGIN_PUBLISH = 303,
     KW_BLOCKING = 304,
     KW_BOOL = 305,
     KW_CATCH = 306,
     KW_CHAR = 307,
     KW_CHAR16_T = 308,
     KW_CHAR32_T = 309,
     KW_CLASS = 310,
     KW_CONST = 311,
     KW_CONSTEXPR = 312,
     KW_DECLTYPE = 313,
     KW_DEFAULT = 314,
     KW_DELETE = 315,
     KW_DOUBLE = 316,
     KW_DYNAMIC_CAST = 317,
     KW_ELSE = 318,
     KW_END_PUBLISH = 319,
     KW_ENUM = 320,
     KW_EXTENSION = 321,
     KW_EXTERN = 322,
     KW_EXPLICIT = 323,
     KW_PUBLISHED = 324,
     KW_FALSE = 325,
     KW_FLOAT = 326,
     KW_FRIEND = 327,
     KW_FOR = 328,
     KW_GOTO = 329,
     KW_IF = 330,
     KW_INLINE = 331,
     KW_INT = 332,
     KW_LONG = 333,
     KW_LONGLONG = 334,
     KW_MAKE_PROPERTY = 335,
     KW_MAKE_SEQ = 336,
     KW_MUTABLE = 337,
     KW_NAMESPACE = 338,
     KW_NEW = 339,
     KW_NOEXCEPT = 340,
     KW_NULLPTR = 341,
     KW_OPERATOR = 342,
     KW_PRIVATE = 343,
     KW_PROTECTED = 344,
     KW_PUBLIC = 345,
     KW_REGISTER = 346,
     KW_RETURN = 347,
     KW_SHORT = 348,
     KW_SIGNED = 349,
     KW_SIZEOF = 350,
     KW_STATIC = 351,
     KW_STATIC_ASSERT = 352,
     KW_STATIC_CAST = 353,
     KW_STRUCT = 354,
     KW_TEMPLATE = 355,
     KW_THROW = 356,
     KW_TRUE = 357,
     KW_TRY = 358,
     KW_TYPEDEF = 359,
     KW_TYPENAME = 360,
     KW_UNION = 361,
     KW_UNSIGNED = 362,
     KW_USING = 363,
     KW_VIRTUAL = 364,
     KW_VOID = 365,
     KW_VOLATILE = 366,
     KW_WCHAR_T = 367,
     KW_WHILE = 368,
     START_CPP = 369,
     START_CONST_EXPR = 370,
     START_TYPE = 371
   };
#endif
/* Tokens.  */
#define REAL 258
#define INTEGER 259
#define CHAR_TOK 260
#define SIMPLE_STRING 261
#define SIMPLE_IDENTIFIER 262
#define STRING_LITERAL 263
#define CUSTOM_LITERAL 264
#define IDENTIFIER 265
#define TYPENAME_IDENTIFIER 266
#define SCOPING 267
#define TYPEDEFNAME 268
#define ELLIPSIS 269
#define OROR 270
#define ANDAND 271
#define EQCOMPARE 272
#define NECOMPARE 273
#define LECOMPARE 274
#define GECOMPARE 275
#define LSHIFT 276
#define RSHIFT 277
#define POINTSAT_STAR 278
#define DOT_STAR 279
#define UNARY 280
#define UNARY_NOT 281
#define UNARY_NEGATE 282
#define UNARY_MINUS 283
#define UNARY_STAR 284
#define UNARY_REF 285
#define POINTSAT 286
#define SCOPE 287
#define PLUSPLUS 288
#define MINUSMINUS 289
#define TIMESEQUAL 290
#define DIVIDEEQUAL 291
#define MODEQUAL 292
#define PLUSEQUAL 293
#define MINUSEQUAL 294
#define OREQUAL 295
#define ANDEQUAL 296
#define XOREQUAL 297
#define LSHIFTEQUAL 298
#define RSHIFTEQUAL 299
#define KW_ALIGNAS 300
#define KW_ALIGNOF 301
#define KW_AUTO 302
#define KW_BEGIN_PUBLISH 303
#define KW_BLOCKING 304
#define KW_BOOL 305
#define KW_CATCH 306
#define KW_CHAR 307
#define KW_CHAR16_T 308
#define KW_CHAR32_T 309
#define KW_CLASS 310
#define KW_CONST 311
#define KW_CONSTEXPR 312
#define KW_DECLTYPE 313
#define KW_DEFAULT 314
#define KW_DELETE 315
#define KW_DOUBLE 316
#define KW_DYNAMIC_CAST 317
#define KW_ELSE 318
#define KW_END_PUBLISH 319
#define KW_ENUM 320
#define KW_EXTENSION 321
#define KW_EXTERN 322
#define KW_EXPLICIT 323
#define KW_PUBLISHED 324
#define KW_FALSE 325
#define KW_FLOAT 326
#define KW_FRIEND 327
#define KW_FOR 328
#define KW_GOTO 329
#define KW_IF 330
#define KW_INLINE 331
#define KW_INT 332
#define KW_LONG 333
#define KW_LONGLONG 334
#define KW_MAKE_PROPERTY 335
#define KW_MAKE_SEQ 336
#define KW_MUTABLE 337
#define KW_NAMESPACE 338
#define KW_NEW 339
#define KW_NOEXCEPT 340
#define KW_NULLPTR 341
#define KW_OPERATOR 342
#define KW_PRIVATE 343
#define KW_PROTECTED 344
#define KW_PUBLIC 345
#define KW_REGISTER 346
#define KW_RETURN 347
#define KW_SHORT 348
#define KW_SIGNED 349
#define KW_SIZEOF 350
#define KW_STATIC 351
#define KW_STATIC_ASSERT 352
#define KW_STATIC_CAST 353
#define KW_STRUCT 354
#define KW_TEMPLATE 355
#define KW_THROW 356
#define KW_TRUE 357
#define KW_TRY 358
#define KW_TYPEDEF 359
#define KW_TYPENAME 360
#define KW_UNION 361
#define KW_UNSIGNED 362
#define KW_USING 363
#define KW_VIRTUAL 364
#define KW_VOID 365
#define KW_VOLATILE 366
#define KW_WCHAR_T 367
#define KW_WHILE 368
#define START_CPP 369
#define START_CONST_EXPR 370
#define START_TYPE 371



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED

# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int cppyyparse (void *YYPARSE_PARAM);
#else
int cppyyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int cppyyparse (void);
#else
int cppyyparse ();
#endif
#endif /* ! YYPARSE_PARAM */

#endif /* !YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED  */

/* Copy the second part of user declarations.  */

/* Line 390 of yacc.c  */
#line 579 "built/tmp/cppBison.yxx.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(N) (N)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  79
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   4452

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  141
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  94
/* YYNRULES -- Number of rules.  */
#define YYNRULES  585
/* YYNRULES -- Number of states.  */
#define YYNSTATES  1076

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   371

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   139,     2,     2,     2,   132,   125,     2,
     135,   137,   130,   128,   118,   129,   134,   131,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   120,   119,
     126,   121,   127,   122,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   136,     2,   140,   124,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   117,   123,   138,   133,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    14,    17,    20,    22,
      26,    31,    32,    38,    40,    42,    44,    46,    48,    50,
      53,    55,    57,    60,    63,    66,    69,    77,    87,    97,
     104,   109,   110,   114,   116,   119,   123,   126,   129,   132,
     135,   138,   141,   144,   147,   150,   153,   155,   159,   163,
     164,   169,   170,   176,   179,   184,   187,   192,   193,   198,
     199,   205,   209,   212,   217,   220,   225,   226,   233,   234,
     241,   242,   250,   251,   262,   263,   275,   276,   285,   286,
     296,   298,   300,   302,   305,   310,   316,   318,   320,   322,
     324,   326,   328,   330,   332,   334,   336,   338,   340,   342,
     344,   346,   348,   350,   352,   354,   356,   358,   360,   362,
     364,   366,   368,   370,   372,   374,   376,   378,   380,   382,
     384,   386,   389,   392,   394,   396,   398,   400,   401,   408,
     411,   413,   415,   417,   421,   424,   429,   432,   437,   441,
     446,   448,   450,   452,   454,   457,   461,   464,   467,   470,
     473,   476,   480,   485,   489,   493,   494,   501,   503,   505,
     507,   511,   514,   516,   520,   522,   525,   527,   530,   532,
     536,   542,   546,   551,   553,   555,   558,   560,   564,   568,
     574,   578,   583,   589,   592,   594,   596,   598,   600,   603,
     606,   609,   612,   615,   619,   624,   626,   628,   630,   633,
     636,   639,   642,   645,   649,   654,   662,   666,   668,   671,
     674,   677,   680,   683,   687,   692,   700,   702,   704,   707,
     709,   711,   713,   716,   721,   726,   728,   730,   732,   735,
     737,   739,   741,   744,   749,   752,   757,   759,   761,   763,
     766,   769,   772,   775,   779,   780,   786,   787,   795,   797,
     799,   802,   806,   809,   812,   815,   819,   823,   827,   831,
     835,   839,   844,   849,   852,   856,   858,   860,   862,   864,
     868,   874,   876,   879,   884,   886,   888,   890,   892,   893,
     900,   901,   909,   914,   920,   923,   927,   929,   931,   933,
     935,   937,   939,   941,   943,   945,   947,   949,   951,   953,
     955,   958,   961,   964,   967,   969,   972,   974,   978,   981,
     983,   984,   987,   989,   992,   994,   996,   998,  1000,  1002,
    1004,  1006,  1008,  1010,  1012,  1014,  1016,  1018,  1020,  1022,
    1024,  1026,  1028,  1030,  1032,  1034,  1036,  1038,  1040,  1042,
    1044,  1046,  1048,  1050,  1052,  1054,  1056,  1058,  1060,  1062,
    1064,  1066,  1068,  1070,  1072,  1074,  1076,  1078,  1080,  1082,
    1084,  1086,  1088,  1090,  1092,  1094,  1096,  1098,  1100,  1102,
    1104,  1106,  1108,  1110,  1112,  1114,  1116,  1118,  1120,  1122,
    1124,  1126,  1128,  1130,  1132,  1134,  1136,  1138,  1140,  1142,
    1144,  1146,  1148,  1150,  1152,  1154,  1156,  1158,  1160,  1162,
    1164,  1166,  1168,  1170,  1172,  1174,  1176,  1178,  1180,  1182,
    1184,  1186,  1188,  1190,  1192,  1194,  1196,  1198,  1200,  1202,
    1204,  1206,  1208,  1210,  1212,  1214,  1216,  1218,  1220,  1222,
    1226,  1228,  1230,  1232,  1234,  1236,  1240,  1242,  1247,  1255,
    1263,  1268,  1273,  1276,  1279,  1282,  1285,  1288,  1292,  1296,
    1300,  1304,  1308,  1312,  1316,  1320,  1324,  1328,  1332,  1336,
    1340,  1344,  1348,  1352,  1358,  1363,  1368,  1372,  1376,  1380,
    1384,  1386,  1391,  1399,  1407,  1412,  1417,  1422,  1427,  1432,
    1437,  1442,  1447,  1452,  1457,  1462,  1467,  1472,  1477,  1482,
    1485,  1491,  1494,  1497,  1500,  1503,  1506,  1510,  1514,  1518,
    1522,  1526,  1530,  1534,  1538,  1542,  1546,  1550,  1554,  1558,
    1562,  1566,  1570,  1574,  1578,  1584,  1589,  1594,  1598,  1602,
    1606,  1610,  1612,  1614,  1616,  1618,  1620,  1622,  1624,  1626,
    1628,  1630,  1635,  1643,  1651,  1656,  1661,  1664,  1670,  1673,
    1676,  1679,  1682,  1686,  1690,  1694,  1698,  1702,  1706,  1710,
    1714,  1718,  1722,  1726,  1730,  1734,  1738,  1742,  1746,  1750,
    1754,  1760,  1765,  1770,  1774,  1778,  1782,  1786,  1788,  1790,
    1792,  1794,  1796,  1798,  1800,  1802,  1804,  1806,  1809,  1812,
    1814,  1816,  1818,  1820,  1823,  1826
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     142,     0,    -1,   114,   143,    -1,   115,   227,    -1,   116,
     196,    -1,   234,    -1,   143,   119,    -1,   143,   148,    -1,
     145,    -1,   144,   118,   145,    -1,   232,   135,   224,   137,
      -1,    -1,   151,   117,   147,   143,   138,    -1,   152,    -1,
     174,    -1,   146,    -1,   211,    -1,   214,    -1,   149,    -1,
     104,   158,    -1,    48,    -1,    64,    -1,    69,   120,    -1,
      90,   120,    -1,    89,   120,    -1,    88,   120,    -1,    80,
     135,    10,   118,    10,   137,   119,    -1,    80,   135,    10,
     118,    10,   118,    10,   137,   119,    -1,    81,   135,   232,
     118,   232,   118,   232,   137,   119,    -1,    97,   135,   227,
     118,   233,   137,    -1,    97,   135,   227,   137,    -1,    -1,
      72,   150,   148,    -1,   234,    -1,    67,   151,    -1,    67,
       6,   151,    -1,    96,   151,    -1,    76,   151,    -1,   109,
     151,    -1,    68,   151,    -1,    91,   151,    -1,   111,   151,
      -1,    82,   151,    -1,    57,   151,    -1,    49,   151,    -1,
      66,   151,    -1,   153,    -1,   151,   194,   119,    -1,   151,
     163,   186,    -1,    -1,   151,   194,   154,   156,    -1,    -1,
     151,    56,   193,   155,   157,    -1,   180,   186,    -1,   180,
     185,   118,   156,    -1,   180,   186,    -1,   180,   185,   118,
     157,    -1,    -1,   151,   194,   159,   161,    -1,    -1,   151,
      56,   193,   160,   162,    -1,   151,   163,   186,    -1,   180,
     186,    -1,   180,   185,   118,   161,    -1,   180,   186,    -1,
     180,   185,   118,   162,    -1,    -1,    10,   135,   164,   182,
     137,   171,    -1,    -1,    11,   135,   165,   182,   137,   171,
      -1,    -1,   133,   232,   135,   166,   182,   137,   171,    -1,
      -1,    11,   135,   130,   180,   137,   135,   167,   182,   137,
     171,    -1,    -1,    11,   135,    12,   130,   180,   137,   135,
     168,   182,   137,   171,    -1,    -1,    87,   193,   190,   135,
     169,   182,   137,   171,    -1,    -1,    87,    56,   193,   190,
     135,   170,   182,   137,   171,    -1,    10,    -1,   234,    -1,
      56,    -1,   171,    85,    -1,   171,   101,   135,   137,    -1,
     171,   101,   135,   232,   137,    -1,   139,    -1,   133,    -1,
     130,    -1,   131,    -1,   132,    -1,   128,    -1,   129,    -1,
     123,    -1,   125,    -1,   124,    -1,    15,    -1,    16,    -1,
      17,    -1,    18,    -1,    19,    -1,    20,    -1,   126,    -1,
     127,    -1,    21,    -1,    22,    -1,   121,    -1,   118,    -1,
      33,    -1,    34,    -1,    35,    -1,    36,    -1,    37,    -1,
      38,    -1,    39,    -1,    40,    -1,    41,    -1,    42,    -1,
      43,    -1,    44,    -1,    31,    -1,   136,   140,    -1,   135,
     137,    -1,    84,    -1,    60,    -1,   152,    -1,   174,    -1,
      -1,   100,   175,   126,   176,   127,   173,    -1,   100,   152,
      -1,   234,    -1,   177,    -1,   178,    -1,   177,   118,   178,
      -1,    55,   232,    -1,    55,   232,   121,   196,    -1,   105,
     232,    -1,   105,   232,   121,   196,    -1,   179,   191,   184,
      -1,    56,   179,   191,   184,    -1,   215,    -1,    10,    -1,
      11,    -1,   232,    -1,    87,   172,    -1,    87,     6,    10,
      -1,    56,   180,    -1,   111,   180,    -1,   130,   180,    -1,
     125,   180,    -1,    16,   180,    -1,    12,   130,   180,    -1,
     180,   136,   223,   140,    -1,   180,   120,     4,    -1,   135,
     180,   137,    -1,    -1,   180,   135,   181,   182,   137,   171,
      -1,   234,    -1,    14,    -1,   183,    -1,   183,   118,    14,
      -1,   183,    14,    -1,   189,    -1,   183,   118,   189,    -1,
     234,    -1,   121,   226,    -1,   234,    -1,   121,   227,    -1,
     119,    -1,   117,   219,   138,    -1,   120,   144,   117,   219,
     138,    -1,   121,   227,   119,    -1,   121,   117,   187,   138,
      -1,   234,    -1,   188,    -1,   188,   118,    -1,   227,    -1,
     117,   187,   138,    -1,   188,   118,   227,    -1,   188,   118,
     117,   187,   138,    -1,   193,   191,   185,    -1,    56,   193,
     191,   185,    -1,    56,    91,   193,   191,   185,    -1,    91,
     189,    -1,   229,    -1,   234,    -1,    10,    -1,    11,    -1,
      56,   190,    -1,   111,   190,    -1,   130,   190,    -1,   125,
     190,    -1,    16,   190,    -1,    12,   130,   190,    -1,   190,
     136,   223,   140,    -1,   234,    -1,    10,    -1,    11,    -1,
      56,   191,    -1,   111,   191,    -1,   130,   191,    -1,   125,
     191,    -1,    16,   191,    -1,    12,   130,   191,    -1,   191,
     136,   223,   140,    -1,   135,   191,   137,   135,   182,   137,
     171,    -1,   135,   191,   137,    -1,   234,    -1,    56,   192,
      -1,   111,   192,    -1,   130,   192,    -1,   125,   192,    -1,
      16,   192,    -1,    12,   130,   192,    -1,   192,   136,   223,
     140,    -1,   135,   192,   137,   135,   182,   137,   171,    -1,
     215,    -1,    11,    -1,   105,   232,    -1,   197,    -1,   199,
      -1,   204,    -1,   210,   232,    -1,   209,   232,   120,   206,
      -1,    58,   135,   227,   137,    -1,    47,    -1,   215,    -1,
      11,    -1,   105,   232,    -1,   197,    -1,   199,    -1,   204,
      -1,   210,   232,    -1,   209,   232,   120,   206,    -1,   209,
     232,    -1,    58,   135,   227,   137,    -1,    47,    -1,   215,
      -1,    11,    -1,   105,   232,    -1,   210,   232,    -1,   209,
     232,    -1,   193,   192,    -1,    56,   193,   192,    -1,    -1,
     210,   117,   198,   143,   138,    -1,    -1,   210,   232,   200,
     201,   117,   143,   138,    -1,   234,    -1,   202,    -1,   120,
     203,    -1,   202,   118,   203,    -1,    90,   231,    -1,    89,
     231,    -1,    88,   231,    -1,   109,    90,   231,    -1,   109,
      89,   231,    -1,   109,    88,   231,    -1,    90,   109,   231,
      -1,    89,   109,   231,    -1,    88,   109,   231,    -1,   205,
     117,   208,   138,    -1,   209,   232,   120,   206,    -1,   209,
     232,    -1,   209,   120,   206,    -1,   209,    -1,   216,    -1,
      11,    -1,   234,    -1,   207,   232,   118,    -1,   207,   232,
     121,   227,   118,    -1,   207,    -1,   207,   232,    -1,   207,
     232,   121,   227,    -1,    65,    -1,    55,    -1,    99,    -1,
     106,    -1,    -1,    83,   232,   117,   212,   143,   138,    -1,
      -1,    76,    83,   232,   117,   213,   143,   138,    -1,    83,
     117,   143,   138,    -1,    76,    83,   117,   143,   138,    -1,
     108,   232,    -1,   108,    83,   232,    -1,   216,    -1,   217,
      -1,   218,    -1,    50,    -1,    52,    -1,   112,    -1,    53,
      -1,    54,    -1,    93,    -1,    78,    -1,    79,    -1,   107,
      -1,    94,    -1,    77,    -1,    93,   216,    -1,    78,   216,
      -1,   107,   216,    -1,    94,   216,    -1,    71,    -1,    78,
      71,    -1,    61,    -1,    78,    78,    71,    -1,    78,    61,
      -1,   110,    -1,    -1,   220,   221,    -1,   234,    -1,   221,
     222,    -1,     3,    -1,     4,    -1,     6,    -1,     8,    -1,
       9,    -1,     5,    -1,    10,    -1,    11,    -1,    12,    -1,
       7,    -1,    14,    -1,    15,    -1,    16,    -1,    17,    -1,
      18,    -1,    19,    -1,    20,    -1,    21,    -1,    22,    -1,
      23,    -1,    24,    -1,    31,    -1,    32,    -1,    33,    -1,
      34,    -1,    35,    -1,    36,    -1,    37,    -1,    38,    -1,
      39,    -1,    40,    -1,    41,    -1,    42,    -1,    43,    -1,
      44,    -1,    45,    -1,    46,    -1,    47,    -1,    50,    -1,
      51,    -1,    52,    -1,    53,    -1,    54,    -1,    55,    -1,
      56,    -1,    57,    -1,    58,    -1,    59,    -1,    60,    -1,
      61,    -1,    62,    -1,    63,    -1,    65,    -1,    67,    -1,
      68,    -1,    70,    -1,    71,    -1,    72,    -1,    73,    -1,
      74,    -1,    75,    -1,    76,    -1,    77,    -1,    78,    -1,
      82,    -1,    84,    -1,    86,    -1,    87,    -1,    88,    -1,
      89,    -1,    90,    -1,    69,    -1,    91,    -1,    92,    -1,
      93,    -1,    94,    -1,    95,    -1,    96,    -1,    97,    -1,
      98,    -1,    99,    -1,   101,    -1,   102,    -1,   103,    -1,
     104,    -1,   105,    -1,   106,    -1,   107,    -1,   109,    -1,
     110,    -1,   111,    -1,   112,    -1,   113,    -1,   128,    -1,
     129,    -1,   130,    -1,   131,    -1,   125,    -1,   123,    -1,
     124,    -1,   139,    -1,   133,    -1,   121,    -1,   132,    -1,
     126,    -1,   127,    -1,   135,    -1,   137,    -1,   134,    -1,
     118,    -1,   119,    -1,   120,    -1,   136,    -1,   140,    -1,
     122,    -1,   117,   221,   138,    -1,   234,    -1,   227,    -1,
     234,    -1,   225,    -1,   227,    -1,   225,   118,   227,    -1,
     228,    -1,   135,   196,   137,   226,    -1,    98,   126,   196,
     127,   135,   225,   137,    -1,    62,   126,   196,   127,   135,
     225,   137,    -1,    95,   135,   196,   137,    -1,    46,   135,
     196,   137,    -1,   139,   226,    -1,   133,   226,    -1,   129,
     226,    -1,   130,   226,    -1,   125,   226,    -1,   226,   130,
     226,    -1,   226,   131,   226,    -1,   226,   132,   226,    -1,
     226,   128,   226,    -1,   226,   129,   226,    -1,   226,   123,
     226,    -1,   226,   124,   226,    -1,   226,   125,   226,    -1,
     226,    15,   226,    -1,   226,    16,   226,    -1,   226,    17,
     226,    -1,   226,    18,   226,    -1,   226,    19,   226,    -1,
     226,    20,   226,    -1,   226,    21,   226,    -1,   226,    22,
     226,    -1,   226,   122,   226,   120,   226,    -1,   226,   136,
     227,   140,    -1,   226,   135,   225,   137,    -1,   226,   135,
     137,    -1,   226,   134,   226,    -1,   226,    31,   226,    -1,
     135,   225,   137,    -1,   228,    -1,   135,   196,   137,   227,
      -1,    98,   126,   196,   127,   135,   225,   137,    -1,    62,
     126,   196,   127,   135,   225,   137,    -1,    11,   135,   224,
     137,    -1,    77,   135,   224,   137,    -1,    52,   135,   224,
     137,    -1,   112,   135,   224,   137,    -1,    53,   135,   224,
     137,    -1,    54,   135,   224,   137,    -1,    50,   135,   224,
     137,    -1,    93,   135,   224,   137,    -1,    78,   135,   224,
     137,    -1,   107,   135,   224,   137,    -1,    94,   135,   224,
     137,    -1,    71,   135,   224,   137,    -1,    61,   135,   224,
     137,    -1,    95,   135,   196,   137,    -1,    46,   135,   196,
     137,    -1,    84,   195,    -1,    84,   195,   135,   224,   137,
      -1,   139,   227,    -1,   133,   227,    -1,   129,   227,    -1,
     130,   227,    -1,   125,   227,    -1,   227,   130,   227,    -1,
     227,   131,   227,    -1,   227,   132,   227,    -1,   227,   128,
     227,    -1,   227,   129,   227,    -1,   227,   123,   227,    -1,
     227,   124,   227,    -1,   227,   125,   227,    -1,   227,    15,
     227,    -1,   227,    16,   227,    -1,   227,    17,   227,    -1,
     227,    18,   227,    -1,   227,    19,   227,    -1,   227,    20,
     227,    -1,   227,   126,   227,    -1,   227,   127,   227,    -1,
     227,    21,   227,    -1,   227,    22,   227,    -1,   227,   122,
     227,   120,   227,    -1,   227,   136,   227,   140,    -1,   227,
     135,   225,   137,    -1,   227,   135,   137,    -1,   227,   134,
     227,    -1,   227,    31,   227,    -1,   135,   225,   137,    -1,
       4,    -1,   102,    -1,    70,    -1,     5,    -1,     3,    -1,
     233,    -1,     9,    -1,    10,    -1,    86,    -1,   230,    -1,
     135,   196,   137,   227,    -1,    98,   126,   196,   127,   135,
     225,   137,    -1,    62,   126,   196,   127,   135,   225,   137,
      -1,    95,   135,   196,   137,    -1,    46,   135,   196,   137,
      -1,    84,   195,    -1,    84,   195,   135,   224,   137,    -1,
     139,   227,    -1,   133,   227,    -1,   129,   227,    -1,   125,
     227,    -1,   229,   130,   227,    -1,   229,   131,   227,    -1,
     229,   132,   227,    -1,   229,   128,   227,    -1,   229,   129,
     227,    -1,   229,   123,   227,    -1,   229,   124,   227,    -1,
     229,   125,   227,    -1,   229,    15,   227,    -1,   229,    16,
     227,    -1,   229,    17,   227,    -1,   229,    18,   227,    -1,
     229,    19,   227,    -1,   229,    20,   227,    -1,   229,   126,
     227,    -1,   229,   127,   227,    -1,   229,    21,   227,    -1,
     229,    22,   227,    -1,   229,   122,   227,   120,   227,    -1,
     229,   136,   227,   140,    -1,   229,   135,   225,   137,    -1,
     229,   135,   137,    -1,   229,   134,   227,    -1,   229,    31,
     227,    -1,   135,   225,   137,    -1,     4,    -1,   102,    -1,
      70,    -1,     5,    -1,     3,    -1,   233,    -1,     9,    -1,
      10,    -1,    86,    -1,   232,    -1,   210,   232,    -1,   105,
     232,    -1,    10,    -1,    11,    -1,     6,    -1,     8,    -1,
     233,     6,    -1,   233,     8,    -1,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   404,   404,   405,   409,   416,   417,   418,   422,   423,
     427,   440,   439,   451,   452,   453,   454,   455,   456,   457,
     458,   471,   480,   484,   492,   496,   500,   511,   532,   537,
     548,   562,   561,   576,   580,   584,   595,   599,   603,   607,
     611,   615,   619,   623,   627,   631,   638,   642,   651,   663,
     662,   678,   677,   695,   703,   714,   723,   737,   736,   752,
     751,   762,   777,   783,   792,   799,   812,   811,   836,   835,
     860,   859,   890,   889,   908,   907,   928,   927,   959,   958,
     984,   997,  1001,  1005,  1009,  1013,  1020,  1024,  1028,  1032,
    1036,  1040,  1044,  1048,  1052,  1056,  1060,  1064,  1068,  1072,
    1076,  1080,  1084,  1088,  1092,  1096,  1100,  1104,  1108,  1112,
    1116,  1120,  1124,  1128,  1132,  1136,  1140,  1144,  1148,  1152,
    1156,  1160,  1164,  1168,  1172,  1179,  1180,  1185,  1184,  1192,
    1196,  1197,  1201,  1207,  1216,  1220,  1224,  1228,  1232,  1238,
    1248,  1252,  1257,  1269,  1273,  1287,  1302,  1307,  1312,  1317,
    1322,  1327,  1332,  1337,  1342,  1348,  1347,  1369,  1373,  1378,
    1382,  1387,  1395,  1400,  1408,  1412,  1419,  1423,  1430,  1434,
    1438,  1442,  1446,  1453,  1454,  1455,  1459,  1462,  1463,  1464,
    1468,  1473,  1479,  1485,  1489,  1499,  1503,  1507,  1511,  1516,
    1521,  1526,  1531,  1536,  1541,  1549,  1553,  1557,  1561,  1566,
    1571,  1576,  1581,  1586,  1591,  1596,  1602,  1610,  1614,  1619,
    1624,  1629,  1634,  1639,  1644,  1649,  1658,  1662,  1670,  1674,
    1678,  1682,  1686,  1702,  1718,  1727,  1734,  1738,  1746,  1750,
    1754,  1758,  1762,  1778,  1794,  1812,  1821,  1828,  1832,  1840,
    1844,  1860,  1879,  1885,  1896,  1895,  1920,  1919,  1949,  1950,
    1954,  1955,  1959,  1963,  1967,  1971,  1975,  1979,  1983,  1987,
    1991,  1998,  2006,  2010,  2014,  2018,  2025,  2029,  2036,  2037,
    2043,  2051,  2052,  2058,  2067,  2074,  2078,  2082,  2090,  2089,
    2112,  2111,  2134,  2135,  2139,  2145,  2154,  2155,  2156,  2160,
    2164,  2168,  2172,  2176,  2180,  2185,  2190,  2195,  2200,  2205,
    2209,  2214,  2223,  2228,  2236,  2240,  2245,  2249,  2254,  2262,
    2272,  2272,  2282,  2283,  2287,  2288,  2289,  2290,  2291,  2292,
    2293,  2294,  2295,  2296,  2297,  2297,  2297,  2298,  2298,  2298,
    2298,  2299,  2299,  2299,  2299,  2299,  2300,  2300,  2300,  2301,
    2301,  2301,  2301,  2301,  2302,  2302,  2302,  2302,  2302,  2303,
    2303,  2303,  2303,  2303,  2304,  2304,  2304,  2305,  2305,  2305,
    2305,  2305,  2306,  2306,  2306,  2306,  2306,  2307,  2307,  2307,
    2308,  2308,  2308,  2308,  2309,  2309,  2309,  2309,  2309,  2310,
    2310,  2310,  2310,  2310,  2311,  2311,  2311,  2311,  2312,  2312,
    2312,  2312,  2312,  2313,  2313,  2313,  2313,  2313,  2314,  2314,
    2314,  2314,  2314,  2315,  2315,  2315,  2315,  2318,  2318,  2318,
    2318,  2318,  2318,  2318,  2318,  2318,  2318,  2318,  2319,  2319,
    2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2320,  2320,
    2324,  2328,  2335,  2339,  2346,  2350,  2357,  2361,  2365,  2369,
    2373,  2377,  2381,  2385,  2389,  2393,  2397,  2401,  2405,  2409,
    2413,  2417,  2421,  2425,  2429,  2433,  2437,  2441,  2445,  2449,
    2453,  2457,  2461,  2465,  2469,  2473,  2477,  2481,  2485,  2489,
    2497,  2501,  2505,  2509,  2513,  2523,  2529,  2535,  2541,  2547,
    2553,  2559,  2566,  2573,  2580,  2587,  2593,  2599,  2603,  2607,
    2611,  2615,  2619,  2623,  2627,  2631,  2635,  2639,  2643,  2647,
    2651,  2655,  2659,  2663,  2667,  2671,  2675,  2679,  2683,  2687,
    2691,  2695,  2699,  2703,  2707,  2711,  2715,  2719,  2723,  2727,
    2731,  2738,  2742,  2746,  2750,  2754,  2758,  2762,  2766,  2770,
    2784,  2788,  2792,  2796,  2800,  2804,  2808,  2812,  2816,  2820,
    2824,  2828,  2832,  2836,  2840,  2844,  2848,  2852,  2856,  2860,
    2864,  2868,  2872,  2876,  2880,  2884,  2888,  2892,  2896,  2900,
    2904,  2908,  2912,  2916,  2920,  2924,  2928,  2935,  2939,  2943,
    2947,  2951,  2955,  2959,  2963,  2967,  2974,  2982,  2990,  3016,
    3020,  3027,  3031,  3035,  3041,  3052
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "REAL", "INTEGER", "CHAR_TOK",
  "SIMPLE_STRING", "SIMPLE_IDENTIFIER", "STRING_LITERAL", "CUSTOM_LITERAL",
  "IDENTIFIER", "TYPENAME_IDENTIFIER", "SCOPING", "TYPEDEFNAME",
  "ELLIPSIS", "OROR", "ANDAND", "EQCOMPARE", "NECOMPARE", "LECOMPARE",
  "GECOMPARE", "LSHIFT", "RSHIFT", "POINTSAT_STAR", "DOT_STAR", "UNARY",
  "UNARY_NOT", "UNARY_NEGATE", "UNARY_MINUS", "UNARY_STAR", "UNARY_REF",
  "POINTSAT", "SCOPE", "PLUSPLUS", "MINUSMINUS", "TIMESEQUAL",
  "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL", "MINUSEQUAL", "OREQUAL",
  "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL", "RSHIFTEQUAL", "KW_ALIGNAS",
  "KW_ALIGNOF", "KW_AUTO", "KW_BEGIN_PUBLISH", "KW_BLOCKING", "KW_BOOL",
  "KW_CATCH", "KW_CHAR", "KW_CHAR16_T", "KW_CHAR32_T", "KW_CLASS",
  "KW_CONST", "KW_CONSTEXPR", "KW_DECLTYPE", "KW_DEFAULT", "KW_DELETE",
  "KW_DOUBLE", "KW_DYNAMIC_CAST", "KW_ELSE", "KW_END_PUBLISH", "KW_ENUM",
  "KW_EXTENSION", "KW_EXTERN", "KW_EXPLICIT", "KW_PUBLISHED", "KW_FALSE",
  "KW_FLOAT", "KW_FRIEND", "KW_FOR", "KW_GOTO", "KW_IF", "KW_INLINE",
  "KW_INT", "KW_LONG", "KW_LONGLONG", "KW_MAKE_PROPERTY", "KW_MAKE_SEQ",
  "KW_MUTABLE", "KW_NAMESPACE", "KW_NEW", "KW_NOEXCEPT", "KW_NULLPTR",
  "KW_OPERATOR", "KW_PRIVATE", "KW_PROTECTED", "KW_PUBLIC", "KW_REGISTER",
  "KW_RETURN", "KW_SHORT", "KW_SIGNED", "KW_SIZEOF", "KW_STATIC",
  "KW_STATIC_ASSERT", "KW_STATIC_CAST", "KW_STRUCT", "KW_TEMPLATE",
  "KW_THROW", "KW_TRUE", "KW_TRY", "KW_TYPEDEF", "KW_TYPENAME", "KW_UNION",
  "KW_UNSIGNED", "KW_USING", "KW_VIRTUAL", "KW_VOID", "KW_VOLATILE",
  "KW_WCHAR_T", "KW_WHILE", "START_CPP", "START_CONST_EXPR", "START_TYPE",
  "'{'", "','", "';'", "':'", "'='", "'?'", "'|'", "'^'", "'&'", "'<'",
  "'>'", "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "'.'", "'('", "'['",
  "')'", "'}'", "'!'", "']'", "$accept", "grammar", "cpp",
  "constructor_inits", "constructor_init", "extern_c", "$@1",
  "declaration", "friend_declaration", "$@2", "storage_class",
  "type_like_declaration", "multiple_var_declaration", "$@3", "$@4",
  "multiple_instance_identifiers", "multiple_const_instance_identifiers",
  "typedef_declaration", "$@5", "$@6", "typedef_instance_identifiers",
  "typedef_const_instance_identifiers", "function_prototype", "$@7", "$@8",
  "$@9", "$@10", "$@11", "$@12", "$@13", "function_post",
  "function_operator", "more_template_declaration", "template_declaration",
  "$@14", "template_formal_parameters",
  "template_nonempty_formal_parameters", "template_formal_parameter",
  "template_formal_parameter_type", "instance_identifier", "$@15",
  "formal_parameter_list", "formal_parameters",
  "template_parameter_maybe_initialize", "maybe_initialize",
  "maybe_initialize_or_function_body", "structure_init",
  "structure_init_body", "formal_parameter",
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier",
  "empty_instance_identifier", "type", "type_decl", "predefined_type",
  "full_type", "anonymous_struct", "$@16", "named_struct", "$@17",
  "maybe_class_derivation", "class_derivation", "base_specification",
  "enum", "enum_decl", "enum_element_type", "enum_body_trailing_comma",
  "enum_body", "enum_keyword", "struct_keyword", "namespace_declaration",
  "$@18", "$@19", "using_declaration", "simple_type", "simple_int_type",
  "simple_float_type", "simple_void_type", "code", "$@20", "code_block",
  "element", "optional_const_expr", "optional_const_expr_comma",
  "const_expr_comma", "no_angle_bracket_const_expr", "const_expr",
  "const_operand", "formal_const_expr", "formal_const_operand",
  "class_derivation_name", "name", "string_literal", "empty", YY_NULL
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   123,    44,    59,
      58,    61,    63,   124,    94,    38,    60,    62,    43,    45,
      42,    47,    37,   126,    46,    40,    91,    41,   125,    33,
      93
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,   141,   142,   142,   142,   143,   143,   143,   144,   144,
     145,   147,   146,   148,   148,   148,   148,   148,   148,   148,
     148,   148,   148,   148,   148,   148,   148,   148,   148,   148,
     148,   150,   149,   151,   151,   151,   151,   151,   151,   151,
     151,   151,   151,   151,   151,   151,   152,   152,   152,   154,
     153,   155,   153,   156,   156,   157,   157,   159,   158,   160,
     158,   158,   161,   161,   162,   162,   164,   163,   165,   163,
     166,   163,   167,   163,   168,   163,   169,   163,   170,   163,
     163,   171,   171,   171,   171,   171,   172,   172,   172,   172,
     172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
     172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
     172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
     172,   172,   172,   172,   172,   173,   173,   175,   174,   174,
     176,   176,   177,   177,   178,   178,   178,   178,   178,   178,
     179,   179,   179,   180,   180,   180,   180,   180,   180,   180,
     180,   180,   180,   180,   180,   181,   180,   182,   182,   182,
     182,   182,   183,   183,   184,   184,   185,   185,   186,   186,
     186,   186,   186,   187,   187,   187,   188,   188,   188,   188,
     189,   189,   189,   189,   189,   190,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   191,   191,   191,   191,   191,
     191,   191,   191,   191,   191,   191,   191,   192,   192,   192,
     192,   192,   192,   192,   192,   192,   193,   193,   193,   193,
     193,   193,   193,   193,   193,   193,   194,   194,   194,   194,
     194,   194,   194,   194,   194,   194,   194,   195,   195,   195,
     195,   195,   196,   196,   198,   197,   200,   199,   201,   201,
     202,   202,   203,   203,   203,   203,   203,   203,   203,   203,
     203,   204,   205,   205,   205,   205,   206,   206,   207,   207,
     207,   208,   208,   208,   209,   210,   210,   210,   212,   211,
     213,   211,   211,   211,   214,   214,   215,   215,   215,   216,
     216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   216,   216,   217,   217,   217,   217,   217,   218,
     220,   219,   221,   221,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     223,   223,   224,   224,   225,   225,   226,   226,   226,   226,
     226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
     226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
     226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
     227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
     227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
     227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
     227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
     227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
     227,   228,   228,   228,   228,   228,   228,   228,   228,   228,
     229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
     229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
     229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
     229,   229,   229,   229,   229,   229,   229,   230,   230,   230,
     230,   230,   230,   230,   230,   230,   231,   231,   231,   232,
     232,   233,   233,   233,   233,   234
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     2,     1,     2,     2,     1,     3,
       4,     0,     5,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     2,     2,     2,     2,     7,     9,     9,     6,
       4,     0,     3,     1,     2,     3,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     3,     0,
       4,     0,     5,     2,     4,     2,     4,     0,     4,     0,
       5,     3,     2,     4,     2,     4,     0,     6,     0,     6,
       0,     7,     0,    10,     0,    11,     0,     8,     0,     9,
       1,     1,     1,     2,     4,     5,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     1,     1,     1,     0,     6,     2,
       1,     1,     1,     3,     2,     4,     2,     4,     3,     4,
       1,     1,     1,     1,     2,     3,     2,     2,     2,     2,
       2,     3,     4,     3,     3,     0,     6,     1,     1,     1,
       3,     2,     1,     3,     1,     2,     1,     2,     1,     3,
       5,     3,     4,     1,     1,     2,     1,     3,     3,     5,
       3,     4,     5,     2,     1,     1,     1,     1,     2,     2,
       2,     2,     2,     3,     4,     1,     1,     1,     2,     2,
       2,     2,     2,     3,     4,     7,     3,     1,     2,     2,
       2,     2,     2,     3,     4,     7,     1,     1,     2,     1,
       1,     1,     2,     4,     4,     1,     1,     1,     2,     1,
       1,     1,     2,     4,     2,     4,     1,     1,     1,     2,
       2,     2,     2,     3,     0,     5,     0,     7,     1,     1,
       2,     3,     2,     2,     2,     3,     3,     3,     3,     3,
       3,     4,     4,     2,     3,     1,     1,     1,     1,     3,
       5,     1,     2,     4,     1,     1,     1,     1,     0,     6,
       0,     7,     4,     5,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     2,     2,     1,     2,     1,     3,     2,     1,
       0,     2,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     1,     1,     1,     1,     3,     1,     4,     7,     7,
       4,     4,     2,     2,     2,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     5,     4,     4,     3,     3,     3,     3,
       1,     4,     7,     7,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     4,     2,
       5,     2,     2,     2,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     5,     4,     4,     3,     3,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     4,     7,     7,     4,     4,     2,     5,     2,     2,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       5,     4,     4,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     1,
       1,     1,     1,     2,     2,     0
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   585,     0,     0,     0,   585,     5,   525,   521,   524,
     581,   582,   527,   528,     0,     0,     0,     0,     0,     0,
       0,     0,   523,     0,     0,     0,     0,   529,     0,     0,
       0,     0,   522,     0,     0,     0,     0,     0,     0,     0,
       0,     3,   470,   526,   217,   225,   289,   290,   292,   293,
     275,     0,     0,   306,   274,   304,   299,   295,   296,   294,
     298,   276,     0,   277,   297,   309,   291,   585,     4,   219,
     220,   221,     0,   265,     0,   216,   286,   287,   288,     1,
      20,   585,   585,    21,   585,   585,   585,     0,    31,   585,
       0,     0,   585,     0,     0,     0,     0,   585,   585,     0,
     585,   585,     0,   585,   585,     6,    15,     7,    18,     0,
      13,    46,    14,    16,    17,    33,   585,     0,   585,   585,
     585,   585,   585,     0,   585,   585,   585,   238,     0,   489,
       0,     0,   237,   585,   585,     0,     0,   585,   585,   495,
     493,   494,   492,   217,   289,   290,   292,   293,   306,   304,
     299,   295,   294,   298,   297,   291,     0,     0,   434,   491,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   583,   584,   585,     0,   308,   305,   295,
     301,   295,   300,   303,   579,   580,   218,   302,     0,   585,
     585,   585,   585,   585,   585,   242,   207,   585,     0,   263,
     244,   222,   585,    44,    43,    45,   585,    34,    39,    22,
     585,     0,    37,     0,     0,    42,   585,     0,    25,    24,
      23,    40,    36,     0,     0,   129,     0,     0,    19,     0,
     284,    38,    41,    80,   227,   236,     0,     0,     0,     0,
      11,     0,     0,    49,   229,   230,   231,   265,     0,   226,
       0,   433,   432,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   239,   585,   241,   240,     0,     0,     0,
       0,     0,     0,     0,     0,   520,   504,   505,   506,   507,
     508,   509,   512,   513,   519,     0,   501,   502,   503,   510,
     511,   499,   500,   496,   497,   498,   518,   517,     0,     0,
     243,     0,   307,   585,   212,   208,   209,   211,   210,     0,
     585,   271,     0,   268,   267,   264,   266,     0,   585,   585,
      35,    32,   585,     0,     0,     0,   585,   278,     0,   585,
       0,     0,    57,   285,    66,    68,    51,     0,     0,   585,
     228,   585,     0,   310,   168,     0,     0,    48,    47,     0,
     234,   232,   474,   488,   480,   476,   478,   479,   486,     0,
     485,   475,   482,     0,   481,   484,   487,     0,   483,   477,
     471,   435,     0,   516,   515,   224,   213,     0,     0,   431,
     430,   272,   261,   223,   585,     0,     0,   249,   248,   585,
     280,     0,     0,   282,   585,     0,    30,   141,   142,     0,
       0,     0,     0,   131,   132,   585,   140,   130,    59,    61,
       0,   585,     0,     0,   585,     0,     0,   585,   186,   187,
       0,   585,   585,   585,   585,   585,     0,   185,   585,    70,
       0,   585,     0,     8,     0,   585,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    50,   585,   143,     0,     0,
     490,     0,   514,   585,   214,   269,     0,   245,     0,     0,
       0,     0,   250,   585,     0,   283,   585,     0,     0,   585,
       0,   134,   585,   136,   585,     0,   196,   197,     0,   585,
     585,   585,   585,   585,   585,   585,   195,     0,    58,   585,
     571,   567,   570,   573,   574,   158,     0,     0,     0,   569,
       0,   575,     0,     0,     0,   568,     0,     0,     0,     0,
       0,     0,   159,   162,   585,   184,   530,   572,   157,     0,
       0,     0,    52,   585,   235,     0,   585,   192,   188,   189,
     191,   190,    76,   585,    12,   585,   169,   311,   312,   310,
       0,   585,   585,     0,   174,   176,   173,   171,     0,   150,
     146,     0,    96,    97,    98,    99,   100,   101,   104,   105,
     120,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   124,   123,   107,   106,    93,    95,    94,
     102,   103,    91,    92,    88,    89,    90,    87,     0,     0,
      86,   144,   147,   149,   148,     0,     0,     0,   155,   585,
       0,    53,   166,   233,     0,     0,     0,   273,     0,     0,
       0,   254,   576,     0,   253,     0,   252,     0,     0,     0,
     585,   251,   585,     0,     0,     0,   279,    29,     0,   585,
       0,   125,   128,   126,   133,   585,   202,   198,   199,   201,
     200,     0,     0,   585,   138,   164,    60,   585,     0,    62,
       0,     0,   585,     0,   536,   183,     0,     0,   541,   540,
     539,     0,     0,   538,   585,   161,     0,   585,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   585,     0,    55,    78,   193,   585,
       0,     0,   314,   315,   319,   316,   323,   317,   318,   320,
     321,   322,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   385,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   585,   423,   424,   425,   416,
     428,   412,   413,   411,   418,   419,   407,   408,   409,   410,
     417,   415,   422,   420,   426,   421,   414,   427,   313,     0,
       9,     0,     0,   172,   175,   151,   145,   122,   121,   154,
     153,   167,   585,     0,     0,   473,   472,   585,   270,   578,
     260,   577,   259,   258,   257,   256,   255,   247,   281,     0,
      26,     0,   135,   139,   137,   203,   206,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   165,   436,     0,
       0,    64,     0,     0,   585,   585,     0,   585,     0,     0,
       0,   566,    82,    67,    81,   160,   163,     0,   180,   550,
     551,   552,   553,   554,   555,   558,   559,   565,     0,   547,
     548,   549,   556,   557,   545,   546,   542,   543,   544,   564,
     563,     0,     0,     0,    72,    69,     0,   585,     0,   194,
     585,     0,   170,    10,   177,   585,   178,     0,   152,    54,
     215,     0,     0,   585,     0,     0,     0,     0,   446,   444,
     445,   443,     0,     0,   442,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   204,     0,    63,   535,
     585,   181,     0,     0,   534,     0,   531,    83,     0,   167,
       0,   562,   561,    74,   585,    56,     0,   585,    71,   429,
       0,   585,    27,    28,     0,     0,     0,     0,     0,     0,
     469,   455,   456,   457,   458,   459,   460,   461,   462,   468,
       0,   452,   453,   454,   450,   451,   447,   448,   449,   467,
     466,     0,     0,    65,   182,     0,   537,     0,     0,   560,
     585,     0,   585,    77,   179,   156,   585,   441,     0,   440,
       0,   437,     0,   465,   464,     0,     0,    84,     0,     0,
     585,    79,   205,     0,     0,   463,   533,   532,    85,   585,
      73,     0,     0,    75,   439,   438
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     4,     5,   442,   443,   106,   351,   107,   108,   220,
     109,   110,   111,   359,   425,   455,   532,   238,   420,   497,
     498,   656,   252,   421,   424,   545,   994,  1040,   709,   927,
     893,   601,   642,   112,   236,   412,   413,   414,   415,   456,
     842,   521,   522,   654,   610,   357,   553,   554,   523,   436,
     495,   205,    67,   253,   129,    68,    69,   328,    70,   329,
     396,   397,   472,    71,    72,   325,   321,   322,    73,    74,
     113,   404,   476,   114,    75,    76,    77,    78,   440,   441,
     547,   828,   388,   260,   261,   877,   158,    42,   525,   526,
     621,   457,    43,   115
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -659
static const yytype_int16 yypact[] =
{
     191,  -659,  2440,  3611,    10,  2563,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -100,   -91,   -86,   -78,   -65,   -60,
     -43,   -30,  -659,    -9,    24,    52,  3807,  -659,    55,    59,
      62,    86,  -659,    88,    95,  2440,  2440,  2440,  2440,  1620,
    2440,  3118,  -659,   212,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  3770,   117,  -659,  -659,  -659,  -659,  4285,  -659,  3661,
    3661,  -659,   103,  -659,  3661,  -659,  -659,   524,  -659,  -659,
    -659,  -659,   153,    -4,    41,  -659,  -659,  -659,  -659,  -659,
    -659,  4341,  4341,  -659,  4341,  2455,  4341,   134,  -659,  4292,
     156,   175,  4341,    79,   193,   196,   201,  4341,  4341,   205,
    4187,  4341,    44,  4341,  4341,  -659,  -659,  -659,  -659,  2655,
    -659,  -659,  -659,  -659,  -659,  -659,  2440,  3611,  2440,  2440,
    2440,  2440,  2440,  3611,  2440,  2440,  2440,  -659,   103,   209,
     103,   103,  -659,  2440,  2440,  3611,  3611,  2440,  2440,    81,
      81,    81,    81,  -100,   -86,   -78,   -65,   -60,   -43,    -9,
      24,  4179,  1829,  3297,  3483,    95,   219,   -87,  3118,    81,
    2440,  2440,  2440,  2440,  2440,  2440,  2440,  2440,  2440,  2440,
    2440,  2440,  2440,  2440,  2440,  2440,  2440,  2440,  2440,  2440,
    2440,  1840,  2440,  -659,  -659,   524,  2440,  -659,  -659,  3600,
    -659,  3661,  -659,  -659,  -659,  -659,  -659,  -659,   251,   524,
     524,   524,   524,   524,   524,   206,  -659,  -659,  2716,   229,
    -659,    31,  4341,  -659,  -659,  -659,  4341,  -659,  -659,  -659,
    4236,    87,  -659,   373,   103,  -659,  -659,   270,  -659,  -659,
    -659,  -659,  -659,  2440,  2726,  -659,   268,  2790,  -659,   103,
    -659,  -659,  -659,   260,   269,  -659,  3770,   271,  3672,   103,
    -659,   103,   -16,   288,  -659,  -659,  -659,    -4,    41,  -659,
     275,   295,  -659,   280,   284,   285,   292,   298,   299,   310,
     301,   305,   306,  -659,  2440,  -659,  -659,   314,   317,   319,
     330,   321,   323,  2440,  2440,  -659,  3290,  3321,  2860,  2860,
     892,   892,   644,   644,  -659,  2944,  3336,  3351,  3381,   892,
     892,   559,   559,    81,    81,    81,  -659,  -659,   -79,   954,
     206,  2909,  -659,   524,   206,   206,   206,   206,   206,    -2,
    2440,   103,   287,  -659,  -659,  -659,  -659,  2716,  -659,   347,
    -659,  -659,  -659,   352,   361,   362,  3854,  -659,  2888,  3493,
    3770,   -16,  -659,  -659,  -659,    33,  -659,  2440,  3770,   585,
    -659,  -659,   335,  -659,  -659,   103,  1940,  -659,  -659,   341,
      66,    31,  -659,  -659,  -659,  -659,  -659,  -659,  -659,   349,
    -659,  -659,  -659,   345,  -659,  -659,  -659,   366,  -659,  -659,
      81,  3118,  2440,  -659,  -659,  -659,   206,   367,   356,  3118,
    -659,    67,  -659,   370,  3900,   173,   380,   387,  -659,  3946,
    -659,   502,   103,  -659,  -659,   220,  -659,  -659,  -659,   103,
    3563,   103,   386,   397,  -659,   389,  -659,  -659,  -659,  -659,
     341,  1400,   388,   341,  1400,   341,  2926,   585,  -659,  -659,
     391,   585,   585,   585,   585,   585,   124,  -659,  3992,  -659,
     379,  -659,   171,  -659,   390,  2040,  2962,   399,   341,   341,
    2565,   341,   341,   341,   341,  -659,   329,  -659,  2716,  2440,
    -659,  2440,  3118,  1400,  -659,  -659,  2440,  -659,   467,  1477,
    1587,   247,  -659,  -659,   173,  -659,  -659,   -51,   412,  4038,
      17,   410,   389,   417,  4304,  3493,  -659,  -659,   411,   389,
     389,   389,   389,   389,   389,   -94,  -659,   341,  -659,   329,
    -659,  -659,  -659,  -659,  -659,  -659,   408,  3709,   419,  -659,
    3807,  -659,  1730,   413,   420,  -659,  2440,  2440,  2440,  1620,
    2440,   423,    12,  -659,   389,  3135,  -659,   212,  -659,   341,
     197,   424,  -659,   329,  -659,   164,   585,   426,   426,   426,
     426,   426,  -659,  2440,  -659,  1400,  -659,  1261,  -659,  -659,
     103,  2440,  2040,   409,   431,  3118,  -659,  -659,   341,   167,
     167,   555,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,   430,   429,
    -659,  -659,   167,   167,   167,   210,   265,  1940,  -659,  2440,
     452,  -659,  -659,   370,   -49,   -46,   437,  3084,   103,   847,
     103,  -659,  -659,   847,  -659,   847,  -659,   847,   847,   847,
    4084,  -659,  4130,   567,   459,   103,  -659,  -659,  3611,   -94,
    3611,  -659,  -659,  -659,  -659,   389,   443,   443,   443,   443,
     443,   189,   792,  2440,  -659,  -659,  -659,   329,   463,  -659,
    3611,  3770,   389,  3611,   447,  -659,  3611,  3611,    81,    81,
      81,   448,   -44,    81,   528,  -659,  1510,    93,  2440,  2440,
    2440,  2440,  2440,  2440,  2440,  2440,  2440,  2440,  2440,  2440,
    2440,  2440,  2440,  2440,  2440,  2440,  2440,  2440,  2440,  2140,
    2440,   273,   582,   458,   528,   476,  -659,  -659,   426,  1400,
     460,   461,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,   465,
    -659,   462,   468,  -659,  2240,   167,  -659,  -659,  -659,  -659,
    -659,  2962,  1400,   470,   341,  -659,  -659,   528,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,   474,
    -659,   478,  -659,  -659,  -659,   443,   472,   481,   479,   484,
     487,   792,   792,   792,   792,  1620,   792,  3169,  -659,   485,
     510,  -659,   341,   492,   389,    93,   505,  2440,   496,   507,
    2440,  -659,  -659,   -23,  -659,  -659,  -659,  2440,  -659,  3290,
    3321,  2860,  2860,   892,   892,   644,   644,  -659,  3101,  3336,
    3351,  3381,   892,   892,   559,   559,    81,    81,    81,  -659,
    -659,    -8,  1418,   501,  -659,   -23,   341,  1400,   503,  -659,
     528,  1123,  -659,  -659,  -659,  2040,  3118,   506,  -659,  -659,
     -23,   520,   523,  1400,  3611,  3611,  3611,  3611,   162,   162,
     162,   162,   508,    74,   162,   792,   792,   792,   792,   792,
     792,   792,   792,   792,   792,   792,   792,   792,   792,   792,
     792,   792,   792,   792,  2340,  2440,  -659,   341,  -659,  -659,
      93,  -659,   511,   513,  -659,   512,    81,  -659,   516,  3118,
    2440,  -659,  -659,  -659,  1400,  -659,   518,   528,   -23,  -659,
     519,   528,  -659,  -659,   521,   525,   533,   526,   537,   792,
    -659,  3306,  3366,   678,   678,   935,   935,   657,   657,  -659,
    3152,  3501,  1853,   919,   813,   813,   162,   162,   162,  -659,
    -659,    90,  1638,  -659,  -659,  2440,  -659,  2440,    37,  3118,
    1400,   529,   528,   -23,  -659,   -23,   528,  -659,   534,  -659,
     536,   162,   792,  -659,  -659,   137,   140,  -659,   531,   545,
     528,   -23,   -23,  2440,  2440,  3169,  -659,  -659,  -659,   528,
     -23,   147,   150,   -23,  -659,  -659
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -659,  -659,  -183,  -659,    98,  -659,  -659,   454,  -659,  -659,
     -21,   -95,  -659,  -659,  -659,  -160,  -234,  -659,  -659,  -659,
    -181,  -275,   469,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -658,  -659,  -659,   221,  -659,  -659,  -659,   222,   302,  -273,
    -659,  -423,  -659,    77,  -495,  -328,  -543,  -659,  -504,    76,
    -351,   354,   -39,   480,   203,   -36,   -81,  -659,   -77,  -659,
    -659,  -659,   244,   -68,  -659,  -303,  -659,  -659,   -15,    58,
    -659,  -659,  -659,  -659,   -24,   207,  -659,  -659,   170,  -659,
     -85,  -659,  -507,  -104,   -20,  -140,    71,  -593,  -659,  -659,
    -305,   490,  -368,    -1
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -264
static const yytype_int16 yytable[] =
{
       6,   531,   132,   156,   658,   235,   194,   195,   665,   832,
      79,   130,   185,   419,   264,   265,   266,   267,   268,   157,
     270,   271,   272,   183,   393,   184,   675,   652,   254,   277,
     278,   284,   255,   281,   282,   116,   710,   480,   705,   284,
     616,   256,   653,   336,   117,   422,   925,   194,   195,   118,
     285,   194,   195,   527,   194,   195,   527,   119,   383,   878,
     213,   214,   987,   215,   217,   218,   206,   633,   222,   284,
     120,   225,   284,    41,   284,   121,   231,   232,   988,   234,
     237,   263,   241,   242,   131,   259,   634,   269,   845,   194,
     195,   846,   122,   891,   257,   527,   123,   194,   195,   279,
     280,   353,   843,   354,   355,   356,   139,   140,   141,   142,
     284,   159,   168,   194,   195,   262,   208,   262,   262,   262,
     262,   262,   711,   262,   262,   262,   124,   239,   611,   991,
     676,   639,   262,   262,   320,   387,   262,   262,   646,   647,
     648,   649,   650,   651,   527,   394,   879,   499,  -246,   399,
     530,  -246,   533,   254,   637,   613,   254,   255,   210,   125,
     255,   308,   880,   423,   624,   626,   256,   258,   438,   256,
     373,   659,   896,   677,  1057,   559,   560,   527,   602,   603,
     604,   605,   898,  -263,   206,   465,   458,   126,   466,   940,
     133,   222,   284,   963,   134,   330,   226,   135,   206,   206,
     206,   206,   206,   206,   332,   706,   323,   346,   284,   349,
     259,  1010,   136,   259,   897,   180,   181,   182,   183,   257,
     184,   479,   257,   137,   657,     6,    10,  1053,    11,   653,
     138,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   186,   309,   219,   284,   701,   311,   284,   542,
     543,   468,   469,   470,   190,   284,   192,   193,   284,   840,
     207,   197,   998,   262,  1066,   194,   195,  1067,   878,   878,
     878,   878,   471,   878,  1074,   835,   928,  1075,   549,   550,
     630,   223,   258,   632,   865,   258,   973,   974,   975,   707,
     543,   418,   608,   609,   338,     1,     2,     3,   527,   427,
     224,   885,   206,   228,   850,   416,   229,   702,   852,   390,
     853,   230,   854,   855,   856,   653,   866,     6,   398,   881,
     702,     6,   608,   609,   703,   627,   628,   629,   417,  1043,
     233,   527,   320,  1045,   274,   608,   609,   839,   437,   327,
       6,   194,   195,   447,   380,   381,   283,   448,   190,   192,
     193,   197,   878,   878,   878,   878,   878,   878,   878,   878,
     878,   878,   878,   878,   878,   878,   878,   878,   878,   878,
     878,   313,   524,   334,  1061,   524,   416,   337,  1062,   641,
     981,   389,  1000,   702,   339,   344,   190,   449,   190,   486,
     487,   488,  1070,     6,   345,   489,   347,   358,   608,   609,
     923,  1073,   362,   284,   496,   326,   878,   363,   426,   937,
     528,   364,   365,   528,   524,   392,   437,   446,   450,   366,
     437,   437,   437,   437,   437,   367,   368,   369,   370,   614,
     548,   615,   371,   372,   556,   490,   353,   831,   354,   606,
     607,   374,   451,   462,   375,   612,   376,   377,   378,   878,
     379,   416,   528,   234,   608,   609,   452,   395,   662,   400,
     439,   453,     6,   524,   527,     6,   454,   194,   195,   401,
     402,   496,   460,   671,   459,  1034,   132,  -262,   496,   496,
     496,   496,   496,   496,   655,   130,   464,   473,   612,   672,
     491,   461,   463,   535,   996,   474,   524,   537,   538,   539,
     540,   541,   477,   484,   492,   485,   555,   546,   529,   493,
    1004,   536,    50,   496,   494,   551,   620,   620,   620,   558,
     635,   638,   612,   980,   326,   437,   198,   617,   640,   310,
     199,   645,   390,   660,   528,   663,   667,   833,   666,   834,
     262,   556,   196,   314,   315,   316,   317,   318,   319,   527,
     674,   704,   543,   209,   211,   836,    61,   837,   131,   838,
     844,  1041,   618,    63,   847,   527,   619,   859,   860,   653,
     200,   882,   887,   227,   892,   890,   840,   668,   669,   670,
     168,   673,   240,   924,   926,   428,   429,   430,   930,   933,
     929,   431,   862,   932,   864,   945,   934,   943,   390,   499,
     938,   941,   708,   947,   389,   942,   944,  1059,   273,   946,
     275,   276,   884,   555,   883,   976,   527,   886,   977,   979,
     888,   889,   982,   984,   985,   201,   993,   524,   655,  1002,
     997,   432,  1003,  1001,   496,  1009,  1035,  1037,   830,   202,
    1036,  1038,   390,   533,   203,  1042,   612,  1044,  1046,   204,
    1048,   496,  1047,  1049,  1050,   326,  1060,   386,  1068,  1063,
     524,  1064,   527,   894,   331,   168,   612,   620,   841,   921,
     389,   620,  1069,   620,   939,   620,   620,   620,   963,   177,
     178,   179,   995,   180,   181,   182,   433,   959,   960,   961,
     962,   978,  1033,   894,   657,   643,   341,   644,   528,   963,
     434,   333,   482,   664,   335,   435,   863,   342,   631,   829,
     931,     0,     0,     0,   389,     0,     0,     0,     0,   343,
       0,   948,   949,   950,   951,     0,   954,     0,     0,   350,
       0,   352,     0,     0,     0,     0,     0,   360,   361,   899,
     900,   901,   902,   903,   904,   905,   906,   907,   908,   909,
     910,   911,   912,   913,   914,   915,   916,   917,   918,   919,
       0,   922,   175,   176,   177,   178,   179,     0,   180,   181,
     182,     0,     0,   983,     0,   968,   969,   970,   971,   972,
       0,   973,   974,   975,     0,     7,     8,     9,    10,     0,
      11,    12,    13,   524,   548,     0,   968,   969,   970,   971,
     972,   391,   973,   974,   975,  1011,  1012,  1013,  1014,  1015,
    1016,  1017,  1018,  1019,  1020,  1021,  1022,  1023,  1024,  1025,
    1026,  1027,  1028,  1029,     0,     0,     0,     0,   867,   952,
       0,   528,     0,     0,   963,   444,   894,     0,     0,     0,
       0,     0,     0,     0,   868,   953,     0,   194,   195,     0,
       0,     0,    22,     0,     0,     0,     0,     0,     0,  1051,
       0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
       0,     0,     0,   496,   612,     0,   262,   869,   524,     0,
     870,     0,   478,     0,    32,     0,     0,     0,     0,   481,
       0,   483,    50,     0,   524,   936,     0,     0,  1005,  1006,
    1007,  1008,  1065,   166,   167,     0,     0,   871,     0,     0,
       0,   872,   873,   168,     0,   874,   528,   875,     0,   894,
       0,   876,     0,     0,   556,     0,   957,   958,   959,   960,
     961,   962,   528,   970,   971,   972,    61,   973,   974,   975,
     963,     0,   618,    63,  1031,   524,   961,   962,   622,   622,
     622,   986,     0,     0,     0,     0,   963,     0,   989,   160,
     161,   162,   163,   164,   165,   166,   167,     0,     0,   612,
       0,     0,     0,     0,     0,   168,     0,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   894,     0,     0,     0,
     894,   524,     0,     0,     0,     0,   555,     0,     0,     0,
       0,     0,     0,     0,     0,  1055,     0,  1056,     0,     0,
     175,   176,   177,   178,   179,     0,   180,   181,   182,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   528,
     444,   894,     0,  1071,  1072,   894,  1032,   968,   969,   970,
     971,   972,     0,   973,   974,   975,     0,     0,     0,   894,
       0,  1039,     0,   968,   969,   970,   971,   972,   894,   973,
     974,   975,     0,     0,     0,     0,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,   181,
     182,     0,     0,     0,   384,     0,   444,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   849,   622,
     851,     0,     0,   622,     0,   622,     0,   622,   622,   622,
       0,     0,     0,     0,     0,   861,   712,   713,   714,   715,
     716,   717,   718,   719,   720,   721,     0,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,     0,     0,
       0,     0,     0,     0,   733,   734,   735,   736,   737,   738,
     739,   740,   741,   742,   743,   744,   745,   746,   747,   748,
     749,     0,     0,   750,   751,   752,   753,   754,   755,   756,
     757,   758,   759,   760,   761,   762,   763,     0,   764,     0,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,     0,     0,     0,   777,     0,   778,     0,   779,
     780,   781,   782,   783,   784,   785,   786,   787,   788,   789,
     790,   791,   792,     0,   793,   794,   795,   796,   797,   798,
     799,     0,   800,   801,   802,   803,   804,     0,     0,     0,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   999,   826,   827,   712,   713,   714,   715,   716,   717,
     718,   719,   720,   721,     0,   722,   723,   724,   725,   726,
     727,   728,   729,   730,   731,   732,     0,     0,     0,     0,
       0,     0,   733,   734,   735,   736,   737,   738,   739,   740,
     741,   742,   743,   744,   745,   746,   747,   748,   749,     0,
       0,   750,   751,   752,   753,   754,   755,   756,   757,   758,
     759,   760,   761,   762,   763,     0,   764,     0,   765,   766,
     767,   768,   769,   770,   771,   772,   773,   774,   775,   776,
       0,     0,     0,   777,     0,   778,     0,   779,   780,   781,
     782,   783,   784,   785,   786,   787,   788,   789,   790,   791,
     792,     0,   793,   794,   795,   796,   797,   798,   799,     0,
     800,   801,   802,   803,   804,     0,     0,     0,   805,   806,
     807,   808,   809,   810,   811,   812,   813,   814,   815,   816,
     817,   818,   819,   820,   821,   822,   823,   824,   825,     0,
     826,   827,     0,   500,   501,   502,    10,     0,    11,   503,
     504,    44,     0,     0,   505,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   160,   161,   162,   163,   164,   165,   166,
     167,     0,     0,     0,     0,     0,   506,    45,     0,   168,
      46,     0,    47,    48,    49,    50,   507,     0,    52,     0,
       0,    53,   508,     0,     0,    54,     0,     0,     0,     0,
     509,    55,     0,     0,     0,     0,     0,    56,    57,    58,
       0,     0,     0,     0,   510,     0,   511,   194,   195,     0,
       0,   512,     0,    59,    60,   513,     0,     0,   514,    61,
       0,     0,   515,     0,     0,    62,    63,    64,     0,     0,
      65,     0,    66,   500,   501,   502,    10,     0,    11,   503,
     504,    44,     0,     0,   895,   516,     0,     0,  1058,   517,
       0,     0,    50,   518,     0,   519,     0,     0,     0,   520,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,   181,   182,     0,   506,    45,   992,     0,
      46,     0,    47,    48,    49,    50,   507,     0,    52,     0,
       0,    53,   508,     0,     0,    54,    61,     0,     0,     0,
     509,    55,   618,    63,     0,     0,   623,    56,    57,    58,
       0,     0,     0,     0,   510,     0,   511,   194,   195,     0,
       0,   512,     0,    59,    60,   513,     0,     0,   514,    61,
       0,     0,   515,     0,     0,    62,    63,    64,     0,     0,
      65,     0,    66,     7,     8,     9,    10,     0,    11,    12,
      13,   143,     0,     0,     0,   516,     0,     0,     0,   517,
       0,     0,    50,   518,     0,   519,     0,     0,     0,   520,
       0,     0,     0,   160,   161,   162,   163,   164,   165,   166,
     167,     0,     0,     0,     0,     0,    15,    45,     0,   168,
     144,     0,   145,   146,   147,    50,    51,     0,    52,     0,
       0,   148,    21,     0,     0,    54,    61,     0,     0,     0,
      22,   149,   618,    63,     0,     0,   625,   150,   151,    58,
       0,     0,     0,     0,    26,     0,    27,     0,     0,     0,
       0,     0,     0,   152,   153,    30,     0,     0,    31,    61,
       0,     0,    32,     0,     0,    62,    63,   154,     0,     0,
      65,     0,   155,   500,   501,   502,    10,     0,    11,   503,
     504,    44,     0,     0,     0,    35,     0,     0,     0,    36,
      37,     0,     0,    38,     0,    39,     0,     0,     0,    40,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,   181,   182,     0,   506,    45,  1054,     0,
      46,     0,    47,    48,    49,    50,   507,     0,    52,     0,
       0,    53,   508,     0,     0,    54,     0,     0,     0,     0,
     509,    55,     0,     0,     0,     0,     0,    56,    57,    58,
       0,     0,     0,     0,   510,     0,   511,     0,     0,     0,
       0,   512,     0,    59,    60,   513,     0,     0,   514,    61,
       0,     0,   515,     0,     0,    62,    63,    64,     0,     0,
      65,     0,    66,     7,     8,     9,    10,     0,    11,    12,
      13,    14,     0,     0,     0,   516,     0,     0,     0,   517,
       0,     0,     0,   518,     0,   519,     0,     0,     0,   520,
     957,   958,   959,   960,   961,   962,     0,     0,     0,    46,
       0,    47,    48,    49,   963,     0,    15,     0,     0,     0,
      16,     0,    17,    18,    19,     0,     0,     0,     0,     0,
       0,    20,    21,     0,     0,     0,    56,   191,    58,     0,
      22,    23,     0,     0,     0,     0,     0,    24,    25,     0,
       0,     0,    59,    60,    26,     0,    27,     0,     0,     0,
       0,     0,     0,    28,    29,    30,    64,     0,    31,     0,
       0,    66,    32,     7,     8,     9,    10,    33,    11,    12,
      13,    14,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   133,    35,     0,     0,     0,    36,
      37,     0,     0,    38,     0,    39,     0,   307,   967,    40,
       0,   968,   969,   970,   971,   972,    15,   973,   974,   975,
      16,     0,    17,    18,    19,     0,     0,     0,     0,     0,
       0,    20,    21,     0,     0,     0,     0,     0,     0,     0,
      22,    23,     0,     0,     0,     0,     0,    24,    25,     0,
       0,     0,     0,     0,    26,     0,    27,     0,     0,     0,
       0,     0,     0,    28,    29,    30,     0,     0,    31,     0,
       0,     0,    32,     7,     8,     9,    10,    33,    11,    12,
      13,    14,    34,     0,     0,     0,     0,   445,     0,     0,
       0,     0,     0,     0,     0,    35,     0,     0,     0,    36,
      37,     0,     0,    38,     0,    39,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,    15,     0,     0,     0,
      16,     0,    17,    18,    19,     0,     0,     0,     0,     0,
       0,    20,    21,     0,     0,     0,     0,     0,     0,     0,
      22,    23,     0,     0,     0,     0,     0,    24,    25,     0,
       0,     0,     0,     0,    26,     0,    27,     0,     0,     0,
       0,     0,     0,    28,    29,    30,     0,     0,    31,     0,
       0,     0,    32,     7,     8,     9,    10,    33,    11,    12,
      13,    14,    34,     0,     0,     0,     0,   552,     0,     0,
       0,     0,     0,     0,     0,    35,     0,     0,     0,    36,
      37,     0,     0,    38,     0,    39,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,    15,     0,     0,     0,
      16,     0,    17,    18,    19,     0,     0,     0,     0,     0,
       0,    20,    21,     0,     0,     0,     0,     0,     0,     0,
      22,    23,     0,     0,     0,     0,     0,    24,    25,     0,
       0,     0,     0,     0,    26,     0,    27,     0,     0,     0,
       0,     0,     0,    28,    29,    30,     0,     0,    31,     0,
       0,     0,    32,     7,     8,     9,    10,    33,    11,    12,
      13,    14,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    35,     0,     0,     0,    36,
      37,     0,     0,    38,     0,    39,     0,   920,     0,    40,
       0,     0,     0,     0,     0,     0,    15,     0,     0,     0,
      16,     0,    17,    18,    19,     0,     0,     0,     0,     0,
       0,    20,    21,     0,     0,     0,     0,     0,     0,     0,
      22,    23,     0,     0,     0,     0,     0,    24,    25,     0,
       0,     0,     0,     0,    26,     0,    27,     0,     0,     0,
       0,     0,     0,    28,    29,    30,     0,     0,    31,     0,
       0,     0,    32,     7,     8,     9,    10,    33,    11,    12,
      13,    14,    34,     0,     0,     0,     0,   935,     0,     0,
       0,     0,     0,     0,     0,    35,     0,     0,     0,    36,
      37,     0,     0,    38,     0,    39,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,    15,     0,     0,     0,
      16,     0,    17,    18,    19,     0,     0,     0,     0,     0,
       0,    20,    21,     0,     0,     0,     0,     0,     0,     0,
      22,    23,     0,     0,     0,     0,     0,    24,    25,     0,
       0,     0,     0,     0,    26,     0,    27,     0,     0,     0,
       0,     0,     0,    28,    29,    30,     0,     0,    31,     0,
       0,     0,    32,     7,     8,     9,    10,    33,    11,    12,
      13,    14,    34,     0,     0,     0,     0,     0,     0,     0,
       0,   216,     0,     0,     0,    35,     0,     0,     0,    36,
      37,     0,     0,    38,     0,    39,     0,  1030,     0,    40,
       0,     0,     0,     0,     0,     0,    15,     0,     0,     0,
      16,     0,    17,    18,    19,     0,     0,     0,     0,     0,
       0,    20,    21,     0,    81,     0,     0,     0,     0,     0,
      22,    23,    82,     0,     0,     0,     0,    24,    25,     0,
       0,    84,    85,    86,    26,     0,    27,     0,     0,     0,
       0,   212,     0,    28,    29,    30,     0,    92,    31,     0,
       0,     0,    32,     0,     0,     0,    97,    33,     0,     0,
       0,    98,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    -2,   103,    35,   104,     0,     0,    36,
      37,   561,     0,    38,     0,    39,     0,     0,     0,    40,
     562,   563,   564,   565,   566,   567,   568,   569,     0,     0,
       0,     0,     0,     0,     0,     0,   570,     0,   571,   572,
     573,   574,   575,   576,   577,   578,   579,   580,   581,   582,
       0,    80,    81,     0,     0,     0,     0,     0,     0,     0,
      82,     0,     0,     0,     0,   583,     0,    83,     0,    84,
      85,    86,    87,     0,     0,    88,     0,     0,     0,    89,
       0,     0,     0,    90,    91,    92,    93,     0,     0,   584,
       0,    94,    95,    96,    97,     0,     0,     0,     0,    98,
      99,     0,     0,   100,     0,   243,   244,   101,     0,     0,
       0,   102,   103,     0,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   585,     0,     0,   586,     0,   587,   588,
     589,   590,   591,   592,   593,   594,   595,   596,   597,     0,
     598,   599,   245,     0,   600,    46,     0,    47,    48,    49,
      50,   246,     0,   247,     0,     0,    53,     0,     0,     0,
      54,     0,     0,     0,     0,     0,    55,   324,     0,     0,
       0,     0,    56,    57,    58,     0,   243,   244,     0,     0,
       0,     0,   248,     0,     0,     0,     0,     0,    59,    60,
       0,     0,     0,     0,    61,     0,     0,     0,     0,     0,
     249,    63,    64,     0,     0,    65,    46,    66,    47,    48,
      49,     0,   250,   245,     0,     0,    46,     0,    47,    48,
      49,    50,   246,     0,   247,     0,     0,    53,   251,     0,
       0,    54,     0,    56,   191,    58,     0,    55,     0,     0,
     243,   244,     0,    56,    57,    58,     0,     0,     0,    59,
      60,     0,     0,   248,     0,     0,     0,     0,     0,    59,
      60,     0,     0,    64,     0,    61,     0,     0,    66,     0,
       0,   249,    63,    64,     0,     0,    65,   245,    66,     0,
      46,     0,    47,    48,    49,    50,   340,     0,   247,     0,
       0,    53,     0,     0,     0,    54,     0,     0,     0,   251,
       0,    55,     0,     0,     0,     0,     0,    56,    57,    58,
       0,     0,     0,     0,     0,     0,     0,   248,     0,   164,
     165,   166,   167,    59,    60,     0,     0,     0,     0,    61,
       0,   168,     0,     0,     0,   249,    63,    64,     0,     0,
      65,     0,    66,   160,   161,   162,   163,   164,   165,   166,
     167,     0,     0,     0,     0,     0,     0,     0,     0,   168,
       0,     0,     0,   251,   160,   161,   162,   163,   164,   165,
     166,   167,     0,     0,     0,     0,     0,     0,     0,     0,
     168,   160,   161,   162,   163,   164,   165,   166,   167,     0,
       0,     0,     0,     0,     0,     0,     0,   168,     0,   160,
     161,   162,   163,   164,   165,   166,   167,     0,     0,     0,
       0,     0,     0,     0,     0,   168,     0,   160,   161,   162,
     163,   164,   165,   166,   167,     0,   173,   174,   175,   176,
     177,   178,   179,   168,   180,   181,   182,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   405,     0,     0,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,   181,   182,   406,     0,     0,     0,     0,
       0,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,   181,   182,   385,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,   181,   182,   534,   382,     0,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,   181,
     182,   557,     0,     0,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,     0,   180,   181,   182,   160,
     161,   162,   163,   164,   165,   166,   167,     0,     0,     0,
       0,     0,     0,     0,     0,   168,   160,   161,   162,   163,
     164,   165,   166,   167,     0,     0,     0,     0,     0,     0,
       0,     0,   168,   160,   161,   162,   163,   164,   165,   166,
     167,     0,     0,     0,     0,     0,     0,     0,     0,   168,
     678,   679,   680,   681,   682,   683,   684,   685,     0,     0,
       0,     0,     0,     0,     0,     0,   686,   955,   956,   957,
     958,   959,   960,   961,   962,     0,     0,     0,     0,     0,
       0,     0,     0,   963,   955,   956,   957,   958,   959,   960,
     961,   962,     0,     0,     0,     0,     0,     0,     0,     0,
     963,     0,   848,     0,     0,     0,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,   181,
     182,   990,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,   181,   182,     0,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,   181,   182,     0,     0,   687,   688,   689,
     690,   691,   692,   693,   694,   695,   696,   697,     0,   698,
     699,   700,  1052,     0,   964,   965,   966,   967,     0,     0,
     968,   969,   970,   971,   972,     0,   973,   974,   975,     0,
       0,   964,   965,   966,   967,     0,     0,   968,   969,   970,
     971,   972,     0,   973,   974,   975,   161,   162,   163,   164,
     165,   166,   167,     0,     0,     0,     0,     0,     0,     0,
       0,   168,   956,   957,   958,   959,   960,   961,   962,     0,
       0,     0,     0,     0,     0,     0,     0,   963,   162,   163,
     164,   165,   166,   167,     0,     0,     0,    46,     0,    47,
      48,    49,   168,   162,   163,   164,   165,   166,   167,     0,
       0,     0,     0,     0,     0,     0,     0,   168,   162,   163,
     164,   165,   166,   167,    56,   191,    58,     0,     0,     0,
       0,     0,   168,   957,   958,   959,   960,   961,   962,     0,
      59,    60,     0,     0,     0,     0,     0,   963,   162,   163,
     164,   165,   166,   167,    64,     0,     0,     0,     0,    66,
       0,     0,   168,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,   181,   182,     0,     0,   965,
     966,   967,   134,     0,   968,   969,   970,   971,   972,     0,
     973,   974,   975,     0,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,   181,   182,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,   181,   182,     0,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,   181,   182,     0,   965,
     966,   967,     0,     0,   968,   969,   970,   971,   972,     0,
     973,   974,   975,   407,   408,     0,     0,   173,   174,   175,
     176,   177,   178,   179,     0,   180,   181,   182,   957,   958,
     959,   960,   961,   962,     0,     0,     0,     0,     0,     0,
       0,     0,   963,    46,     0,    47,    48,    49,     0,     0,
       0,     0,     0,    46,     0,    47,    48,    49,   409,   410,
       0,     0,     0,     0,    53,     0,     0,     0,     0,     0,
      56,   191,    58,     0,    55,     0,     0,     0,     0,     0,
      56,    57,    58,   407,   408,     0,    59,    60,     0,     0,
       0,     0,     0,     0,     0,     0,    59,    60,     0,     0,
      64,     0,     0,     0,     0,    66,     0,     0,   411,     0,
      64,     0,     0,    65,     0,    66,     0,     0,     0,     0,
       0,     0,     0,    46,     0,    47,    48,    49,   137,     0,
       0,     0,    44,     0,    53,   966,   967,     0,     0,   968,
     969,   970,   971,   972,    55,   973,   974,   975,     0,     0,
      56,    57,    58,     0,     0,     0,     0,     0,     0,     0,
      46,     0,    47,    48,    49,     0,    59,    60,    45,     0,
       0,    46,     0,    47,    48,    49,    50,    51,     0,    52,
      64,   312,    53,    65,     0,    66,    54,    56,   191,    58,
       0,     0,    55,    44,     0,     0,     0,     0,    56,    57,
      58,     0,     0,    59,    60,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    59,    60,     0,    64,     0,     0,
      61,    46,    66,    47,    48,    49,    62,    63,    64,    45,
      44,    65,    46,    66,    47,    48,    49,    50,   348,     0,
      52,     0,     0,    53,     0,     0,     0,    54,    56,   191,
      58,     0,     0,    55,     0,     0,     0,     0,     0,    56,
      57,    58,     0,     0,    59,    60,    45,     0,     0,    46,
       0,    47,    48,    49,    50,    59,    60,    52,    64,     0,
      53,    61,     0,    66,    54,     0,     0,    62,    63,    64,
      55,    44,    65,     0,    66,     0,    56,    57,    58,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     661,     0,    59,    60,     0,     0,     0,     0,    61,     0,
       0,     0,     0,     0,    62,    63,    64,    45,   127,    65,
      46,    66,    47,    48,    49,    50,     0,     0,    52,     0,
       0,    53,     0,     0,     0,    54,     0,     0,     0,     0,
       0,    55,     0,     0,     0,     0,     0,    56,    57,    58,
       0,     0,     0,     0,     0,     0,     0,    46,     0,    47,
      48,    49,    50,    59,    60,     0,     0,     0,    53,    61,
       0,     0,    54,     0,     0,    62,    63,    64,    55,     0,
      65,     0,    66,     0,    56,    57,    58,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      59,    60,    80,    81,     0,     0,    61,     0,     0,     0,
       0,    82,   128,    63,    64,     0,     0,    65,    83,    66,
      84,    85,    86,    87,     0,     0,    88,     0,     0,     0,
      89,     0,     0,     0,    90,    91,    92,    93,     0,     0,
       0,     0,    94,    95,    96,    97,     0,     0,    80,    81,
      98,    99,     0,     0,   100,     0,     0,    82,   101,     0,
       0,     0,   102,   103,    83,   104,    84,    85,    86,    87,
       0,     0,    88,   105,     0,     0,    89,     0,     0,     0,
      90,    91,    92,    93,     0,     0,     0,     0,    94,    95,
      96,    97,   403,     0,    80,    81,    98,    99,     0,     0,
     100,     0,     0,    82,   101,     0,     0,     0,   102,   103,
      83,   104,    84,    85,    86,    87,     0,     0,    88,   105,
       0,     0,    89,     0,     0,     0,    90,    91,    92,    93,
       0,     0,     0,     0,    94,    95,    96,    97,   467,     0,
      80,    81,    98,    99,     0,     0,   100,     0,     0,    82,
     101,     0,     0,     0,   102,   103,    83,   104,    84,    85,
      86,    87,     0,     0,    88,   105,     0,     0,    89,     0,
       0,     0,    90,    91,    92,    93,     0,     0,     0,     0,
      94,    95,    96,    97,   475,     0,    80,    81,    98,    99,
       0,     0,   100,     0,     0,    82,   101,     0,     0,     0,
     102,   103,    83,   104,    84,    85,    86,    87,     0,     0,
      88,   105,     0,     0,    89,     0,     0,     0,    90,    91,
      92,    93,     0,     0,     0,     0,    94,    95,    96,    97,
     544,     0,    80,    81,    98,    99,     0,     0,   100,     0,
       0,    82,   101,     0,     0,     0,   102,   103,    83,   104,
      84,    85,    86,    87,     0,     0,    88,   105,     0,     0,
      89,     0,     0,     0,    90,    91,    92,    93,     0,     0,
       0,     0,    94,    95,    96,    97,   636,     0,    80,    81,
      98,    99,     0,     0,   100,     0,     0,    82,   101,     0,
       0,     0,   102,   103,    83,   104,    84,    85,    86,    87,
       0,     0,    88,   105,     0,     0,    89,     0,     0,     0,
      90,    91,    92,    93,     0,     0,     0,     0,    94,    95,
      96,    97,   857,     0,     0,     0,    98,    99,     0,    46,
     100,    47,    48,    49,   101,     0,    81,     0,   102,   103,
     187,   104,     0,     0,    82,     0,     0,     0,     0,   105,
     188,     0,     0,    84,    85,    86,    56,   189,    58,     0,
       0,     0,     0,   212,     0,     0,     0,     0,   858,    92,
       0,     0,    59,    60,     0,     0,     0,     0,    97,     0,
       0,     0,     0,    98,    80,    81,    64,     0,     0,     0,
       0,    66,     0,    82,     0,     0,   103,     0,   104,     0,
      83,     0,    84,    85,    86,    87,     0,     0,    88,     0,
       0,     0,    89,  -127,   126,     0,    90,    91,    92,    93,
       0,     0,     0,     0,    94,    95,    96,    97,     0,     0,
       0,     0,    98,    99,     0,    46,   100,    47,    48,    49,
     101,    81,     0,     0,   102,   103,   187,   104,     0,    82,
       0,     0,     0,    81,     0,     0,   188,     0,    84,    85,
      86,    82,    56,   189,    58,     0,     0,     0,   212,     0,
      84,    85,    86,     0,    92,   221,     0,     0,    59,    60,
     212,     0,     0,    97,     0,     0,    92,     0,    98,     0,
      81,     0,    64,     0,     0,    97,     0,    66,    82,     0,
      98,   103,     0,   104,   100,     0,     0,    84,    85,    86,
       0,     0,     0,   103,     0,   104,     0,   212,     0,     0,
       0,     0,     0,    92,     0,     0,     0,     0,     0,     0,
       0,     0,    97,     0,     0,     0,     0,    98,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     103,     0,   104
};

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-659)))

#define yytable_value_is_error(Yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       1,   424,    26,    39,   499,   100,    10,    11,   512,   552,
       0,    26,    51,   341,   118,   119,   120,   121,   122,    39,
     124,   125,   126,     6,   327,     8,    14,   121,   109,   133,
     134,   118,   109,   137,   138,   135,   543,   405,   533,   118,
     463,   109,   136,   226,   135,    12,   704,    10,    11,   135,
     137,    10,    11,   421,    10,    11,   424,   135,   137,   652,
      81,    82,    85,    84,    85,    86,    67,   118,    89,   118,
     135,    92,   118,     2,   118,   135,    97,    98,   101,   100,
     101,   117,   103,   104,    26,   109,   137,   123,   137,    10,
      11,   137,   135,   137,   109,   463,   126,    10,    11,   135,
     136,   117,   609,   119,   120,   121,    35,    36,    37,    38,
     118,    40,    31,    10,    11,   116,   120,   118,   119,   120,
     121,   122,   545,   124,   125,   126,   135,    83,   456,   137,
     118,   482,   133,   134,   136,   137,   137,   138,   489,   490,
     491,   492,   493,   494,   512,   328,   653,   420,   117,   332,
     423,   120,   425,   234,   137,   458,   237,   234,   117,   135,
     237,   181,   657,   130,   469,   470,   234,   109,   351,   237,
     274,   499,   676,   524,   137,   448,   449,   545,   451,   452,
     453,   454,   677,   117,   185,   118,   120,   135,   121,   847,
     135,   212,   118,    31,   135,   216,   117,   135,   199,   200,
     201,   202,   203,   204,   117,   533,   207,   246,   118,   248,
     234,   137,   126,   237,   121,   134,   135,   136,     6,   234,
       8,   404,   237,   135,   497,   226,     6,   137,     8,   136,
     135,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   135,   182,   120,   118,   529,   186,   118,   135,
     136,    88,    89,    90,    57,   118,    59,    60,   118,     4,
     117,    64,   930,   274,   137,    10,    11,   137,   871,   872,
     873,   874,   109,   876,   137,   558,   709,   137,   117,   118,
     473,   135,   234,   476,   645,   237,   134,   135,   136,   135,
     136,   340,   135,   136,   233,   114,   115,   116,   676,   348,
     135,   662,   313,   120,   619,   339,   120,   120,   623,   320,
     625,   120,   627,   628,   629,   136,   137,   328,   329,   657,
     120,   332,   135,   136,   137,    88,    89,    90,   339,   997,
     135,   709,   136,  1001,   135,   135,   136,   137,   349,   120,
     351,    10,    11,    12,   283,   284,   137,    16,   151,   152,
     153,   154,   955,   956,   957,   958,   959,   960,   961,   962,
     963,   964,   965,   966,   967,   968,   969,   970,   971,   972,
     973,   130,   421,    10,  1042,   424,   410,   117,  1046,   484,
     885,   320,   935,   120,   126,   135,   189,    56,   191,    10,
      11,    12,  1060,   404,   135,    16,   135,   119,   135,   136,
     137,  1069,   137,   118,   415,   208,  1009,   137,   347,   842,
     421,   137,   137,   424,   463,   138,   427,   356,    87,   137,
     431,   432,   433,   434,   435,   137,   137,   127,   137,   459,
     441,   461,   137,   137,   445,    56,   117,   551,   119,   120,
     121,   137,   111,   382,   137,   456,   137,   127,   137,  1052,
     137,   485,   463,   484,   135,   136,   125,   120,   507,   117,
     135,   130,   473,   512,   842,   476,   135,    10,    11,   118,
     118,   482,   137,   519,   135,   980,   510,   117,   489,   490,
     491,   492,   493,   494,   495,   510,   140,   117,   499,   519,
     111,   135,   135,   427,   927,   118,   545,   431,   432,   433,
     434,   435,    10,   127,   125,   118,   445,   138,   130,   130,
     943,   130,    55,   524,   135,   135,   468,   469,   470,   130,
     118,   121,   533,   884,   327,   536,    12,   466,   121,   185,
      16,   130,   543,   135,   545,   126,   126,   138,   135,   118,
     551,   552,    62,   199,   200,   201,   202,   203,   204,   927,
     137,   137,   136,    73,    74,    10,    99,   137,   510,   140,
     118,   994,   105,   106,   137,   943,   109,    10,   119,   136,
      56,   118,   135,    93,    56,   137,     4,   516,   517,   518,
      31,   520,   102,   135,   118,    10,    11,    12,   137,   137,
     140,    16,   638,   138,   640,   126,   138,   135,   609,   882,
     140,   137,   536,   126,   543,   137,   135,  1040,   128,   135,
     130,   131,   661,   552,   660,   140,   994,   663,   118,   137,
     666,   667,   127,   137,   127,   111,   135,   676,   639,   119,
     137,    56,   119,   137,   645,   137,   135,   135,   550,   125,
     137,   135,   653,   926,   130,   137,   657,   138,   137,   135,
     127,   662,   137,   137,   127,   458,   137,   313,   137,   135,
     709,   135,  1040,   674,   220,    31,   677,   619,   607,   699,
     609,   623,   137,   625,   844,   627,   628,   629,    31,   130,
     131,   132,   926,   134,   135,   136,   111,    19,    20,    21,
      22,   882,   977,   704,   977,   484,   237,   485,   709,    31,
     125,   221,   410,   510,   224,   130,   639,   237,   474,   549,
     805,    -1,    -1,    -1,   653,    -1,    -1,    -1,    -1,   239,
      -1,   871,   872,   873,   874,    -1,   876,    -1,    -1,   249,
      -1,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,   678,
     679,   680,   681,   682,   683,   684,   685,   686,   687,   688,
     689,   690,   691,   692,   693,   694,   695,   696,   697,   698,
      -1,   700,   128,   129,   130,   131,   132,    -1,   134,   135,
     136,    -1,    -1,   887,    -1,   128,   129,   130,   131,   132,
      -1,   134,   135,   136,    -1,     3,     4,     5,     6,    -1,
       8,     9,    10,   842,   805,    -1,   128,   129,   130,   131,
     132,   321,   134,   135,   136,   955,   956,   957,   958,   959,
     960,   961,   962,   963,   964,   965,   966,   967,   968,   969,
     970,   971,   972,   973,    -1,    -1,    -1,    -1,    46,   875,
      -1,   842,    -1,    -1,    31,   355,   847,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    62,   875,    -1,    10,    11,    -1,
      -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,  1009,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    -1,
      -1,    -1,    -1,   884,   885,    -1,   887,    95,   927,    -1,
      98,    -1,   402,    -1,   102,    -1,    -1,    -1,    -1,   409,
      -1,   411,    55,    -1,   943,   834,    -1,    -1,   944,   945,
     946,   947,  1052,    21,    22,    -1,    -1,   125,    -1,    -1,
      -1,   129,   130,    31,    -1,   133,   927,   135,    -1,   930,
      -1,   139,    -1,    -1,   935,    -1,    17,    18,    19,    20,
      21,    22,   943,   130,   131,   132,    99,   134,   135,   136,
      31,    -1,   105,   106,   974,   994,    21,    22,   468,   469,
     470,   890,    -1,    -1,    -1,    -1,    31,    -1,   897,    15,
      16,    17,    18,    19,    20,    21,    22,    -1,    -1,   980,
      -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   994,    -1,    -1,   997,    -1,    -1,    -1,
    1001,  1040,    -1,    -1,    -1,    -1,   935,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1035,    -1,  1037,    -1,    -1,
     128,   129,   130,   131,   132,    -1,   134,   135,   136,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1040,
     550,  1042,    -1,  1063,  1064,  1046,   975,   128,   129,   130,
     131,   132,    -1,   134,   135,   136,    -1,    -1,    -1,  1060,
      -1,   990,    -1,   128,   129,   130,   131,   132,  1069,   134,
     135,   136,    -1,    -1,    -1,    -1,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,    -1,   134,   135,
     136,    -1,    -1,    -1,   140,    -1,   606,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   618,   619,
     620,    -1,    -1,   623,    -1,   625,    -1,   627,   628,   629,
      -1,    -1,    -1,    -1,    -1,   635,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    -1,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    -1,    -1,
      -1,    -1,    -1,    -1,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    -1,    -1,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    -1,    65,    -1,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    -1,    -1,    -1,    82,    -1,    84,    -1,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,    -1,   109,   110,   111,   112,   113,    -1,    -1,    -1,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    -1,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
      -1,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    -1,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      -1,    -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,    -1,
     109,   110,   111,   112,   113,    -1,    -1,    -1,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,    -1,
     139,   140,    -1,     3,     4,     5,     6,    -1,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      22,    -1,    -1,    -1,    -1,    -1,    46,    47,    -1,    31,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    -1,
      -1,    61,    62,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      70,    71,    -1,    -1,    -1,    -1,    -1,    77,    78,    79,
      -1,    -1,    -1,    -1,    84,    -1,    86,    10,    11,    -1,
      -1,    91,    -1,    93,    94,    95,    -1,    -1,    98,    99,
      -1,    -1,   102,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,   112,     3,     4,     5,     6,    -1,     8,     9,
      10,    11,    -1,    -1,    14,   125,    -1,    -1,  1038,   129,
      -1,    -1,    55,   133,    -1,   135,    -1,    -1,    -1,   139,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,    -1,   134,   135,   136,    -1,    46,    47,   140,    -1,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    -1,
      -1,    61,    62,    -1,    -1,    65,    99,    -1,    -1,    -1,
      70,    71,   105,   106,    -1,    -1,   109,    77,    78,    79,
      -1,    -1,    -1,    -1,    84,    -1,    86,    10,    11,    -1,
      -1,    91,    -1,    93,    94,    95,    -1,    -1,    98,    99,
      -1,    -1,   102,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,   112,     3,     4,     5,     6,    -1,     8,     9,
      10,    11,    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,
      -1,    -1,    55,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      22,    -1,    -1,    -1,    -1,    -1,    46,    47,    -1,    31,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    -1,
      -1,    61,    62,    -1,    -1,    65,    99,    -1,    -1,    -1,
      70,    71,   105,   106,    -1,    -1,   109,    77,    78,    79,
      -1,    -1,    -1,    -1,    84,    -1,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    93,    94,    95,    -1,    -1,    98,    99,
      -1,    -1,   102,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,   112,     3,     4,     5,     6,    -1,     8,     9,
      10,    11,    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,
     130,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,    -1,   134,   135,   136,    -1,    46,    47,   140,    -1,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    -1,
      -1,    61,    62,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      70,    71,    -1,    -1,    -1,    -1,    -1,    77,    78,    79,
      -1,    -1,    -1,    -1,    84,    -1,    86,    -1,    -1,    -1,
      -1,    91,    -1,    93,    94,    95,    -1,    -1,    98,    99,
      -1,    -1,   102,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,   112,     3,     4,     5,     6,    -1,     8,     9,
      10,    11,    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      17,    18,    19,    20,    21,    22,    -1,    -1,    -1,    50,
      -1,    52,    53,    54,    31,    -1,    46,    -1,    -1,    -1,
      50,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    62,    -1,    -1,    -1,    77,    78,    79,    -1,
      70,    71,    -1,    -1,    -1,    -1,    -1,    77,    78,    -1,
      -1,    -1,    93,    94,    84,    -1,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    93,    94,    95,   107,    -1,    98,    -1,
      -1,   112,   102,     3,     4,     5,     6,   107,     8,     9,
      10,    11,   112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   135,   125,    -1,    -1,    -1,   129,
     130,    -1,    -1,   133,    -1,   135,    -1,   137,   125,   139,
      -1,   128,   129,   130,   131,   132,    46,   134,   135,   136,
      50,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    -1,    -1,    -1,    -1,    -1,    77,    78,    -1,
      -1,    -1,    -1,    -1,    84,    -1,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    93,    94,    95,    -1,    -1,    98,    -1,
      -1,    -1,   102,     3,     4,     5,     6,   107,     8,     9,
      10,    11,   112,    -1,    -1,    -1,    -1,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,
     130,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      50,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    -1,    -1,    -1,    -1,    -1,    77,    78,    -1,
      -1,    -1,    -1,    -1,    84,    -1,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    93,    94,    95,    -1,    -1,    98,    -1,
      -1,    -1,   102,     3,     4,     5,     6,   107,     8,     9,
      10,    11,   112,    -1,    -1,    -1,    -1,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,
     130,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      50,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    -1,    -1,    -1,    -1,    -1,    77,    78,    -1,
      -1,    -1,    -1,    -1,    84,    -1,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    93,    94,    95,    -1,    -1,    98,    -1,
      -1,    -1,   102,     3,     4,     5,     6,   107,     8,     9,
      10,    11,   112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,
     130,    -1,    -1,   133,    -1,   135,    -1,   137,    -1,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      50,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    -1,    -1,    -1,    -1,    -1,    77,    78,    -1,
      -1,    -1,    -1,    -1,    84,    -1,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    93,    94,    95,    -1,    -1,    98,    -1,
      -1,    -1,   102,     3,     4,     5,     6,   107,     8,     9,
      10,    11,   112,    -1,    -1,    -1,    -1,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,
     130,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      50,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    -1,    -1,    -1,    -1,    -1,    77,    78,    -1,
      -1,    -1,    -1,    -1,    84,    -1,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    93,    94,    95,    -1,    -1,    98,    -1,
      -1,    -1,   102,     3,     4,     5,     6,   107,     8,     9,
      10,    11,   112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     6,    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,
     130,    -1,    -1,   133,    -1,   135,    -1,   137,    -1,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      50,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    62,    -1,    49,    -1,    -1,    -1,    -1,    -1,
      70,    71,    57,    -1,    -1,    -1,    -1,    77,    78,    -1,
      -1,    66,    67,    68,    84,    -1,    86,    -1,    -1,    -1,
      -1,    76,    -1,    93,    94,    95,    -1,    82,    98,    -1,
      -1,    -1,   102,    -1,    -1,    -1,    91,   107,    -1,    -1,
      -1,    96,   112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     0,   109,   125,   111,    -1,    -1,   129,
     130,     6,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      15,    16,    17,    18,    19,    20,    21,    22,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      -1,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      57,    -1,    -1,    -1,    -1,    60,    -1,    64,    -1,    66,
      67,    68,    69,    -1,    -1,    72,    -1,    -1,    -1,    76,
      -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,    84,
      -1,    88,    89,    90,    91,    -1,    -1,    -1,    -1,    96,
      97,    -1,    -1,   100,    -1,    10,    11,   104,    -1,    -1,
      -1,   108,   109,    -1,   111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   118,    -1,    -1,   121,    -1,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
     135,   136,    47,    -1,   139,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    -1,    -1,    61,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    11,    -1,    -1,
      -1,    -1,    77,    78,    79,    -1,    10,    11,    -1,    -1,
      -1,    -1,    87,    -1,    -1,    -1,    -1,    -1,    93,    94,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    50,   112,    52,    53,
      54,    -1,   117,    47,    -1,    -1,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    -1,    -1,    61,   133,    -1,
      -1,    65,    -1,    77,    78,    79,    -1,    71,    -1,    -1,
      10,    11,    -1,    77,    78,    79,    -1,    -1,    -1,    93,
      94,    -1,    -1,    87,    -1,    -1,    -1,    -1,    -1,    93,
      94,    -1,    -1,   107,    -1,    99,    -1,    -1,   112,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    47,   112,    -1,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    -1,
      -1,    61,    -1,    -1,    -1,    65,    -1,    -1,    -1,   133,
      -1,    71,    -1,    -1,    -1,    -1,    -1,    77,    78,    79,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    87,    -1,    19,
      20,    21,    22,    93,    94,    -1,    -1,    -1,    -1,    99,
      -1,    31,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,   112,    15,    16,    17,    18,    19,    20,    21,
      22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,
      -1,    -1,    -1,   133,    15,    16,    17,    18,    19,    20,
      21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      31,    15,    16,    17,    18,    19,    20,    21,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    15,
      16,    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    31,    -1,    15,    16,    17,
      18,    19,    20,    21,    22,    -1,   126,   127,   128,   129,
     130,   131,   132,    31,   134,   135,   136,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,    -1,   134,   135,   136,   137,    -1,    -1,    -1,    -1,
      -1,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,    -1,   134,   135,   136,   137,    -1,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
     134,   135,   136,   137,   120,    -1,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,    -1,   134,   135,
     136,   119,    -1,    -1,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,    -1,   134,   135,   136,    15,
      16,    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    31,    15,    16,    17,    18,
      19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    15,    16,    17,    18,    19,    20,    21,
      22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,
      15,    16,    17,    18,    19,    20,    21,    22,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    31,    15,    16,    17,
      18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    15,    16,    17,    18,    19,    20,
      21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      31,    -1,   118,    -1,    -1,    -1,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,    -1,   134,   135,
     136,   120,    -1,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,    -1,   134,   135,   136,    -1,    -1,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,    -1,   134,   135,   136,    -1,    -1,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,    -1,   134,
     135,   136,   120,    -1,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,   132,    -1,   134,   135,   136,    -1,
      -1,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,   132,    -1,   134,   135,   136,    16,    17,    18,    19,
      20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    16,    17,    18,    19,    20,    21,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    17,    18,
      19,    20,    21,    22,    -1,    -1,    -1,    50,    -1,    52,
      53,    54,    31,    17,    18,    19,    20,    21,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    17,    18,
      19,    20,    21,    22,    77,    78,    79,    -1,    -1,    -1,
      -1,    -1,    31,    17,    18,    19,    20,    21,    22,    -1,
      93,    94,    -1,    -1,    -1,    -1,    -1,    31,    17,    18,
      19,    20,    21,    22,   107,    -1,    -1,    -1,    -1,   112,
      -1,    -1,    31,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,    -1,   134,   135,   136,    -1,    -1,   123,
     124,   125,   135,    -1,   128,   129,   130,   131,   132,    -1,
     134,   135,   136,    -1,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,    -1,   134,   135,   136,    -1,    -1,
     124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
     134,   135,   136,    -1,    -1,    -1,   125,   126,   127,   128,
     129,   130,   131,   132,    -1,   134,   135,   136,    -1,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,   132,    -1,
     134,   135,   136,    10,    11,    -1,    -1,   126,   127,   128,
     129,   130,   131,   132,    -1,   134,   135,   136,    17,    18,
      19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    50,    -1,    52,    53,    54,    -1,    -1,
      -1,    -1,    -1,    50,    -1,    52,    53,    54,    55,    56,
      -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      77,    78,    79,    -1,    71,    -1,    -1,    -1,    -1,    -1,
      77,    78,    79,    10,    11,    -1,    93,    94,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1,    -1,
     107,    -1,    -1,    -1,    -1,   112,    -1,    -1,   105,    -1,
     107,    -1,    -1,   110,    -1,   112,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    50,    -1,    52,    53,    54,   135,    -1,
      -1,    -1,    11,    -1,    61,   124,   125,    -1,    -1,   128,
     129,   130,   131,   132,    71,   134,   135,   136,    -1,    -1,
      77,    78,    79,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      50,    -1,    52,    53,    54,    -1,    93,    94,    47,    -1,
      -1,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
     107,    71,    61,   110,    -1,   112,    65,    77,    78,    79,
      -1,    -1,    71,    11,    -1,    -1,    -1,    -1,    77,    78,
      79,    -1,    -1,    93,    94,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    93,    94,    -1,   107,    -1,    -1,
      99,    50,   112,    52,    53,    54,   105,   106,   107,    47,
      11,   110,    50,   112,    52,    53,    54,    55,    56,    -1,
      58,    -1,    -1,    61,    -1,    -1,    -1,    65,    77,    78,
      79,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    77,
      78,    79,    -1,    -1,    93,    94,    47,    -1,    -1,    50,
      -1,    52,    53,    54,    55,    93,    94,    58,   107,    -1,
      61,    99,    -1,   112,    65,    -1,    -1,   105,   106,   107,
      71,    11,   110,    -1,   112,    -1,    77,    78,    79,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      91,    -1,    93,    94,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    -1,    -1,    -1,   105,   106,   107,    47,    11,   110,
      50,   112,    52,    53,    54,    55,    -1,    -1,    58,    -1,
      -1,    61,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    -1,    -1,    -1,    -1,    -1,    77,    78,    79,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,    52,
      53,    54,    55,    93,    94,    -1,    -1,    -1,    61,    99,
      -1,    -1,    65,    -1,    -1,   105,   106,   107,    71,    -1,
     110,    -1,   112,    -1,    77,    78,    79,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      93,    94,    48,    49,    -1,    -1,    99,    -1,    -1,    -1,
      -1,    57,   105,   106,   107,    -1,    -1,   110,    64,   112,
      66,    67,    68,    69,    -1,    -1,    72,    -1,    -1,    -1,
      76,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,    -1,    88,    89,    90,    91,    -1,    -1,    48,    49,
      96,    97,    -1,    -1,   100,    -1,    -1,    57,   104,    -1,
      -1,    -1,   108,   109,    64,   111,    66,    67,    68,    69,
      -1,    -1,    72,   119,    -1,    -1,    76,    -1,    -1,    -1,
      80,    81,    82,    83,    -1,    -1,    -1,    -1,    88,    89,
      90,    91,   138,    -1,    48,    49,    96,    97,    -1,    -1,
     100,    -1,    -1,    57,   104,    -1,    -1,    -1,   108,   109,
      64,   111,    66,    67,    68,    69,    -1,    -1,    72,   119,
      -1,    -1,    76,    -1,    -1,    -1,    80,    81,    82,    83,
      -1,    -1,    -1,    -1,    88,    89,    90,    91,   138,    -1,
      48,    49,    96,    97,    -1,    -1,   100,    -1,    -1,    57,
     104,    -1,    -1,    -1,   108,   109,    64,   111,    66,    67,
      68,    69,    -1,    -1,    72,   119,    -1,    -1,    76,    -1,
      -1,    -1,    80,    81,    82,    83,    -1,    -1,    -1,    -1,
      88,    89,    90,    91,   138,    -1,    48,    49,    96,    97,
      -1,    -1,   100,    -1,    -1,    57,   104,    -1,    -1,    -1,
     108,   109,    64,   111,    66,    67,    68,    69,    -1,    -1,
      72,   119,    -1,    -1,    76,    -1,    -1,    -1,    80,    81,
      82,    83,    -1,    -1,    -1,    -1,    88,    89,    90,    91,
     138,    -1,    48,    49,    96,    97,    -1,    -1,   100,    -1,
      -1,    57,   104,    -1,    -1,    -1,   108,   109,    64,   111,
      66,    67,    68,    69,    -1,    -1,    72,   119,    -1,    -1,
      76,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,    -1,    88,    89,    90,    91,   138,    -1,    48,    49,
      96,    97,    -1,    -1,   100,    -1,    -1,    57,   104,    -1,
      -1,    -1,   108,   109,    64,   111,    66,    67,    68,    69,
      -1,    -1,    72,   119,    -1,    -1,    76,    -1,    -1,    -1,
      80,    81,    82,    83,    -1,    -1,    -1,    -1,    88,    89,
      90,    91,   138,    -1,    -1,    -1,    96,    97,    -1,    50,
     100,    52,    53,    54,   104,    -1,    49,    -1,   108,   109,
      61,   111,    -1,    -1,    57,    -1,    -1,    -1,    -1,   119,
      71,    -1,    -1,    66,    67,    68,    77,    78,    79,    -1,
      -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,   138,    82,
      -1,    -1,    93,    94,    -1,    -1,    -1,    -1,    91,    -1,
      -1,    -1,    -1,    96,    48,    49,   107,    -1,    -1,    -1,
      -1,   112,    -1,    57,    -1,    -1,   109,    -1,   111,    -1,
      64,    -1,    66,    67,    68,    69,    -1,    -1,    72,    -1,
      -1,    -1,    76,   126,   135,    -1,    80,    81,    82,    83,
      -1,    -1,    -1,    -1,    88,    89,    90,    91,    -1,    -1,
      -1,    -1,    96,    97,    -1,    50,   100,    52,    53,    54,
     104,    49,    -1,    -1,   108,   109,    61,   111,    -1,    57,
      -1,    -1,    -1,    49,    -1,    -1,    71,    -1,    66,    67,
      68,    57,    77,    78,    79,    -1,    -1,    -1,    76,    -1,
      66,    67,    68,    -1,    82,    83,    -1,    -1,    93,    94,
      76,    -1,    -1,    91,    -1,    -1,    82,    -1,    96,    -1,
      49,    -1,   107,    -1,    -1,    91,    -1,   112,    57,    -1,
      96,   109,    -1,   111,   100,    -1,    -1,    66,    67,    68,
      -1,    -1,    -1,   109,    -1,   111,    -1,    76,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    -1,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,    -1,   111
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,   114,   115,   116,   142,   143,   234,     3,     4,     5,
       6,     8,     9,    10,    11,    46,    50,    52,    53,    54,
      61,    62,    70,    71,    77,    78,    84,    86,    93,    94,
      95,    98,   102,   107,   112,   125,   129,   130,   133,   135,
     139,   227,   228,   233,    11,    47,    50,    52,    53,    54,
      55,    56,    58,    61,    65,    71,    77,    78,    79,    93,
      94,    99,   105,   106,   107,   110,   112,   193,   196,   197,
     199,   204,   205,   209,   210,   215,   216,   217,   218,     0,
      48,    49,    57,    64,    66,    67,    68,    69,    72,    76,
      80,    81,    82,    83,    88,    89,    90,    91,    96,    97,
     100,   104,   108,   109,   111,   119,   146,   148,   149,   151,
     152,   153,   174,   211,   214,   234,   135,   135,   135,   135,
     135,   135,   135,   126,   135,   135,   135,    11,   105,   195,
     209,   210,   215,   135,   135,   135,   126,   135,   135,   227,
     227,   227,   227,    11,    50,    52,    53,    54,    61,    71,
      77,    78,    93,    94,   107,   112,   196,   225,   227,   227,
      15,    16,    17,    18,    19,    20,    21,    22,    31,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     134,   135,   136,     6,     8,   193,   135,    61,    71,    78,
     216,    78,   216,   216,    10,    11,   232,   216,    12,    16,
      56,   111,   125,   130,   135,   192,   234,   117,   120,   232,
     117,   232,    76,   151,   151,   151,     6,   151,   151,   120,
     150,    83,   151,   135,   135,   151,   117,   232,   120,   120,
     120,   151,   151,   135,   151,   152,   175,   151,   158,    83,
     232,   151,   151,    10,    11,    47,    56,    58,    87,   105,
     117,   133,   163,   194,   197,   199,   204,   209,   210,   215,
     224,   225,   234,   196,   224,   224,   224,   224,   224,   196,
     224,   224,   224,   232,   135,   232,   232,   224,   224,   196,
     196,   224,   224,   137,   118,   137,   227,   227,   227,   227,
     227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
     227,   227,   227,   227,   227,   227,   227,   137,   225,   227,
     192,   227,    71,   130,   192,   192,   192,   192,   192,   192,
     136,   207,   208,   234,    11,   206,   216,   120,   198,   200,
     151,   148,   117,   232,    10,   232,   143,   117,   227,   126,
      56,   163,   194,   232,   135,   135,   193,   135,    56,   193,
     232,   147,   232,   117,   119,   120,   121,   186,   119,   154,
     232,   232,   137,   137,   137,   137,   137,   137,   137,   127,
     137,   137,   137,   224,   137,   137,   137,   127,   137,   137,
     227,   227,   120,   137,   140,   137,   192,   137,   223,   227,
     234,   232,   138,   206,   143,   120,   201,   202,   234,   143,
     117,   118,   118,   138,   212,   118,   137,    10,    11,    55,
      56,   105,   176,   177,   178,   179,   215,   234,   193,   186,
     159,   164,    12,   130,   165,   155,   227,   193,    10,    11,
      12,    16,    56,   111,   125,   130,   190,   234,   143,   135,
     219,   220,   144,   145,   232,   117,   227,    12,    16,    56,
      87,   111,   125,   130,   135,   156,   180,   232,   120,   135,
     137,   135,   227,   135,   140,   118,   121,   138,    88,    89,
      90,   109,   203,   117,   118,   138,   213,    10,   232,   143,
     233,   232,   179,   232,   127,   118,    10,    11,    12,    16,
      56,   111,   125,   130,   135,   191,   234,   160,   161,   180,
       3,     4,     5,     9,    10,    14,    46,    56,    62,    70,
      84,    86,    91,    95,    98,   102,   125,   129,   133,   135,
     139,   182,   183,   189,   193,   229,   230,   233,   234,   130,
     180,   182,   157,   180,   137,   190,   130,   190,   190,   190,
     190,   190,   135,   136,   138,   166,   138,   221,   234,   117,
     118,   135,   117,   187,   188,   227,   234,   119,   130,   180,
     180,     6,    15,    16,    17,    18,    19,    20,    21,    22,
      31,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    60,    84,   118,   121,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   135,   136,
     139,   172,   180,   180,   180,   180,   120,   121,   135,   136,
     185,   186,   234,   206,   225,   225,   182,   227,   105,   109,
     210,   231,   232,   109,   231,   109,   231,    88,    89,    90,
     143,   203,   143,   118,   137,   118,   138,   137,   121,   191,
     121,   152,   173,   174,   178,   130,   191,   191,   191,   191,
     191,   191,   121,   136,   184,   234,   162,   180,   185,   186,
     135,    91,   193,   126,   195,   189,   135,   126,   227,   227,
     227,   196,   225,   227,   137,    14,   118,   191,    15,    16,
      17,    18,    19,    20,    21,    22,    31,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   134,   135,
     136,   180,   120,   137,   137,   185,   186,   135,   190,   169,
     223,   182,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    65,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    82,    84,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   101,   102,   103,   104,   105,   106,   107,
     109,   110,   111,   112,   113,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   139,   140,   222,   219,
     145,   224,   187,   138,   118,   180,    10,   137,   140,   137,
       4,   227,   181,   223,   118,   137,   137,   137,   118,   232,
     231,   232,   231,   231,   231,   231,   231,   138,   138,    10,
     119,   232,   196,   184,   196,   191,   137,    46,    62,    95,
      98,   125,   129,   130,   133,   135,   139,   226,   228,   223,
     185,   186,   118,   196,   193,   191,   196,   135,   196,   196,
     137,   137,    56,   171,   234,    14,   189,   121,   185,   227,
     227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
     227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
     137,   225,   227,   137,   135,   171,   118,   170,   182,   140,
     137,   221,   138,   137,   138,   117,   227,   182,   140,   156,
     171,   137,   137,   135,   135,   126,   135,   126,   226,   226,
     226,   226,   196,   225,   226,    15,    16,    17,    18,    19,
      20,    21,    22,    31,   122,   123,   124,   125,   128,   129,
     130,   131,   132,   134,   135,   136,   140,   118,   161,   137,
     191,   185,   127,   224,   137,   127,   227,    85,   101,   227,
     120,   137,   140,   135,   167,   157,   182,   137,   171,   138,
     187,   137,   119,   119,   182,   196,   196,   196,   196,   137,
     137,   226,   226,   226,   226,   226,   226,   226,   226,   226,
     226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
     137,   225,   227,   162,   185,   135,   137,   135,   135,   227,
     168,   182,   137,   171,   138,   171,   137,   137,   127,   137,
     127,   226,   120,   137,   140,   225,   225,   137,   232,   182,
     137,   171,   171,   135,   135,   226,   137,   137,   137,   137,
     171,   225,   225,   171,   137,   137
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (&yylloc, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))

/* Error token number */
#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (YYID (N))                                                     \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (YYID (0))
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

__attribute__((__unused__))
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
#else
static unsigned
yy_location_print_ (yyo, yylocp)
    FILE *yyo;
    YYLTYPE const * const yylocp;
#endif
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += fprintf (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += fprintf (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += fprintf (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += fprintf (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += fprintf (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */
#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, &yylloc, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, &yylloc)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
        break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULL;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
        break;
    }
}




/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;


#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
static YYSTYPE yyval_default;
# define YY_INITIAL_VALUE(Value) = Value
#endif
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc = yyloc_default;


    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 3:
/* Line 1792 of yacc.c  */
#line 406 "dtool/src/cppparser/cppBison.yxx"
    {
  current_expr = (yyvsp[(2) - (2)].u.expr);
}
    break;

  case 4:
/* Line 1792 of yacc.c  */
#line 410 "dtool/src/cppparser/cppBison.yxx"
    {
  current_type = (yyvsp[(2) - (2)].u.type);
}
    break;

  case 10:
/* Line 1792 of yacc.c  */
#line 428 "dtool/src/cppparser/cppBison.yxx"
    {
  delete (yyvsp[(3) - (4)].u.expr);
}
    break;

  case 11:
/* Line 1792 of yacc.c  */
#line 440 "dtool/src/cppparser/cppBison.yxx"
    {
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) |
                     ((yyvsp[(1) - (2)].u.integer) & CPPInstance::SC_c_binding));
}
    break;

  case 12:
/* Line 1792 of yacc.c  */
#line 445 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 20:
/* Line 1792 of yacc.c  */
#line 459 "dtool/src/cppparser/cppBison.yxx"
    {
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = (yylsp[(1) - (1)]);
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
    break;

  case 21:
/* Line 1792 of yacc.c  */
#line 472 "dtool/src/cppparser/cppBison.yxx"
    {
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", (yylsp[(1) - (1)]));
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
    break;

  case 22:
/* Line 1792 of yacc.c  */
#line 481 "dtool/src/cppparser/cppBison.yxx"
    {
  current_scope->set_current_vis(V_published);
}
    break;

  case 23:
/* Line 1792 of yacc.c  */
#line 485 "dtool/src/cppparser/cppBison.yxx"
    {
  if (publish_nest_level > 0) {
    current_scope->set_current_vis(V_published);
  } else {
    current_scope->set_current_vis(V_public);
  }
}
    break;

  case 24:
/* Line 1792 of yacc.c  */
#line 493 "dtool/src/cppparser/cppBison.yxx"
    {
  current_scope->set_current_vis(V_protected);
}
    break;

  case 25:
/* Line 1792 of yacc.c  */
#line 497 "dtool/src/cppparser/cppBison.yxx"
    {
  current_scope->set_current_vis(V_private);
}
    break;

  case 26:
/* Line 1792 of yacc.c  */
#line 501 "dtool/src/cppparser/cppBison.yxx"
    {

  CPPDeclaration *getter = (yyvsp[(5) - (7)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(5) - (7)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (7)]));
  }

  CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[(3) - (7)].u.identifier), getter->as_function_group(), NULL, current_scope, (yylsp[(1) - (7)]).file);
  current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (7)]));
}
    break;

  case 27:
/* Line 1792 of yacc.c  */
#line 512 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *getter = (yyvsp[(5) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(5) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (9)]));

  } else {
    CPPDeclaration *setter = (yyvsp[(7) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    CPPFunctionGroup *setter_func = NULL;

    if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[(7) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (9)]));
    } else {
      setter_func = setter->as_function_group();
    }

    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[(3) - (9)].u.identifier), getter->as_function_group(),
                                                         setter_func, current_scope, (yylsp[(1) - (9)]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (9)]));
  }
}
    break;

  case 28:
/* Line 1792 of yacc.c  */
#line 533 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPMakeSeq *make_seq = new CPPMakeSeq((yyvsp[(3) - (9)].u.identifier)->get_simple_name(), (yyvsp[(5) - (9)].u.identifier)->get_simple_name(), (yyvsp[(7) - (9)].u.identifier)->get_simple_name(), (yylsp[(1) - (9)]).file);
  current_scope->add_declaration(make_seq, global_scope, current_lexer, (yylsp[(1) - (9)]));
}
    break;

  case 29:
/* Line 1792 of yacc.c  */
#line 538 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPExpression::Result result = (yyvsp[(3) - (6)].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[(3) - (6)]));
  } else if (!result.as_boolean()) {
    stringstream str;
    str << *(yyvsp[(5) - (6)].u.expr);
    yywarning("static_assert failed: " + str.str(), (yylsp[(3) - (6)]));
  }
}
    break;

  case 30:
/* Line 1792 of yacc.c  */
#line 549 "dtool/src/cppparser/cppBison.yxx"
    {
  // This alternative version of static_assert was introduced in C++17.
  CPPExpression::Result result = (yyvsp[(3) - (4)].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[(3) - (4)]));
  } else if (!result.as_boolean()) {
    yywarning("static_assert failed", (yylsp[(3) - (4)]));
  }
}
    break;

  case 31:
/* Line 1792 of yacc.c  */
#line 562 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
    break;

  case 32:
/* Line 1792 of yacc.c  */
#line 568 "dtool/src/cppparser/cppBison.yxx"
    {
  delete current_scope;
  pop_scope();
}
    break;

  case 33:
/* Line 1792 of yacc.c  */
#line 577 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = 0;
}
    break;

  case 34:
/* Line 1792 of yacc.c  */
#line 581 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_extern;
}
    break;

  case 35:
/* Line 1792 of yacc.c  */
#line 585 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(3) - (3)].u.integer) | (int)CPPInstance::SC_extern;
  if ((yyvsp[(2) - (3)].str) == "C") {
    (yyval.u.integer) |= (int)CPPInstance::SC_c_binding;
  } else if ((yyvsp[(2) - (3)].str) == "C++") {
    (yyval.u.integer) &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + (yyvsp[(2) - (3)].str) + "\"", (yylsp[(2) - (3)]));
  }
}
    break;

  case 36:
/* Line 1792 of yacc.c  */
#line 596 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_static;
}
    break;

  case 37:
/* Line 1792 of yacc.c  */
#line 600 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_inline;
}
    break;

  case 38:
/* Line 1792 of yacc.c  */
#line 604 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_virtual;
}
    break;

  case 39:
/* Line 1792 of yacc.c  */
#line 608 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_explicit;
}
    break;

  case 40:
/* Line 1792 of yacc.c  */
#line 612 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_register;
}
    break;

  case 41:
/* Line 1792 of yacc.c  */
#line 616 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_volatile;
}
    break;

  case 42:
/* Line 1792 of yacc.c  */
#line 620 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_mutable;
}
    break;

  case 43:
/* Line 1792 of yacc.c  */
#line 624 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_constexpr;
}
    break;

  case 44:
/* Line 1792 of yacc.c  */
#line 628 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_blocking;
}
    break;

  case 45:
/* Line 1792 of yacc.c  */
#line 632 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_extension;
}
    break;

  case 46:
/* Line 1792 of yacc.c  */
#line 639 "dtool/src/cppparser/cppBison.yxx"
    {
  /* multiple_var_declaration adds itself to the scope. */
}
    break;

  case 47:
/* Line 1792 of yacc.c  */
#line 643 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration((yyvsp[(2) - (3)].u.decl), global_scope, current_lexer, (yylsp[(2) - (3)]));
}
    break;

  case 48:
/* Line 1792 of yacc.c  */
#line 652 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(2) - (3)].u.instance) != (CPPInstance *)NULL) {
    (yyvsp[(2) - (3)].u.instance)->_storage_class |= (current_storage_class | (yyvsp[(1) - (3)].u.integer));
    current_scope->add_declaration((yyvsp[(2) - (3)].u.instance), global_scope, current_lexer, (yylsp[(2) - (3)]));
    (yyvsp[(2) - (3)].u.instance)->set_initializer((yyvsp[(3) - (3)].u.expr));
  }
}
    break;

  case 49:
/* Line 1792 of yacc.c  */
#line 663 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[(2) - (2)].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type();
  }
  push_storage_class((yyvsp[(1) - (2)].u.integer));
}
    break;

  case 50:
/* Line 1792 of yacc.c  */
#line 674 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 51:
/* Line 1792 of yacc.c  */
#line 678 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  current_type = (yyvsp[(3) - (3)].u.type);
  push_storage_class((yyvsp[(1) - (3)].u.integer));
}
    break;

  case 52:
/* Line 1792 of yacc.c  */
#line 685 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 53:
/* Line 1792 of yacc.c  */
#line 696 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (2)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (2)]).file);
  inst->set_initializer((yyvsp[(2) - (2)].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(1) - (2)]));
}
    break;

  case 54:
/* Line 1792 of yacc.c  */
#line 704 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (4)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (4)]).file);
  inst->set_initializer((yyvsp[(2) - (4)].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(1) - (4)]));
}
    break;

  case 55:
/* Line 1792 of yacc.c  */
#line 715 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(1) - (2)].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (2)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (2)]).file);
  inst->set_initializer((yyvsp[(2) - (2)].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(1) - (2)]));
}
    break;

  case 56:
/* Line 1792 of yacc.c  */
#line 724 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(1) - (4)].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (4)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (4)]).file);
  inst->set_initializer((yyvsp[(2) - (4)].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(1) - (4)]));
}
    break;

  case 57:
/* Line 1792 of yacc.c  */
#line 737 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[(2) - (2)].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type();
  }
  push_storage_class((yyvsp[(1) - (2)].u.integer));
}
    break;

  case 58:
/* Line 1792 of yacc.c  */
#line 748 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 59:
/* Line 1792 of yacc.c  */
#line 752 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  current_type = (yyvsp[(3) - (3)].u.type);
  push_storage_class((yyvsp[(1) - (3)].u.integer));
}
    break;

  case 60:
/* Line 1792 of yacc.c  */
#line 759 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 61:
/* Line 1792 of yacc.c  */
#line 763 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(2) - (3)].u.instance) != (CPPDeclaration *)NULL) {
    CPPInstance *inst = (yyvsp[(2) - (3)].u.instance)->as_instance();
    if (inst != (CPPInstance *)NULL) {
      inst->_storage_class |= (current_storage_class | (yyvsp[(1) - (3)].u.integer));
      current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(2) - (3)]));
      CPPTypedefType *typedef_type = new CPPTypedefType(inst->_type, inst->_ident, current_scope);
      current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(2) - (3)]));
    }
  }
}
    break;

  case 62:
/* Line 1792 of yacc.c  */
#line 778 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[(1) - (2)].u.inst_ident), current_scope, (yylsp[(1) - (2)]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(1) - (2)]));
}
    break;

  case 63:
/* Line 1792 of yacc.c  */
#line 784 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[(1) - (4)].u.inst_ident), current_scope, (yylsp[(1) - (4)]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(1) - (4)]));
}
    break;

  case 64:
/* Line 1792 of yacc.c  */
#line 793 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(1) - (2)].u.inst_ident)->add_modifier(IIT_const);
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[(1) - (2)].u.inst_ident), current_scope, (yylsp[(1) - (2)]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(1) - (2)]));
}
    break;

  case 65:
/* Line 1792 of yacc.c  */
#line 800 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(1) - (4)].u.inst_ident)->add_modifier(IIT_const);
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[(1) - (4)].u.inst_ident), current_scope, (yylsp[(1) - (4)]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(1) - (4)]));
}
    break;

  case 66:
/* Line 1792 of yacc.c  */
#line 812 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(1) - (2)].u.identifier)->get_scope(current_scope, global_scope));
}
    break;

  case 67:
/* Line 1792 of yacc.c  */
#line 816 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type;
  if ((yyvsp[(1) - (6)].u.identifier)->get_simple_name() == current_scope->get_simple_name() ||
      (yyvsp[(1) - (6)].u.identifier)->get_simple_name() == string("~") + current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    yywarning("function has no return type, assuming int", (yylsp[(1) - (6)]));
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }
  pop_scope();

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[(1) - (6)].u.identifier));
  ii->add_func_modifier((yyvsp[(4) - (6)].u.param_list), (yyvsp[(6) - (6)].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (6)]).file);
}
    break;

  case 68:
/* Line 1792 of yacc.c  */
#line 836 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(1) - (2)].u.identifier)->get_scope(current_scope, global_scope));
}
    break;

  case 69:
/* Line 1792 of yacc.c  */
#line 840 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  CPPType *type;
  if ((yyvsp[(1) - (6)].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[(1) - (6)].u.identifier));
  ii->add_func_modifier((yyvsp[(4) - (6)].u.param_list), (yyvsp[(6) - (6)].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (6)]).file);
}
    break;

  case 70:
/* Line 1792 of yacc.c  */
#line 860 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(2) - (3)].u.identifier)->get_scope(current_scope, global_scope));
}
    break;

  case 71:
/* Line 1792 of yacc.c  */
#line 864 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  if ((yyvsp[(2) - (7)].u.identifier)->is_scoped()) {
    yyerror("Invalid destructor name: ~" + (yyvsp[(2) - (7)].u.identifier)->get_fully_scoped_name(), (yylsp[(2) - (7)]));
  } else {
    CPPIdentifier *ident =
      new CPPIdentifier("~" + (yyvsp[(2) - (7)].u.identifier)->get_simple_name(), (yylsp[(2) - (7)]));
    delete (yyvsp[(2) - (7)].u.identifier);

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);

    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier((yyvsp[(5) - (7)].u.param_list), (yyvsp[(7) - (7)].u.integer));

    (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(2) - (7)]).file);
  }
}
    break;

  case 72:
/* Line 1792 of yacc.c  */
#line 890 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(4) - (6)].u.inst_ident)->get_scope(current_scope, global_scope));
}
    break;

  case 73:
/* Line 1792 of yacc.c  */
#line 894 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  CPPType *type = (yyvsp[(1) - (10)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (10)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (10)]));
  }
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[(4) - (10)].u.inst_ident);
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier((yyvsp[(8) - (10)].u.param_list), (yyvsp[(10) - (10)].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (10)]).file);
}
    break;

  case 74:
/* Line 1792 of yacc.c  */
#line 908 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(5) - (7)].u.inst_ident)->get_scope(current_scope, global_scope));
}
    break;

  case 75:
/* Line 1792 of yacc.c  */
#line 912 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  CPPType *type = (yyvsp[(1) - (11)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (11)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (11)]));
  }
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[(5) - (11)].u.inst_ident);
  ii->add_scoped_pointer_modifier((yyvsp[(3) - (11)].u.identifier));
  ii->add_func_modifier((yyvsp[(9) - (11)].u.param_list), (yyvsp[(11) - (11)].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (11)]).file);
}
    break;

  case 76:
/* Line 1792 of yacc.c  */
#line 928 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (4)].u.identifier) != NULL) {
    push_scope((yyvsp[(1) - (4)].u.identifier)->get_scope(current_scope, global_scope));
  }
}
    break;

  case 77:
/* Line 1792 of yacc.c  */
#line 934 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (8)].u.identifier) != NULL) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give typecast operators the name "operator typecast <name>",
  // where <name> is a simple name of the type to be typecast.  Use
  // the method's return type to determine the full type description.
  string name = "operator typecast " + (yyvsp[(2) - (8)].u.type)->get_simple_name();
  CPPIdentifier *ident = (yyvsp[(1) - (8)].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier(name, (yylsp[(2) - (8)]));
  } else {
    ident->add_name(name);
  }
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[(2) - (8)].u.type), (yyvsp[(3) - (8)].u.inst_ident), 0, (yylsp[(3) - (8)]).file), ident, (yyvsp[(6) - (8)].u.param_list), (yyvsp[(8) - (8)].u.integer));
}
    break;

  case 78:
/* Line 1792 of yacc.c  */
#line 959 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (5)].u.identifier) != NULL) {
    push_scope((yyvsp[(1) - (5)].u.identifier)->get_scope(current_scope, global_scope));
  }
}
    break;

  case 79:
/* Line 1792 of yacc.c  */
#line 965 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (9)].u.identifier) != NULL) {
    pop_scope();
  }

  CPPIdentifier *ident = (yyvsp[(1) - (9)].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator typecast", (yylsp[(4) - (9)]));
  } else {
    ident->add_name("operator typecast");
  }
  (yyvsp[(4) - (9)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[(3) - (9)].u.type), (yyvsp[(4) - (9)].u.inst_ident), 0, (yylsp[(4) - (9)]).file), ident, (yyvsp[(7) - (9)].u.param_list), (yyvsp[(9) - (9)].u.integer));
}
    break;

  case 80:
/* Line 1792 of yacc.c  */
#line 985 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *decl =
    (yyvsp[(1) - (1)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != (CPPDeclaration *)NULL) {
    (yyval.u.instance) = decl->as_instance();
  } else {
    (yyval.u.instance) = (CPPInstance *)NULL;
  }
}
    break;

  case 81:
/* Line 1792 of yacc.c  */
#line 998 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = 0;
}
    break;

  case 82:
/* Line 1792 of yacc.c  */
#line 1002 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (int)CPPFunctionType::F_const_method;
}
    break;

  case 83:
/* Line 1792 of yacc.c  */
#line 1006 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (int)CPPFunctionType::F_noexcept;
}
    break;

  case 84:
/* Line 1792 of yacc.c  */
#line 1010 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (4)].u.integer);
}
    break;

  case 85:
/* Line 1792 of yacc.c  */
#line 1014 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (5)].u.integer);
}
    break;

  case 86:
/* Line 1792 of yacc.c  */
#line 1021 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "!";
}
    break;

  case 87:
/* Line 1792 of yacc.c  */
#line 1025 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "~";
}
    break;

  case 88:
/* Line 1792 of yacc.c  */
#line 1029 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "*";
}
    break;

  case 89:
/* Line 1792 of yacc.c  */
#line 1033 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "/";
}
    break;

  case 90:
/* Line 1792 of yacc.c  */
#line 1037 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "%";
}
    break;

  case 91:
/* Line 1792 of yacc.c  */
#line 1041 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "+";
}
    break;

  case 92:
/* Line 1792 of yacc.c  */
#line 1045 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "-";
}
    break;

  case 93:
/* Line 1792 of yacc.c  */
#line 1049 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "|";
}
    break;

  case 94:
/* Line 1792 of yacc.c  */
#line 1053 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "&";
}
    break;

  case 95:
/* Line 1792 of yacc.c  */
#line 1057 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "^";
}
    break;

  case 96:
/* Line 1792 of yacc.c  */
#line 1061 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "||";
}
    break;

  case 97:
/* Line 1792 of yacc.c  */
#line 1065 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "&&";
}
    break;

  case 98:
/* Line 1792 of yacc.c  */
#line 1069 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "==";
}
    break;

  case 99:
/* Line 1792 of yacc.c  */
#line 1073 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "!=";
}
    break;

  case 100:
/* Line 1792 of yacc.c  */
#line 1077 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<=";
}
    break;

  case 101:
/* Line 1792 of yacc.c  */
#line 1081 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">=";
}
    break;

  case 102:
/* Line 1792 of yacc.c  */
#line 1085 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<";
}
    break;

  case 103:
/* Line 1792 of yacc.c  */
#line 1089 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">";
}
    break;

  case 104:
/* Line 1792 of yacc.c  */
#line 1093 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<<";
}
    break;

  case 105:
/* Line 1792 of yacc.c  */
#line 1097 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">>";
}
    break;

  case 106:
/* Line 1792 of yacc.c  */
#line 1101 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "=";
}
    break;

  case 107:
/* Line 1792 of yacc.c  */
#line 1105 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ",";
}
    break;

  case 108:
/* Line 1792 of yacc.c  */
#line 1109 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "++";
}
    break;

  case 109:
/* Line 1792 of yacc.c  */
#line 1113 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "--";
}
    break;

  case 110:
/* Line 1792 of yacc.c  */
#line 1117 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "*=";
}
    break;

  case 111:
/* Line 1792 of yacc.c  */
#line 1121 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "/=";
}
    break;

  case 112:
/* Line 1792 of yacc.c  */
#line 1125 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "%=";
}
    break;

  case 113:
/* Line 1792 of yacc.c  */
#line 1129 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "+=";
}
    break;

  case 114:
/* Line 1792 of yacc.c  */
#line 1133 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "-=";
}
    break;

  case 115:
/* Line 1792 of yacc.c  */
#line 1137 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "|=";
}
    break;

  case 116:
/* Line 1792 of yacc.c  */
#line 1141 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "&=";
}
    break;

  case 117:
/* Line 1792 of yacc.c  */
#line 1145 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "^=";
}
    break;

  case 118:
/* Line 1792 of yacc.c  */
#line 1149 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<<=";
}
    break;

  case 119:
/* Line 1792 of yacc.c  */
#line 1153 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">>=";
}
    break;

  case 120:
/* Line 1792 of yacc.c  */
#line 1157 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "->";
}
    break;

  case 121:
/* Line 1792 of yacc.c  */
#line 1161 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "[]";
}
    break;

  case 122:
/* Line 1792 of yacc.c  */
#line 1165 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "()";
}
    break;

  case 123:
/* Line 1792 of yacc.c  */
#line 1169 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "new";
}
    break;

  case 124:
/* Line 1792 of yacc.c  */
#line 1173 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "delete";
}
    break;

  case 127:
/* Line 1792 of yacc.c  */
#line 1185 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope(new CPPTemplateScope(current_scope));
}
    break;

  case 128:
/* Line 1792 of yacc.c  */
#line 1189 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
}
    break;

  case 132:
/* Line 1792 of yacc.c  */
#line 1202 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[(1) - (1)].u.decl));
}
    break;

  case 133:
/* Line 1792 of yacc.c  */
#line 1208 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[(3) - (3)].u.decl));
}
    break;

  case 134:
/* Line 1792 of yacc.c  */
#line 1217 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 135:
/* Line 1792 of yacc.c  */
#line 1221 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[(2) - (4)].u.identifier), (yyvsp[(4) - (4)].u.type)));
}
    break;

  case 136:
/* Line 1792 of yacc.c  */
#line 1225 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 137:
/* Line 1792 of yacc.c  */
#line 1229 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[(2) - (4)].u.identifier), (yyvsp[(4) - (4)].u.type)));
}
    break;

  case 138:
/* Line 1792 of yacc.c  */
#line 1233 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance((yyvsp[(1) - (3)].u.type), (yyvsp[(2) - (3)].u.inst_ident), 0, (yylsp[(2) - (3)]).file);
  inst->set_initializer((yyvsp[(3) - (3)].u.expr));
  (yyval.u.decl) = inst;
}
    break;

  case 139:
/* Line 1792 of yacc.c  */
#line 1239 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(3) - (4)].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[(2) - (4)].u.type), (yyvsp[(3) - (4)].u.inst_ident), 0, (yylsp[(3) - (4)]).file);
  inst->set_initializer((yyvsp[(4) - (4)].u.expr));
  (yyval.u.decl) = inst;
}
    break;

  case 140:
/* Line 1792 of yacc.c  */
#line 1249 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 141:
/* Line 1792 of yacc.c  */
#line 1253 "dtool/src/cppparser/cppBison.yxx"
    {
  yywarning("Not a type: " + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
    break;

  case 142:
/* Line 1792 of yacc.c  */
#line 1258 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  }
  assert((yyval.u.type) != NULL);
}
    break;

  case 143:
/* Line 1792 of yacc.c  */
#line 1270 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 144:
/* Line 1792 of yacc.c  */
#line 1274 "dtool/src/cppparser/cppBison.yxx"
    {
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = (yyvsp[(1) - (2)].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator "+(yyvsp[(2) - (2)].str), (yylsp[(2) - (2)]));
  } else {
    ident->_names.push_back("operator "+(yyvsp[(2) - (2)].str));
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
    break;

  case 145:
/* Line 1792 of yacc.c  */
#line 1288 "dtool/src/cppparser/cppBison.yxx"
    {
  // A C++11 literal operator.
  if (!(yyvsp[(2) - (3)].str).empty()) {
    yyerror("expected empty string", (yylsp[(2) - (3)]));
  }
  CPPIdentifier *ident = (yyvsp[(1) - (3)].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator \"\" "+(yyvsp[(3) - (3)].u.identifier)->get_simple_name(), (yylsp[(3) - (3)]));
  } else {
    ident->_names.push_back("operator \"\" "+(yyvsp[(3) - (3)].u.identifier)->get_simple_name());
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
    break;

  case 146:
/* Line 1792 of yacc.c  */
#line 1303 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 147:
/* Line 1792 of yacc.c  */
#line 1308 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
    break;

  case 148:
/* Line 1792 of yacc.c  */
#line 1313 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 149:
/* Line 1792 of yacc.c  */
#line 1318 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 150:
/* Line 1792 of yacc.c  */
#line 1323 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 151:
/* Line 1792 of yacc.c  */
#line 1328 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 152:
/* Line 1792 of yacc.c  */
#line 1333 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 153:
/* Line 1792 of yacc.c  */
#line 1338 "dtool/src/cppparser/cppBison.yxx"
    {
  // bitfield definition.  We ignore the bitfield for now.
  (yyval.u.inst_ident) = (yyvsp[(1) - (3)].u.inst_ident);
}
    break;

  case 154:
/* Line 1792 of yacc.c  */
#line 1343 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
    break;

  case 155:
/* Line 1792 of yacc.c  */
#line 1348 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(1) - (2)].u.inst_ident)->get_scope(current_scope, global_scope));
}
    break;

  case 156:
/* Line 1792 of yacc.c  */
#line 1352 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  (yyval.u.inst_ident) = (yyvsp[(1) - (6)].u.inst_ident);
  if ((yyvsp[(4) - (6)].u.param_list)->is_parameter_expr() && (yyvsp[(6) - (6)].u.integer) == 0) {
    // Oops, this must have been an instance declaration with a
    // parameter list, not a function prototype.
    (yyval.u.inst_ident)->add_initializer_modifier((yyvsp[(4) - (6)].u.param_list));

  } else {
    // This was (probably) a function prototype.
    (yyval.u.inst_ident)->add_func_modifier((yyvsp[(4) - (6)].u.param_list), (yyvsp[(6) - (6)].u.integer));
  }
}
    break;

  case 157:
/* Line 1792 of yacc.c  */
#line 1370 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
}
    break;

  case 158:
/* Line 1792 of yacc.c  */
#line 1374 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 159:
/* Line 1792 of yacc.c  */
#line 1379 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (1)].u.param_list);
}
    break;

  case 160:
/* Line 1792 of yacc.c  */
#line 1383 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (3)].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 161:
/* Line 1792 of yacc.c  */
#line 1388 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (2)].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 162:
/* Line 1792 of yacc.c  */
#line 1396 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[(1) - (1)].u.instance));
}
    break;

  case 163:
/* Line 1792 of yacc.c  */
#line 1401 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (3)].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[(3) - (3)].u.instance));
}
    break;

  case 164:
/* Line 1792 of yacc.c  */
#line 1409 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 165:
/* Line 1792 of yacc.c  */
#line 1413 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (2)].u.expr);
}
    break;

  case 166:
/* Line 1792 of yacc.c  */
#line 1420 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 167:
/* Line 1792 of yacc.c  */
#line 1424 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (2)].u.expr);
}
    break;

  case 168:
/* Line 1792 of yacc.c  */
#line 1431 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 169:
/* Line 1792 of yacc.c  */
#line 1435 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 170:
/* Line 1792 of yacc.c  */
#line 1439 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 171:
/* Line 1792 of yacc.c  */
#line 1443 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 172:
/* Line 1792 of yacc.c  */
#line 1447 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 176:
/* Line 1792 of yacc.c  */
#line 1460 "dtool/src/cppparser/cppBison.yxx"
    {
}
    break;

  case 180:
/* Line 1792 of yacc.c  */
#line 1469 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.instance) = new CPPInstance((yyvsp[(1) - (3)].u.type), (yyvsp[(2) - (3)].u.inst_ident), 0, (yylsp[(2) - (3)]).file);
  (yyval.u.instance)->set_initializer((yyvsp[(3) - (3)].u.expr));
}
    break;

  case 181:
/* Line 1792 of yacc.c  */
#line 1474 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(3) - (4)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[(2) - (4)].u.type), (yyvsp[(3) - (4)].u.inst_ident), 0, (yylsp[(3) - (4)]).file);
  (yyval.u.instance)->set_initializer((yyvsp[(4) - (4)].u.expr));
}
    break;

  case 182:
/* Line 1792 of yacc.c  */
#line 1480 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(4) - (5)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[(3) - (5)].u.type), (yyvsp[(4) - (5)].u.inst_ident), 0, (yylsp[(3) - (5)]).file);
  (yyval.u.instance)->set_initializer((yyvsp[(5) - (5)].u.expr));
}
    break;

  case 183:
/* Line 1792 of yacc.c  */
#line 1486 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.instance) = (yyvsp[(2) - (2)].u.instance);
}
    break;

  case 184:
/* Line 1792 of yacc.c  */
#line 1490 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_parameter));
  (yyval.u.instance) = new CPPInstance(type, "expr");
  (yyval.u.instance)->set_initializer((yyvsp[(1) - (1)].u.expr));
}
    break;

  case 185:
/* Line 1792 of yacc.c  */
#line 1500 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 186:
/* Line 1792 of yacc.c  */
#line 1504 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 187:
/* Line 1792 of yacc.c  */
#line 1508 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 188:
/* Line 1792 of yacc.c  */
#line 1512 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 189:
/* Line 1792 of yacc.c  */
#line 1517 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
    break;

  case 190:
/* Line 1792 of yacc.c  */
#line 1522 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 191:
/* Line 1792 of yacc.c  */
#line 1527 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 192:
/* Line 1792 of yacc.c  */
#line 1532 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 193:
/* Line 1792 of yacc.c  */
#line 1537 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 194:
/* Line 1792 of yacc.c  */
#line 1542 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 195:
/* Line 1792 of yacc.c  */
#line 1550 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 196:
/* Line 1792 of yacc.c  */
#line 1554 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 197:
/* Line 1792 of yacc.c  */
#line 1558 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 198:
/* Line 1792 of yacc.c  */
#line 1562 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 199:
/* Line 1792 of yacc.c  */
#line 1567 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
    break;

  case 200:
/* Line 1792 of yacc.c  */
#line 1572 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 201:
/* Line 1792 of yacc.c  */
#line 1577 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 202:
/* Line 1792 of yacc.c  */
#line 1582 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 203:
/* Line 1792 of yacc.c  */
#line 1587 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 204:
/* Line 1792 of yacc.c  */
#line 1592 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 205:
/* Line 1792 of yacc.c  */
#line 1597 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (7)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[(5) - (7)].u.param_list), (yyvsp[(7) - (7)].u.integer));
}
    break;

  case 206:
/* Line 1792 of yacc.c  */
#line 1603 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
    break;

  case 207:
/* Line 1792 of yacc.c  */
#line 1611 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 208:
/* Line 1792 of yacc.c  */
#line 1615 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 209:
/* Line 1792 of yacc.c  */
#line 1620 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
    break;

  case 210:
/* Line 1792 of yacc.c  */
#line 1625 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 211:
/* Line 1792 of yacc.c  */
#line 1630 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 212:
/* Line 1792 of yacc.c  */
#line 1635 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 213:
/* Line 1792 of yacc.c  */
#line 1640 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 214:
/* Line 1792 of yacc.c  */
#line 1645 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 215:
/* Line 1792 of yacc.c  */
#line 1650 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (7)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[(5) - (7)].u.param_list), (yyvsp[(7) - (7)].u.integer));
}
    break;

  case 216:
/* Line 1792 of yacc.c  */
#line 1659 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 217:
/* Line 1792 of yacc.c  */
#line 1663 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  }
  assert((yyval.u.type) != NULL);
}
    break;

  case 218:
/* Line 1792 of yacc.c  */
#line 1671 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 219:
/* Line 1792 of yacc.c  */
#line 1675 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.struct_type));
}
    break;

  case 220:
/* Line 1792 of yacc.c  */
#line 1679 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.struct_type));
}
    break;

  case 221:
/* Line 1792 of yacc.c  */
#line 1683 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.enum_type));
}
    break;

  case 222:
/* Line 1792 of yacc.c  */
#line 1687 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 223:
/* Line 1792 of yacc.c  */
#line 1703 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (4)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (4)].u.extension_enum), (yyvsp[(2) - (4)].u.identifier), current_scope, (yylsp[(1) - (4)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (4)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 224:
/* Line 1792 of yacc.c  */
#line 1719 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(3) - (4)].u.expr)->determine_type();
  if ((yyval.u.type) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[(3) - (4)].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[(3) - (4)]));
  }
}
    break;

  case 225:
/* Line 1792 of yacc.c  */
#line 1728 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = new CPPSimpleType(CPPSimpleType::T_auto);
}
    break;

  case 226:
/* Line 1792 of yacc.c  */
#line 1735 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 227:
/* Line 1792 of yacc.c  */
#line 1739 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.decl) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  }
  assert((yyval.u.decl) != NULL);
}
    break;

  case 228:
/* Line 1792 of yacc.c  */
#line 1747 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 229:
/* Line 1792 of yacc.c  */
#line 1751 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[(1) - (1)].u.struct_type));
}
    break;

  case 230:
/* Line 1792 of yacc.c  */
#line 1755 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[(1) - (1)].u.struct_type)));
}
    break;

  case 231:
/* Line 1792 of yacc.c  */
#line 1759 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[(1) - (1)].u.enum_type)));
}
    break;

  case 232:
/* Line 1792 of yacc.c  */
#line 1763 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
    break;

  case 233:
/* Line 1792 of yacc.c  */
#line 1779 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (4)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (4)].u.extension_enum), (yyvsp[(2) - (4)].u.identifier), current_scope, (yylsp[(1) - (4)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (4)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
    break;

  case 234:
/* Line 1792 of yacc.c  */
#line 1795 "dtool/src/cppparser/cppBison.yxx"
    {
  yywarning(string("C++ does not permit forward declaration of untyped enum ") + (yyvsp[(2) - (2)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (2)]));

  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
    break;

  case 235:
/* Line 1792 of yacc.c  */
#line 1813 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = (yyvsp[(3) - (4)].u.expr)->determine_type();
  if ((yyval.u.decl) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[(3) - (4)].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[(3) - (4)]));
  }
}
    break;

  case 236:
/* Line 1792 of yacc.c  */
#line 1822 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = new CPPSimpleType(CPPSimpleType::T_auto);
}
    break;

  case 237:
/* Line 1792 of yacc.c  */
#line 1829 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 238:
/* Line 1792 of yacc.c  */
#line 1833 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  }
  assert((yyval.u.type) != NULL);
}
    break;

  case 239:
/* Line 1792 of yacc.c  */
#line 1841 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 240:
/* Line 1792 of yacc.c  */
#line 1845 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 241:
/* Line 1792 of yacc.c  */
#line 1861 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 242:
/* Line 1792 of yacc.c  */
#line 1880 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance((yyvsp[(1) - (2)].u.type), (yyvsp[(2) - (2)].u.inst_ident), 0, (yylsp[(1) - (2)]).file);
  (yyval.u.type) = inst->_type;
  delete inst;
}
    break;

  case 243:
/* Line 1792 of yacc.c  */
#line 1886 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(3) - (3)].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[(2) - (3)].u.type), (yyvsp[(3) - (3)].u.inst_ident), 0, (yylsp[(1) - (3)]).file);
  (yyval.u.type) = inst->_type;
  delete inst;
}
    break;

  case 244:
/* Line 1792 of yacc.c  */
#line 1896 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPVisibility starting_vis =
  ((yyvsp[(1) - (2)].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType((yyvsp[(1) - (2)].u.extension_enum), NULL, current_scope,
                                        new_scope, (yylsp[(1) - (2)]).file);
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
    break;

  case 245:
/* Line 1792 of yacc.c  */
#line 1910 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
    break;

  case 246:
/* Line 1792 of yacc.c  */
#line 1920 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPVisibility starting_vis =
  ((yyvsp[(1) - (2)].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, (yyvsp[(2) - (2)].u.identifier)->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope,
                                        new_scope, (yylsp[(1) - (2)]).file);
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);

  push_scope(new_scope);
  push_struct(st);
}
    break;

  case 247:
/* Line 1792 of yacc.c  */
#line 1940 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
    break;

  case 252:
/* Line 1792 of yacc.c  */
#line 1960 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(2) - (2)].u.type), V_public, false);
}
    break;

  case 253:
/* Line 1792 of yacc.c  */
#line 1964 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(2) - (2)].u.type), V_protected, false);
}
    break;

  case 254:
/* Line 1792 of yacc.c  */
#line 1968 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(2) - (2)].u.type), V_private, false);
}
    break;

  case 255:
/* Line 1792 of yacc.c  */
#line 1972 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_public, true);
}
    break;

  case 256:
/* Line 1792 of yacc.c  */
#line 1976 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_protected, true);
}
    break;

  case 257:
/* Line 1792 of yacc.c  */
#line 1980 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_private, true);
}
    break;

  case 258:
/* Line 1792 of yacc.c  */
#line 1984 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_public, true);
}
    break;

  case 259:
/* Line 1792 of yacc.c  */
#line 1988 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_protected, true);
}
    break;

  case 260:
/* Line 1792 of yacc.c  */
#line 1992 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_private, true);
}
    break;

  case 261:
/* Line 1792 of yacc.c  */
#line 1999 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.enum_type) = current_enum;
  current_enum = NULL;
}
    break;

  case 262:
/* Line 1792 of yacc.c  */
#line 2007 "dtool/src/cppparser/cppBison.yxx"
    {
  current_enum = new CPPEnumType((yyvsp[(2) - (4)].u.identifier), (yyvsp[(4) - (4)].u.type), current_scope, (yylsp[(1) - (4)]).file);
}
    break;

  case 263:
/* Line 1792 of yacc.c  */
#line 2011 "dtool/src/cppparser/cppBison.yxx"
    {
  current_enum = new CPPEnumType((yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file);
}
    break;

  case 264:
/* Line 1792 of yacc.c  */
#line 2015 "dtool/src/cppparser/cppBison.yxx"
    {
  current_enum = new CPPEnumType(NULL, (yyvsp[(3) - (3)].u.type), current_scope, (yylsp[(1) - (3)]).file);
}
    break;

  case 265:
/* Line 1792 of yacc.c  */
#line 2019 "dtool/src/cppparser/cppBison.yxx"
    {
  current_enum = new CPPEnumType(NULL, current_scope, (yylsp[(1) - (1)]).file);
}
    break;

  case 266:
/* Line 1792 of yacc.c  */
#line 2026 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 267:
/* Line 1792 of yacc.c  */
#line 2030 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
}
    break;

  case 269:
/* Line 1792 of yacc.c  */
#line 2038 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[(2) - (3)].u.identifier)->get_simple_name());
  current_scope->add_enum_value(inst, current_lexer, (yylsp[(2) - (3)]));
}
    break;

  case 270:
/* Line 1792 of yacc.c  */
#line 2044 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[(2) - (5)].u.identifier)->get_simple_name(), (yyvsp[(4) - (5)].u.expr));
  current_scope->add_enum_value(inst, current_lexer, (yylsp[(2) - (5)]));
}
    break;

  case 272:
/* Line 1792 of yacc.c  */
#line 2053 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[(2) - (2)].u.identifier)->get_simple_name());
  current_scope->add_enum_value(inst, current_lexer, (yylsp[(2) - (2)]));
}
    break;

  case 273:
/* Line 1792 of yacc.c  */
#line 2059 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[(2) - (4)].u.identifier)->get_simple_name(), (yyvsp[(4) - (4)].u.expr));
  current_scope->add_enum_value(inst, current_lexer, (yylsp[(2) - (4)]));
}
    break;

  case 274:
/* Line 1792 of yacc.c  */
#line 2068 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum;
}
    break;

  case 275:
/* Line 1792 of yacc.c  */
#line 2075 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_class;
}
    break;

  case 276:
/* Line 1792 of yacc.c  */
#line 2079 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_struct;
}
    break;

  case 277:
/* Line 1792 of yacc.c  */
#line 2083 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_union;
}
    break;

  case 278:
/* Line 1792 of yacc.c  */
#line 2090 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPScope *scope = (yyvsp[(2) - (3)].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[(2) - (3)].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[(2) - (3)].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[(2) - (3)].u.identifier), scope, (yylsp[(1) - (3)]).file);
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[(1) - (3)]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
    break;

  case 279:
/* Line 1792 of yacc.c  */
#line 2108 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
}
    break;

  case 280:
/* Line 1792 of yacc.c  */
#line 2112 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPScope *scope = (yyvsp[(3) - (4)].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[(3) - (4)].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[(3) - (4)].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[(3) - (4)].u.identifier), scope, (yylsp[(2) - (4)]).file);
  nspace->_is_inline = true;
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[(2) - (4)]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
    break;

  case 281:
/* Line 1792 of yacc.c  */
#line 2131 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
}
    break;

  case 284:
/* Line 1792 of yacc.c  */
#line 2140 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[(2) - (2)].u.identifier), false, (yylsp[(1) - (2)]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[(1) - (2)]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
    break;

  case 285:
/* Line 1792 of yacc.c  */
#line 2146 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[(3) - (3)].u.identifier), true, (yylsp[(1) - (3)]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[(1) - (3)]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
    break;

  case 289:
/* Line 1792 of yacc.c  */
#line 2161 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_bool);
}
    break;

  case 290:
/* Line 1792 of yacc.c  */
#line 2165 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char);
}
    break;

  case 291:
/* Line 1792 of yacc.c  */
#line 2169 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_wchar_t);
}
    break;

  case 292:
/* Line 1792 of yacc.c  */
#line 2173 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char16_t);
}
    break;

  case 293:
/* Line 1792 of yacc.c  */
#line 2177 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char32_t);
}
    break;

  case 294:
/* Line 1792 of yacc.c  */
#line 2181 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
    break;

  case 295:
/* Line 1792 of yacc.c  */
#line 2186 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
    break;

  case 296:
/* Line 1792 of yacc.c  */
#line 2191 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_longlong);
}
    break;

  case 297:
/* Line 1792 of yacc.c  */
#line 2196 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
    break;

  case 298:
/* Line 1792 of yacc.c  */
#line 2201 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
    break;

  case 299:
/* Line 1792 of yacc.c  */
#line 2206 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int);
}
    break;

  case 300:
/* Line 1792 of yacc.c  */
#line 2210 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_short;
}
    break;

  case 301:
/* Line 1792 of yacc.c  */
#line 2215 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  if ((yyval.u.simple_type)->_flags & CPPSimpleType::F_long) {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_longlong;
  } else {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_long;
  }
}
    break;

  case 302:
/* Line 1792 of yacc.c  */
#line 2224 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_unsigned;
}
    break;

  case 303:
/* Line 1792 of yacc.c  */
#line 2229 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_signed;
}
    break;

  case 304:
/* Line 1792 of yacc.c  */
#line 2237 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float);
}
    break;

  case 305:
/* Line 1792 of yacc.c  */
#line 2241 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float,
                         CPPSimpleType::F_long);
}
    break;

  case 306:
/* Line 1792 of yacc.c  */
#line 2246 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double);
}
    break;

  case 307:
/* Line 1792 of yacc.c  */
#line 2250 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float,
                         CPPSimpleType::F_longlong);
}
    break;

  case 308:
/* Line 1792 of yacc.c  */
#line 2255 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
    break;

  case 309:
/* Line 1792 of yacc.c  */
#line 2263 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_void);
}
    break;

  case 310:
/* Line 1792 of yacc.c  */
#line 2272 "dtool/src/cppparser/cppBison.yxx"
    {
  current_lexer->_resolve_identifiers = false;
}
    break;

  case 311:
/* Line 1792 of yacc.c  */
#line 2276 "dtool/src/cppparser/cppBison.yxx"
    {
  current_lexer->_resolve_identifiers = true;
}
    break;

  case 406:
/* Line 1792 of yacc.c  */
#line 2316 "dtool/src/cppparser/cppBison.yxx"
    {
}
    break;

  case 430:
/* Line 1792 of yacc.c  */
#line 2325 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 431:
/* Line 1792 of yacc.c  */
#line 2329 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 432:
/* Line 1792 of yacc.c  */
#line 2336 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 433:
/* Line 1792 of yacc.c  */
#line 2340 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 434:
/* Line 1792 of yacc.c  */
#line 2347 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 435:
/* Line 1792 of yacc.c  */
#line 2351 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(',', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 436:
/* Line 1792 of yacc.c  */
#line 2358 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 437:
/* Line 1792 of yacc.c  */
#line 2362 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(2) - (4)].u.type), (yyvsp[(4) - (4)].u.expr)));
}
    break;

  case 438:
/* Line 1792 of yacc.c  */
#line 2366 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr)));
}
    break;

  case 439:
/* Line 1792 of yacc.c  */
#line 2370 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr)));
}
    break;

  case 440:
/* Line 1792 of yacc.c  */
#line 2374 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 441:
/* Line 1792 of yacc.c  */
#line 2378 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 442:
/* Line 1792 of yacc.c  */
#line 2382 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 443:
/* Line 1792 of yacc.c  */
#line 2386 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 444:
/* Line 1792 of yacc.c  */
#line 2390 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 445:
/* Line 1792 of yacc.c  */
#line 2394 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 446:
/* Line 1792 of yacc.c  */
#line 2398 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 447:
/* Line 1792 of yacc.c  */
#line 2402 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 448:
/* Line 1792 of yacc.c  */
#line 2406 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 449:
/* Line 1792 of yacc.c  */
#line 2410 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 450:
/* Line 1792 of yacc.c  */
#line 2414 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 451:
/* Line 1792 of yacc.c  */
#line 2418 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 452:
/* Line 1792 of yacc.c  */
#line 2422 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 453:
/* Line 1792 of yacc.c  */
#line 2426 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 454:
/* Line 1792 of yacc.c  */
#line 2430 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 455:
/* Line 1792 of yacc.c  */
#line 2434 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 456:
/* Line 1792 of yacc.c  */
#line 2438 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 457:
/* Line 1792 of yacc.c  */
#line 2442 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 458:
/* Line 1792 of yacc.c  */
#line 2446 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 459:
/* Line 1792 of yacc.c  */
#line 2450 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 460:
/* Line 1792 of yacc.c  */
#line 2454 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 461:
/* Line 1792 of yacc.c  */
#line 2458 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 462:
/* Line 1792 of yacc.c  */
#line 2462 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 463:
/* Line 1792 of yacc.c  */
#line 2466 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[(1) - (5)].u.expr), (yyvsp[(3) - (5)].u.expr), (yyvsp[(5) - (5)].u.expr));
}
    break;

  case 464:
/* Line 1792 of yacc.c  */
#line 2470 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 465:
/* Line 1792 of yacc.c  */
#line 2474 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 466:
/* Line 1792 of yacc.c  */
#line 2478 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (3)].u.expr));
}
    break;

  case 467:
/* Line 1792 of yacc.c  */
#line 2482 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 468:
/* Line 1792 of yacc.c  */
#line 2486 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 469:
/* Line 1792 of yacc.c  */
#line 2490 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 470:
/* Line 1792 of yacc.c  */
#line 2498 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 471:
/* Line 1792 of yacc.c  */
#line 2502 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(2) - (4)].u.type), (yyvsp[(4) - (4)].u.expr)));
}
    break;

  case 472:
/* Line 1792 of yacc.c  */
#line 2506 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr)));
}
    break;

  case 473:
/* Line 1792 of yacc.c  */
#line 2510 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr)));
}
    break;

  case 474:
/* Line 1792 of yacc.c  */
#line 2514 "dtool/src/cppparser/cppBison.yxx"
    {
  // A constructor call.
  CPPType *type = (yyvsp[(1) - (4)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (4)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (4)]));
  }
  assert(type != NULL);
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 475:
/* Line 1792 of yacc.c  */
#line 2524 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 476:
/* Line 1792 of yacc.c  */
#line 2530 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 477:
/* Line 1792 of yacc.c  */
#line 2536 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_wchar_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 478:
/* Line 1792 of yacc.c  */
#line 2542 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char16_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 479:
/* Line 1792 of yacc.c  */
#line 2548 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char32_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 480:
/* Line 1792 of yacc.c  */
#line 2554 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 481:
/* Line 1792 of yacc.c  */
#line 2560 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 482:
/* Line 1792 of yacc.c  */
#line 2567 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 483:
/* Line 1792 of yacc.c  */
#line 2574 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 484:
/* Line 1792 of yacc.c  */
#line 2581 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 485:
/* Line 1792 of yacc.c  */
#line 2588 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 486:
/* Line 1792 of yacc.c  */
#line 2594 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 487:
/* Line 1792 of yacc.c  */
#line 2600 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 488:
/* Line 1792 of yacc.c  */
#line 2604 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 489:
/* Line 1792 of yacc.c  */
#line 2608 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (2)].u.type)));
}
    break;

  case 490:
/* Line 1792 of yacc.c  */
#line 2612 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (5)].u.type), (yyvsp[(4) - (5)].u.expr)));
}
    break;

  case 491:
/* Line 1792 of yacc.c  */
#line 2616 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 492:
/* Line 1792 of yacc.c  */
#line 2620 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 493:
/* Line 1792 of yacc.c  */
#line 2624 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 494:
/* Line 1792 of yacc.c  */
#line 2628 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 495:
/* Line 1792 of yacc.c  */
#line 2632 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 496:
/* Line 1792 of yacc.c  */
#line 2636 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 497:
/* Line 1792 of yacc.c  */
#line 2640 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 498:
/* Line 1792 of yacc.c  */
#line 2644 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 499:
/* Line 1792 of yacc.c  */
#line 2648 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 500:
/* Line 1792 of yacc.c  */
#line 2652 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 501:
/* Line 1792 of yacc.c  */
#line 2656 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 502:
/* Line 1792 of yacc.c  */
#line 2660 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 503:
/* Line 1792 of yacc.c  */
#line 2664 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 504:
/* Line 1792 of yacc.c  */
#line 2668 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 505:
/* Line 1792 of yacc.c  */
#line 2672 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 506:
/* Line 1792 of yacc.c  */
#line 2676 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 507:
/* Line 1792 of yacc.c  */
#line 2680 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 508:
/* Line 1792 of yacc.c  */
#line 2684 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 509:
/* Line 1792 of yacc.c  */
#line 2688 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 510:
/* Line 1792 of yacc.c  */
#line 2692 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 511:
/* Line 1792 of yacc.c  */
#line 2696 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 512:
/* Line 1792 of yacc.c  */
#line 2700 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 513:
/* Line 1792 of yacc.c  */
#line 2704 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 514:
/* Line 1792 of yacc.c  */
#line 2708 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[(1) - (5)].u.expr), (yyvsp[(3) - (5)].u.expr), (yyvsp[(5) - (5)].u.expr));
}
    break;

  case 515:
/* Line 1792 of yacc.c  */
#line 2712 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 516:
/* Line 1792 of yacc.c  */
#line 2716 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 517:
/* Line 1792 of yacc.c  */
#line 2720 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (3)].u.expr));
}
    break;

  case 518:
/* Line 1792 of yacc.c  */
#line 2724 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 519:
/* Line 1792 of yacc.c  */
#line 2728 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 520:
/* Line 1792 of yacc.c  */
#line 2732 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 521:
/* Line 1792 of yacc.c  */
#line 2739 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 522:
/* Line 1792 of yacc.c  */
#line 2743 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(true);
}
    break;

  case 523:
/* Line 1792 of yacc.c  */
#line 2747 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(false);
}
    break;

  case 524:
/* Line 1792 of yacc.c  */
#line 2751 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 525:
/* Line 1792 of yacc.c  */
#line 2755 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.real));
}
    break;

  case 526:
/* Line 1792 of yacc.c  */
#line 2759 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 527:
/* Line 1792 of yacc.c  */
#line 2763 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 528:
/* Line 1792 of yacc.c  */
#line 2767 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.identifier), current_scope, global_scope, current_lexer);
}
    break;

  case 529:
/* Line 1792 of yacc.c  */
#line 2771 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
    break;

  case 530:
/* Line 1792 of yacc.c  */
#line 2785 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 531:
/* Line 1792 of yacc.c  */
#line 2789 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(2) - (4)].u.type), (yyvsp[(4) - (4)].u.expr)));
}
    break;

  case 532:
/* Line 1792 of yacc.c  */
#line 2793 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr)));
}
    break;

  case 533:
/* Line 1792 of yacc.c  */
#line 2797 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr)));
}
    break;

  case 534:
/* Line 1792 of yacc.c  */
#line 2801 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 535:
/* Line 1792 of yacc.c  */
#line 2805 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 536:
/* Line 1792 of yacc.c  */
#line 2809 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (2)].u.type)));
}
    break;

  case 537:
/* Line 1792 of yacc.c  */
#line 2813 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (5)].u.type), (yyvsp[(4) - (5)].u.expr)));
}
    break;

  case 538:
/* Line 1792 of yacc.c  */
#line 2817 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 539:
/* Line 1792 of yacc.c  */
#line 2821 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 540:
/* Line 1792 of yacc.c  */
#line 2825 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 541:
/* Line 1792 of yacc.c  */
#line 2829 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 542:
/* Line 1792 of yacc.c  */
#line 2833 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 543:
/* Line 1792 of yacc.c  */
#line 2837 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 544:
/* Line 1792 of yacc.c  */
#line 2841 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 545:
/* Line 1792 of yacc.c  */
#line 2845 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 546:
/* Line 1792 of yacc.c  */
#line 2849 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 547:
/* Line 1792 of yacc.c  */
#line 2853 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 548:
/* Line 1792 of yacc.c  */
#line 2857 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 549:
/* Line 1792 of yacc.c  */
#line 2861 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 550:
/* Line 1792 of yacc.c  */
#line 2865 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 551:
/* Line 1792 of yacc.c  */
#line 2869 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 552:
/* Line 1792 of yacc.c  */
#line 2873 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 553:
/* Line 1792 of yacc.c  */
#line 2877 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 554:
/* Line 1792 of yacc.c  */
#line 2881 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 555:
/* Line 1792 of yacc.c  */
#line 2885 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 556:
/* Line 1792 of yacc.c  */
#line 2889 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 557:
/* Line 1792 of yacc.c  */
#line 2893 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 558:
/* Line 1792 of yacc.c  */
#line 2897 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 559:
/* Line 1792 of yacc.c  */
#line 2901 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 560:
/* Line 1792 of yacc.c  */
#line 2905 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[(1) - (5)].u.expr), (yyvsp[(3) - (5)].u.expr), (yyvsp[(5) - (5)].u.expr));
}
    break;

  case 561:
/* Line 1792 of yacc.c  */
#line 2909 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 562:
/* Line 1792 of yacc.c  */
#line 2913 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 563:
/* Line 1792 of yacc.c  */
#line 2917 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (3)].u.expr));
}
    break;

  case 564:
/* Line 1792 of yacc.c  */
#line 2921 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 565:
/* Line 1792 of yacc.c  */
#line 2925 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 566:
/* Line 1792 of yacc.c  */
#line 2929 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 567:
/* Line 1792 of yacc.c  */
#line 2936 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 568:
/* Line 1792 of yacc.c  */
#line 2940 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(true);
}
    break;

  case 569:
/* Line 1792 of yacc.c  */
#line 2944 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(false);
}
    break;

  case 570:
/* Line 1792 of yacc.c  */
#line 2948 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 571:
/* Line 1792 of yacc.c  */
#line 2952 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.real));
}
    break;

  case 572:
/* Line 1792 of yacc.c  */
#line 2956 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 573:
/* Line 1792 of yacc.c  */
#line 2960 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 574:
/* Line 1792 of yacc.c  */
#line 2964 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.identifier), current_scope, global_scope, current_lexer);
}
    break;

  case 575:
/* Line 1792 of yacc.c  */
#line 2968 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
    break;

  case 576:
/* Line 1792 of yacc.c  */
#line 2975 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, true);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[(1) - (1)].u.identifier)));
  }
  (yyval.u.type) = type;
}
    break;

  case 577:
/* Line 1792 of yacc.c  */
#line 2983 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, true, current_lexer);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
  }
  (yyval.u.type) = type;
}
    break;

  case 578:
/* Line 1792 of yacc.c  */
#line 2991 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 579:
/* Line 1792 of yacc.c  */
#line 3017 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = (yyvsp[(1) - (1)].u.identifier);
}
    break;

  case 580:
/* Line 1792 of yacc.c  */
#line 3021 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = (yyvsp[(1) - (1)].u.identifier);
}
    break;

  case 581:
/* Line 1792 of yacc.c  */
#line 3028 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].str));
}
    break;

  case 582:
/* Line 1792 of yacc.c  */
#line 3032 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 583:
/* Line 1792 of yacc.c  */
#line 3036 "dtool/src/cppparser/cppBison.yxx"
    {
  // The right string takes on the literal type of the left.
  (yyval.u.expr) = (yyvsp[(1) - (2)].u.expr);
  (yyval.u.expr)->_str += (yyvsp[(2) - (2)].str);
}
    break;

  case 584:
/* Line 1792 of yacc.c  */
#line 3042 "dtool/src/cppparser/cppBison.yxx"
    {
  // We have to check that the two literal types match up.
  (yyval.u.expr) = (yyvsp[(1) - (2)].u.expr);
  if ((yyvsp[(2) - (2)].u.expr)->_type != CPPExpression::T_string && (yyvsp[(2) - (2)].u.expr)->_type != (yyvsp[(1) - (2)].u.expr)->_type) {
    yywarning("cannot concatenate two string literals of different types", (yyloc));
  }
  (yyval.u.expr)->_str += (yyvsp[(2) - (2)].u.expr)->_str;
}
    break;


/* Line 1792 of yacc.c  */
#line 7628 "built/tmp/cppBison.yxx.c"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


