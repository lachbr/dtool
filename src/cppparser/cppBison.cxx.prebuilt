/* A Bison parser, made from cppBison.yxx
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse cppyyparse
#define yylex cppyylex
#define yyerror cppyyerror
#define yylval cppyylval
#define yychar cppyychar
#define yydebug cppyydebug
#define yynerrs cppyynerrs
#define YYLSP_NEEDED 1

# define	REAL	257
# define	INTEGER	258
# define	CHAR	259
# define	STRING	260
# define	SIMPLE_IDENTIFIER	261
# define	IDENTIFIER	262
# define	TYPENAME_IDENTIFIER	263
# define	SCOPING	264
# define	TYPEDEFNAME	265
# define	ELLIPSIS	266
# define	OROR	267
# define	ANDAND	268
# define	EQCOMPARE	269
# define	NECOMPARE	270
# define	LECOMPARE	271
# define	GECOMPARE	272
# define	LSHIFT	273
# define	RSHIFT	274
# define	POINTSAT_STAR	275
# define	DOT_STAR	276
# define	UNARY	277
# define	UNARY_NOT	278
# define	UNARY_NEGATE	279
# define	UNARY_MINUS	280
# define	UNARY_STAR	281
# define	UNARY_REF	282
# define	POINTSAT	283
# define	SCOPE	284
# define	PLUSPLUS	285
# define	MINUSMINUS	286
# define	TIMESEQUAL	287
# define	DIVIDEEQUAL	288
# define	MODEQUAL	289
# define	PLUSEQUAL	290
# define	MINUSEQUAL	291
# define	OREQUAL	292
# define	ANDEQUAL	293
# define	XOREQUAL	294
# define	LSHIFTEQUAL	295
# define	RSHIFTEQUAL	296
# define	TOKENPASTE	297
# define	KW_BEGIN_PUBLISH	298
# define	KW_BOOL	299
# define	KW_CATCH	300
# define	KW_CHAR	301
# define	KW_CLASS	302
# define	KW_CONST	303
# define	KW_DELETE	304
# define	KW_DOUBLE	305
# define	KW_DYNAMIC_CAST	306
# define	KW_ELSE	307
# define	KW_END_PUBLISH	308
# define	KW_ENUM	309
# define	KW_EXTERN	310
# define	KW_EXPLICIT	311
# define	KW_PUBLISHED	312
# define	KW_FALSE	313
# define	KW_FLOAT	314
# define	KW_FRIEND	315
# define	KW_FOR	316
# define	KW_GOTO	317
# define	KW_IF	318
# define	KW_INLINE	319
# define	KW_INT	320
# define	KW_LONG	321
# define	KW_LONGLONG	322
# define	KW_MUTABLE	323
# define	KW_NAMESPACE	324
# define	KW_NEW	325
# define	KW_OPERATOR	326
# define	KW_PRIVATE	327
# define	KW_PROTECTED	328
# define	KW_PUBLIC	329
# define	KW_REGISTER	330
# define	KW_RETURN	331
# define	KW_SHORT	332
# define	KW_SIGNED	333
# define	KW_SIZEOF	334
# define	KW_STATIC	335
# define	KW_STATIC_CAST	336
# define	KW_STRUCT	337
# define	KW_TEMPLATE	338
# define	KW_THROW	339
# define	KW_TRUE	340
# define	KW_TRY	341
# define	KW_TYPEDEF	342
# define	KW_TYPENAME	343
# define	KW_UNION	344
# define	KW_UNSIGNED	345
# define	KW_USING	346
# define	KW_VIRTUAL	347
# define	KW_VOID	348
# define	KW_VOLATILE	349
# define	KW_WHILE	350
# define	START_CPP	351
# define	START_CONST_EXPR	352
# define	START_TYPE	353

#line 6 "cppBison.yxx"


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedef.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = NULL;
CPPScope *global_scope = NULL;
CPPPreprocessor *current_lexer = NULL;

static CPPStructType *current_struct = NULL; 
static CPPEnumType *current_enum = NULL;
static int current_storage_class = 0;
static CPPType *current_type = NULL;
static CPPExpression *current_expr = NULL;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static vector<CPPScope *> last_scopes;
static vector<int> last_storage_classes;
static vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc.first_line, loc.first_column);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc.first_line, loc.first_column);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
    
}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = (CPPExpression *)NULL;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = (CPPType *)NULL;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;
  
  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != NULL) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}


#ifndef YYLTYPE
typedef struct yyltype
{
  int first_line;
  int first_column;

  int last_line;
  int last_column;
} yyltype;

# define YYLTYPE yyltype
# define YYLTYPE_IS_TRIVIAL 1
#endif

#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		840
#define	YYFLAG		-32768
#define	YYNTBASE	124

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 353 ? yytranslate[x] : 215)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   122,     2,     2,     2,   115,   108,     2,
     118,   120,   113,   111,   101,   112,   117,   114,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   103,   102,
     109,   104,   110,   105,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   119,     2,   123,   107,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   100,   106,   121,   116,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    17,    19,    23,
      28,    29,    35,    37,    39,    41,    43,    45,    47,    50,
      52,    54,    57,    60,    63,    66,    67,    71,    73,    76,
      80,    83,    86,    89,    92,    95,    98,   101,   103,   107,
     111,   112,   117,   118,   124,   127,   132,   135,   140,   141,
     146,   147,   153,   157,   160,   165,   168,   173,   174,   181,
     182,   189,   190,   198,   199,   210,   211,   223,   224,   233,
     234,   244,   246,   248,   250,   255,   261,   263,   265,   267,
     269,   271,   273,   275,   277,   279,   281,   283,   285,   287,
     289,   291,   293,   295,   297,   299,   301,   303,   305,   307,
     309,   311,   313,   315,   317,   319,   321,   323,   325,   327,
     329,   331,   334,   337,   339,   341,   343,   345,   346,   353,
     355,   357,   359,   363,   366,   371,   375,   380,   382,   384,
     386,   389,   391,   394,   397,   400,   403,   407,   412,   416,
     420,   421,   428,   430,   432,   434,   438,   441,   443,   447,
     449,   452,   454,   457,   459,   463,   469,   473,   478,   480,
     482,   485,   487,   491,   495,   501,   505,   509,   514,   516,
     518,   520,   523,   526,   529,   533,   538,   540,   542,   544,
     547,   550,   553,   557,   562,   570,   574,   576,   579,   582,
     585,   589,   594,   602,   604,   606,   609,   611,   613,   615,
     617,   620,   623,   625,   627,   630,   632,   634,   636,   638,
     641,   644,   646,   648,   651,   654,   657,   660,   664,   665,
     671,   672,   680,   682,   684,   687,   691,   694,   697,   700,
     704,   708,   712,   716,   720,   724,   725,   731,   732,   739,
     741,   743,   746,   748,   752,   756,   762,   764,   766,   768,
     770,   771,   778,   783,   786,   790,   792,   794,   796,   798,
     800,   802,   804,   806,   808,   810,   812,   815,   818,   821,
     824,   826,   829,   831,   835,   838,   840,   841,   844,   846,
     849,   851,   853,   855,   857,   859,   861,   863,   865,   867,
     869,   871,   873,   875,   877,   879,   881,   883,   885,   887,
     889,   891,   893,   895,   897,   899,   901,   903,   905,   907,
     909,   911,   913,   915,   917,   919,   921,   923,   925,   927,
     929,   931,   933,   935,   937,   939,   941,   943,   945,   947,
     949,   951,   953,   955,   957,   959,   961,   963,   965,   967,
     969,   971,   973,   975,   977,   979,   981,   983,   985,   987,
     989,   991,   993,   995,   997,   999,  1001,  1003,  1005,  1007,
    1009,  1011,  1013,  1015,  1017,  1019,  1021,  1023,  1025,  1027,
    1029,  1031,  1033,  1035,  1037,  1039,  1041,  1043,  1045,  1047,
    1049,  1051,  1053,  1055,  1059,  1061,  1063,  1065,  1067,  1069,
    1073,  1075,  1080,  1088,  1096,  1101,  1104,  1107,  1110,  1113,
    1116,  1120,  1124,  1128,  1132,  1136,  1140,  1144,  1148,  1152,
    1156,  1160,  1164,  1168,  1172,  1176,  1182,  1187,  1192,  1196,
    1200,  1204,  1208,  1210,  1215,  1223,  1231,  1236,  1241,  1246,
    1251,  1256,  1261,  1266,  1271,  1276,  1281,  1286,  1289,  1295,
    1298,  1301,  1304,  1307,  1310,  1314,  1318,  1322,  1326,  1330,
    1334,  1338,  1342,  1346,  1350,  1354,  1358,  1362,  1366,  1370,
    1374,  1378,  1384,  1389,  1394,  1398,  1402,  1406,  1410,  1412,
    1414,  1416,  1418,  1420,  1422,  1424,  1426,  1429,  1432,  1434,
    1436,  1438,  1441
};
static const short yyrhs[] =
{
      97,   125,     0,    98,   209,     0,    99,   178,     0,   214,
       0,   125,   102,     0,   125,   130,     0,   127,     0,   126,
     101,   127,     0,   212,   118,   206,   120,     0,     0,   133,
     100,   129,   125,   121,     0,   134,     0,   156,     0,   128,
       0,   194,     0,   196,     0,   131,     0,    88,   140,     0,
      44,     0,    54,     0,    58,   103,     0,    75,   103,     0,
      74,   103,     0,    73,   103,     0,     0,    61,   132,   130,
       0,   214,     0,   133,    56,     0,   133,    56,   213,     0,
     133,    81,     0,   133,    65,     0,   133,    93,     0,   133,
      57,     0,   133,    95,     0,   133,    69,     0,   133,    76,
       0,   135,     0,   133,   176,   102,     0,   133,   145,   168,
       0,     0,   133,   176,   136,   138,     0,     0,   133,    49,
     175,   137,   139,     0,   162,   168,     0,   162,   167,   101,
     138,     0,   162,   168,     0,   162,   167,   101,   139,     0,
       0,   133,   176,   141,   143,     0,     0,   133,    49,   175,
     142,   144,     0,   133,   145,   168,     0,   162,   168,     0,
     162,   167,   101,   143,     0,   162,   168,     0,   162,   167,
     101,   144,     0,     0,     8,   118,   146,   164,   120,   153,
       0,     0,     9,   118,   147,   164,   120,   153,     0,     0,
     116,   212,   118,   148,   164,   120,   153,     0,     0,     9,
     118,   113,   162,   120,   118,   149,   164,   120,   153,     0,
       0,     9,   118,    10,   113,   162,   120,   118,   150,   164,
     120,   153,     0,     0,    72,   175,   172,   118,   151,   164,
     120,   153,     0,     0,    72,    49,   175,   172,   118,   152,
     164,   120,   153,     0,     8,     0,   214,     0,    49,     0,
     153,    85,   118,   120,     0,   153,    85,   118,   212,   120,
       0,   122,     0,   116,     0,   113,     0,   114,     0,   115,
       0,   111,     0,   112,     0,   106,     0,   108,     0,   107,
       0,    13,     0,    14,     0,    15,     0,    16,     0,    17,
       0,    18,     0,   109,     0,   110,     0,    19,     0,    20,
       0,   104,     0,   101,     0,    31,     0,    32,     0,    33,
       0,    34,     0,    35,     0,    36,     0,    37,     0,    38,
       0,    39,     0,    40,     0,    41,     0,    42,     0,    29,
       0,   119,   123,     0,   118,   120,     0,    71,     0,    50,
       0,   134,     0,   156,     0,     0,    84,   157,   109,   158,
     110,   155,     0,   214,     0,   159,     0,   160,     0,   159,
     101,   160,     0,    48,   212,     0,    48,   212,   104,   178,
       0,   161,   173,   166,     0,    49,   161,   173,   166,     0,
     197,     0,     8,     0,     9,     0,    89,   212,     0,   212,
       0,    72,   154,     0,    49,   162,     0,   113,   162,     0,
     108,   162,     0,    10,   113,   162,     0,   162,   119,   205,
     123,     0,   162,   103,     4,     0,   118,   162,   120,     0,
       0,   162,   118,   163,   164,   120,   153,     0,   214,     0,
      12,     0,   165,     0,   165,   101,    12,     0,   165,    12,
       0,   171,     0,   165,   101,   171,     0,   214,     0,   104,
     208,     0,   214,     0,   104,   209,     0,   102,     0,   100,
     201,   121,     0,   103,   126,   100,   201,   121,     0,   104,
     209,   102,     0,   104,   100,   169,   121,     0,   214,     0,
     170,     0,   170,   101,     0,   209,     0,   100,   169,   121,
       0,   170,   101,   209,     0,   170,   101,   100,   169,   121,
       0,   175,   173,   167,     0,     8,   173,   167,     0,    49,
     175,   173,   167,     0,   214,     0,     8,     0,     9,     0,
      49,   172,     0,   113,   172,     0,   108,   172,     0,    10,
     113,   172,     0,   172,   119,   205,   123,     0,   214,     0,
       8,     0,     9,     0,    49,   173,     0,   113,   173,     0,
     108,   173,     0,    10,   113,   173,     0,   173,   119,   205,
     123,     0,   118,   173,   120,   118,   164,   120,   153,     0,
     118,   173,   120,     0,   214,     0,    49,   174,     0,   113,
     174,     0,   108,   174,     0,    10,   113,   174,     0,   174,
     119,   205,   123,     0,   118,   174,   120,   118,   164,   120,
     153,     0,   197,     0,     9,     0,    89,   212,     0,   179,
       0,   181,     0,   186,     0,   188,     0,   193,   212,     0,
     192,   212,     0,   197,     0,     9,     0,    89,   212,     0,
     179,     0,   181,     0,   186,     0,   188,     0,   193,   212,
       0,   192,   212,     0,   197,     0,     9,     0,    89,   212,
       0,   193,   212,     0,   192,   212,     0,   175,   174,     0,
      49,   175,   174,     0,     0,   193,   100,   180,   125,   121,
       0,     0,   193,   212,   182,   183,   100,   125,   121,     0,
     214,     0,   184,     0,   103,   185,     0,   184,   101,   185,
       0,    75,   211,     0,    74,   211,     0,    73,   211,     0,
      93,    75,   211,     0,    93,    74,   211,     0,    93,    73,
     211,     0,    75,    93,   211,     0,    74,    93,   211,     0,
      73,    93,   211,     0,     0,   192,   100,   187,   190,   121,
       0,     0,   192,   212,   100,   189,   190,   121,     0,   214,
       0,   191,     0,   191,   101,     0,   212,     0,   212,   104,
     209,     0,   191,   101,   212,     0,   191,   101,   212,   104,
     209,     0,    55,     0,    48,     0,    83,     0,    90,     0,
       0,    70,   212,   100,   195,   125,   121,     0,    70,   100,
     125,   121,     0,    92,   212,     0,    92,    70,   212,     0,
     198,     0,   199,     0,   200,     0,    45,     0,    47,     0,
      78,     0,    67,     0,    68,     0,    91,     0,    79,     0,
      66,     0,    78,   198,     0,    67,   198,     0,    91,   198,
       0,    79,   198,     0,    60,     0,    67,    60,     0,    51,
       0,    67,    67,    60,     0,    67,    51,     0,    94,     0,
       0,   202,   203,     0,   214,     0,   203,   204,     0,     3,
       0,     4,     0,     6,     0,     5,     0,     8,     0,     9,
       0,    10,     0,     7,     0,    12,     0,    13,     0,    14,
       0,    15,     0,    16,     0,    17,     0,    18,     0,    19,
       0,    20,     0,    21,     0,    22,     0,    29,     0,    30,
       0,    31,     0,    32,     0,    33,     0,    34,     0,    35,
       0,    36,     0,    37,     0,    38,     0,    39,     0,    40,
       0,    41,     0,    42,     0,    45,     0,    46,     0,    47,
       0,    48,     0,    49,     0,    50,     0,    51,     0,    52,
       0,    53,     0,    55,     0,    56,     0,    57,     0,    59,
       0,    60,     0,    61,     0,    62,     0,    63,     0,    64,
       0,    65,     0,    66,     0,    67,     0,    69,     0,    71,
       0,    73,     0,    74,     0,    75,     0,    58,     0,    76,
       0,    77,     0,    78,     0,    79,     0,    80,     0,    81,
       0,    82,     0,    83,     0,    85,     0,    86,     0,    87,
       0,    88,     0,    89,     0,    90,     0,    91,     0,    93,
       0,    94,     0,    95,     0,    96,     0,    43,     0,    72,
       0,   111,     0,   112,     0,   113,     0,   114,     0,   108,
       0,   106,     0,   107,     0,   122,     0,   116,     0,   104,
       0,   115,     0,   109,     0,   110,     0,   118,     0,   120,
       0,   117,     0,   101,     0,   102,     0,   103,     0,   119,
       0,   123,     0,   105,     0,   100,   203,   121,     0,   214,
       0,   209,     0,   214,     0,   207,     0,   209,     0,   207,
     101,   209,     0,   210,     0,   118,   178,   120,   208,     0,
      82,   109,   178,   110,   118,   207,   120,     0,    52,   109,
     178,   110,   118,   207,   120,     0,    80,   118,   178,   120,
       0,   122,   208,     0,   116,   208,     0,   112,   208,     0,
     113,   208,     0,   108,   208,     0,   208,   113,   208,     0,
     208,   114,   208,     0,   208,   115,   208,     0,   208,   111,
     208,     0,   208,   112,   208,     0,   208,   106,   208,     0,
     208,   108,   208,     0,   208,    13,   208,     0,   208,    14,
     208,     0,   208,    15,   208,     0,   208,    16,   208,     0,
     208,    17,   208,     0,   208,    18,   208,     0,   208,    19,
     208,     0,   208,    20,   208,     0,   208,   105,   208,   103,
     208,     0,   208,   119,   209,   123,     0,   208,   118,   207,
     120,     0,   208,   118,   120,     0,   208,   117,   208,     0,
     208,    29,   208,     0,   118,   207,   120,     0,   210,     0,
     118,   178,   120,   209,     0,    82,   109,   178,   110,   118,
     207,   120,     0,    52,   109,   178,   110,   118,   207,   120,
       0,     9,   118,   206,   120,     0,    66,   118,   206,   120,
       0,    47,   118,   206,   120,     0,    45,   118,   206,   120,
       0,    78,   118,   206,   120,     0,    67,   118,   206,   120,
       0,    91,   118,   206,   120,     0,    79,   118,   206,   120,
       0,    60,   118,   206,   120,     0,    51,   118,   206,   120,
       0,    80,   118,   178,   120,     0,    71,   177,     0,    71,
     177,   118,   206,   120,     0,   122,   209,     0,   116,   209,
       0,   112,   209,     0,   113,   209,     0,   108,   209,     0,
     209,   113,   209,     0,   209,   114,   209,     0,   209,   115,
     209,     0,   209,   111,   209,     0,   209,   112,   209,     0,
     209,   106,   209,     0,   209,   108,   209,     0,   209,    13,
     209,     0,   209,    14,   209,     0,   209,    15,   209,     0,
     209,    16,   209,     0,   209,    17,   209,     0,   209,    18,
     209,     0,   209,   109,   209,     0,   209,   110,   209,     0,
     209,    19,   209,     0,   209,    20,   209,     0,   209,   105,
     209,   103,   209,     0,   209,   119,   209,   123,     0,   209,
     118,   207,   120,     0,   209,   118,   120,     0,   209,   117,
     209,     0,   209,    29,   209,     0,   118,   207,   120,     0,
       4,     0,    86,     0,    59,     0,     5,     0,     3,     0,
     213,     0,     8,     0,   212,     0,   193,   212,     0,    89,
     212,     0,     8,     0,     9,     0,     6,     0,   213,     6,
       0,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   374,   376,   380,   386,   388,   389,   392,   394,   397,
     409,   409,   421,   423,   424,   425,   426,   427,   428,   429,
     442,   451,   455,   459,   463,   469,   469,   484,   489,   493,
     504,   508,   512,   516,   520,   524,   528,   534,   539,   548,
     558,   558,   574,   574,   591,   600,   610,   620,   632,   632,
     648,   648,   659,   672,   681,   691,   701,   712,   712,   737,
     737,   761,   761,   791,   791,   806,   806,   823,   823,   854,
     854,   880,   892,   897,   901,   905,   911,   916,   920,   924,
     928,   932,   936,   940,   944,   948,   952,   956,   960,   964,
     968,   972,   976,   980,   984,   988,   992,   996,  1000,  1004,
    1008,  1012,  1016,  1020,  1024,  1028,  1032,  1036,  1040,  1044,
    1048,  1052,  1056,  1060,  1064,  1070,  1072,  1075,  1075,  1086,
    1088,  1091,  1098,  1106,  1111,  1115,  1121,  1130,  1135,  1140,
    1145,  1152,  1157,  1171,  1176,  1181,  1186,  1191,  1196,  1201,
    1206,  1206,  1219,  1224,  1229,  1233,  1238,  1245,  1251,  1258,
    1263,  1269,  1274,  1280,  1285,  1289,  1293,  1297,  1303,  1305,
    1306,  1309,  1313,  1314,  1315,  1318,  1324,  1332,  1340,  1345,
    1349,  1353,  1358,  1363,  1368,  1373,  1380,  1385,  1389,  1393,
    1398,  1403,  1408,  1413,  1418,  1424,  1431,  1436,  1441,  1446,
    1451,  1456,  1461,  1469,  1474,  1479,  1483,  1487,  1491,  1495,
    1499,  1515,  1533,  1538,  1543,  1547,  1551,  1555,  1559,  1563,
    1579,  1597,  1602,  1607,  1611,  1627,  1645,  1652,  1661,  1661,
    1685,  1685,  1715,  1717,  1720,  1722,  1725,  1730,  1734,  1738,
    1742,  1746,  1750,  1754,  1758,  1764,  1764,  1776,  1776,  1788,
    1790,  1791,  1794,  1800,  1805,  1810,  1817,  1824,  1829,  1833,
    1839,  1839,  1862,  1865,  1872,  1880,  1882,  1883,  1886,  1891,
    1895,  1900,  1905,  1910,  1915,  1920,  1924,  1929,  1938,  1943,
    1950,  1955,  1960,  1964,  1969,  1976,  1986,  1986,  1996,  1998,
    2001,  2005,  2008,  2011,  2014,  2017,  2020,  2023,  2026,  2026,
    2026,  2027,  2027,  2027,  2027,  2028,  2028,  2028,  2028,  2028,
    2029,  2029,  2029,  2030,  2030,  2030,  2030,  2030,  2031,  2031,
    2031,  2031,  2031,  2032,  2032,  2032,  2032,  2032,  2033,  2033,
    2033,  2033,  2033,  2034,  2034,  2034,  2035,  2035,  2035,  2035,
    2036,  2036,  2036,  2037,  2037,  2037,  2037,  2037,  2038,  2038,
    2038,  2038,  2039,  2039,  2039,  2039,  2039,  2040,  2040,  2040,
    2040,  2040,  2040,  2041,  2041,  2041,  2041,  2041,  2042,  2042,
    2043,  2046,  2046,  2046,  2046,  2046,  2046,  2046,  2046,  2046,
    2046,  2046,  2047,  2047,  2047,  2047,  2047,  2047,  2047,  2047,
    2047,  2047,  2048,  2048,  2051,  2056,  2062,  2067,  2073,  2078,
    2084,  2089,  2093,  2097,  2101,  2105,  2109,  2113,  2125,  2129,
    2133,  2137,  2141,  2145,  2149,  2153,  2157,  2161,  2165,  2169,
    2173,  2177,  2181,  2185,  2189,  2193,  2197,  2201,  2205,  2209,
    2213,  2217,  2224,  2229,  2233,  2237,  2241,  2248,  2254,  2260,
    2266,  2273,  2280,  2287,  2294,  2300,  2306,  2310,  2314,  2318,
    2322,  2326,  2338,  2342,  2346,  2350,  2354,  2358,  2362,  2366,
    2370,  2374,  2378,  2382,  2386,  2390,  2394,  2398,  2402,  2406,
    2410,  2414,  2418,  2422,  2426,  2430,  2434,  2438,  2444,  2449,
    2453,  2457,  2461,  2465,  2469,  2475,  2484,  2492,  2514,  2519,
    2525,  2530,  2536
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "REAL", "INTEGER", "CHAR", "STRING", 
  "SIMPLE_IDENTIFIER", "IDENTIFIER", "TYPENAME_IDENTIFIER", "SCOPING", 
  "TYPEDEFNAME", "ELLIPSIS", "OROR", "ANDAND", "EQCOMPARE", "NECOMPARE", 
  "LECOMPARE", "GECOMPARE", "LSHIFT", "RSHIFT", "POINTSAT_STAR", 
  "DOT_STAR", "UNARY", "UNARY_NOT", "UNARY_NEGATE", "UNARY_MINUS", 
  "UNARY_STAR", "UNARY_REF", "POINTSAT", "SCOPE", "PLUSPLUS", 
  "MINUSMINUS", "TIMESEQUAL", "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL", 
  "MINUSEQUAL", "OREQUAL", "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL", 
  "RSHIFTEQUAL", "TOKENPASTE", "KW_BEGIN_PUBLISH", "KW_BOOL", "KW_CATCH", 
  "KW_CHAR", "KW_CLASS", "KW_CONST", "KW_DELETE", "KW_DOUBLE", 
  "KW_DYNAMIC_CAST", "KW_ELSE", "KW_END_PUBLISH", "KW_ENUM", "KW_EXTERN", 
  "KW_EXPLICIT", "KW_PUBLISHED", "KW_FALSE", "KW_FLOAT", "KW_FRIEND", 
  "KW_FOR", "KW_GOTO", "KW_IF", "KW_INLINE", "KW_INT", "KW_LONG", 
  "KW_LONGLONG", "KW_MUTABLE", "KW_NAMESPACE", "KW_NEW", "KW_OPERATOR", 
  "KW_PRIVATE", "KW_PROTECTED", "KW_PUBLIC", "KW_REGISTER", "KW_RETURN", 
  "KW_SHORT", "KW_SIGNED", "KW_SIZEOF", "KW_STATIC", "KW_STATIC_CAST", 
  "KW_STRUCT", "KW_TEMPLATE", "KW_THROW", "KW_TRUE", "KW_TRY", 
  "KW_TYPEDEF", "KW_TYPENAME", "KW_UNION", "KW_UNSIGNED", "KW_USING", 
  "KW_VIRTUAL", "KW_VOID", "KW_VOLATILE", "KW_WHILE", "START_CPP", 
  "START_CONST_EXPR", "START_TYPE", "'{'", "','", "';'", "':'", "'='", 
  "'?'", "'|'", "'^'", "'&'", "'<'", "'>'", "'+'", "'-'", "'*'", "'/'", 
  "'%'", "'~'", "'.'", "'('", "'['", "')'", "'}'", "'!'", "']'", 
  "grammar", "cpp", "constructor_inits", "constructor_init", "extern_c", 
  "@1", "declaration", "friend_declaration", "@2", "storage_class", 
  "type_like_declaration", "multiple_var_declaration", "@3", "@4", 
  "multiple_instance_identifiers", "multiple_const_instance_identifiers", 
  "typedef_declaration", "@5", "@6", "typedef_instance_identifiers", 
  "typedef_const_instance_identifiers", "function_prototype", "@7", "@8", 
  "@9", "@10", "@11", "@12", "@13", "function_post", "function_operator", 
  "more_template_declaration", "template_declaration", "@14", 
  "template_formal_parameters", "template_nonempty_formal_parameters", 
  "template_formal_parameter", "template_formal_parameter_type", 
  "instance_identifier", "@15", "formal_parameter_list", 
  "formal_parameters", "template_parameter_maybe_initialize", 
  "maybe_initialize", "maybe_initialize_or_function_body", 
  "structure_init", "structure_init_body", "formal_parameter", 
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier", 
  "empty_instance_identifier", "type", "type_decl", "predefined_type", 
  "full_type", "anonymous_struct", "@16", "named_struct", "@17", 
  "maybe_class_derivation", "class_derivation", "base_specification", 
  "anonymous_enum", "@18", "named_enum", "@19", "enum_body", 
  "enum_body_no_trailing_comma", "enum_keyword", "struct_keyword", 
  "namespace_declaration", "@20", "using_declaration", "simple_type", 
  "simple_int_type", "simple_float_type", "simple_void_type", "code", 
  "@21", "code_block", "element", "optional_const_expr", 
  "optional_const_expr_comma", "const_expr_comma", 
  "no_angle_bracket_const_expr", "const_expr", "const_operand", 
  "class_derivation_name", "name", "string", "empty", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,   124,   124,   124,   125,   125,   125,   126,   126,   127,
     129,   128,   130,   130,   130,   130,   130,   130,   130,   130,
     130,   130,   130,   130,   130,   132,   131,   133,   133,   133,
     133,   133,   133,   133,   133,   133,   133,   134,   134,   134,
     136,   135,   137,   135,   138,   138,   139,   139,   141,   140,
     142,   140,   140,   143,   143,   144,   144,   146,   145,   147,
     145,   148,   145,   149,   145,   150,   145,   151,   145,   152,
     145,   145,   153,   153,   153,   153,   154,   154,   154,   154,
     154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
     154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
     154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
     154,   154,   154,   154,   154,   155,   155,   157,   156,   158,
     158,   159,   159,   160,   160,   160,   160,   161,   161,   161,
     161,   162,   162,   162,   162,   162,   162,   162,   162,   162,
     163,   162,   164,   164,   164,   164,   164,   165,   165,   166,
     166,   167,   167,   168,   168,   168,   168,   168,   169,   169,
     169,   170,   170,   170,   170,   171,   171,   171,   172,   172,
     172,   172,   172,   172,   172,   172,   173,   173,   173,   173,
     173,   173,   173,   173,   173,   173,   174,   174,   174,   174,
     174,   174,   174,   175,   175,   175,   175,   175,   175,   175,
     175,   175,   176,   176,   176,   176,   176,   176,   176,   176,
     176,   177,   177,   177,   177,   177,   178,   178,   180,   179,
     182,   181,   183,   183,   184,   184,   185,   185,   185,   185,
     185,   185,   185,   185,   185,   187,   186,   189,   188,   190,
     190,   190,   191,   191,   191,   191,   192,   193,   193,   193,
     195,   194,   194,   196,   196,   197,   197,   197,   198,   198,
     198,   198,   198,   198,   198,   198,   198,   198,   198,   198,
     199,   199,   199,   199,   199,   200,   202,   201,   203,   203,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   205,   205,   206,   206,   207,   207,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   209,   209,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   209,   209,   209,   209,   210,   210,
     210,   210,   210,   210,   210,   211,   211,   211,   212,   212,
     213,   213,   214
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     2,     2,     2,     1,     2,     2,     1,     3,     4,
       0,     5,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     2,     2,     2,     2,     0,     3,     1,     2,     3,
       2,     2,     2,     2,     2,     2,     2,     1,     3,     3,
       0,     4,     0,     5,     2,     4,     2,     4,     0,     4,
       0,     5,     3,     2,     4,     2,     4,     0,     6,     0,
       6,     0,     7,     0,    10,     0,    11,     0,     8,     0,
       9,     1,     1,     1,     4,     5,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     1,     1,     1,     0,     6,     1,
       1,     1,     3,     2,     4,     3,     4,     1,     1,     1,
       2,     1,     2,     2,     2,     2,     3,     4,     3,     3,
       0,     6,     1,     1,     1,     3,     2,     1,     3,     1,
       2,     1,     2,     1,     3,     5,     3,     4,     1,     1,
       2,     1,     3,     3,     5,     3,     3,     4,     1,     1,
       1,     2,     2,     2,     3,     4,     1,     1,     1,     2,
       2,     2,     3,     4,     7,     3,     1,     2,     2,     2,
       3,     4,     7,     1,     1,     2,     1,     1,     1,     1,
       2,     2,     1,     1,     2,     1,     1,     1,     1,     2,
       2,     1,     1,     2,     2,     2,     2,     3,     0,     5,
       0,     7,     1,     1,     2,     3,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     0,     5,     0,     6,     1,
       1,     2,     1,     3,     3,     5,     1,     1,     1,     1,
       0,     6,     4,     2,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     2,     2,
       1,     2,     1,     3,     2,     1,     0,     2,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     1,     3,
       1,     4,     7,     7,     4,     2,     2,     2,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     5,     4,     4,     3,     3,
       3,     3,     1,     4,     7,     7,     4,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     2,     5,     2,
       2,     2,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     5,     4,     4,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     1,
       1,     2,     0
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,   482,     0,     0,   482,     4,   472,   468,   471,   480,
     474,     0,     0,     0,     0,     0,   470,     0,     0,     0,
       0,     0,     0,     0,     0,   469,     0,     0,     0,     0,
       0,     0,     0,     2,   422,   473,   194,   258,   259,   247,
       0,   272,   246,   270,   265,   261,   262,   260,   264,   248,
       0,   249,   263,   275,   482,     3,   196,   197,   198,   199,
       0,     0,   193,   255,   256,   257,    19,    20,     0,    25,
       0,     0,     0,     0,   117,   482,     0,     5,    14,     6,
      17,     0,    12,    37,    13,    15,    16,    27,   482,   482,
     482,   482,     0,   482,   482,   482,   212,     0,   437,     0,
       0,   211,   482,   482,     0,     0,   482,   443,   441,   442,
     440,   194,   258,   259,   272,   270,   265,   261,   260,   264,
     263,     0,     0,   388,   439,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   481,   482,   274,
     271,   261,   267,   261,   266,   269,   478,   479,   195,   268,
       0,   482,   482,   482,   482,   216,   186,   235,   201,   218,
     200,    21,   482,   482,     0,    24,    23,    22,     0,     0,
      18,     0,   253,    71,   203,     0,    28,    33,    31,    35,
       0,    36,    30,     0,    32,    34,    10,     0,     0,    40,
     205,   206,   207,   208,     0,     0,   202,     0,   387,   386,
       0,     0,     0,     0,     0,     0,     0,   213,   482,   215,
     214,     0,     0,     0,     0,     0,     0,     0,   467,   451,
     452,   453,   454,   455,   456,   459,   460,   466,     0,   449,
     450,   457,   458,   447,   448,   444,   445,   446,   465,   464,
       0,     0,   217,   273,   482,   187,   189,   188,     0,   482,
     482,   237,   482,   482,    26,   482,   250,   482,     0,     0,
      48,   254,    57,    59,    42,    29,     0,   482,   204,   482,
       0,   276,   153,     0,     0,    39,    38,     0,   210,   209,
     426,   429,   428,   435,     0,   434,   427,   431,     0,   430,
     433,   436,     0,   432,   423,   389,     0,   463,   462,   190,
       0,     0,   385,   384,     0,   240,   242,   239,   482,   482,
       0,     0,   223,   222,   252,   482,   128,   129,     0,     0,
       0,     0,   120,   121,   482,   127,   119,    50,    52,     0,
     482,     0,     0,   482,     0,   482,   169,   170,     0,   482,
     482,   482,     0,   168,   482,    61,     0,   482,     0,     7,
       0,   482,     0,     0,     0,     0,     0,     0,     0,    41,
     482,   131,     0,   438,     0,   461,   482,   191,   236,   241,
       0,     0,   219,     0,     0,     0,     0,   224,   482,     0,
     482,   123,   482,   130,   482,     0,   177,   178,     0,   482,
     482,   482,   482,   482,   176,     0,    49,   482,   482,   143,
       0,     0,   144,   147,   482,   142,     0,     0,     0,    43,
     482,     0,   482,   171,   173,   172,    67,   482,    11,   482,
     154,   277,   278,   276,     0,   482,   482,     0,   159,   161,
     158,   156,     0,   133,    86,    87,    88,    89,    90,    91,
      94,    95,   110,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   114,   113,    97,    96,    83,
      85,    84,    92,    93,    81,    82,    78,    79,    80,    77,
       0,     0,    76,   132,   135,   134,     0,     0,     0,   140,
     482,     0,    44,   151,     0,     0,     0,   244,   243,   238,
       0,     0,     0,   228,   475,     0,   227,     0,   226,     0,
       0,     0,   482,   225,   251,     0,   482,     0,   115,   118,
     116,   122,   482,   179,   181,   180,     0,     0,   482,   125,
     149,    51,   482,     0,    53,   482,   482,   482,   146,     0,
     482,     0,     0,     0,   482,     0,    46,    69,   174,   482,
       0,     0,   280,   281,   283,   282,   287,   284,   285,   286,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   359,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   339,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     360,   336,   337,   338,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   482,   377,   378,   379,   370,   382,   366,
     367,   365,   372,   373,   361,   362,   363,   364,   371,   369,
     376,   374,   380,   375,   368,   381,   279,     0,     8,     0,
       0,   157,   160,   136,   112,   111,   139,   138,   152,   482,
       0,     0,   425,   424,   482,     0,   477,   234,   476,   233,
     232,   231,   230,   229,   221,   124,   126,   182,   185,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   150,   390,
       0,     0,    55,     0,     0,   166,   482,    73,    58,    72,
     145,   148,   165,     0,    63,    60,     0,   482,     0,   175,
     482,     0,   155,     9,   162,   482,   163,     0,   137,    45,
     192,   245,   482,     0,     0,     0,   399,   397,   398,   396,
       0,     0,   395,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   183,     0,    54,   152,   167,     0,    65,
     482,    47,     0,   482,    62,   383,     0,   482,     0,     0,
       0,     0,     0,   421,   407,   408,   409,   410,   411,   412,
     413,   414,   420,     0,   405,   406,   403,   404,   400,   401,
     402,   419,   418,     0,     0,    56,     0,   482,     0,   482,
      68,   164,   141,   482,     0,   394,     0,   391,     0,   417,
     416,    74,     0,     0,   482,    70,   184,     0,     0,   415,
      75,   482,    64,     0,     0,    66,   393,   392,     0,     0,
       0
};

static const short yydefgoto[] =
{
     838,     4,   358,   359,    78,   279,    79,    80,   172,    81,
      82,    83,   287,   344,   369,   419,   180,   339,   405,   406,
     531,   198,   340,   343,   429,   770,   807,   549,   717,   708,
     483,   519,    84,   178,   331,   332,   333,   334,   370,   669,
     411,   412,   529,   491,   285,   437,   438,   413,   352,   403,
     165,   414,   199,    98,    55,    56,   262,    57,   263,   321,
     322,   387,    58,   260,    59,   318,   314,   315,    60,    61,
      85,   325,    86,    62,    63,    64,    65,   356,   357,   431,
     656,   311,   207,   208,   698,   123,    34,   503,   371,    35,
     209
};

static const short yypact[] =
{
     260,-32768,  1635,  2576,  2357,-32768,-32768,-32768,-32768,-32768,
  -32768,  -108,  -102,   -81,   -57,   -86,-32768,   -23,   -21,   -10,
    2638,    -3,    38,    60,     4,-32768,    67,  1635,  1635,  1635,
    1635,  1123,  1635,  2057,-32768,    80,-32768,-32768,-32768,-32768,
    2652,-32768,-32768,-32768,-32768,  1541,-32768,  1335,  1335,-32768,
     180,-32768,  1335,-32768,    40,-32768,-32768,-32768,-32768,-32768,
      55,    57,-32768,-32768,-32768,-32768,-32768,-32768,    65,-32768,
      69,    70,    78,   113,-32768,-32768,    62,-32768,-32768,-32768,
  -32768,  1827,-32768,-32768,-32768,-32768,-32768,-32768,  1635,  1635,
    1635,  1635,  2576,  1635,  1635,  1635,-32768,   180,   119,   180,
     180,-32768,  1635,  1635,  2576,  2576,  1635,    58,    58,    58,
      58,  -108,  -102,   -81,   -57,   -23,   -21,   234,  1243,  1251,
    1327,   111,   -80,  2057,    58,  1635,  1635,  1635,  1635,  1635,
    1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,
    1635,  1635,  1635,  1635,  1635,  1215,  1635,-32768,    40,-32768,
  -32768,   735,-32768,  1335,-32768,-32768,-32768,-32768,-32768,-32768,
     147,    40,    40,    40,    40,   146,-32768,-32768,   168,-32768,
     -51,-32768,  1436,-32768,   170,-32768,-32768,-32768,   166,  1881,
  -32768,   180,-32768,   162,   171,  2652,   278,-32768,-32768,-32768,
    2590,-32768,-32768,   180,-32768,-32768,-32768,   180,   262,   193,
  -32768,-32768,-32768,-32768,    55,    57,-32768,   191,   225,-32768,
     208,   212,   220,   241,   243,   256,   261,-32768,  1635,-32768,
  -32768,   266,   270,   272,   244,   277,  1635,  1635,-32768,  2090,
    2211,   474,   474,   365,   365,   107,   107,-32768,  2019,  2226,
    2241,   365,   365,   121,   121,    58,    58,    58,-32768,-32768,
     -65,  1138,   146,-32768,    40,   146,   146,   146,    20,  1635,
     180,-32768,-32768,   279,-32768,  2363,-32768,  2514,  2652,   262,
  -32768,-32768,-32768,     7,-32768,    80,  2652,    82,-32768,-32768,
     287,-32768,-32768,   180,  1299,-32768,-32768,   115,   168,   -51,
  -32768,-32768,-32768,-32768,   290,-32768,-32768,-32768,   292,-32768,
  -32768,-32768,   296,-32768,    58,  2057,  1635,-32768,-32768,   146,
     297,   293,  2057,-32768,   289,   316,   314,-32768,   180,  2679,
       9,   322,   324,-32768,-32768,-32768,-32768,-32768,   180,  2528,
     180,   313,   326,-32768,   134,-32768,-32768,-32768,-32768,   115,
    2452,   320,   115,  2452,   115,    82,-32768,-32768,   321,    82,
      82,    82,   219,-32768,  2703,-32768,   308,-32768,   144,-32768,
     318,  1383,  2040,   325,   115,  1745,   115,   115,   115,-32768,
     203,-32768,  1635,-32768,  1635,  2057,  2452,-32768,-32768,   180,
    1635,   336,-32768,   667,   704,  1139,   299,-32768,-32768,     9,
    2728,   333,   134,-32768,   355,  2514,-32768,-32768,   328,   134,
     134,   134,   134,   -59,-32768,   115,-32768,   203,   134,-32768,
    2652,   323,    50,-32768,   134,-32768,   115,   154,   343,-32768,
     203,   228,    82,   342,   342,   342,-32768,  1635,-32768,  2452,
  -32768,  1002,-32768,-32768,   180,  1635,  1383,   344,   346,  2057,
  -32768,-32768,   115,   249,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     348,   319,-32768,-32768,   249,   249,   190,   327,  1299,-32768,
    1635,   363,-32768,-32768,   -32,   -26,   351,   362,  2057,-32768,
     180,   594,   180,-32768,-32768,   594,-32768,   594,-32768,   594,
     594,   594,  2752,-32768,-32768,  2576,   -59,  1936,-32768,-32768,
  -32768,-32768,   134,   353,   353,   353,   284,   574,  1635,-32768,
  -32768,-32768,   203,   372,-32768,    63,   134,   425,-32768,  2466,
      63,   196,   471,   367,   425,   380,-32768,-32768,   342,  2452,
     364,   366,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   374,-32768,   368,
     376,-32768,  1467,   249,-32768,-32768,-32768,-32768,  2040,  2452,
     378,   115,-32768,-32768,   425,  1635,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   353,   391,   401,
     395,   405,   574,   574,   574,   574,  1123,   574,   748,-32768,
     396,   417,-32768,   115,  1635,-32768,    63,-32768,   435,-32768,
  -32768,-32768,-32768,   404,-32768,   435,   115,  2452,   408,-32768,
     425,   881,-32768,-32768,-32768,  1383,  2057,   409,-32768,-32768,
     435,  2057,  2452,  2576,  2576,  2576,    75,    75,    75,    75,
     412,    17,    75,   574,   574,   574,   574,   574,   574,   574,
     574,   574,   574,   574,   574,   574,   574,   574,   574,   574,
     574,  1551,  1635,-32768,   115,-32768,  2057,-32768,   406,-32768,
    2452,-32768,   413,   425,   435,-32768,   416,   425,   418,   430,
     421,   432,   574,-32768,  2196,  2256,  1679,  1679,   626,   626,
     341,   341,-32768,  2074,  2271,  2376,   521,   521,    75,    75,
      75,-32768,-32768,   126,  1715,-32768,    25,  2452,   424,   425,
     435,-32768,   435,   425,   427,-32768,   428,    75,   574,-32768,
  -32768,-32768,   429,   437,   425,   435,   435,  1635,  1635,   748,
  -32768,   425,   435,   128,   131,   435,-32768,-32768,   547,   552,
  -32768
};

static const short yypgoto[] =
{
  -32768,  -145,-32768,   130,-32768,-32768,   388,-32768,-32768,   -74,
     172,-32768,-32768,-32768,  -109,  -151,-32768,-32768,-32768,  -135,
    -195,   392,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -490,
  -32768,-32768,   176,-32768,-32768,-32768,   177,   247,  -320,-32768,
    -308,-32768,    74,  -402,  -261,  -429,-32768,    34,   -95,  -273,
    -105,     1,   402,-32768,   -25,   -72,-32768,   -69,-32768,-32768,
  -32768,   205,   -68,-32768,   -67,-32768,   282,-32768,    -9,    -5,
  -32768,-32768,-32768,     0,   478,-32768,-32768,   189,-32768,    -8,
  -32768,  -376,   -64,   -29,    91,    71,  -139,  -219,   370,   415,
      -1
};


#define	YYLAST		2873


static const short yytable[] =
{
       5,   179,   122,    87,    54,   533,   121,   660,   338,   200,
      88,    99,   201,   202,   203,   100,    89,   341,   545,   407,
     101,   227,   417,    92,   420,   210,   211,   212,   265,   214,
     215,   216,    54,   156,   157,   418,   227,    90,   221,   222,
     228,   148,   225,   252,   443,   527,   484,   485,   486,  -220,
     160,   550,  -220,   166,   715,   307,   255,   256,   257,   258,
     528,    91,   538,   156,   157,   156,   157,   213,   496,   227,
     156,   157,   204,    33,    87,   227,   205,   156,   157,   223,
     224,   206,   383,   384,   385,   532,   147,   133,   672,   161,
     346,   347,   348,    54,   673,    93,   541,    94,   107,   108,
     109,   110,   386,   124,   751,    54,    54,   200,    95,   492,
     201,   202,   203,   105,   670,   102,   250,   319,   227,   516,
     342,   551,   663,   156,   157,   363,   523,   524,   525,   526,
     701,   349,   181,   705,   354,   535,   133,   783,   712,   259,
     310,   540,   396,   397,   398,   821,   534,   166,   162,   309,
     133,   539,   700,   163,   298,   167,   103,   169,   164,   546,
     166,   166,   166,   166,   364,   506,   508,   704,   171,   173,
     204,    87,     5,   175,   205,   144,   145,   146,   104,   206,
     390,   176,   528,   399,   730,   106,   274,   365,   156,   157,
     350,   277,   760,   761,   762,   351,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   177,   251,   139,   140,
     141,   142,   143,   366,   144,   145,   146,   227,   367,   227,
     774,   226,   227,   368,   141,   142,   143,   218,   144,   145,
     146,   718,   400,   512,   433,   434,   819,   401,   836,   687,
     421,   837,   402,   166,   423,   424,   425,   542,   313,   317,
     254,     5,   323,   706,    87,   259,   336,   335,   261,   337,
     266,   702,   489,   490,   543,   267,   353,   345,     5,    37,
     272,    38,   677,   810,     9,   149,   679,   812,   680,   273,
     681,   682,   683,   542,   150,   286,   776,   304,   305,   542,
      44,   151,    46,   281,   767,   282,   487,   488,   489,   490,
     666,   290,    47,    48,   489,   490,   713,   317,    87,   825,
     517,   489,   490,   826,     5,    52,   227,   548,   291,   335,
     312,   667,   292,   404,   832,   156,   157,   426,   427,   415,
     293,   835,   415,   494,   353,   495,   547,   427,   353,   353,
     353,   294,    95,    87,   302,   362,   432,     1,     2,     3,
     440,   727,   281,   295,   282,   283,   284,   489,   490,   493,
     751,   659,   509,   510,   511,   415,   296,   375,   502,   502,
     502,   297,   320,   407,   131,   132,   299,     5,   699,    87,
     300,   404,   301,    87,   133,   335,   420,   303,   404,   404,
     404,   404,   530,   528,   688,   355,   493,   404,   372,   772,
     378,   536,   373,   404,   374,   376,   377,   379,   380,   493,
     158,   353,   388,   394,   778,   389,   313,   395,   415,   430,
     168,   170,   439,   416,   422,   440,   435,   515,   442,    74,
     174,   522,   665,   537,   532,   200,   182,   662,   201,   202,
     203,   498,   755,   756,   757,   758,   759,   499,   760,   761,
     762,   427,   808,   544,   671,   661,   675,   217,   664,   219,
     220,   674,   528,   703,   707,   667,   139,   140,   141,   142,
     143,   716,   144,   145,   146,   714,   720,   719,   723,   313,
     685,   129,   130,   131,   132,   722,   502,   724,   312,   823,
     502,   728,   502,   133,   502,   502,   502,   439,   204,   732,
     733,    87,   205,   734,   735,   530,    54,   206,   764,   763,
     768,   404,   769,   152,   806,   154,   155,   313,   773,   777,
     159,   493,   782,   809,   493,   404,   709,   811,   813,   493,
     814,   815,   816,   709,   824,   827,   828,   839,   415,   830,
     751,   271,   840,   699,   699,   699,   699,   831,   699,   668,
     264,   312,   729,   278,   658,   771,   518,   280,   765,   805,
     520,   269,   521,   711,   288,   289,   392,     6,     7,     8,
       9,   270,    10,   137,   138,   139,   140,   141,   142,   143,
     686,   144,   145,   146,   513,   152,   154,   155,   159,   312,
     381,   275,   156,   157,   699,   699,   699,   699,   699,   699,
     699,   699,   699,   699,   699,   699,   699,   699,   699,   699,
     699,   699,   657,     0,     0,   721,   689,     0,     0,   152,
     316,   152,   432,    16,   757,   758,   759,     0,   760,   761,
     762,     0,    39,   699,     0,   749,   750,     0,     0,     0,
       0,     0,     0,   360,   690,   751,   691,     0,     0,     0,
      25,     0,     0,     0,     0,     0,     0,   741,   415,     0,
       0,   740,     0,   709,     0,   156,   157,    49,     0,   699,
       0,     0,   692,   500,    51,     0,   693,   694,   316,     0,
     695,     0,   696,     0,     0,     0,   697,    54,   391,     0,
     393,     0,     0,     0,     0,   493,     0,     0,   779,   780,
     781,     0,   156,   157,     0,    39,   415,     0,     0,   709,
       0,     0,     0,     0,   440,     0,     0,     0,     0,     0,
       0,   415,   803,   726,    54,    54,    54,   755,   756,   757,
     758,   759,     0,   760,   761,   762,   731,     0,     0,   497,
      49,     0,    39,   504,   504,   504,   500,    51,     0,     0,
     501,   743,   744,   745,   746,   747,   748,   749,   750,   415,
       0,     0,   709,     0,     0,   766,   709,   751,     0,     0,
      37,     0,    38,   736,   737,   738,   739,    49,   742,     0,
       0,     0,     0,   500,    51,   253,   439,   505,   833,   834,
       0,    44,   153,    46,   360,     0,   415,     0,   709,     0,
       0,     0,   709,    47,    48,     0,     0,     0,     0,     0,
       0,     0,     0,   709,     0,     0,    52,     0,     0,     0,
     709,     0,     0,   804,   784,   785,   786,   787,   788,   789,
     790,   791,   792,   793,   794,   795,   796,   797,   798,   799,
     800,   801,     0,   752,   753,     0,   754,   360,     0,   755,
     756,   757,   758,   759,     0,   760,   761,   762,     0,     0,
     676,   504,   678,   817,     0,   504,     0,   504,     0,   504,
     504,   504,     0,     0,   552,   553,   554,   555,   556,   557,
     558,   559,     0,   560,   561,   562,   563,   564,   565,   566,
     567,   568,   569,   570,     0,     0,     0,     0,     0,   829,
     571,   572,   573,   574,   575,   576,   577,   578,   579,   580,
     581,   582,   583,   584,   585,     0,   586,   587,   588,   589,
     590,   591,   592,   593,   594,     0,   595,   596,   597,   598,
     599,   600,   601,   602,   603,   604,   605,   606,   607,     0,
     608,     0,   609,   610,   611,   612,   613,   614,   615,   616,
     617,   618,   619,   620,   621,     0,   622,   623,   624,   625,
     626,   627,   628,     0,   629,   630,   631,   632,     0,     0,
       0,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,   653,   775,   654,   655,   552,   553,   554,   555,   556,
     557,   558,   559,     0,   560,   561,   562,   563,   564,   565,
     566,   567,   568,   569,   570,     0,     0,     0,     0,     0,
       0,   571,   572,   573,   574,   575,   576,   577,   578,   579,
     580,   581,   582,   583,   584,   585,     0,   586,   587,   588,
     589,   590,   591,   592,   593,   594,     0,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
       0,   608,     0,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,     0,   622,   623,   624,
     625,   626,   627,   628,     0,   629,   630,   631,   632,     0,
       0,     0,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,   653,     0,   654,   655,     6,     7,     8,     9,
       0,    10,   111,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   156,   157,     0,
       0,   125,   126,   127,   128,   129,   130,   131,   132,     0,
       0,     0,     0,     0,     0,     0,     0,   133,   112,     0,
     113,    39,    40,     0,   114,    15,   822,     0,    42,     0,
       0,     0,    16,   115,     0,     0,     0,    39,     0,   116,
     117,    46,     0,     0,    20,     0,     0,     0,     0,     0,
       0,   118,   119,    23,     0,    24,    49,     0,     0,    25,
       0,     0,    50,    51,   120,     0,     0,    53,     6,     7,
       8,     9,    49,    10,    11,     0,     0,     0,   500,    51,
       0,    27,   507,     0,     0,    28,    29,     0,     0,    30,
       0,    31,     0,   134,   135,    32,   136,   137,   138,   139,
     140,   141,   142,   143,     0,   144,   145,   146,     0,     0,
      12,   308,    13,     0,     0,     0,    14,    15,     0,     0,
       0,     0,     0,     0,    16,    17,     0,     0,     0,     0,
       0,    18,    19,     0,     0,     0,    20,     0,    37,     0,
      38,     0,     0,    21,    22,    23,    37,    24,    38,     0,
       0,    25,     6,     7,     8,     9,    26,    10,    11,    44,
     153,    46,     0,     0,     0,     0,     0,    44,   153,    46,
       0,    47,    48,    27,     0,     0,     0,    28,    29,    47,
      48,    30,     0,    31,    52,   249,     0,    32,     0,     0,
       0,     0,    52,     0,    12,     0,    13,     0,     0,     0,
      14,    15,     0,     0,     0,     0,     0,     0,    16,    17,
       0,   102,     0,     0,     0,    18,    19,     0,     0,   103,
      20,     0,    37,     0,    38,     0,     0,    21,    22,    23,
      37,    24,    38,     0,     0,    25,     6,     7,     8,     9,
      26,    10,    11,    44,   153,    46,     0,     0,     0,   361,
       0,    44,   153,    46,     0,    47,    48,    27,     0,     0,
       0,    28,    29,    47,    48,    30,     0,    31,    52,     0,
       0,    32,     0,     0,     0,     0,    52,     0,    12,     0,
      13,     0,     0,     0,    14,    15,     0,     0,     0,     0,
       0,     0,    16,    17,     0,   106,     0,     0,     0,    18,
      19,     0,     0,     0,    20,     0,     0,     0,     0,     0,
       0,    21,    22,    23,     0,    24,     0,     0,     0,    25,
       6,     7,     8,     9,    26,    10,    11,     0,     0,     0,
      66,     0,     0,   436,     0,     0,     0,     0,     0,     0,
      67,    27,     0,     0,    68,    28,    29,    69,     0,    30,
       0,    31,     0,     0,     0,    32,    70,     0,     0,    71,
      72,    73,    12,     0,    13,     0,     0,     0,    14,    15,
      74,     0,     0,     0,    75,     0,    16,    17,    76,     0,
       0,     0,     0,    18,    19,     0,     0,     0,    20,     0,
       0,     0,     0,     0,     0,    21,    22,    23,     0,    24,
       0,     0,     0,    25,     6,     7,     8,     9,    26,    10,
      11,     0,     0,     0,     0,     0,     0,   725,     0,     0,
       0,     0,     0,     0,     0,    27,     0,     0,     0,    28,
      29,     0,     0,    30,     0,    31,    37,     0,    38,    32,
       0,     0,   149,     0,     0,     0,    12,     0,    13,     0,
       0,   150,    14,    15,     0,     0,     0,    44,   151,    46,
      16,    17,     0,     0,     0,     0,     0,    18,    19,    47,
      48,     0,    20,     0,     0,     0,     0,     0,     0,    21,
      22,    23,    52,    24,     0,     0,     0,    25,     6,     7,
       8,     9,    26,    10,    11,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,    28,    29,     0,     0,    30,     0,    31,
       0,   802,     0,    32,     0,     0,     0,     0,     0,     0,
      12,     0,    13,     0,     0,     0,    14,    15,     0,     0,
       0,     0,     0,     0,    16,    17,   747,   748,   749,   750,
       0,    18,    19,     0,     0,     0,    20,     0,   751,     0,
       0,     0,     0,    21,    22,    23,     0,    24,     0,     0,
       0,    25,     0,     0,     0,     0,    26,     0,   125,   126,
     127,   128,   129,   130,   131,   132,     0,     0,     0,     0,
       0,     0,     0,    27,   133,     0,     0,    28,    29,     0,
       0,    30,     0,    31,     0,     0,     0,    32,   444,   445,
     446,   447,   448,   449,   450,   451,     0,     0,     0,     0,
       0,     0,     0,     0,   452,     0,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,     0,     0,
     755,   756,   757,   758,   759,   465,   760,   761,   762,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   466,     0,     0,     0,
     134,   135,     0,   136,   137,   138,   139,   140,   141,   142,
     143,     0,   144,   145,   146,   183,   184,     0,   820,     0,
       0,     0,     0,     0,     0,     0,   467,     0,     0,   468,
       0,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,     0,   480,   481,     0,     0,   482,     0,     0,
       0,     0,    37,     0,    38,    39,   185,     0,    41,     0,
       0,     0,    42,   186,   187,     0,     0,    43,     0,   183,
     184,     0,   188,    44,    45,    46,   189,     0,     0,   190,
       0,     0,     0,   191,     0,    47,    48,     0,   192,     0,
      49,     0,     0,     0,     0,     0,   193,    51,    52,     0,
     194,    53,   195,     0,     0,     0,    37,   196,    38,    39,
     268,     0,    41,     0,     0,     0,    42,   186,   187,     0,
       0,    43,     0,   197,   183,   184,   188,    44,    45,    46,
     189,     0,     0,   190,     0,     0,     0,   191,     0,    47,
      48,     0,   192,     0,    49,     0,     0,     0,     0,     0,
     193,    51,    52,     0,   194,    53,   195,     0,     0,     0,
       0,    37,     0,    38,    39,   185,     0,    41,     0,     0,
       0,    42,   186,   187,     0,     0,    43,   197,     0,     0,
       0,   188,    44,    45,    46,   189,     0,     0,   190,     0,
       0,     0,   191,     0,    47,    48,     0,   192,     0,    49,
       0,     0,     0,     0,     0,   193,    51,    52,     0,   194,
      53,   195,   125,   126,   127,   128,   129,   130,   131,   132,
       0,     0,     0,     0,     0,     0,     0,     0,   133,     0,
       0,     0,   197,   125,   126,   127,   128,   129,   130,   131,
     132,     0,     0,     0,     0,     0,     0,     0,     0,   133,
     125,   126,   127,   128,   129,   130,   131,   132,     0,     0,
       0,     0,     0,     0,     0,     0,   133,   743,   744,   745,
     746,   747,   748,   749,   750,     0,     0,     0,     0,     0,
       0,     0,     0,   751,   126,   127,   128,   129,   130,   131,
     132,     0,     0,     0,     0,     0,     0,     0,     0,   133,
       0,     0,   306,     0,   134,   135,     0,   136,   137,   138,
     139,   140,   141,   142,   143,     0,   144,   145,   146,     0,
       0,     0,   441,     0,     0,   134,   135,     0,   136,   137,
     138,   139,   140,   141,   142,   143,     0,   144,   145,   146,
       0,     0,   134,   135,     0,   136,   137,   138,   139,   140,
     141,   142,   143,     0,   144,   145,   146,   818,     0,   752,
     753,     0,   754,     0,     0,   755,   756,   757,   758,   759,
       0,   760,   761,   762,     0,     0,   135,     0,   136,   137,
     138,   139,   140,   141,   142,   143,     0,   144,   145,   146,
     744,   745,   746,   747,   748,   749,   750,     0,     0,     0,
       0,     0,     0,     0,     0,   751,   127,   128,   129,   130,
     131,   132,     0,     0,     0,     0,     0,     0,     0,     0,
     133,   127,   128,   129,   130,   131,   132,     0,     0,     0,
       0,     0,     0,     0,     0,   133,   127,   128,   129,   130,
     131,   132,     0,     0,     0,     0,     0,     0,     0,     0,
     133,   745,   746,   747,   748,   749,   750,     0,     0,     0,
       0,     0,     0,     0,     0,   751,   745,   746,   747,   748,
     749,   750,     0,     0,     0,     0,     0,     0,     0,     0,
     751,     0,   753,     0,   754,     0,     0,   755,   756,   757,
     758,   759,     0,   760,   761,   762,     0,   135,     0,   136,
     137,   138,   139,   140,   141,   142,   143,     0,   144,   145,
     146,     0,     0,     0,   136,   137,   138,   139,   140,   141,
     142,   143,     0,   144,   145,   146,     0,     0,     0,     0,
     137,   138,   139,   140,   141,   142,   143,    -1,   144,   145,
     146,     0,   753,     0,   754,     0,     0,   755,   756,   757,
     758,   759,     0,   760,   761,   762,     0,     0,     0,   754,
       0,     0,   755,   756,   757,   758,   759,     0,   760,   761,
     762,   745,   746,   747,   748,   749,   750,     0,     0,     0,
       0,    66,     0,     0,     0,   751,     0,    66,     0,     0,
       0,    67,     0,     0,     0,    68,     0,    67,    69,     0,
       0,    68,     0,     0,    69,     0,     0,    70,     0,     0,
      71,    72,    73,    70,     0,     0,    71,    72,    73,     0,
       0,    74,     0,     0,     0,    75,     0,    74,     0,    76,
       0,    75,     0,     0,     0,    76,     0,     0,     0,    77,
     408,    36,     0,     0,   409,    77,     0,     0,     0,     0,
       0,     0,     0,     0,   408,    36,     0,     0,   710,     0,
       0,     0,     0,     0,   324,     0,     0,   755,   756,   757,
     758,   759,     0,   760,   761,   762,     0,    37,     0,    38,
      39,   410,     0,    41,     0,     0,     0,    42,     0,     0,
       0,    37,    43,    38,    39,   410,     0,    41,    44,    45,
      46,    42,   326,   327,     0,     0,    43,     0,     0,     0,
      47,    48,    44,    45,    46,    49,   326,   327,     0,     0,
       0,    50,    51,    52,    47,    48,    53,     0,     0,    49,
       0,     0,     0,     0,     0,    50,    51,    52,     0,    37,
      53,    38,   328,   329,     0,    41,     0,     0,     0,     0,
       0,     0,     0,    37,    43,    38,     0,     0,     0,    41,
      44,    45,    46,     0,     0,    36,     0,     0,    43,     0,
       0,     0,    47,    48,    44,    45,    46,     0,     0,    36,
       0,     0,     0,   330,     0,    52,    47,    48,    53,     0,
       0,     0,     0,     0,     0,     0,     0,   330,     0,    52,
       0,    37,    53,    38,    39,    40,     0,    41,     0,     0,
       0,    42,     0,     0,     0,    37,    43,    38,    39,   276,
       0,    41,    44,    45,    46,    42,     0,    96,     0,     0,
      43,     0,     0,     0,    47,    48,    44,    45,    46,    49,
       0,    36,     0,     0,     0,    50,    51,    52,    47,    48,
      53,     0,     0,    49,     0,     0,     0,     0,     0,    50,
      51,    52,     0,    37,    53,    38,    39,     0,     0,    41,
       0,     0,     0,    42,     0,     0,     0,    37,    43,    38,
      39,     0,     0,    41,    44,    45,    46,    42,     0,     0,
       0,     0,    43,     0,     0,     0,    47,    48,    44,    45,
      46,    49,     0,    66,     0,     0,     0,    97,    51,    52,
      47,    48,    53,    67,     0,    49,     0,    68,     0,     0,
      69,    50,    51,    52,     0,     0,    53,    66,     0,    70,
       0,     0,    71,    72,    73,     0,     0,    67,     0,     0,
       0,    68,     0,    74,    69,     0,     0,    75,     0,     0,
       0,    76,    66,    70,     0,     0,    71,    72,    73,     0,
       0,    77,    67,     0,     0,     0,    68,    74,     0,    69,
       0,    75,     0,     0,     0,    76,    66,     0,    70,     0,
     382,    71,    72,    73,     0,    77,    67,     0,     0,     0,
      68,     0,    74,    69,     0,     0,    75,     0,     0,     0,
      76,     0,    70,     0,   428,    71,    72,    73,     0,     0,
      77,     0,     0,     0,     0,     0,    74,     0,     0,     0,
      75,     0,     0,     0,    76,     0,     0,     0,     0,   514,
       0,     0,     0,     0,    77,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   684
};

static const short yycheck[] =
{
       1,    75,    31,     4,     3,   407,    31,   436,   269,    81,
     118,    20,    81,    81,    81,    20,   118,    10,   420,   339,
      20,   101,   342,   109,   344,    89,    90,    91,   173,    93,
      94,    95,    31,     8,     9,   343,   101,   118,   102,   103,
     120,    40,   106,   148,   364,   104,   366,   367,   368,   100,
      10,   427,   103,    54,   544,   120,   161,   162,   163,   164,
     119,   118,    12,     8,     9,     8,     9,    92,   376,   101,
       8,     9,    81,     2,    75,   101,    81,     8,     9,   104,
     105,    81,    73,    74,    75,   405,     6,    29,   120,    49,
       8,     9,    10,    92,   120,   118,   416,   118,    27,    28,
      29,    30,    93,    32,    29,   104,   105,   179,   118,   370,
     179,   179,   179,   109,   490,   118,   145,   262,   101,   392,
     113,   429,   442,     8,     9,    10,   399,   400,   401,   402,
     532,    49,    70,   535,   279,   408,    29,   120,   540,   119,
     120,   414,     8,     9,    10,   120,   407,   148,   108,   254,
      29,   101,   528,   113,   218,   100,   118,   100,   118,   420,
     161,   162,   163,   164,    49,   384,   385,   104,   103,   100,
     179,   172,   173,   103,   179,   117,   118,   119,   118,   179,
     325,   103,   119,    49,   674,   118,   185,    72,     8,     9,
     108,   190,   117,   118,   119,   113,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   103,   146,   111,   112,
     113,   114,   115,   108,   117,   118,   119,   101,   113,   101,
     720,   120,   101,   118,   113,   114,   115,   118,   117,   118,
     119,   549,   108,   388,   100,   101,   120,   113,   120,   522,
     345,   120,   118,   254,   349,   350,   351,   103,   259,   260,
     113,   262,   263,   536,   265,   119,   267,   267,   100,   268,
     100,   532,   118,   119,   120,   109,   277,   276,   279,    45,
     118,    47,   501,   773,     6,    51,   505,   777,   507,   118,
     509,   510,   511,   103,    60,   102,   725,   226,   227,   103,
      66,    67,    68,   100,   706,   102,   103,   104,   118,   119,
     120,   120,    78,    79,   118,   119,   120,   318,   319,   809,
     394,   118,   119,   813,   325,    91,   101,   422,   120,   329,
     259,     4,   120,   334,   824,     8,     9,   118,   119,   340,
     120,   831,   343,   372,   345,   374,   118,   119,   349,   350,
     351,   110,   118,   354,   110,   284,   357,    97,    98,    99,
     361,   669,   100,   120,   102,   103,   104,   118,   119,   370,
      29,   435,    73,    74,    75,   376,   120,   306,   383,   384,
     385,   120,   103,   703,    19,    20,   120,   388,   527,   390,
     120,   392,   120,   394,    29,   395,   716,   120,   399,   400,
     401,   402,   403,   119,   120,   118,   407,   408,   118,   717,
     121,   410,   120,   414,   118,   118,   123,   101,   104,   420,
      50,   422,   100,   110,   732,   101,   427,   101,   429,   121,
      60,    61,   361,   113,   113,   436,   118,   104,   113,    84,
      70,   113,   123,   120,   764,   517,    76,   101,   517,   517,
     517,   380,   111,   112,   113,   114,   115,   121,   117,   118,
     119,   119,   770,   120,   101,   121,   104,    97,   120,    99,
     100,   120,   119,   101,    49,     4,   111,   112,   113,   114,
     115,   101,   117,   118,   119,   118,   120,   123,   120,   490,
     515,    17,    18,    19,    20,   121,   501,   121,   427,   807,
     505,   123,   507,    29,   509,   510,   511,   436,   517,   118,
     109,   512,   517,   118,   109,   516,   515,   517,   101,   123,
      85,   522,   118,    45,   118,    47,    48,   528,   120,   120,
      52,   532,   120,   120,   535,   536,   537,   121,   120,   540,
     110,   120,   110,   544,   120,   118,   118,     0,   549,   120,
      29,   181,     0,   692,   693,   694,   695,   120,   697,   488,
     172,   490,   671,   193,   434,   716,   394,   197,   703,   764,
     394,   179,   395,   539,   204,   205,   329,     3,     4,     5,
       6,   179,     8,   109,   110,   111,   112,   113,   114,   115,
     516,   117,   118,   119,   389,   117,   118,   119,   120,   528,
     318,   186,     8,     9,   743,   744,   745,   746,   747,   748,
     749,   750,   751,   752,   753,   754,   755,   756,   757,   758,
     759,   760,   433,    -1,    -1,   633,    52,    -1,    -1,   151,
     260,   153,   633,    59,   113,   114,   115,    -1,   117,   118,
     119,    -1,    48,   782,    -1,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,   283,    80,    29,    82,    -1,    -1,    -1,
      86,    -1,    -1,    -1,    -1,    -1,    -1,   696,   669,    -1,
      -1,   696,    -1,   674,    -1,     8,     9,    83,    -1,   818,
      -1,    -1,   108,    89,    90,    -1,   112,   113,   318,    -1,
     116,    -1,   118,    -1,    -1,    -1,   122,   696,   328,    -1,
     330,    -1,    -1,    -1,    -1,   706,    -1,    -1,   733,   734,
     735,    -1,     8,     9,    -1,    48,   717,    -1,    -1,   720,
      -1,    -1,    -1,    -1,   725,    -1,    -1,    -1,    -1,    -1,
      -1,   732,   761,   662,   733,   734,   735,   111,   112,   113,
     114,   115,    -1,   117,   118,   119,   675,    -1,    -1,   379,
      83,    -1,    48,   383,   384,   385,    89,    90,    -1,    -1,
      93,    13,    14,    15,    16,    17,    18,    19,    20,   770,
      -1,    -1,   773,    -1,    -1,   704,   777,    29,    -1,    -1,
      45,    -1,    47,   692,   693,   694,   695,    83,   697,    -1,
      -1,    -1,    -1,    89,    90,    60,   725,    93,   827,   828,
      -1,    66,    67,    68,   434,    -1,   807,    -1,   809,    -1,
      -1,    -1,   813,    78,    79,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   824,    -1,    -1,    91,    -1,    -1,    -1,
     831,    -1,    -1,   762,   743,   744,   745,   746,   747,   748,
     749,   750,   751,   752,   753,   754,   755,   756,   757,   758,
     759,   760,    -1,   105,   106,    -1,   108,   487,    -1,   111,
     112,   113,   114,   115,    -1,   117,   118,   119,    -1,    -1,
     500,   501,   502,   782,    -1,   505,    -1,   507,    -1,   509,
     510,   511,    -1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,   818,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    -1,
      69,    -1,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    -1,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    -1,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      -1,    69,    -1,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    -1,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,     9,    -1,
      -1,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,    45,    -1,
      47,    48,    49,    -1,    51,    52,   806,    -1,    55,    -1,
      -1,    -1,    59,    60,    -1,    -1,    -1,    48,    -1,    66,
      67,    68,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    78,    79,    80,    -1,    82,    83,    -1,    -1,    86,
      -1,    -1,    89,    90,    91,    -1,    -1,    94,     3,     4,
       5,     6,    83,     8,     9,    -1,    -1,    -1,    89,    90,
      -1,   108,    93,    -1,    -1,   112,   113,    -1,    -1,   116,
      -1,   118,    -1,   105,   106,   122,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,   118,   119,    -1,    -1,
      45,   123,    47,    -1,    -1,    -1,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    59,    60,    -1,    -1,    -1,    -1,
      -1,    66,    67,    -1,    -1,    -1,    71,    -1,    45,    -1,
      47,    -1,    -1,    78,    79,    80,    45,    82,    47,    -1,
      -1,    86,     3,     4,     5,     6,    91,     8,     9,    66,
      67,    68,    -1,    -1,    -1,    -1,    -1,    66,    67,    68,
      -1,    78,    79,   108,    -1,    -1,    -1,   112,   113,    78,
      79,   116,    -1,   118,    91,   120,    -1,   122,    -1,    -1,
      -1,    -1,    91,    -1,    45,    -1,    47,    -1,    -1,    -1,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,
      -1,   118,    -1,    -1,    -1,    66,    67,    -1,    -1,   118,
      71,    -1,    45,    -1,    47,    -1,    -1,    78,    79,    80,
      45,    82,    47,    -1,    -1,    86,     3,     4,     5,     6,
      91,     8,     9,    66,    67,    68,    -1,    -1,    -1,   100,
      -1,    66,    67,    68,    -1,    78,    79,   108,    -1,    -1,
      -1,   112,   113,    78,    79,   116,    -1,   118,    91,    -1,
      -1,   122,    -1,    -1,    -1,    -1,    91,    -1,    45,    -1,
      47,    -1,    -1,    -1,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    59,    60,    -1,   118,    -1,    -1,    -1,    66,
      67,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    78,    79,    80,    -1,    82,    -1,    -1,    -1,    86,
       3,     4,     5,     6,    91,     8,     9,    -1,    -1,    -1,
      44,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      54,   108,    -1,    -1,    58,   112,   113,    61,    -1,   116,
      -1,   118,    -1,    -1,    -1,   122,    70,    -1,    -1,    73,
      74,    75,    45,    -1,    47,    -1,    -1,    -1,    51,    52,
      84,    -1,    -1,    -1,    88,    -1,    59,    60,    92,    -1,
      -1,    -1,    -1,    66,    67,    -1,    -1,    -1,    71,    -1,
      -1,    -1,    -1,    -1,    -1,    78,    79,    80,    -1,    82,
      -1,    -1,    -1,    86,     3,     4,     5,     6,    91,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,
     113,    -1,    -1,   116,    -1,   118,    45,    -1,    47,   122,
      -1,    -1,    51,    -1,    -1,    -1,    45,    -1,    47,    -1,
      -1,    60,    51,    52,    -1,    -1,    -1,    66,    67,    68,
      59,    60,    -1,    -1,    -1,    -1,    -1,    66,    67,    78,
      79,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    78,
      79,    80,    91,    82,    -1,    -1,    -1,    86,     3,     4,
       5,     6,    91,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
      -1,    -1,    -1,   112,   113,    -1,    -1,   116,    -1,   118,
      -1,   120,    -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    -1,    47,    -1,    -1,    -1,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    59,    60,    17,    18,    19,    20,
      -1,    66,    67,    -1,    -1,    -1,    71,    -1,    29,    -1,
      -1,    -1,    -1,    78,    79,    80,    -1,    82,    -1,    -1,
      -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    13,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   108,    29,    -1,    -1,   112,   113,    -1,
      -1,   116,    -1,   118,    -1,    -1,    -1,   122,    13,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    -1,    -1,
     111,   112,   113,   114,   115,    50,   117,   118,   119,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,
     105,   106,    -1,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,   118,   119,     8,     9,    -1,   123,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,   104,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,    45,    -1,    47,    48,    49,    -1,    51,    -1,
      -1,    -1,    55,    56,    57,    -1,    -1,    60,    -1,     8,
       9,    -1,    65,    66,    67,    68,    69,    -1,    -1,    72,
      -1,    -1,    -1,    76,    -1,    78,    79,    -1,    81,    -1,
      83,    -1,    -1,    -1,    -1,    -1,    89,    90,    91,    -1,
      93,    94,    95,    -1,    -1,    -1,    45,   100,    47,    48,
      49,    -1,    51,    -1,    -1,    -1,    55,    56,    57,    -1,
      -1,    60,    -1,   116,     8,     9,    65,    66,    67,    68,
      69,    -1,    -1,    72,    -1,    -1,    -1,    76,    -1,    78,
      79,    -1,    81,    -1,    83,    -1,    -1,    -1,    -1,    -1,
      89,    90,    91,    -1,    93,    94,    95,    -1,    -1,    -1,
      -1,    45,    -1,    47,    48,    49,    -1,    51,    -1,    -1,
      -1,    55,    56,    57,    -1,    -1,    60,   116,    -1,    -1,
      -1,    65,    66,    67,    68,    69,    -1,    -1,    72,    -1,
      -1,    -1,    76,    -1,    78,    79,    -1,    81,    -1,    83,
      -1,    -1,    -1,    -1,    -1,    89,    90,    91,    -1,    93,
      94,    95,    13,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,
      -1,    -1,   116,    13,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
      13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    29,    13,    14,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    29,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,   103,    -1,   105,   106,    -1,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,   118,   119,    -1,
      -1,    -1,   102,    -1,    -1,   105,   106,    -1,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
      -1,    -1,   105,   106,    -1,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,   118,   119,   103,    -1,   105,
     106,    -1,   108,    -1,    -1,   111,   112,   113,   114,   115,
      -1,   117,   118,   119,    -1,    -1,   106,    -1,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
      14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      29,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      29,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      29,    -1,   106,    -1,   108,    -1,    -1,   111,   112,   113,
     114,   115,    -1,   117,   118,   119,    -1,   106,    -1,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,   118,
     119,    -1,    -1,    -1,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,   118,   119,    -1,    -1,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,     0,   117,   118,
     119,    -1,   106,    -1,   108,    -1,    -1,   111,   112,   113,
     114,   115,    -1,   117,   118,   119,    -1,    -1,    -1,   108,
      -1,    -1,   111,   112,   113,   114,   115,    -1,   117,   118,
     119,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    44,    -1,    -1,    -1,    29,    -1,    44,    -1,    -1,
      -1,    54,    -1,    -1,    -1,    58,    -1,    54,    61,    -1,
      -1,    58,    -1,    -1,    61,    -1,    -1,    70,    -1,    -1,
      73,    74,    75,    70,    -1,    -1,    73,    74,    75,    -1,
      -1,    84,    -1,    -1,    -1,    88,    -1,    84,    -1,    92,
      -1,    88,    -1,    -1,    -1,    92,    -1,    -1,    -1,   102,
       8,     9,    -1,    -1,    12,   102,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,     9,    -1,    -1,    12,    -1,
      -1,    -1,    -1,    -1,   121,    -1,    -1,   111,   112,   113,
     114,   115,    -1,   117,   118,   119,    -1,    45,    -1,    47,
      48,    49,    -1,    51,    -1,    -1,    -1,    55,    -1,    -1,
      -1,    45,    60,    47,    48,    49,    -1,    51,    66,    67,
      68,    55,     8,     9,    -1,    -1,    60,    -1,    -1,    -1,
      78,    79,    66,    67,    68,    83,     8,     9,    -1,    -1,
      -1,    89,    90,    91,    78,    79,    94,    -1,    -1,    83,
      -1,    -1,    -1,    -1,    -1,    89,    90,    91,    -1,    45,
      94,    47,    48,    49,    -1,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    60,    47,    -1,    -1,    -1,    51,
      66,    67,    68,    -1,    -1,     9,    -1,    -1,    60,    -1,
      -1,    -1,    78,    79,    66,    67,    68,    -1,    -1,     9,
      -1,    -1,    -1,    89,    -1,    91,    78,    79,    94,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    91,
      -1,    45,    94,    47,    48,    49,    -1,    51,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    45,    60,    47,    48,    49,
      -1,    51,    66,    67,    68,    55,    -1,     9,    -1,    -1,
      60,    -1,    -1,    -1,    78,    79,    66,    67,    68,    83,
      -1,     9,    -1,    -1,    -1,    89,    90,    91,    78,    79,
      94,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,    89,
      90,    91,    -1,    45,    94,    47,    48,    -1,    -1,    51,
      -1,    -1,    -1,    55,    -1,    -1,    -1,    45,    60,    47,
      48,    -1,    -1,    51,    66,    67,    68,    55,    -1,    -1,
      -1,    -1,    60,    -1,    -1,    -1,    78,    79,    66,    67,
      68,    83,    -1,    44,    -1,    -1,    -1,    89,    90,    91,
      78,    79,    94,    54,    -1,    83,    -1,    58,    -1,    -1,
      61,    89,    90,    91,    -1,    -1,    94,    44,    -1,    70,
      -1,    -1,    73,    74,    75,    -1,    -1,    54,    -1,    -1,
      -1,    58,    -1,    84,    61,    -1,    -1,    88,    -1,    -1,
      -1,    92,    44,    70,    -1,    -1,    73,    74,    75,    -1,
      -1,   102,    54,    -1,    -1,    -1,    58,    84,    -1,    61,
      -1,    88,    -1,    -1,    -1,    92,    44,    -1,    70,    -1,
     121,    73,    74,    75,    -1,   102,    54,    -1,    -1,    -1,
      58,    -1,    84,    61,    -1,    -1,    88,    -1,    -1,    -1,
      92,    -1,    70,    -1,   121,    73,    74,    75,    -1,    -1,
     102,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,
      88,    -1,    -1,    -1,    92,    -1,    -1,    -1,    -1,   121,
      -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   121
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 2:
#line 377 "cppBison.yxx"
{
  current_expr = yyvsp[0].u.expr;
}
    break;
case 3:
#line 381 "cppBison.yxx"
{
  current_type = yyvsp[0].u.type;
}
    break;
case 9:
#line 399 "cppBison.yxx"
{
  delete yyvsp[-1].u.expr;
}
    break;
case 10:
#line 411 "cppBison.yxx"
{
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) | 
                     (yyvsp[-1].u.integer & CPPInstance::SC_c_binding));
}
    break;
case 11:
#line 416 "cppBison.yxx"
{
  pop_storage_class();
}
    break;
case 19:
#line 430 "cppBison.yxx"
{
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = yylsp[0];
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
    break;
case 20:
#line 443 "cppBison.yxx"
{
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", yylsp[0]);
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
    break;
case 21:
#line 452 "cppBison.yxx"
{
  current_scope->set_current_vis(V_published);
}
    break;
case 22:
#line 456 "cppBison.yxx"
{
  current_scope->set_current_vis(V_public);
}
    break;
case 23:
#line 460 "cppBison.yxx"
{
  current_scope->set_current_vis(V_protected);
}
    break;
case 24:
#line 464 "cppBison.yxx"
{
  current_scope->set_current_vis(V_private);
}
    break;
case 25:
#line 471 "cppBison.yxx"
{
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
    break;
case 26:
#line 477 "cppBison.yxx"
{
  delete current_scope;
  pop_scope();
}
    break;
case 27:
#line 486 "cppBison.yxx"
{
  yyval.u.integer = 0;
}
    break;
case 28:
#line 490 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_extern;
}
    break;
case 29:
#line 494 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-2].u.integer | (int)CPPInstance::SC_extern;
  if (yyvsp[0].str == "C") {
    yyval.u.integer |= (int)CPPInstance::SC_c_binding;
  } else if (yyvsp[0].str == "C++") {
    yyval.u.integer &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + yyvsp[0].str + "\"", yylsp[0]);
  }
}
    break;
case 30:
#line 505 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_static;
}
    break;
case 31:
#line 509 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_inline;
}
    break;
case 32:
#line 513 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_virtual;
}
    break;
case 33:
#line 517 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_explicit;
}
    break;
case 34:
#line 521 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_volatile;
}
    break;
case 35:
#line 525 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_mutable;
}
    break;
case 36:
#line 529 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_register;
}
    break;
case 37:
#line 536 "cppBison.yxx"
{
  /* multiple_var_declaration adds itself to the scope. */
}
    break;
case 38:
#line 540 "cppBison.yxx"
{
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration(yyvsp[-1].u.decl, global_scope, current_lexer, yylsp[-1]);
}
    break;
case 39:
#line 549 "cppBison.yxx"
{
  if (yyvsp[-1].u.instance != (CPPInstance *)NULL) {
    yyvsp[-1].u.instance->_storage_class |= (current_storage_class | yyvsp[-2].u.integer);
    current_scope->add_declaration(yyvsp[-1].u.instance, global_scope, current_lexer, yylsp[-1]);
    yyvsp[-1].u.instance->set_initializer(yyvsp[0].u.expr);
  }
}
    break;
case 40:
#line 560 "cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if (yyvsp[0].u.decl->as_type_declaration()) {
    current_type = yyvsp[0].u.decl->as_type_declaration()->_type;
  } else {
    current_type = yyvsp[0].u.decl->as_type();
  }
  push_storage_class(yyvsp[-1].u.integer);
}
    break;
case 41:
#line 571 "cppBison.yxx"
{
  pop_storage_class();
}
    break;
case 42:
#line 575 "cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  current_type = yyvsp[0].u.type;
  push_storage_class(yyvsp[-2].u.integer);
}
    break;
case 43:
#line 582 "cppBison.yxx"
{
  pop_storage_class();
}
    break;
case 44:
#line 593 "cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-1].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-1].file);
  inst->set_initializer(yyvsp[0].u.expr);
  current_scope->add_declaration(inst, global_scope, current_lexer, yylsp[-1]);
}
    break;
case 45:
#line 601 "cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-3].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-3].file);
  inst->set_initializer(yyvsp[-2].u.expr);
  current_scope->add_declaration(inst, global_scope, current_lexer, yylsp[-3]);
}
    break;
case 46:
#line 612 "cppBison.yxx"
{
  yyvsp[-1].u.inst_ident->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-1].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-1].file);
  inst->set_initializer(yyvsp[0].u.expr);
  current_scope->add_declaration(inst, global_scope, current_lexer, yylsp[-1]);
}
    break;
case 47:
#line 621 "cppBison.yxx"
{
  yyvsp[-3].u.inst_ident->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-3].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-3].file);
  inst->set_initializer(yyvsp[-2].u.expr);
  current_scope->add_declaration(inst, global_scope, current_lexer, yylsp[-3]);
}
    break;
case 48:
#line 634 "cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if (yyvsp[0].u.decl->as_type_declaration()) {
    current_type = yyvsp[0].u.decl->as_type_declaration()->_type;
  } else {
    current_type = yyvsp[0].u.decl->as_type();
  }
  push_storage_class(yyvsp[-1].u.integer);
}
    break;
case 49:
#line 645 "cppBison.yxx"
{
  pop_storage_class();
}
    break;
case 50:
#line 649 "cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  current_type = yyvsp[0].u.type;
  push_storage_class(yyvsp[-2].u.integer);
}
    break;
case 51:
#line 656 "cppBison.yxx"
{
  pop_storage_class();
}
    break;
case 52:
#line 660 "cppBison.yxx"
{
  if (yyvsp[-1].u.instance != (CPPDeclaration *)NULL) {
    CPPInstance *inst = yyvsp[-1].u.instance->as_instance();
    if (inst != (CPPInstance *)NULL) {
      inst->_storage_class |= (current_storage_class | yyvsp[-2].u.integer);
      current_scope->add_declaration(inst, global_scope, current_lexer, yylsp[-1]);
      current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, yylsp[-1]);
    }
  }
}
    break;
case 53:
#line 674 "cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-1].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-1].file);
  inst->set_initializer(yyvsp[0].u.expr);
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, yylsp[-1]);
}
    break;
case 54:
#line 682 "cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-3].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-3].file);
  inst->set_initializer(yyvsp[-2].u.expr);
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, yylsp[-3]);
}
    break;
case 55:
#line 693 "cppBison.yxx"
{
  yyvsp[-1].u.inst_ident->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-1].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-1].file);
  inst->set_initializer(yyvsp[0].u.expr);
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, yylsp[-1]);
}
    break;
case 56:
#line 702 "cppBison.yxx"
{
  yyvsp[-3].u.inst_ident->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-3].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-3].file);
  inst->set_initializer(yyvsp[-2].u.expr);
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, yylsp[-3]);
}
    break;
case 57:
#line 716 "cppBison.yxx"
{
  push_scope(yyvsp[-1].u.identifier->get_scope(current_scope, global_scope));
}
    break;
case 58:
#line 720 "cppBison.yxx"
{
  pop_scope();
  CPPType *type;
  if (yyvsp[-5].u.identifier->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(yyvsp[-5].u.identifier);
  ii->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);

  yyval.u.instance = new CPPInstance(type, ii, 0, yylsp[-5].file);
}
    break;
case 59:
#line 738 "cppBison.yxx"
{
  push_scope(yyvsp[-1].u.identifier->get_scope(current_scope, global_scope));
}
    break;
case 60:
#line 742 "cppBison.yxx"
{
  pop_scope();
  CPPType *type;
  if (yyvsp[-5].u.identifier->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(yyvsp[-5].u.identifier);
  ii->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);

  yyval.u.instance = new CPPInstance(type, ii, 0, yylsp[-5].file);
}
    break;
case 61:
#line 762 "cppBison.yxx"
{
  push_scope(yyvsp[-1].u.identifier->get_scope(current_scope, global_scope));
}
    break;
case 62:
#line 766 "cppBison.yxx"
{
  pop_scope();
  if (yyvsp[-5].u.identifier->is_scoped()) {
    yyerror("Invalid destructor name: ~" + yyvsp[-5].u.identifier->get_fully_scoped_name(), yylsp[-5]);
  } else {
    CPPIdentifier *ident = 
      new CPPIdentifier("~" + yyvsp[-5].u.identifier->get_simple_name(), yylsp[-5].file);
    delete yyvsp[-5].u.identifier;

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);
    
    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);

    yyval.u.instance = new CPPInstance(type, ii, 0, yylsp[-5].file);
  }
}
    break;
case 63:
#line 792 "cppBison.yxx"
{
  push_scope(yyvsp[-2].u.inst_ident->get_scope(current_scope, global_scope));
}
    break;
case 64:
#line 796 "cppBison.yxx"
{
  pop_scope();
  CPPType *type = yyvsp[-9].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(type != NULL);

  CPPInstanceIdentifier *ii = yyvsp[-6].u.inst_ident;
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);
  yyval.u.instance = new CPPInstance(type, ii, 0, yylsp[-9].file);
}
    break;
case 65:
#line 807 "cppBison.yxx"
{
  push_scope(yyvsp[-2].u.inst_ident->get_scope(current_scope, global_scope));
}
    break;
case 66:
#line 811 "cppBison.yxx"
{
  pop_scope();
  CPPType *type = yyvsp[-10].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(type != NULL);

  CPPInstanceIdentifier *ii = yyvsp[-6].u.inst_ident;
  ii->add_scoped_pointer_modifier(yyvsp[-8].u.identifier);
  ii->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);
  yyval.u.instance = new CPPInstance(type, ii, 0, yylsp[-10].file);
}
    break;
case 67:
#line 824 "cppBison.yxx"
{
  if (yyvsp[-3].u.identifier != NULL) {
    push_scope(yyvsp[-3].u.identifier->get_scope(current_scope, global_scope));
  }
}
    break;
case 68:
#line 830 "cppBison.yxx"
{
  if (yyvsp[-7].u.identifier != NULL) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give all typecast operators the name "operator typecast".
  // Only their return type will differentiate them.  (Naturally, this
  // violates actual C++ rules, but we're not an actual C++ compiler
  // so we don't care.  And this is the easiest way to do it.)
  CPPIdentifier *ident = yyvsp[-7].u.identifier;
  if (ident == NULL) {
    ident = new CPPIdentifier("operator typecast", yylsp[-7].file);
  } else {
    ident->add_name("operator typecast");
  }
  yyval.u.instance = CPPInstance::make_typecast_function
    (new CPPInstance(yyvsp[-6].u.type, yyvsp[-5].u.inst_ident, 0, yylsp[-5].file), ident, yyvsp[-2].u.param_list, yyvsp[0].u.integer);
}
    break;
case 69:
#line 855 "cppBison.yxx"
{
  if (yyvsp[-4].u.identifier != NULL) {
    push_scope(yyvsp[-4].u.identifier->get_scope(current_scope, global_scope));
  }
}
    break;
case 70:
#line 861 "cppBison.yxx"
{
  if (yyvsp[-8].u.identifier != NULL) {
    pop_scope();
  }

  CPPIdentifier *ident = yyvsp[-8].u.identifier;
  if (ident == NULL) {
    ident = new CPPIdentifier("operator typecast", yylsp[-8].file);
  } else {
    ident->add_name("operator typecast");
  }
  yyvsp[-5].u.inst_ident->add_modifier(IIT_const);
  yyval.u.instance = CPPInstance::make_typecast_function
    (new CPPInstance(yyvsp[-6].u.type, yyvsp[-5].u.inst_ident, 0, yylsp[-5].file), ident, yyvsp[-2].u.param_list, yyvsp[0].u.integer);
}
    break;
case 71:
#line 881 "cppBison.yxx"
{
  CPPDeclaration *decl = 
    yyvsp[0].u.identifier->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != (CPPDeclaration *)NULL) {
    yyval.u.instance = decl->as_instance();
  } else {
    yyval.u.instance = (CPPInstance *)NULL;
  }
}
    break;
case 72:
#line 894 "cppBison.yxx"
{
  yyval.u.integer = 0;
}
    break;
case 73:
#line 898 "cppBison.yxx"
{
  yyval.u.integer = (int)CPPFunctionType::F_const_method;
}
    break;
case 74:
#line 902 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-3].u.integer;
}
    break;
case 75:
#line 906 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-4].u.integer;
}
    break;
case 76:
#line 913 "cppBison.yxx"
{
  yyval.str = "!";
}
    break;
case 77:
#line 917 "cppBison.yxx"
{
  yyval.str = "~";
}
    break;
case 78:
#line 921 "cppBison.yxx"
{
  yyval.str = "*";
}
    break;
case 79:
#line 925 "cppBison.yxx"
{
  yyval.str = "/";
}
    break;
case 80:
#line 929 "cppBison.yxx"
{
  yyval.str = "%";
}
    break;
case 81:
#line 933 "cppBison.yxx"
{
  yyval.str = "+";
}
    break;
case 82:
#line 937 "cppBison.yxx"
{
  yyval.str = "-";
}
    break;
case 83:
#line 941 "cppBison.yxx"
{
  yyval.str = "|";
}
    break;
case 84:
#line 945 "cppBison.yxx"
{
  yyval.str = "&";
}
    break;
case 85:
#line 949 "cppBison.yxx"
{
  yyval.str = "^";
}
    break;
case 86:
#line 953 "cppBison.yxx"
{
  yyval.str = "||";
}
    break;
case 87:
#line 957 "cppBison.yxx"
{
  yyval.str = "&&";
}
    break;
case 88:
#line 961 "cppBison.yxx"
{
  yyval.str = "==";
}
    break;
case 89:
#line 965 "cppBison.yxx"
{
  yyval.str = "!=";
}
    break;
case 90:
#line 969 "cppBison.yxx"
{
  yyval.str = "<=";
}
    break;
case 91:
#line 973 "cppBison.yxx"
{
  yyval.str = ">=";
}
    break;
case 92:
#line 977 "cppBison.yxx"
{
  yyval.str = "<";
}
    break;
case 93:
#line 981 "cppBison.yxx"
{
  yyval.str = ">";
}
    break;
case 94:
#line 985 "cppBison.yxx"
{
  yyval.str = "<<";
}
    break;
case 95:
#line 989 "cppBison.yxx"
{
  yyval.str = ">>";
}
    break;
case 96:
#line 993 "cppBison.yxx"
{
  yyval.str = "=";
}
    break;
case 97:
#line 997 "cppBison.yxx"
{
  yyval.str = ",";
}
    break;
case 98:
#line 1001 "cppBison.yxx"
{
  yyval.str = "++";
}
    break;
case 99:
#line 1005 "cppBison.yxx"
{
  yyval.str = "--";
}
    break;
case 100:
#line 1009 "cppBison.yxx"
{
  yyval.str = "*=";
}
    break;
case 101:
#line 1013 "cppBison.yxx"
{
  yyval.str = "/=";
}
    break;
case 102:
#line 1017 "cppBison.yxx"
{
  yyval.str = "%=";
}
    break;
case 103:
#line 1021 "cppBison.yxx"
{
  yyval.str = "+=";
}
    break;
case 104:
#line 1025 "cppBison.yxx"
{
  yyval.str = "-=";
}
    break;
case 105:
#line 1029 "cppBison.yxx"
{
  yyval.str = "|=";
}
    break;
case 106:
#line 1033 "cppBison.yxx"
{
  yyval.str = "&=";
}
    break;
case 107:
#line 1037 "cppBison.yxx"
{
  yyval.str = "^=";
}
    break;
case 108:
#line 1041 "cppBison.yxx"
{
  yyval.str = "<<=";
}
    break;
case 109:
#line 1045 "cppBison.yxx"
{
  yyval.str = ">>=";
}
    break;
case 110:
#line 1049 "cppBison.yxx"
{
  yyval.str = "->";
}
    break;
case 111:
#line 1053 "cppBison.yxx"
{
  yyval.str = "[]";
}
    break;
case 112:
#line 1057 "cppBison.yxx"
{
  yyval.str = "()";
}
    break;
case 113:
#line 1061 "cppBison.yxx"
{
  yyval.str = "new";
}
    break;
case 114:
#line 1065 "cppBison.yxx"
{
  yyval.str = "delete";
}
    break;
case 117:
#line 1077 "cppBison.yxx"
{
  push_scope(new CPPTemplateScope(current_scope));
}
    break;
case 118:
#line 1081 "cppBison.yxx"
{
  pop_scope();
}
    break;
case 121:
#line 1093 "cppBison.yxx"
{
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter(yyvsp[0].u.decl);
}
    break;
case 122:
#line 1099 "cppBison.yxx"
{
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter(yyvsp[0].u.decl);
}
    break;
case 123:
#line 1108 "cppBison.yxx"
{
  yyval.u.decl = CPPType::new_type(new CPPClassTemplateParameter(yyvsp[0].u.identifier));
}
    break;
case 124:
#line 1112 "cppBison.yxx"
{
  yyval.u.decl = CPPType::new_type(new CPPClassTemplateParameter(yyvsp[-2].u.identifier, yyvsp[0].u.type));
}
    break;
case 125:
#line 1116 "cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance(yyvsp[-2].u.type, yyvsp[-1].u.inst_ident, 0, yylsp[-1].file);
  inst->set_initializer(yyvsp[0].u.expr);
  yyval.u.decl = inst;
}
    break;
case 126:
#line 1122 "cppBison.yxx"
{
  yyvsp[-1].u.inst_ident->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(yyvsp[-2].u.type, yyvsp[-1].u.inst_ident, 0, yylsp[-1].file);
  inst->set_initializer(yyvsp[0].u.expr);
  yyval.u.decl = inst;
}
    break;
case 127:
#line 1132 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.simple_type);
}
    break;
case 128:
#line 1136 "cppBison.yxx"
{
  yywarning("Not a type: " + yyvsp[0].u.identifier->get_fully_scoped_name(), yylsp[0]);
  yyval.u.type = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
    break;
case 129:
#line 1141 "cppBison.yxx"
{
  yyval.u.type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(yyval.u.type != NULL);
}
    break;
case 130:
#line 1146 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
}
    break;
case 131:
#line 1154 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier(yyvsp[0].u.identifier);
}
    break;
case 132:
#line 1158 "cppBison.yxx"
{
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = yyvsp[-1].u.identifier;
  if (ident == NULL) {
    ident = new CPPIdentifier("operator "+yyvsp[0].str, yylsp[0].file);
  } else {
    ident->_names.push_back("operator "+yyvsp[0].str);
  }

  yyval.u.inst_ident = new CPPInstanceIdentifier(ident);
}
    break;
case 133:
#line 1172 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_const);
}
    break;
case 134:
#line 1177 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_pointer);
}
    break;
case 135:
#line 1182 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_reference);
}
    break;
case 136:
#line 1187 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_scoped_pointer_modifier(yyvsp[-2].u.identifier);
}
    break;
case 137:
#line 1192 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-3].u.inst_ident;
  yyval.u.inst_ident->add_array_modifier(yyvsp[-1].u.expr);
}
    break;
case 138:
#line 1197 "cppBison.yxx"
{
  // bitfield definition.  We ignore the bitfield for now.
  yyval.u.inst_ident = yyvsp[-2].u.inst_ident;
}
    break;
case 139:
#line 1202 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-1].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_paren);
}
    break;
case 140:
#line 1207 "cppBison.yxx"
{
  push_scope(yyvsp[-1].u.inst_ident->get_scope(current_scope, global_scope));
}
    break;
case 141:
#line 1211 "cppBison.yxx"
{
  pop_scope();
  yyval.u.inst_ident = yyvsp[-5].u.inst_ident;
  yyval.u.inst_ident->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);
}
    break;
case 142:
#line 1221 "cppBison.yxx"
{
  yyval.u.param_list = new CPPParameterList;
}
    break;
case 143:
#line 1225 "cppBison.yxx"
{
  yyval.u.param_list = new CPPParameterList;
  yyval.u.param_list->_includes_ellipsis = true;
}
    break;
case 144:
#line 1230 "cppBison.yxx"
{
  yyval.u.param_list = yyvsp[0].u.param_list;
}
    break;
case 145:
#line 1234 "cppBison.yxx"
{
  yyval.u.param_list = yyvsp[-2].u.param_list;
  yyval.u.param_list->_includes_ellipsis = true;
}
    break;
case 146:
#line 1239 "cppBison.yxx"
{
  yyval.u.param_list = yyvsp[-1].u.param_list;
  yyval.u.param_list->_includes_ellipsis = true;
}
    break;
case 147:
#line 1247 "cppBison.yxx"
{
  yyval.u.param_list = new CPPParameterList;
  yyval.u.param_list->_parameters.push_back(yyvsp[0].u.instance);
}
    break;
case 148:
#line 1252 "cppBison.yxx"
{
  yyval.u.param_list = yyvsp[-2].u.param_list;
  yyval.u.param_list->_parameters.push_back(yyvsp[0].u.instance);
}
    break;
case 149:
#line 1260 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 150:
#line 1264 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 151:
#line 1271 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 152:
#line 1275 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 153:
#line 1282 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 154:
#line 1286 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 155:
#line 1290 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 156:
#line 1294 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[-1].u.expr;
}
    break;
case 157:
#line 1298 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 161:
#line 1311 "cppBison.yxx"
{
}
    break;
case 165:
#line 1320 "cppBison.yxx"
{
  yyval.u.instance = new CPPInstance(yyvsp[-2].u.type, yyvsp[-1].u.inst_ident, 0, yylsp[-1].file);
  yyval.u.instance->set_initializer(yyvsp[0].u.expr);
}
    break;
case 166:
#line 1325 "cppBison.yxx"
{
  yywarning("Not a type: " + yyvsp[-2].u.identifier->get_fully_scoped_name(), yylsp[-2]);
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
  yyval.u.instance = new CPPInstance(type, yyvsp[-1].u.inst_ident, 0, yylsp[-1].file);
  yyval.u.instance->set_initializer(yyvsp[0].u.expr);
}
    break;
case 167:
#line 1333 "cppBison.yxx"
{
  yyvsp[-1].u.inst_ident->add_modifier(IIT_const);
  yyval.u.instance = new CPPInstance(yyvsp[-2].u.type, yyvsp[-1].u.inst_ident, 0, yylsp[-1].file);
  yyval.u.instance->set_initializer(yyvsp[0].u.expr);
}
    break;
case 168:
#line 1342 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;
case 169:
#line 1346 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier(yyvsp[0].u.identifier);
}
    break;
case 170:
#line 1350 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier(yyvsp[0].u.identifier);
}
    break;
case 171:
#line 1354 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_const);
}
    break;
case 172:
#line 1359 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_pointer);
}
    break;
case 173:
#line 1364 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_reference);
}
    break;
case 174:
#line 1369 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_scoped_pointer_modifier(yyvsp[-2].u.identifier);
}
    break;
case 175:
#line 1374 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-3].u.inst_ident;
  yyval.u.inst_ident->add_array_modifier(yyvsp[-1].u.expr);
}
    break;
case 176:
#line 1382 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;
case 177:
#line 1386 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier(yyvsp[0].u.identifier);
}
    break;
case 178:
#line 1390 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier(yyvsp[0].u.identifier);
}
    break;
case 179:
#line 1394 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_const);
}
    break;
case 180:
#line 1399 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_pointer);
}
    break;
case 181:
#line 1404 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_reference);
}
    break;
case 182:
#line 1409 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_scoped_pointer_modifier(yyvsp[-2].u.identifier);
}
    break;
case 183:
#line 1414 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-3].u.inst_ident;
  yyval.u.inst_ident->add_array_modifier(yyvsp[-1].u.expr);
}
    break;
case 184:
#line 1419 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-5].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_paren);
  yyval.u.inst_ident->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);
}
    break;
case 185:
#line 1425 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-1].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_paren);
}
    break;
case 186:
#line 1433 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;
case 187:
#line 1437 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_const);
}
    break;
case 188:
#line 1442 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_pointer);
}
    break;
case 189:
#line 1447 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_reference);
}
    break;
case 190:
#line 1452 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_scoped_pointer_modifier(yyvsp[-2].u.identifier);
}
    break;
case 191:
#line 1457 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-3].u.inst_ident;
  yyval.u.inst_ident->add_array_modifier(yyvsp[-1].u.expr);
}
    break;
case 192:
#line 1462 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-5].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_paren);
  yyval.u.inst_ident->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);
}
    break;
case 193:
#line 1471 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.simple_type);
}
    break;
case 194:
#line 1475 "cppBison.yxx"
{
  yyval.u.type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(yyval.u.type != NULL);
}
    break;
case 195:
#line 1480 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
}
    break;
case 196:
#line 1484 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.struct_type);
}
    break;
case 197:
#line 1488 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.struct_type);
}
    break;
case 198:
#line 1492 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.enum_type);
}
    break;
case 199:
#line 1496 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.enum_type);
}
    break;
case 200:
#line 1500 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    yyval.u.type = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope, yylsp[-1].file))
      ->as_extension_type();
    CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    yyval.u.type = et;
  }
}
    break;
case 201:
#line 1516 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    yyval.u.type = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope, yylsp[-1].file))
      ->as_extension_type();
    CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    yyval.u.type = et;
  }
}
    break;
case 202:
#line 1535 "cppBison.yxx"
{
  yyval.u.decl = CPPType::new_type(yyvsp[0].u.simple_type);
}
    break;
case 203:
#line 1539 "cppBison.yxx"
{
  yyval.u.decl = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(yyval.u.decl != NULL);
}
    break;
case 204:
#line 1544 "cppBison.yxx"
{
  yyval.u.decl = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
}
    break;
case 205:
#line 1548 "cppBison.yxx"
{
  yyval.u.decl = CPPType::new_type(yyvsp[0].u.struct_type);
}
    break;
case 206:
#line 1552 "cppBison.yxx"
{
  yyval.u.decl = new CPPTypeDeclaration(CPPType::new_type(yyvsp[0].u.struct_type));
}
    break;
case 207:
#line 1556 "cppBison.yxx"
{
  yyval.u.decl = CPPType::new_type(yyvsp[0].u.enum_type);
}
    break;
case 208:
#line 1560 "cppBison.yxx"
{
  yyval.u.decl = new CPPTypeDeclaration(CPPType::new_type(yyvsp[0].u.enum_type));
}
    break;
case 209:
#line 1564 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    yyval.u.decl = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope, yylsp[-1].file))
      ->as_extension_type();
    CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    yyval.u.decl = et;
  }
}
    break;
case 210:
#line 1580 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    yyval.u.decl = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope, yylsp[-1].file))
      ->as_extension_type();
    CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    yyval.u.decl = et;
  }
}
    break;
case 211:
#line 1599 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.simple_type);
}
    break;
case 212:
#line 1603 "cppBison.yxx"
{
  yyval.u.type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(yyval.u.type != NULL);
}
    break;
case 213:
#line 1608 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
}
    break;
case 214:
#line 1612 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    yyval.u.type = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope, yylsp[-1].file))
      ->as_extension_type();
    CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    yyval.u.type = et;
  }
}
    break;
case 215:
#line 1628 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    yyval.u.type = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope, yylsp[-1].file))
      ->as_extension_type();
    CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    yyval.u.type = et;
  }
}
    break;
case 216:
#line 1647 "cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance(yyvsp[-1].u.type, yyvsp[0].u.inst_ident, 0, yylsp[-1].file);
  yyval.u.type = inst->_type;
  delete inst;
}
    break;
case 217:
#line 1653 "cppBison.yxx"
{
  yyvsp[0].u.inst_ident->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(yyvsp[-1].u.type, yyvsp[0].u.inst_ident, 0, yylsp[-2].file);
  yyval.u.type = inst->_type;
  delete inst;
}
    break;
case 218:
#line 1663 "cppBison.yxx"
{
  CPPVisibility starting_vis = 
  (yyvsp[-1].u.extension_enum == CPPExtensionType::T_class) ? V_private : V_public;
  
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType(yyvsp[-1].u.extension_enum, NULL, current_scope,
                                        new_scope, yylsp[-1].file);
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
    break;
case 219:
#line 1677 "cppBison.yxx"
{
  yyval.u.struct_type = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
    break;
case 220:
#line 1687 "cppBison.yxx"
{
  CPPVisibility starting_vis = 
  (yyvsp[-1].u.extension_enum == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, yyvsp[0].u.identifier->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope,
                                        new_scope, yylsp[-1].file);
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);
  
  push_scope(new_scope);
  push_struct(st);
}
    break;
case 221:
#line 1707 "cppBison.yxx"
{
  yyval.u.struct_type = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
    break;
case 226:
#line 1727 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_public, false);
}
    break;
case 227:
#line 1731 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_protected, false);
}
    break;
case 228:
#line 1735 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_private, false);
}
    break;
case 229:
#line 1739 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_public, true);
}
    break;
case 230:
#line 1743 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_protected, true);
}
    break;
case 231:
#line 1747 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_private, true);
}
    break;
case 232:
#line 1751 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_public, true);
}
    break;
case 233:
#line 1755 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_protected, true);
}
    break;
case 234:
#line 1759 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_private, true);
}
    break;
case 235:
#line 1766 "cppBison.yxx"
{
  current_enum = new CPPEnumType(NULL, current_scope, yylsp[-1].file);
}
    break;
case 236:
#line 1770 "cppBison.yxx"
{
  yyval.u.enum_type = current_enum;
  current_enum = NULL;
}
    break;
case 237:
#line 1778 "cppBison.yxx"
{
  current_enum = new CPPEnumType(yyvsp[-1].u.identifier, current_scope, yylsp[-2].file);
}
    break;
case 238:
#line 1782 "cppBison.yxx"
{
  yyval.u.enum_type = current_enum;
  current_enum = NULL;
}
    break;
case 242:
#line 1796 "cppBison.yxx"
{
  assert(current_enum != NULL);
  current_enum->add_element(yyvsp[0].u.identifier->get_simple_name(), current_scope);
}
    break;
case 243:
#line 1801 "cppBison.yxx"
{
  assert(current_enum != NULL);
  current_enum->add_element(yyvsp[-2].u.identifier->get_simple_name(), current_scope, yyvsp[0].u.expr);
}
    break;
case 244:
#line 1806 "cppBison.yxx"
{
  assert(current_enum != NULL);
  current_enum->add_element(yyvsp[0].u.identifier->get_simple_name(), current_scope);
}
    break;
case 245:
#line 1811 "cppBison.yxx"
{
  assert(current_enum != NULL);
  current_enum->add_element(yyvsp[-2].u.identifier->get_simple_name(), current_scope, yyvsp[0].u.expr);
}
    break;
case 246:
#line 1819 "cppBison.yxx"
{
  yyval.u.extension_enum = CPPExtensionType::T_enum;
}
    break;
case 247:
#line 1826 "cppBison.yxx"
{
  yyval.u.extension_enum = CPPExtensionType::T_class;
}
    break;
case 248:
#line 1830 "cppBison.yxx"
{
  yyval.u.extension_enum = CPPExtensionType::T_struct;
}
    break;
case 249:
#line 1834 "cppBison.yxx"
{
  yyval.u.extension_enum = CPPExtensionType::T_union;
}
    break;
case 250:
#line 1841 "cppBison.yxx"
{
  CPPScope *scope = yyvsp[-1].u.identifier->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope = 
      yyvsp[-1].u.identifier->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, yyvsp[-1].u.identifier->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace(yyvsp[-1].u.identifier, scope, yylsp[-2].file);
  current_scope->add_declaration(nspace, global_scope, current_lexer, yylsp[-2]);
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
    break;
case 251:
#line 1859 "cppBison.yxx"
{
  pop_scope();
}
    break;
case 253:
#line 1867 "cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing(yyvsp[0].u.identifier, false, yylsp[-1].file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, yylsp[-1]);
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
    break;
case 254:
#line 1873 "cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing(yyvsp[0].u.identifier, true, yylsp[-2].file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, yylsp[-2]);
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
    break;
case 258:
#line 1888 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_bool);
}
    break;
case 259:
#line 1892 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_char);
}
    break;
case 260:
#line 1896 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
    break;
case 261:
#line 1901 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
    break;
case 262:
#line 1906 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_longlong);
}
    break;
case 263:
#line 1911 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
    break;
case 264:
#line 1916 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
    break;
case 265:
#line 1921 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_int);
}
    break;
case 266:
#line 1925 "cppBison.yxx"
{
  yyval.u.simple_type = yyvsp[0].u.simple_type;
  yyval.u.simple_type->_flags |= CPPSimpleType::F_short;
}
    break;
case 267:
#line 1930 "cppBison.yxx"
{
  yyval.u.simple_type = yyvsp[0].u.simple_type;
  if (yyval.u.simple_type->_flags & CPPSimpleType::F_long) {
    yyval.u.simple_type->_flags |= CPPSimpleType::F_longlong;
  } else {
    yyval.u.simple_type->_flags |= CPPSimpleType::F_long;
  }
}
    break;
case 268:
#line 1939 "cppBison.yxx"
{
  yyval.u.simple_type = yyvsp[0].u.simple_type;
  yyval.u.simple_type->_flags |= CPPSimpleType::F_unsigned;
}
    break;
case 269:
#line 1944 "cppBison.yxx"
{
  yyval.u.simple_type = yyvsp[0].u.simple_type;
  yyval.u.simple_type->_flags |= CPPSimpleType::F_signed;
}
    break;
case 270:
#line 1952 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_float);
}
    break;
case 271:
#line 1956 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_float,
                         CPPSimpleType::F_long);
}
    break;
case 272:
#line 1961 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_double);
}
    break;
case 273:
#line 1965 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_float,
                         CPPSimpleType::F_longlong);
}
    break;
case 274:
#line 1970 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
    break;
case 275:
#line 1978 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_void);
}
    break;
case 276:
#line 1987 "cppBison.yxx"
{
  current_lexer->_resolve_identifiers = false;
}
    break;
case 277:
#line 1991 "cppBison.yxx"
{
  current_lexer->_resolve_identifiers = true;
}
    break;
case 280:
#line 2003 "cppBison.yxx"
{
}
    break;
case 281:
#line 2006 "cppBison.yxx"
{
}
    break;
case 282:
#line 2009 "cppBison.yxx"
{
}
    break;
case 283:
#line 2012 "cppBison.yxx"
{
}
    break;
case 284:
#line 2015 "cppBison.yxx"
{
}
    break;
case 285:
#line 2018 "cppBison.yxx"
{
}
    break;
case 286:
#line 2021 "cppBison.yxx"
{
}
    break;
case 287:
#line 2024 "cppBison.yxx"
{
}
    break;
case 360:
#line 2044 "cppBison.yxx"
{
}
    break;
case 384:
#line 2053 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 385:
#line 2057 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 386:
#line 2064 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 387:
#line 2068 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 388:
#line 2075 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 389:
#line 2079 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(',', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 390:
#line 2086 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 391:
#line 2090 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-2].u.type, yyvsp[0].u.expr));
}
    break;
case 392:
#line 2094 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-4].u.type, yyvsp[-1].u.expr));
}
    break;
case 393:
#line 2098 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-4].u.type, yyvsp[-1].u.expr));
}
    break;
case 394:
#line 2102 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::sizeof_func(yyvsp[-1].u.type));
}
    break;
case 395:
#line 2106 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_NOT, yyvsp[0].u.expr);
}
    break;
case 396:
#line 2110 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_NEGATE, yyvsp[0].u.expr);
}
    break;
case 397:
#line 2114 "cppBison.yxx"
{
  if (yyvsp[0].u.expr->_type == CPPExpression::T_integer) {
    yyval.u.expr = yyvsp[0].u.expr;
    yyval.u.expr->_u._integer = -yyval.u.expr->_u._integer;
  } else if (yyvsp[0].u.expr->_type == CPPExpression::T_real) {
    yyval.u.expr = yyvsp[0].u.expr;
    yyval.u.expr->_u._real = -yyval.u.expr->_u._real;
  } else {
    yyval.u.expr = new CPPExpression(UNARY_MINUS, yyvsp[0].u.expr);
  }
}
    break;
case 398:
#line 2126 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_STAR, yyvsp[0].u.expr);
}
    break;
case 399:
#line 2130 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_REF, yyvsp[0].u.expr);
}
    break;
case 400:
#line 2134 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('*', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 401:
#line 2138 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('/', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 402:
#line 2142 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('%', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 403:
#line 2146 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('+', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 404:
#line 2150 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('-', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 405:
#line 2154 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('|', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 406:
#line 2158 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('&', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 407:
#line 2162 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(OROR, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 408:
#line 2166 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(ANDAND, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 409:
#line 2170 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(EQCOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 410:
#line 2174 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(NECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 411:
#line 2178 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(LECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 412:
#line 2182 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(GECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 413:
#line 2186 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(LSHIFT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 414:
#line 2190 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(RSHIFT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 415:
#line 2194 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('?', yyvsp[-4].u.expr, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 416:
#line 2198 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('[', yyvsp[-3].u.expr, yyvsp[-1].u.expr);
}
    break;
case 417:
#line 2202 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('f', yyvsp[-3].u.expr, yyvsp[-1].u.expr);
}
    break;
case 418:
#line 2206 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('f', yyvsp[-2].u.expr);
}
    break;
case 419:
#line 2210 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('.', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 420:
#line 2214 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(POINTSAT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 421:
#line 2218 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[-1].u.expr;
}
    break;
case 422:
#line 2226 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 423:
#line 2230 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-2].u.type, yyvsp[0].u.expr));
}
    break;
case 424:
#line 2234 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-4].u.type, yyvsp[-1].u.expr));
}
    break;
case 425:
#line 2238 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-4].u.type, yyvsp[-1].u.expr));
}
    break;
case 426:
#line 2242 "cppBison.yxx"
{
  // A constructor call.
  CPPType *type = yyvsp[-3].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(type != NULL);
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 427:
#line 2249 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 428:
#line 2255 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 429:
#line 2261 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 430:
#line 2267 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 431:
#line 2274 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 432:
#line 2281 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 433:
#line 2288 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 434:
#line 2295 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 435:
#line 2301 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 436:
#line 2307 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::sizeof_func(yyvsp[-1].u.type));
}
    break;
case 437:
#line 2311 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::new_op(yyvsp[0].u.type));
}
    break;
case 438:
#line 2315 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::new_op(yyvsp[-3].u.type, yyvsp[-1].u.expr));
}
    break;
case 439:
#line 2319 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_NOT, yyvsp[0].u.expr);
}
    break;
case 440:
#line 2323 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_NEGATE, yyvsp[0].u.expr);
}
    break;
case 441:
#line 2327 "cppBison.yxx"
{
  if (yyvsp[0].u.expr->_type == CPPExpression::T_integer) {
    yyval.u.expr = yyvsp[0].u.expr;
    yyval.u.expr->_u._integer = -yyval.u.expr->_u._integer;
  } else if (yyvsp[0].u.expr->_type == CPPExpression::T_real) {
    yyval.u.expr = yyvsp[0].u.expr;
    yyval.u.expr->_u._real = -yyval.u.expr->_u._real;
  } else {
    yyval.u.expr = new CPPExpression(UNARY_MINUS, yyvsp[0].u.expr);
  }
}
    break;
case 442:
#line 2339 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_STAR, yyvsp[0].u.expr);
}
    break;
case 443:
#line 2343 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_REF, yyvsp[0].u.expr);
}
    break;
case 444:
#line 2347 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('*', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 445:
#line 2351 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('/', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 446:
#line 2355 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('%', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 447:
#line 2359 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('+', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 448:
#line 2363 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('-', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 449:
#line 2367 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('|', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 450:
#line 2371 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('&', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 451:
#line 2375 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(OROR, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 452:
#line 2379 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(ANDAND, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 453:
#line 2383 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(EQCOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 454:
#line 2387 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(NECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 455:
#line 2391 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(LECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 456:
#line 2395 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(GECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 457:
#line 2399 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('<', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 458:
#line 2403 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('>', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 459:
#line 2407 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(LSHIFT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 460:
#line 2411 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(RSHIFT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 461:
#line 2415 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('?', yyvsp[-4].u.expr, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 462:
#line 2419 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('[', yyvsp[-3].u.expr, yyvsp[-1].u.expr);
}
    break;
case 463:
#line 2423 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('f', yyvsp[-3].u.expr, yyvsp[-1].u.expr);
}
    break;
case 464:
#line 2427 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('f', yyvsp[-2].u.expr);
}
    break;
case 465:
#line 2431 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('.', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 466:
#line 2435 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(POINTSAT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 467:
#line 2439 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[-1].u.expr;
}
    break;
case 468:
#line 2446 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].u.integer);
}
    break;
case 469:
#line 2450 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(true);
}
    break;
case 470:
#line 2454 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(false);
}
    break;
case 471:
#line 2458 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].u.integer);
}
    break;
case 472:
#line 2462 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].u.real);
}
    break;
case 473:
#line 2466 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].str);
}
    break;
case 474:
#line 2470 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].u.identifier, current_scope, global_scope, current_lexer);
}
    break;
case 475:
#line 2477 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, true);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
  }
  yyval.u.type = type;
}
    break;
case 476:
#line 2485 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, true, current_lexer);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
  }
  yyval.u.type = type;
}
    break;
case 477:
#line 2493 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
}
    break;
case 478:
#line 2516 "cppBison.yxx"
{
  yyval.u.identifier = yyvsp[0].u.identifier;
}
    break;
case 479:
#line 2520 "cppBison.yxx"
{
  yyval.u.identifier = yyvsp[0].u.identifier;
}
    break;
case 480:
#line 2527 "cppBison.yxx"
{
  yyval.str = yyvsp[0].str;
}
    break;
case 481:
#line 2531 "cppBison.yxx"
{
  yyval.str = yyvsp[-1].str + yyvsp[0].str;
}
    break;
}

#line 705 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 2538 "cppBison.yxx"
