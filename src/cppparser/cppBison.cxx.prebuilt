/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 2

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         cppyyparse
#define yylex           cppyylex
#define yyerror         cppyyerror
#define yydebug         cppyydebug
#define yynerrs         cppyynerrs


/* Copy the first part of user declarations.  */
#line 7 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:339  */


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppClosureType.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppMakeProperty.h"
#include "cppMakeSeq.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedefType.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = NULL;
CPPScope *global_scope = NULL;
CPPPreprocessor *current_lexer = NULL;

static CPPStructType *current_struct = NULL;
static CPPEnumType *current_enum = NULL;
static int current_storage_class = 0;
static CPPType *current_type = NULL;
static CPPExpression *current_expr = NULL;
static CPPClosureType *current_closure = NULL;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static vector<CPPScope *> last_scopes;
static vector<int> last_storage_classes;
static vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg, current_lexer->_last_token_loc);
}

static void
yyerror(YYLTYPE *loc, const string &msg) {
  current_lexer->error(msg, *loc);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;

}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = (CPPExpression *)NULL;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = (CPPType *)NULL;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != NULL) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}


#line 268 "built/tmp/cppBison.yxx.c" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "cppBison.yxx.h".  */
#ifndef YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
# define YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int cppyydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    REAL = 258,
    INTEGER = 259,
    CHAR_TOK = 260,
    SIMPLE_STRING = 261,
    SIMPLE_IDENTIFIER = 262,
    STRING_LITERAL = 263,
    CUSTOM_LITERAL = 264,
    IDENTIFIER = 265,
    TYPENAME_IDENTIFIER = 266,
    TYPEPACK_IDENTIFIER = 267,
    SCOPING = 268,
    TYPEDEFNAME = 269,
    ELLIPSIS = 270,
    OROR = 271,
    ANDAND = 272,
    EQCOMPARE = 273,
    NECOMPARE = 274,
    LECOMPARE = 275,
    GECOMPARE = 276,
    LSHIFT = 277,
    RSHIFT = 278,
    POINTSAT_STAR = 279,
    DOT_STAR = 280,
    UNARY = 281,
    UNARY_NOT = 282,
    UNARY_NEGATE = 283,
    UNARY_MINUS = 284,
    UNARY_PLUS = 285,
    UNARY_STAR = 286,
    UNARY_REF = 287,
    POINTSAT = 288,
    SCOPE = 289,
    PLUSPLUS = 290,
    MINUSMINUS = 291,
    TIMESEQUAL = 292,
    DIVIDEEQUAL = 293,
    MODEQUAL = 294,
    PLUSEQUAL = 295,
    MINUSEQUAL = 296,
    OREQUAL = 297,
    ANDEQUAL = 298,
    XOREQUAL = 299,
    LSHIFTEQUAL = 300,
    RSHIFTEQUAL = 301,
    ATTR_LEFT = 302,
    ATTR_RIGHT = 303,
    KW_ALIGNAS = 304,
    KW_ALIGNOF = 305,
    KW_AUTO = 306,
    KW_BEGIN_PUBLISH = 307,
    KW_BLOCKING = 308,
    KW_BOOL = 309,
    KW_CATCH = 310,
    KW_CHAR = 311,
    KW_CHAR16_T = 312,
    KW_CHAR32_T = 313,
    KW_CLASS = 314,
    KW_CONST = 315,
    KW_CONSTEXPR = 316,
    KW_CONST_CAST = 317,
    KW_DECLTYPE = 318,
    KW_DEFAULT = 319,
    KW_DELETE = 320,
    KW_DOUBLE = 321,
    KW_DYNAMIC_CAST = 322,
    KW_ELSE = 323,
    KW_END_PUBLISH = 324,
    KW_ENUM = 325,
    KW_EXTENSION = 326,
    KW_EXTERN = 327,
    KW_EXPLICIT = 328,
    KW_PUBLISHED = 329,
    KW_FALSE = 330,
    KW_FINAL = 331,
    KW_FLOAT = 332,
    KW_FRIEND = 333,
    KW_FOR = 334,
    KW_GOTO = 335,
    KW_HAS_VIRTUAL_DESTRUCTOR = 336,
    KW_IF = 337,
    KW_INLINE = 338,
    KW_INT = 339,
    KW_IS_ABSTRACT = 340,
    KW_IS_BASE_OF = 341,
    KW_IS_CLASS = 342,
    KW_IS_CONSTRUCTIBLE = 343,
    KW_IS_CONVERTIBLE_TO = 344,
    KW_IS_DESTRUCTIBLE = 345,
    KW_IS_EMPTY = 346,
    KW_IS_ENUM = 347,
    KW_IS_FINAL = 348,
    KW_IS_FUNDAMENTAL = 349,
    KW_IS_POD = 350,
    KW_IS_POLYMORPHIC = 351,
    KW_IS_STANDARD_LAYOUT = 352,
    KW_IS_TRIVIAL = 353,
    KW_IS_UNION = 354,
    KW_LONG = 355,
    KW_MAKE_MAP_PROPERTY = 356,
    KW_MAKE_PROPERTY = 357,
    KW_MAKE_PROPERTY2 = 358,
    KW_MAKE_SEQ = 359,
    KW_MAKE_SEQ_PROPERTY = 360,
    KW_MUTABLE = 361,
    KW_NAMESPACE = 362,
    KW_NEW = 363,
    KW_NOEXCEPT = 364,
    KW_NULLPTR = 365,
    KW_OPERATOR = 366,
    KW_OVERRIDE = 367,
    KW_PRIVATE = 368,
    KW_PROTECTED = 369,
    KW_PUBLIC = 370,
    KW_REGISTER = 371,
    KW_REINTERPRET_CAST = 372,
    KW_RETURN = 373,
    KW_SHORT = 374,
    KW_SIGNED = 375,
    KW_SIZEOF = 376,
    KW_STATIC = 377,
    KW_STATIC_ASSERT = 378,
    KW_STATIC_CAST = 379,
    KW_STRUCT = 380,
    KW_TEMPLATE = 381,
    KW_THREAD_LOCAL = 382,
    KW_THROW = 383,
    KW_TRUE = 384,
    KW_TRY = 385,
    KW_TYPEDEF = 386,
    KW_TYPEID = 387,
    KW_TYPENAME = 388,
    KW_UNDERLYING_TYPE = 389,
    KW_UNION = 390,
    KW_UNSIGNED = 391,
    KW_USING = 392,
    KW_VIRTUAL = 393,
    KW_VOID = 394,
    KW_VOLATILE = 395,
    KW_WCHAR_T = 396,
    KW_WHILE = 397,
    START_CPP = 398,
    START_CONST_EXPR = 399,
    START_TYPE = 400
  };
#endif
/* Tokens.  */
#define REAL 258
#define INTEGER 259
#define CHAR_TOK 260
#define SIMPLE_STRING 261
#define SIMPLE_IDENTIFIER 262
#define STRING_LITERAL 263
#define CUSTOM_LITERAL 264
#define IDENTIFIER 265
#define TYPENAME_IDENTIFIER 266
#define TYPEPACK_IDENTIFIER 267
#define SCOPING 268
#define TYPEDEFNAME 269
#define ELLIPSIS 270
#define OROR 271
#define ANDAND 272
#define EQCOMPARE 273
#define NECOMPARE 274
#define LECOMPARE 275
#define GECOMPARE 276
#define LSHIFT 277
#define RSHIFT 278
#define POINTSAT_STAR 279
#define DOT_STAR 280
#define UNARY 281
#define UNARY_NOT 282
#define UNARY_NEGATE 283
#define UNARY_MINUS 284
#define UNARY_PLUS 285
#define UNARY_STAR 286
#define UNARY_REF 287
#define POINTSAT 288
#define SCOPE 289
#define PLUSPLUS 290
#define MINUSMINUS 291
#define TIMESEQUAL 292
#define DIVIDEEQUAL 293
#define MODEQUAL 294
#define PLUSEQUAL 295
#define MINUSEQUAL 296
#define OREQUAL 297
#define ANDEQUAL 298
#define XOREQUAL 299
#define LSHIFTEQUAL 300
#define RSHIFTEQUAL 301
#define ATTR_LEFT 302
#define ATTR_RIGHT 303
#define KW_ALIGNAS 304
#define KW_ALIGNOF 305
#define KW_AUTO 306
#define KW_BEGIN_PUBLISH 307
#define KW_BLOCKING 308
#define KW_BOOL 309
#define KW_CATCH 310
#define KW_CHAR 311
#define KW_CHAR16_T 312
#define KW_CHAR32_T 313
#define KW_CLASS 314
#define KW_CONST 315
#define KW_CONSTEXPR 316
#define KW_CONST_CAST 317
#define KW_DECLTYPE 318
#define KW_DEFAULT 319
#define KW_DELETE 320
#define KW_DOUBLE 321
#define KW_DYNAMIC_CAST 322
#define KW_ELSE 323
#define KW_END_PUBLISH 324
#define KW_ENUM 325
#define KW_EXTENSION 326
#define KW_EXTERN 327
#define KW_EXPLICIT 328
#define KW_PUBLISHED 329
#define KW_FALSE 330
#define KW_FINAL 331
#define KW_FLOAT 332
#define KW_FRIEND 333
#define KW_FOR 334
#define KW_GOTO 335
#define KW_HAS_VIRTUAL_DESTRUCTOR 336
#define KW_IF 337
#define KW_INLINE 338
#define KW_INT 339
#define KW_IS_ABSTRACT 340
#define KW_IS_BASE_OF 341
#define KW_IS_CLASS 342
#define KW_IS_CONSTRUCTIBLE 343
#define KW_IS_CONVERTIBLE_TO 344
#define KW_IS_DESTRUCTIBLE 345
#define KW_IS_EMPTY 346
#define KW_IS_ENUM 347
#define KW_IS_FINAL 348
#define KW_IS_FUNDAMENTAL 349
#define KW_IS_POD 350
#define KW_IS_POLYMORPHIC 351
#define KW_IS_STANDARD_LAYOUT 352
#define KW_IS_TRIVIAL 353
#define KW_IS_UNION 354
#define KW_LONG 355
#define KW_MAKE_MAP_PROPERTY 356
#define KW_MAKE_PROPERTY 357
#define KW_MAKE_PROPERTY2 358
#define KW_MAKE_SEQ 359
#define KW_MAKE_SEQ_PROPERTY 360
#define KW_MUTABLE 361
#define KW_NAMESPACE 362
#define KW_NEW 363
#define KW_NOEXCEPT 364
#define KW_NULLPTR 365
#define KW_OPERATOR 366
#define KW_OVERRIDE 367
#define KW_PRIVATE 368
#define KW_PROTECTED 369
#define KW_PUBLIC 370
#define KW_REGISTER 371
#define KW_REINTERPRET_CAST 372
#define KW_RETURN 373
#define KW_SHORT 374
#define KW_SIGNED 375
#define KW_SIZEOF 376
#define KW_STATIC 377
#define KW_STATIC_ASSERT 378
#define KW_STATIC_CAST 379
#define KW_STRUCT 380
#define KW_TEMPLATE 381
#define KW_THREAD_LOCAL 382
#define KW_THROW 383
#define KW_TRUE 384
#define KW_TRY 385
#define KW_TYPEDEF 386
#define KW_TYPEID 387
#define KW_TYPENAME 388
#define KW_UNDERLYING_TYPE 389
#define KW_UNION 390
#define KW_UNSIGNED 391
#define KW_USING 392
#define KW_VIRTUAL 393
#define KW_VOID 394
#define KW_VOLATILE 395
#define KW_WCHAR_T 396
#define KW_WHILE 397
#define START_CPP 398
#define START_CONST_EXPR 399
#define START_TYPE 400

/* Value type.  */

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int cppyyparse (void);

#endif /* !YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 617 "built/tmp/cppBison.yxx.c" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  104
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   6907

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  170
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  108
/* YYNRULES -- Number of rules.  */
#define YYNRULES  755
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  1537

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   400

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   168,     2,     2,     2,   161,   154,     2,
     164,   166,   159,   157,   147,   158,   163,   160,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   149,   148,
     155,   150,   156,   151,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   165,     2,   169,   153,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   146,   152,   167,   162,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   448,   448,   449,   453,   460,   461,   462,   466,   467,
     471,   475,   479,   492,   491,   503,   504,   505,   506,   507,
     508,   509,   522,   531,   535,   543,   547,   551,   562,   583,
     613,   630,   658,   695,   717,   750,   772,   783,   797,   796,
     811,   815,   820,   824,   835,   839,   843,   847,   851,   855,
     859,   863,   867,   871,   875,   879,   884,   888,   895,   896,
     900,   901,   902,   907,   906,   922,   931,   939,   947,   955,
     966,   982,   981,   996,  1011,  1020,  1035,  1034,  1059,  1058,
    1086,  1085,  1116,  1115,  1134,  1133,  1154,  1153,  1185,  1184,
    1210,  1223,  1227,  1231,  1235,  1248,  1252,  1256,  1260,  1264,
    1269,  1274,  1278,  1282,  1286,  1293,  1297,  1301,  1305,  1309,
    1313,  1317,  1321,  1325,  1329,  1333,  1337,  1341,  1345,  1349,
    1353,  1357,  1361,  1365,  1369,  1373,  1377,  1381,  1385,  1389,
    1393,  1397,  1401,  1405,  1409,  1413,  1417,  1421,  1425,  1429,
    1433,  1437,  1441,  1445,  1452,  1453,  1454,  1458,  1460,  1459,
    1467,  1468,  1472,  1473,  1477,  1483,  1492,  1493,  1497,  1501,
    1505,  1509,  1515,  1521,  1527,  1534,  1539,  1548,  1552,  1557,
    1565,  1577,  1581,  1595,  1610,  1615,  1620,  1625,  1630,  1635,
    1640,  1645,  1651,  1650,  1681,  1691,  1701,  1705,  1709,  1718,
    1722,  1727,  1731,  1736,  1744,  1749,  1757,  1761,  1766,  1770,
    1775,  1783,  1788,  1796,  1800,  1807,  1811,  1818,  1822,  1826,
    1830,  1834,  1841,  1845,  1849,  1853,  1857,  1861,  1868,  1869,
    1870,  1874,  1877,  1878,  1879,  1883,  1888,  1894,  1900,  1905,
    1911,  1917,  1921,  1932,  1936,  1946,  1950,  1954,  1959,  1964,
    1969,  1974,  1979,  1984,  1992,  1996,  2000,  2005,  2010,  2015,
    2020,  2025,  2030,  2035,  2041,  2049,  2054,  2059,  2064,  2069,
    2074,  2079,  2084,  2089,  2094,  2100,  2108,  2112,  2117,  2122,
    2127,  2132,  2137,  2142,  2147,  2152,  2160,  2164,  2169,  2174,
    2179,  2184,  2189,  2194,  2199,  2204,  2209,  2215,  2222,  2229,
    2239,  2243,  2251,  2255,  2259,  2263,  2267,  2283,  2299,  2308,
    2312,  2322,  2329,  2340,  2344,  2352,  2356,  2360,  2364,  2368,
    2384,  2400,  2418,  2427,  2431,  2441,  2448,  2452,  2460,  2464,
    2480,  2496,  2505,  2515,  2522,  2526,  2534,  2538,  2543,  2547,
    2555,  2556,  2557,  2558,  2563,  2562,  2587,  2586,  2616,  2617,
    2624,  2625,  2629,  2630,  2634,  2638,  2642,  2646,  2650,  2654,
    2658,  2662,  2666,  2670,  2677,  2685,  2689,  2693,  2698,  2706,
    2710,  2717,  2718,  2723,  2730,  2731,  2736,  2744,  2748,  2752,
    2759,  2763,  2767,  2775,  2774,  2797,  2796,  2819,  2820,  2824,
    2830,  2837,  2846,  2847,  2848,  2852,  2856,  2860,  2864,  2868,
    2872,  2877,  2882,  2887,  2892,  2896,  2901,  2910,  2915,  2923,
    2927,  2931,  2939,  2949,  2949,  2959,  2960,  2964,  2965,  2966,
    2967,  2968,  2969,  2970,  2971,  2972,  2973,  2974,  2975,  2975,
    2975,  2976,  2976,  2976,  2976,  2977,  2977,  2977,  2977,  2977,
    2978,  2978,  2978,  2979,  2979,  2979,  2979,  2979,  2980,  2980,
    2980,  2980,  2980,  2981,  2981,  2982,  2982,  2982,  2982,  2982,
    2983,  2983,  2983,  2983,  2983,  2984,  2984,  2984,  2984,  2985,
    2985,  2985,  2985,  2985,  2986,  2986,  2986,  2986,  2986,  2987,
    2987,  2987,  2987,  2987,  2987,  2988,  2988,  2988,  2988,  2988,
    2989,  2989,  2989,  2989,  2990,  2990,  2990,  2990,  2991,  2991,
    2991,  2991,  2991,  2992,  2992,  2992,  2992,  2993,  2993,  2993,
    2993,  2993,  2994,  2994,  2994,  2994,  2995,  2995,  2995,  2995,
    2995,  2996,  2996,  2999,  2999,  2999,  2999,  2999,  2999,  2999,
    2999,  2999,  2999,  2999,  3000,  3000,  3000,  3000,  3000,  3000,
    3000,  3000,  3000,  3000,  3001,  3001,  3005,  3009,  3016,  3020,
    3027,  3031,  3038,  3042,  3046,  3050,  3054,  3058,  3062,  3066,
    3078,  3082,  3086,  3090,  3094,  3098,  3102,  3106,  3110,  3114,
    3118,  3122,  3126,  3130,  3134,  3138,  3142,  3146,  3150,  3154,
    3158,  3162,  3166,  3170,  3174,  3178,  3182,  3186,  3190,  3194,
    3198,  3206,  3210,  3214,  3218,  3222,  3226,  3230,  3240,  3250,
    3256,  3262,  3268,  3274,  3280,  3286,  3293,  3300,  3307,  3314,
    3320,  3326,  3330,  3342,  3346,  3350,  3354,  3358,  3369,  3380,
    3384,  3388,  3392,  3396,  3400,  3404,  3408,  3412,  3416,  3420,
    3424,  3428,  3432,  3436,  3440,  3444,  3448,  3452,  3456,  3460,
    3464,  3468,  3472,  3476,  3480,  3484,  3488,  3492,  3496,  3500,
    3507,  3511,  3515,  3519,  3523,  3527,  3531,  3535,  3539,  3545,
    3551,  3555,  3561,  3568,  3572,  3576,  3580,  3584,  3588,  3592,
    3596,  3600,  3604,  3608,  3612,  3616,  3620,  3624,  3628,  3632,
    3646,  3650,  3654,  3658,  3662,  3666,  3670,  3674,  3686,  3690,
    3694,  3698,  3702,  3713,  3724,  3728,  3732,  3736,  3740,  3744,
    3748,  3752,  3756,  3760,  3764,  3768,  3772,  3776,  3780,  3784,
    3788,  3792,  3796,  3800,  3804,  3808,  3812,  3816,  3820,  3824,
    3828,  3832,  3836,  3840,  3847,  3851,  3855,  3859,  3863,  3867,
    3871,  3875,  3879,  3885,  3891,  3899,  3903,  3907,  3911,  3918,
    3928,  3934,  3940,  3950,  3962,  3970,  3974,  4004,  4008,  4012,
    4016,  4020,  4024,  4030,  4034,  4038,  4042,  4053,  4057,  4061,
    4065,  4073,  4077,  4081,  4087,  4098
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "REAL", "INTEGER", "CHAR_TOK",
  "SIMPLE_STRING", "SIMPLE_IDENTIFIER", "STRING_LITERAL", "CUSTOM_LITERAL",
  "IDENTIFIER", "TYPENAME_IDENTIFIER", "TYPEPACK_IDENTIFIER", "SCOPING",
  "TYPEDEFNAME", "ELLIPSIS", "OROR", "ANDAND", "EQCOMPARE", "NECOMPARE",
  "LECOMPARE", "GECOMPARE", "LSHIFT", "RSHIFT", "POINTSAT_STAR",
  "DOT_STAR", "UNARY", "UNARY_NOT", "UNARY_NEGATE", "UNARY_MINUS",
  "UNARY_PLUS", "UNARY_STAR", "UNARY_REF", "POINTSAT", "SCOPE", "PLUSPLUS",
  "MINUSMINUS", "TIMESEQUAL", "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL",
  "MINUSEQUAL", "OREQUAL", "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL",
  "RSHIFTEQUAL", "ATTR_LEFT", "ATTR_RIGHT", "KW_ALIGNAS", "KW_ALIGNOF",
  "KW_AUTO", "KW_BEGIN_PUBLISH", "KW_BLOCKING", "KW_BOOL", "KW_CATCH",
  "KW_CHAR", "KW_CHAR16_T", "KW_CHAR32_T", "KW_CLASS", "KW_CONST",
  "KW_CONSTEXPR", "KW_CONST_CAST", "KW_DECLTYPE", "KW_DEFAULT",
  "KW_DELETE", "KW_DOUBLE", "KW_DYNAMIC_CAST", "KW_ELSE", "KW_END_PUBLISH",
  "KW_ENUM", "KW_EXTENSION", "KW_EXTERN", "KW_EXPLICIT", "KW_PUBLISHED",
  "KW_FALSE", "KW_FINAL", "KW_FLOAT", "KW_FRIEND", "KW_FOR", "KW_GOTO",
  "KW_HAS_VIRTUAL_DESTRUCTOR", "KW_IF", "KW_INLINE", "KW_INT",
  "KW_IS_ABSTRACT", "KW_IS_BASE_OF", "KW_IS_CLASS", "KW_IS_CONSTRUCTIBLE",
  "KW_IS_CONVERTIBLE_TO", "KW_IS_DESTRUCTIBLE", "KW_IS_EMPTY",
  "KW_IS_ENUM", "KW_IS_FINAL", "KW_IS_FUNDAMENTAL", "KW_IS_POD",
  "KW_IS_POLYMORPHIC", "KW_IS_STANDARD_LAYOUT", "KW_IS_TRIVIAL",
  "KW_IS_UNION", "KW_LONG", "KW_MAKE_MAP_PROPERTY", "KW_MAKE_PROPERTY",
  "KW_MAKE_PROPERTY2", "KW_MAKE_SEQ", "KW_MAKE_SEQ_PROPERTY", "KW_MUTABLE",
  "KW_NAMESPACE", "KW_NEW", "KW_NOEXCEPT", "KW_NULLPTR", "KW_OPERATOR",
  "KW_OVERRIDE", "KW_PRIVATE", "KW_PROTECTED", "KW_PUBLIC", "KW_REGISTER",
  "KW_REINTERPRET_CAST", "KW_RETURN", "KW_SHORT", "KW_SIGNED", "KW_SIZEOF",
  "KW_STATIC", "KW_STATIC_ASSERT", "KW_STATIC_CAST", "KW_STRUCT",
  "KW_TEMPLATE", "KW_THREAD_LOCAL", "KW_THROW", "KW_TRUE", "KW_TRY",
  "KW_TYPEDEF", "KW_TYPEID", "KW_TYPENAME", "KW_UNDERLYING_TYPE",
  "KW_UNION", "KW_UNSIGNED", "KW_USING", "KW_VIRTUAL", "KW_VOID",
  "KW_VOLATILE", "KW_WCHAR_T", "KW_WHILE", "START_CPP", "START_CONST_EXPR",
  "START_TYPE", "'{'", "','", "';'", "':'", "'='", "'?'", "'|'", "'^'",
  "'&'", "'<'", "'>'", "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "'.'",
  "'('", "'['", "')'", "'}'", "'!'", "']'", "$accept", "grammar", "cpp",
  "constructor_inits", "constructor_init", "extern_c", "$@1",
  "declaration", "friend_declaration", "$@2", "storage_class",
  "attribute_specifiers", "attribute_specifier", "type_like_declaration",
  "$@3", "multiple_instance_identifiers", "typedef_declaration", "$@4",
  "typedef_instance_identifiers", "constructor_prototype", "$@5", "$@6",
  "function_prototype", "$@7", "$@8", "$@9", "$@10", "$@11",
  "function_post", "function_operator", "more_template_declaration",
  "template_declaration", "$@12", "template_formal_parameters",
  "template_nonempty_formal_parameters", "typename_keyword",
  "template_formal_parameter", "template_formal_parameter_type",
  "instance_identifier", "$@13",
  "instance_identifier_and_maybe_trailing_return_type",
  "maybe_trailing_return_type", "function_parameter_list",
  "function_parameters", "formal_parameter_list", "formal_parameters",
  "template_parameter_maybe_initialize", "maybe_initialize",
  "maybe_initialize_or_constructor_body",
  "maybe_initialize_or_function_body", "structure_init",
  "structure_init_body", "function_parameter", "formal_parameter",
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier",
  "parameter_pack_identifier", "not_paren_empty_instance_identifier",
  "empty_instance_identifier", "type", "type_pack", "type_decl",
  "predefined_type", "var_type_decl", "full_type", "struct_attributes",
  "anonymous_struct", "$@14", "named_struct", "$@15", "maybe_final",
  "maybe_class_derivation", "class_derivation", "base_specification",
  "enum", "enum_decl", "enum_element_type", "enum_body_trailing_comma",
  "enum_body", "enum_keyword", "struct_keyword", "namespace_declaration",
  "$@16", "$@17", "using_declaration", "simple_type", "simple_int_type",
  "simple_float_type", "simple_void_type", "code", "$@18", "code_block",
  "element", "optional_const_expr", "optional_const_expr_comma",
  "const_expr_comma", "no_angle_bracket_const_expr", "const_expr",
  "const_operand", "formal_const_expr", "formal_const_operand",
  "capture_list", "capture", "class_derivation_name", "name",
  "name_no_final", "string_literal", "empty", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   123,    44,    59,    58,
      61,    63,   124,    94,    38,    60,    62,    43,    45,    42,
      47,    37,   126,    46,    40,    91,    41,   125,    33,    93
};
# endif

#define YYPACT_NINF -922

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-922)))

#define YYTABLE_NINF -751

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
     135,  -922,  3702,  5708,    37,  4828,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -125,  -122,   -95,   -89,   -85,   -71,
     -59,   -41,   -50,  -922,  -922,   -38,    12,    28,    42,    55,
      75,    78,   130,   156,   185,   194,   203,   217,   224,   252,
     287,   294,   296,   303,  6019,  -922,  -922,   -37,   307,   311,
      14,   -20,  -922,   313,   326,   332,  3702,  3702,  3702,  3702,
    3702,  1776,  1058,  3702,  4709,  -922,    77,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  5818,   336,  -922,   -23,  -922,
    -922,  4057,  4449,  4449,  -922,  3303,   344,  -922,  4449,  -922,
    -922,    59,    59,  -922,  -922,  -922,  -922,    20,    48,  -922,
    -922,  -922,  -922,  -922,  -922,   468,   345,  -922,  6767,  6767,
    6767,  -922,  6767,  5186,  6767,    39,  -922,  6758,   347,   348,
     352,   354,  6767,  1630,    52,   100,   186,  6767,  6767,   359,
    6638,  6767,  6767,  5704,  6767,  6767,  -922,  -922,  -922,  -922,
    4196,  -922,  -922,  -922,  -922,  -922,  3702,  3702,  5708,  3702,
    3702,  3702,  3702,  5708,  3702,  5708,  3702,  5708,  3702,  5708,
    5708,  5708,  5708,  5708,  5708,  5708,  5708,  5708,  5708,  5708,
    5708,  5708,  5708,  5708,  3702,  -922,  -922,   362,  3303,   370,
     373,  3303,  -922,  -922,  5708,  3702,  3702,   374,  5304,  5708,
    1776,  3702,  3702,    51,    51,    51,    51,    51,  -125,   -95,
     -89,   -85,   -71,   -41,   -38,    28,  4337,  4997,  5357,  5612,
     332,    87,  -103,  4709,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  3303,  3303,   -98,   191,  -922,
    -922,    51,  3702,  3702,  3702,  3702,  3702,  3702,  3702,  3702,
    3702,  3702,  3702,  3702,  3702,  3702,  3702,  3702,  3702,  3702,
    3702,  3702,  3702,  2764,  3702,  -922,  -922,    59,    59,  2898,
    -922,  -922,  -922,  4449,  -922,  -922,  -922,  -922,  5708,  -922,
     262,   257,   162,    59,    59,   162,   162,  4941,   188,  -922,
     367,  -922,  -922,  -922,  -922,  -922,  -922,  4431,   278,  5129,
    -922,  3303,   491,   395,   379,  2486,  5213,  6767,  -922,  -922,
    -922,  -922,  6767,  -922,  -922,  -922,  -922,  6730,  2901,  -922,
    3303,  3303,  3303,  3303,  -922,  -922,   402,  -922,  -922,  -922,
    -922,  -922,  3702,  -922,  4289,  -922,   397,  -922,  4375,  -922,
    3303,   216,  -922,  -922,   385,   387,  -922,   392,  5904,  3303,
     407,  -922,  3303,   -21,   324,   425,  -922,  -922,  -922,  -922,
    1115,  -922,  -922,   408,   427,  -922,   412,   418,   428,   429,
     432,   433,   423,   434,   437,   441,   443,   444,   449,   456,
     462,   -69,   482,   464,   467,   469,   470,   472,   473,   479,
     481,   483,   485,   492,  3702,  -922,  5708,  3702,  -922,  5260,
     501,   493,   494,  3303,   508,   509,   528,   520,  4060,   522,
     523,  3702,  3702,  -922,   633,  -922,  1031,   532,  3702,  -922,
    -922,  4026,  4994,   507,   507,   569,   569,   405,   405,  -922,
    3054,  1798,  1271,  1600,   569,   569,   683,   683,    51,    51,
      51,  -922,  -922,   -46,  2253,  -922,  -922,   533,  4444,   534,
     162,   536,   545,  3303,   162,   162,   162,   162,   162,   541,
    -922,   188,  -922,   188,  -922,   541,   541,  -922,   162,   468,
    5794,  5679,   162,   162,   543,     7,  -922,   442,   396,  -922,
    3702,  3303,   546,  -922,  -922,  -922,  -922,  4431,   -12,    -8,
      10,   468,   548,    71,  -922,  -922,  -922,   561,  6767,   468,
    1917,  -125,   549,  4501,  -922,  -922,  -922,   578,   588,   590,
     591,   598,  6134,  -922,  3855,  5453,   353,   582,   324,  -922,
    -922,   577,  -922,  5708,  -922,    21,  3032,  6043,  1099,  -922,
    5708,  -922,   583,  -922,  -922,  3303,    66,  -922,  -922,  -922,
    2625,  -922,  -922,   413,  -922,   599,  5129,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,   585,  -922,   602,  -922,  -922,  -922,
    -922,  5708,  -922,  5708,  -922,  5708,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  4522,   611,   612,
    -922,   606,  -922,  -922,   614,  -922,  -922,   618,  -922,  -922,
    -922,  -922,    51,  4709,  -922,  3303,   191,  5559,  1592,  -922,
    4709,  3702,  -922,  -922,  -922,  -922,  -922,   541,   162,  -922,
     541,   541,   541,   541,   541,  3702,    63,   706,  5818,   442,
     396,  -922,    98,   120,  -922,  -922,  5588,   625,   442,   442,
     442,   442,   442,   442,   -70,  -922,  -922,   627,  3303,   396,
     396,   396,   396,   396,   396,   -33,   623,  4709,  -922,   -58,
    -922,   641,   747,  2486,  -922,   720,   468,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,   635,   647,   650,  -922,  -922,
    6019,  -922,  -922,   651,    38,   654,  -922,   646,  3702,  3702,
    3702,  3702,  1776,  3702,   645,    25,  -922,  -922,  4763,  -922,
      77,  -922,  6767,  6767,  6206,  -922,   803,   805,   806,   818,
    -922,  -922,   376,   682,  -922,  -922,  -922,  -922,  5521,  -922,
     676,   688,  3169,  -922,  1035,  -922,  -922,    21,  -922,   413,
    -922,   690,  5559,   680,   413,  5559,   679,  4540,  1099,   692,
    1099,  1099,  1099,  1099,  1099,   167,  -922,  -922,   686,  6278,
    -922,   689,  -922,   290,  -922,  -113,   701,   705,   691,   707,
     711,  3166,  3322,   708,   413,   413,  4129,   413,   413,   413,
     413,  -922,    61,   411,  -922,  4431,  -922,  3702,  3702,   699,
     702,   703,  -922,  -922,  -922,  3702,  -922,  3702,  -922,   709,
    -922,  5933,   468,  -922,  -922,  -922,  -922,  -922,  -922,   712,
    -922,  -922,   725,  -922,  4709,   541,   704,   715,  5679,   442,
     396,   -70,   -33,   729,   732,  1592,  -922,  -922,   442,   740,
     740,   740,   740,   740,   298,  3702,  -922,   396,  -922,   742,
     742,   742,   742,   742,   321,  3702,  -922,   743,  -922,  3702,
    -922,   731,  4558,  6350,  -922,   760,  -922,  -922,  5708,  5708,
    5708,   746,  5708,   749,  5333,  5708,  1776,    51,    51,    51,
      51,   750,   -26,    51,  -922,  -922,  3836,  3702,  3702,  3702,
    3702,  3702,  3702,  3702,  3702,  3702,  3702,  3702,  3702,  3702,
    3702,  3702,  3702,  3702,  3702,  3702,  3702,  3702,  3300,  3702,
    -922,  -922,  -922,  -922,   -14,   768,   771,   772,  6422,    17,
    -922,  1035,  6647,  5453,  3303,   767,   763,  1035,  1035,  1035,
    1035,  1035,  1035,    85,   742,  -922,   411,  -922,   757,   413,
     209,   758,  -922,  -922,   329,  1099,   775,   775,   775,   775,
     775,  -922,  3702,  -922,  -922,  5559,  -922,  2319,  -922,  -922,
    3303,  3702,  3702,  -922,  -922,  -922,  -922,  -922,  3166,   761,
     789,  4709,  -922,  -922,   413,   341,   341,   927,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,   776,   774,  -922,  -922,   341,   341,
     341,   267,   937,  -922,  3702,  -922,  2625,   797,  -922,   641,
      58,    89,  -922,  -922,  -922,    93,    94,  -922,  6019,    59,
     898,   132,  -922,  -922,  5559,  -922,   -70,   -33,  -922,  -922,
    5559,  5559,  -922,   740,   783,   802,   742,   808,   804,  3590,
    -922,  -922,  -922,  3919,   828,   829,  -922,   812,   826,   831,
    3702,   832,  3303,   823,   825,   836,   827,  4595,  3702,  -922,
    -922,  -922,  4026,  4994,   507,   507,   569,   569,   405,   405,
    -922,  4613,  1798,  1271,  1600,   569,   569,   683,   683,    51,
      51,    51,  -922,  -922,    96,  2505,  6494,   984,   847,   987,
     990,   992,  -922,   856,    85,   742,  -922,  -922,  -922,  -922,
    -922,  -922,  5708,  1035,  3975,  -922,  -922,   860,  -922,  -922,
     276,   844,  -922,  -922,   775,  5559,   843,   848,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,   846,  -922,
     850,   849,   851,  -922,  3434,   341,  -922,  -922,  -922,  -922,
    -922,  1917,   855,  3322,   413,  -922,  -922,  -922,  -922,  1592,
      59,  -922,  -922,  -922,     2,   858,   861,  -922,  -922,   865,
     866,  5559,  -922,  5559,  -922,  -922,  5778,  6003,  6052,  3303,
     368,  -922,  -922,  1011,  -922,  3919,  -922,   869,   872,   871,
     876,   878,  -922,  -922,   887,  -922,  -922,    51,  3702,  -922,
    -922,  -922,    99,  -922,   104,   895,   145,  -922,  -922,  -922,
     899,   919,   920,   921,    40,   923,  3975,  3975,  3975,  3975,
    3975,  1776,  3975,  4211,  -922,   413,  2679,   915,  -922,  2679,
    5559,   914,  -922,  -922,  2094,  -922,  -922,  1066,  -922,  3166,
    4709,   917,  -922,  -922,   938,  -922,   926,  -922,  -922,  -922,
    -922,  -922,   932,   933,  4191,  -922,  4191,  -922,  4191,  -922,
    -922,  4191,  4191,  4191,  -922,  6566,  -922,  3702,  3702,  -922,
    3702,  -922,  3702,  4709,  1075,   939,  1076,   941,   953,  1092,
     955,  5708,  5708,  5708,  5708,   940,  5424,  5708,    67,    67,
      67,    67,    67,   947,   149,    67,  3975,  3975,  3975,  3975,
    3975,  3975,  3975,  3975,  3975,  3975,  3975,  3975,  3975,  3975,
    3975,  3975,  3975,  3975,  3975,  3568,  3702,  -922,  -922,  5559,
     948,  -922,  2679,  -922,  -922,   954,  -922,  -922,  -922,  1592,
    1592,  1592,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,   153,   171,   177,   181,   949,  -922,   958,  -922,  -922,
     189,  -922,   957,   950,   964,   972,  3303,   970,   971,   982,
    3975,  -922,  4820,  5010,  1350,  1350,   604,   604,   662,   662,
    -922,  1203,  5026,  5050,  5066,   770,   770,    67,    67,    67,
    -922,  -922,   193,  2782,  5559,   973,  -922,  2679,  -922,  2679,
     974,  -922,  -922,  -922,  2679,  2679,  -922,  -922,  -922,  -922,
     994,  1130,  1135,  1000,  -922,   985,   986,   988,   989,  -922,
    -922,   993,    67,  3975,  -922,  -922,   995,  -922,  2679,  -922,
    -922,   996,   998,  -922,  3702,  3702,  3702,  -922,  3702,  4211,
    -922,  1592,  1006,  1008,   205,   210,   214,   263,  1592,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   755,     0,     0,     0,   755,     5,   644,   640,   643,
     751,   752,   646,   647,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   642,   648,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   650,   649,     0,     0,     0,
       0,     0,   641,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   755,     0,     3,   581,   645,   291,   302,   301,
     385,   386,   388,   389,   370,     0,     0,   400,   367,   399,
     394,   391,   390,   393,   371,     0,     0,   372,   392,   402,
     387,   755,   755,     4,   293,   294,   295,     0,   356,   755,
     290,   382,   383,   384,     1,     0,     0,    21,   755,   755,
     755,    22,   755,   755,   755,     0,    38,   755,     0,     0,
       0,     0,   755,     0,     0,     0,     0,   755,   755,     0,
     755,   755,   755,     0,   755,   755,     6,    17,     7,    19,
       0,    15,    16,    18,    68,    40,   755,   755,     0,   755,
     755,   755,   755,     0,   755,     0,   755,     0,   755,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   755,   317,   323,     0,     0,     0,
     605,     0,   755,   316,     0,   755,   755,     0,     0,     0,
       0,   755,   755,   614,   612,   611,   613,   610,   291,   385,
     386,   388,   389,   400,   399,   394,   391,   390,   393,   392,
     387,     0,     0,   540,   737,   738,   739,   740,   743,   741,
     745,   744,   742,   746,   726,   727,     0,     0,   755,   732,
     725,   609,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   753,   754,   755,   755,     0,
     368,   369,   401,   391,   396,   395,   398,   292,     0,   397,
       0,   277,   755,   755,   755,   755,   755,   755,     0,   326,
     276,   328,   755,   747,   748,   749,   750,     0,   358,     0,
     330,     0,     0,    58,    60,     0,   755,   755,    52,    41,
      51,    53,   755,    42,   147,    47,    23,   755,     0,    45,
       0,     0,     0,     0,    50,   755,     0,    26,    25,    24,
      48,    44,     0,   151,     0,   150,     0,    54,     0,    20,
       0,     0,    46,    49,   325,   304,   315,     0,     0,     0,
       0,    13,     0,     0,     0,   324,    63,   306,   307,   308,
     356,   755,   303,     0,   539,   538,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   318,     0,   755,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   639,   730,   733,     0,   755,     0,   728,
     205,   623,   624,   625,   626,   627,   628,   631,   632,   638,
       0,   620,   621,   622,   629,   630,   618,   619,   615,   616,
     617,   637,   636,     0,     0,   327,   329,     0,     0,     0,
     755,   278,     0,   267,   755,   755,   755,   755,   755,   283,
     266,     0,   279,     0,   280,   282,   281,   190,   755,     0,
       0,     0,   755,   755,     0,   191,   194,   755,     0,   189,
     755,   364,     0,   361,   360,   355,   359,     0,   737,   738,
     739,     0,     0,   741,   334,   296,   336,     0,   755,     0,
     755,   304,     0,     0,    43,    39,   755,     0,     0,     0,
       0,     0,   755,   373,     0,   755,   325,   304,     0,   324,
      71,     0,   379,     0,    76,    78,     0,     0,   755,   305,
       0,   755,     0,   403,   207,     0,     0,    66,   403,   212,
       0,    67,    65,     0,   311,   358,     0,   588,   587,   604,
     594,   590,   592,   593,     0,   600,     0,   599,   653,   589,
     654,     0,   656,     0,   657,     0,   660,   661,   662,   663,
     664,   665,   666,   667,   668,   669,   596,     0,     0,     0,
     319,     0,   595,   598,     0,   602,   601,     0,   607,   608,
     597,   591,   582,   541,   731,     0,   755,   755,   755,    91,
     206,     0,   635,   634,   299,   298,   300,   284,   755,   268,
     273,   269,   270,   272,   271,   755,     0,     0,     0,   755,
       0,   231,     0,     0,   755,   193,     0,     0,   755,   755,
     755,   755,   755,   755,   755,   245,   244,     0,   255,     0,
       0,     0,     0,     0,     0,   755,     0,   537,   536,   365,
     354,   297,     0,     0,   755,   755,     0,    55,    59,   718,
     714,   717,   720,   721,   197,     0,     0,     0,   716,   722,
       0,   724,   723,     0,     0,     0,   715,     0,     0,     0,
       0,     0,     0,     0,     0,   198,   233,   201,   234,   670,
     719,   196,   755,   755,   755,   375,     0,     0,     0,     0,
     377,   755,     0,     0,   168,   169,   170,   156,     0,   157,
       0,   153,   158,   154,   755,   167,   152,     0,    73,     0,
     381,     0,   755,     0,     0,   755,     0,     0,   755,     0,
     755,   755,   755,   755,   755,     0,   236,   235,     0,   755,
      80,     0,   755,     0,     8,     0,     0,     0,     0,     0,
       0,   755,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    64,   755,   755,   171,     0,   309,     0,     0,     0,
       0,     0,   321,   322,   606,     0,   603,     0,   729,     0,
      98,     0,     0,    92,   100,    95,    99,    94,    96,     0,
      93,    97,     0,   186,   633,   274,     0,     0,     0,   755,
       0,   755,   755,     0,     0,   755,   192,   195,   755,   250,
     246,   247,   249,   248,     0,   755,   225,     0,   256,   261,
     257,   258,   260,   259,     0,   755,   228,   285,   362,     0,
     331,     0,     0,   755,   339,   755,   338,    62,     0,     0,
       0,   680,     0,     0,     0,     0,     0,   688,   687,   686,
     685,     0,     0,   684,    61,   200,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      57,    56,   378,   755,     0,     0,     0,     0,   755,     0,
      37,   755,   755,     0,   161,   159,     0,   755,   755,   755,
     755,   755,   755,   755,   165,    72,   755,   380,     0,     0,
       0,     0,   313,   312,     0,   755,   241,   237,   238,   240,
     239,    86,   755,   314,    14,   755,   208,   404,   405,   403,
       0,   755,   755,   210,   211,   213,   215,   216,   755,     0,
     219,   221,   218,   214,     0,   178,   174,     0,   115,   116,
     117,   118,   119,   120,   123,   124,   139,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   143,
     142,   126,   125,   112,   114,   113,   121,   122,   110,   111,
     107,   108,   109,   106,     0,     0,   105,   172,   175,   177,
     176,     0,     0,   182,   755,   184,     0,     0,    69,   310,
       0,     0,   655,   658,   659,     0,     0,   755,     0,   755,
       0,     0,   403,   275,   755,   232,   755,   755,   226,   229,
     755,   755,   286,   251,   254,     0,   262,   265,     0,   366,
     333,   332,   335,     0,     0,   341,   340,     0,     0,     0,
     755,     0,     0,     0,     0,     0,     0,     0,     0,   713,
     199,   202,   697,   698,   699,   700,   701,   702,   705,   706,
     712,     0,   694,   695,   696,   703,   704,   692,   693,   689,
     690,   691,   711,   710,     0,     0,   755,     0,     0,     0,
       0,     0,   374,     0,   755,   166,   146,   144,   149,   145,
     155,   162,     0,   755,     0,   163,   203,     0,    74,   755,
       0,     0,   755,    88,   242,   755,     0,     0,   407,   408,
     412,   409,   417,   410,   411,   413,   414,   415,   416,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   485,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   755,   529,   530,   531,   522,   534,
     518,   519,   517,   524,   525,   513,   514,   515,   516,   523,
     521,   528,   526,   532,   527,   520,   533,   406,     0,     9,
       0,     0,     0,   217,   220,   179,   173,   141,   140,   181,
     185,   755,     0,   206,     0,   585,   584,   586,   583,   755,
     755,   187,   104,   101,     0,     0,     0,   227,   230,     0,
       0,   755,   252,   755,   263,   363,   745,     0,   744,     0,
       0,   342,   344,   734,   755,     0,   679,     0,     0,     0,
       0,     0,   677,   676,     0,   682,   683,   671,     0,   709,
     708,   376,     0,    27,     0,     0,     0,    36,   164,   160,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   204,   542,     0,    77,     0,    82,    79,
     755,     0,   243,   755,     0,   209,    12,    10,   222,   755,
     223,     0,   180,    70,     0,   188,     0,   102,   651,   755,
     755,   755,     0,     0,     0,   347,     0,   346,     0,   345,
     735,     0,     0,     0,   736,   755,   343,     0,     0,   681,
       0,   678,     0,   707,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   557,   555,
     554,   556,   553,     0,     0,   552,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    75,    84,   755,
       0,   755,    81,   535,    11,     0,   755,   403,   103,   755,
     755,   755,   755,   755,   353,   352,   351,   350,   349,   348,
     337,     0,     0,     0,     0,     0,    28,     0,    33,    35,
       0,    30,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   580,   566,   567,   568,   569,   570,   571,   572,   573,
     579,     0,   563,   564,   565,   561,   562,   558,   559,   560,
     578,   577,     0,     0,   755,     0,   755,    87,   224,   183,
       0,   289,   288,   287,   253,   264,   674,   673,   675,   672,
       0,     0,     0,     0,   551,     0,     0,     0,     0,   549,
     548,     0,   543,     0,   576,   575,     0,   755,    89,   652,
      29,     0,     0,    31,     0,     0,     0,   550,     0,   574,
     755,   755,     0,     0,     0,     0,     0,     0,   755,    83,
      34,    32,   546,   545,   547,   544,    85
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -922,  -922,  -284,  -922,   238,  -922,  -922,   853,  -127,  -922,
     195,  -424,   519,  -126,  -922,   -78,  -922,  -922,  -148,  -922,
    -922,  -922,   840,  -922,  -922,  -922,  -922,  -922,  -582,  -922,
    -922,  -111,  -922,  -922,  -922,  -922,   286,   474,  -641,  -922,
    -691,  -728,  -576,  -922,   -64,  -922,   108,  -558,  -922,  -492,
    -921,  -922,  -434,   337,  -608,   241,   389,   609,   -87,    24,
      86,  -287,  -647,   859,   230,  -162,  -130,  -922,  -128,  -922,
    -922,  -922,  -922,   -91,  -121,  -922,  -471,  -922,  -922,   -18,
      18,  -922,  -922,  -922,  -922,   -29,    81,  -922,  -922,  -514,
    -922,   -16,  -922,  -567,  -104,   -60,   288,   716,    90,  -922,
    -922,  -922,   787,  -367,  1319,   -68,  -481,    -1
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     4,     5,   733,   734,   137,   521,   138,   139,   307,
     140,   292,   293,   141,   533,   751,   329,   709,   895,   343,
     712,   715,   344,   915,  1409,  1474,  1095,  1320,   588,   977,
    1078,   142,   326,   700,   701,   702,   703,   704,   752,  1241,
     753,   782,   464,   465,   674,   675,  1085,   409,   527,   531,
     929,   930,   466,   677,   725,   799,   809,   278,   279,    91,
      92,   345,   180,   346,    93,   289,    94,   644,    95,   645,
     825,  1024,  1025,  1271,    96,    97,   475,   471,   472,    98,
      99,   143,   691,   873,   144,   100,   101,   102,   103,   731,
     732,   917,  1227,   636,   353,   354,  1313,   213,    65,   678,
     679,   227,   228,  1272,  1273,   625,    66,   145
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
       6,   212,   304,   323,   325,   281,   641,  1232,   492,   680,
     347,   769,   348,   831,   738,   183,   708,  1336,   896,   349,
     389,   146,   615,   255,   985,   256,   181,   611,   768,   187,
     288,   502,   795,   921,   713,   607,   260,   104,   786,   147,
     845,   509,   148,   356,   402,   358,   359,   360,   361,   406,
     363,   922,   365,   833,   367,  1375,   676,   642,   283,   284,
     285,   230,   182,   403,  -747,   648,   806,  1012,  -748,   149,
     383,   407,   270,   900,   271,   150,   272,   816,   553,   151,
     408,   391,   392,   255,   240,   256,  -749,   399,   400,   818,
     280,   280,   819,   152,   771,   805,   153,   554,   290,   257,
    1394,   402,   261,   935,   936,   155,   978,   979,   980,   981,
     904,   352,   906,   907,   908,   909,   910,   408,   184,   273,
     592,   402,   350,   154,   999,   523,   156,   524,   525,   526,
     736,   737,   815,  1067,  -747,   189,   898,  -747,  -748,   901,
    1039,  -748,   214,   215,   216,   355,   355,  -750,   355,   355,
     355,   355,  1068,   355,   616,   355,  -749,   355,   351,  -749,
     286,   258,   264,   265,   266,   347,   282,   348,  1337,   269,
     435,   436,   846,   355,   349,   442,   157,   443,   188,   444,
     714,   290,   797,  1073,   355,   355,   452,   454,   306,   536,
     355,   355,   158,   433,   347,   987,   348,   287,   347,   274,
     348,   317,   834,   349,  1376,   402,   159,   349,   217,   218,
     982,   879,   684,   275,   252,   253,   254,  -750,   276,   160,
    -750,   486,   445,   277,  1245,   983,   984,   410,   605,   787,
    1404,  1405,  1406,  1008,  1009,  1084,   402,   729,  1015,   161,
     402,   402,   162,   402,   219,   220,  1364,   221,  1018,   318,
     805,  1366,   222,   401,   223,  1246,   280,   280,  1090,  1247,
    1248,   988,  1289,   605,   793,  1365,   352,   214,   215,   216,
    1367,   450,   280,   280,   450,   450,   469,   350,     1,     2,
       3,   473,   535,   569,   989,   605,   794,   264,   265,   266,
     269,   211,  1369,  1235,   163,   352,   402,  1094,  1253,   352,
     402,   467,   446,   298,   299,   300,   350,   301,   303,   305,
     350,  1370,   309,   351,     6,  1451,   447,   314,   402,  1486,
     164,   448,   320,   321,   402,   324,   327,   328,   402,   332,
     333,   911,   912,   217,   218,   319,  1492,  1487,  1087,  1097,
     402,   408,   351,  1488,   264,  1096,   351,  1489,  1000,   165,
     290,  1250,   402,   470,  1005,  1493,   821,   402,   166,  1504,
     823,   402,   518,   468,   512,   680,   513,   167,   476,   219,
     220,  1532,   221,   983,   984,  1091,  1533,   222,   357,   223,
    1534,   168,    10,   362,    11,   364,   355,   366,   169,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,  1088,  1228,   589,   878,  1415,   627,
     402,   628,   676,   629,   390,  1249,   170,  1242,   395,   396,
     397,   440,  -267,   283,   284,   285,   743,   477,  1256,  1535,
     744,   983,   984,  1239,  1259,  1260,   919,   920,   240,   450,
     983,   984,  1317,   450,   450,   450,   450,   450,  1257,  1258,
     726,   171,   283,   284,   285,   617,   630,   450,   172,   618,
     173,   450,   450,   805,  1014,   754,   626,   174,   486,   638,
     528,   185,   529,   745,   530,   186,   705,   190,   214,   215,
     216,  1351,  1352,  1353,   609,   467,   815,  1017,  1255,   681,
     191,   303,   309,  1093,   912,     6,   192,   494,   439,   -90,
     259,   -90,   619,   -90,   706,   983,   984,  1316,   268,   295,
    1319,   310,   311,   347,   467,   348,   312,   727,   313,  1321,
       6,  1334,   349,   322,   746,   286,   384,   236,   237,   238,
     239,   -90,  -266,   -90,   386,   -90,   631,   387,   393,   488,
     240,   718,   489,   490,   217,   218,   610,   468,   503,   514,
     632,   515,   505,   747,   286,   633,   516,   528,   476,   529,
     634,   986,   247,   248,   249,   250,   251,   748,   252,   253,
     254,   520,   749,   532,   402,   537,   468,   750,   538,   544,
     219,   220,   620,   221,   539,   410,   469,   783,   222,  1066,
     223,   238,   239,   546,   540,   541,   621,   450,   542,   543,
     545,   622,   240,   551,   638,   291,   623,   547,   626,   548,
     549,   467,   842,   589,   352,   550,   568,   626,   626,   626,
     626,   626,   626,   410,   896,   350,  1392,  1393,   552,   555,
     556,   183,   789,   557,   410,   558,   559,  1394,   560,   561,
     467,   754,   181,     6,   826,   562,   754,   563,   584,   564,
     726,   565,   726,   726,   726,   726,   726,   571,   566,   572,
     573,   351,   245,   246,   247,   248,   249,   250,   251,   705,
     252,   253,   254,   468,   575,   576,   754,   754,   182,   754,
     754,   754,   754,   647,   577,  1342,   578,  1343,   580,   581,
       6,  1481,  1482,  1483,   790,  1394,   587,   990,   991,   594,
     596,  -268,   468,   626,   598,   995,   605,   996,   624,   614,
     646,   469,   643,   640,   469,   682,   240,   727,    64,   727,
     727,   727,   727,   727,   685,   710,   247,   248,   249,   250,
     251,   918,   252,   253,   254,   686,   467,   687,   688,   467,
     932,  1412,   183,   711,  1410,   689,   707,   730,   755,   757,
     728,   783,   410,   181,   788,  1076,  1077,  1419,  1420,  1421,
     680,  1399,  1400,  1401,  1402,  1403,   758,  1404,  1405,  1406,
     765,  1079,   193,   194,   195,   196,   197,   763,   764,   231,
     766,   759,   767,   760,   798,   761,   807,  -357,   626,   182,
     410,   410,   817,  1529,   783,   820,   824,   626,   468,   828,
    1536,   468,   829,  1394,   638,   830,   832,   676,  1064,   835,
     836,   844,   467,   874,   638,   875,   876,  1230,  1231,  1399,
    1400,  1401,  1402,  1403,  1026,  1404,  1405,  1406,   877,  1477,
     880,   754,   882,  1475,  1479,   883,   476,   726,   897,   899,
    1484,  1485,   249,   250,   251,   902,   252,   253,   254,   923,
     791,   905,   913,   924,   705,   926,   916,   635,   925,   927,
     800,   801,   802,   803,   804,   992,   754,   934,   993,   994,
     467,  1002,     6,  1003,   468,   997,  1001,   870,   871,  1004,
     626,   449,   451,   453,   455,   456,   626,   626,   626,   626,
     626,   626,  1086,  1010,  1508,   410,  1011,  1020,  1506,  1345,
    1347,  1349,   841,  1480,   727,   805,   398,   815,  -275,  1023,
    1030,   638,  1251,  1032,   469,  1069,  1038,  1082,  1070,  1071,
     355,   355,  1083,  1089,  1092,  1521,  1279,   932,  1233,  1401,
    1402,  1403,   468,  1404,  1405,  1406,  1234,  1236,  1528,   467,
     912,  1240,  1237,  1238,  1244,   893,  1252,  1261,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   183,
     434,  1262,  1263,  1264,  1274,   438,  1275,  1424,  1276,  1425,
     181,  1426,  1277,   638,  1427,  1428,  1429,  1278,  1280,  1282,
    1355,  1283,  1284,  1285,  1292,  1293,   589,  1294,   280,   792,
    1295,   468,  1296,   469,  1297,   410,   410,  1315,  1318,   469,
     469,   493,  1322,  1325,  1323,  1327,   182,  1326,  1328,   810,
     811,   812,   813,   814,  1332,  1338,  1354,  1339,   467,   355,
    1006,  1340,  1341,  1357,   467,   467,  1358,  1359,   504,  1013,
    1360,   214,   215,   216,  1361,   283,   284,   285,   886,   597,
     628,  1362,   887,   600,   601,   602,   603,   604,  1027,  1028,
    1029,  1368,  1031,  1371,  1034,  1035,  1036,   606,   214,   215,
     216,   612,   613,  1086,  1372,  1373,  1374,   324,  1377,  1408,
    1411,  1414,   626,  1416,  1417,  1435,  1437,  1436,   589,  1438,
     468,   589,  1418,   894,   469,   888,   468,   468,  1422,  1423,
     567,  1439,  1440,  1441,  1446,  1491,  1495,   217,   218,   283,
     284,   285,   719,  1450,  1476,  1490,   720,   582,   583,   467,
    1496,  1478,  1074,  1494,   590,   478,   479,   480,  1497,   800,
     801,   802,   803,   804,   217,   218,  1499,  1500,  1501,  1507,
    1511,  1509,  1510,   219,   220,  1512,   221,   286,  1513,  1514,
    1515,   222,  1516,   223,  1530,  1517,  1531,  1518,  1229,   721,
     495,  1520,  1522,  1335,  1523,   827,  1333,  1407,   508,  1080,
     219,   220,   881,   221,  1314,   889,   754,  1331,   222,  1007,
     223,   468,  1298,  1041,  1356,   585,   637,   510,  1324,   890,
     226,   217,   218,   586,   891,     0,  1016,     0,     0,   892,
       0,     0,     0,   918,     0,     0,     0,   785,   224,     0,
       0,   286,   225,     0,     0,     0,     0,   226,     0,  1386,
    1387,  1388,  1389,  1390,  1391,  1392,  1393,   483,   220,     0,
     221,     0,   717,     0,     0,   222,  1394,   223,     0,   722,
     681,     0,     0,     0,     0,     0,   742,   754,   783,   280,
       0,  1384,     0,   723,     0,     0,     0,     0,   724,     0,
     469,     0,   469,     0,   287,   467,     0,     0,     0,     0,
    1075,     0,     0,     6,     0,     0,     0,   810,   811,   812,
     813,   814,     0,     0,     0,   467,     0,   467,     0,   234,
     235,   236,   237,   238,   239,     0,     0,  1431,  1432,     0,
    1433,     0,  1434,     0,   240,     0,     0,   784,     0,     0,
       0,     0,  1299,     0,     0,     0,     0,     0,     0,   469,
       0,   637,   589,     0,  1013,     0,     0,   468,   932,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   589,   589,
     589,     0,     0,     0,   467,  1472,     0,   468,     0,   468,
       0,     0,  1503,     0,  1395,  1396,  1397,  1398,     0,   822,
    1399,  1400,  1401,  1402,  1403,     0,  1404,  1405,  1406,     0,
    1390,  1391,  1392,  1393,     0,     0,     0,     0,     0,     0,
       0,   229,     0,  1394,   837,   838,   839,   840,     0,   843,
       0,     0,     0,     0,     0,     0,  1314,  1314,  1314,  1314,
    1314,     0,  1314,     0,   267,     0,   468,     0,   469,     0,
     589,     0,     0,     0,     0,   589,     0,     0,   783,   783,
     783,   589,   589,     0,   294,   244,   245,   246,   247,   248,
     249,   250,   251,   467,   252,   253,   254,     0,     0,     0,
       0,     0,   316,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,     0,  1524,  1525,  1526,   931,  1527,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1016,   469,     0,   589,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,   468,     0,   385,   467,     0,
     388,     0,     0,     0,     0,     0,   589,  1399,  1400,  1401,
    1402,  1403,     0,  1404,  1405,  1406,     0,     0,     0,   589,
     783,   637,     0,     0,     0,     0,     0,   783,     0,     0,
       0,   637,     0,     0,     0,  1019,     0,     0,     0,     0,
    1314,  1383,     0,     0,   404,   405,     0,     0,     0,     0,
       0,     0,  1037,     0,     0,     0,     0,     0,     0,     0,
     468,     0,     0,  1042,  1043,  1044,  1045,  1046,  1047,  1048,
    1049,  1050,  1051,  1052,  1053,  1054,  1055,  1056,  1057,  1058,
    1059,  1060,  1061,  1062,     0,  1065,     0,     0,     0,     0,
     441,     0,     0,  1314,  1378,  1379,  1380,  1381,  1382,     0,
    1385,  1442,  1443,  1444,  1445,     0,  1448,  1449,   485,   770,
     487,     0,     0,     0,     0,     0,     0,     0,   234,   235,
     236,   237,   238,   239,     0,   771,     0,   497,   637,   498,
     499,   500,   501,   240,     0,     0,     0,     0,     0,   772,
     214,   215,   216,     0,   931,     0,     0,     0,     0,   511,
       0,     0,   773,   774,     0,     0,     0,     0,   519,     0,
       0,   522,     0,     0,     0,     0,     0,     0,   775,   534,
       0,     0,     0,     0,  1452,  1453,  1454,  1455,  1456,  1457,
    1458,  1459,  1460,  1461,  1462,  1463,  1464,  1465,  1466,  1467,
    1468,  1469,  1470,     0,     0,     0,     0,     0,   776,     0,
     637,   777,  1243,     0,   778,     0,   217,   218,   570,     0,
       0,     0,   574,     0,     0,     0,     0,     0,     0,     0,
     779,     0,     0,     0,     0,   229,     0,     0,     0,     0,
       0,     0,   780,     0,     0,     0,     0,     0,  1502,     0,
       0,     0,   219,   220,     0,   221,   781,     0,     0,     0,
     222,     0,   223,     0,  1287,   245,   246,   247,   248,   249,
     250,   251,   599,   252,   253,   254,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   315,     0,   294,     7,
       8,     9,    10,     0,    11,    12,    13,   198,    68,     0,
     639,  1519,     0,     0,     0,     0,     0,     0,     0,     0,
     294,     0,     0,     0,     0,     0,     0,     0,   294,     0,
       0,     0,     0,     0,     0,     0,   234,   235,   236,   237,
     238,   239,     0,     0,     0,     0,    15,    69,     0,     0,
     199,   240,   200,   201,   202,    74,    75,     0,    20,    76,
       0,     0,   203,    22,   735,     0,    78,     0,     0,     0,
       0,    23,    24,   204,     0,   756,     0,    26,     0,     0,
     205,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,   206,     0,     0,     0,
       0,     0,     0,     0,    44,     0,    45,     0,    46,     0,
       0,     0,     0,    47,     0,   207,   208,    50,     0,     0,
      51,    84,     0,     0,   404,    52,     0,     0,    53,    85,
      86,    87,   209,     0,     0,    89,     0,   210,     0,     0,
     649,   650,   651,    10,     0,    11,   652,   653,    67,    68,
      56,     0,   654,    57,    58,    59,     0,     0,    60,     0,
      61,    62,     0,     0,    63,     0,     0,   808,     0,     0,
    1330,   243,   244,   245,   246,   247,   248,   249,   250,   251,
       0,   252,   253,   254,   459,   294,     0,   655,    69,     0,
       0,    70,     0,    71,    72,    73,    74,   460,     0,   656,
      76,     0,     0,    77,   657,     0,     0,    78,     0,     0,
       0,     0,   658,   659,    79,     0,     0,     0,     0,     0,
       0,    80,     0,     0,  1363,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    81,     0,     0,
       0,   885,     0,     0,     0,   660,     0,   661,     0,   662,
       0,     0,     0,   461,   663,     0,    82,    83,   664,     0,
       0,   665,    84,     0,     0,   931,   666,     0,     0,   667,
      85,    86,    87,    88,     0,     0,    89,     0,    90,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   668,     0,     0,   669,   670,     0,     0,     0,   671,
       0,   672,     0,     0,     0,   673,     0,     0,     0,     0,
       0,   294,     0,     0,     0,     0,     0,  1098,  1099,  1100,
    1101,  1102,  1103,  1104,  1105,  1106,  1107,  1108,     0,  1109,
    1110,  1111,  1112,  1113,  1114,  1115,  1116,  1117,  1118,  1119,
       0,     0,  1473,     0,     0,     0,     0,  1120,  1121,  1122,
    1123,  1124,  1125,  1126,  1127,  1128,  1129,  1130,  1131,  1132,
    1133,  1134,  1135,  1136,  1137,  1138,     0,     0,  1139,  1140,
    1141,  1142,  1143,  1144,  1145,  1146,  1147,  1148,  1149,  1150,
    1151,  1152,  1153,     0,  1154,     0,  1155,  1156,  1157,  1158,
    1159,  1160,  1161,  1162,  1163,     0,  1164,  1165,  1166,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1167,     0,     0,     0,     0,     0,
    1168,  1169,  1170,  1081,  1171,  1172,  1173,  1174,  1175,  1176,
    1177,  1178,  1179,  1180,  1181,  1182,  1183,  1184,  1185,  1186,
    1187,  1188,  1189,  1190,  1191,  1192,  1193,  1194,  1195,  1196,
    1197,  1198,  1199,  1200,  1201,  1202,  1203,     0,     0,   735,
    1204,  1205,  1206,  1207,  1208,  1209,  1210,  1211,  1212,  1213,
    1214,  1215,  1216,  1217,  1218,  1219,  1220,  1221,  1222,  1223,
    1224,  1413,  1225,  1226,     0,     0,     0,     0,     0,   232,
     233,   234,   235,   236,   237,   238,   239,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   240,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1254,     0,  1098,  1099,  1100,  1101,  1102,  1103,  1104,  1105,
    1106,  1107,  1108,     0,  1109,  1110,  1111,  1112,  1113,  1114,
    1115,  1116,  1117,  1118,  1119,     0,     0,     0,     0,     0,
       0,  1281,  1120,  1121,  1122,  1123,  1124,  1125,  1126,  1127,
    1128,  1129,  1130,  1131,  1132,  1133,  1134,  1135,  1136,  1137,
    1138,     0,     0,  1139,  1140,  1141,  1142,  1143,  1144,  1145,
    1146,  1147,  1148,  1149,  1150,  1151,  1152,  1153,     0,  1154,
       0,  1155,  1156,  1157,  1158,  1159,  1160,  1161,  1162,  1163,
       0,  1164,  1165,  1166,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,     0,   252,   253,   254,  1167,
       0,     0,   593,     0,     0,  1168,  1169,  1170,     0,  1171,
    1172,  1173,  1174,  1175,  1176,  1177,  1178,  1179,  1180,  1181,
    1182,  1183,  1184,  1185,  1186,  1187,  1188,  1189,  1190,  1191,
    1192,  1193,  1194,  1195,  1196,  1197,  1198,  1199,  1200,  1201,
    1202,  1203,     0,     0,     0,  1204,  1205,  1206,  1207,  1208,
    1209,  1210,  1211,  1212,  1213,  1214,  1215,  1216,  1217,  1218,
    1219,  1220,  1221,  1222,  1223,  1224,     0,  1225,  1226,     7,
       8,     9,    10,     0,    11,    12,    13,   491,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   232,   233,   234,   235,   236,   237,   238,   239,     0,
       0,     0,     0,     0,     0,     0,    15,   336,   240,     0,
     199,     0,   200,   201,   202,    74,     0,     0,    20,   337,
       0,     0,   203,    22,     0,     0,    78,     0,     0,     0,
       0,    23,    24,   204,     0,     0,     0,    26,     0,     0,
     205,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,   206,     0,  1350,     0,
       0,     0,     0,     0,    44,     0,    45,     0,    46,     0,
       0,     0,     0,    47,     0,   207,   208,    50,     0,     0,
      51,    84,     0,     0,     0,    52,     0,     0,    53,   339,
     340,    87,   209,     0,     0,    89,     0,   210,     7,     8,
       9,    10,     0,    11,    12,    13,    14,     0,     0,     0,
      56,     0,     0,    57,    58,    59,     0,     0,    60,     0,
      61,    62,     0,     0,    63,     0,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,     0,   252,   253,
     254,     0,     0,     0,  1290,    15,     0,     0,     0,    16,
       0,    17,    18,    19,     0,     0,     0,    20,     0,   739,
     740,    21,    22,     0,     0,     0,   770,     0,     0,     0,
      23,    24,    25,     0,     0,     0,    26,     0,     0,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,   772,     0,     0,     0,
       0,     0,     0,    44,     0,    45,     0,    46,     0,   773,
     774,     0,    47,     0,    48,    49,    50,     0,     0,    51,
       0,     0,     0,     0,    52,   775,     0,    53,     0,     0,
       0,    54,     0,     0,     0,  1498,    55,     7,     8,     9,
      10,   741,    11,    12,    13,    14,     0,     0,     0,    56,
       0,     0,    57,    58,    59,   776,     0,    60,   777,    61,
      62,   778,     0,    63,     0,     0,     0,     0,   232,   233,
     234,   235,   236,   237,   238,   239,     0,   779,     0,     0,
       0,     0,     0,     0,    15,   240,     0,     0,    16,   780,
      17,    18,    19,     0,     0,     0,    20,     0,     0,     0,
      21,    22,     0,   781,     0,     0,     0,     0,     0,    23,
      24,    25,     0,     0,     0,    26,     0,     0,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,     0,     0,     0,     0,     0,
       0,     0,    44,     0,    45,     0,    46,     0,     0,     0,
       0,    47,     0,    48,    49,    50,     0,     0,    51,     0,
       0,     0,     0,    52,     0,     0,    53,     0,     0,     0,
      54,     7,     8,     9,    10,    55,    11,    12,    13,    14,
       0,   214,   215,   216,     0,     0,     0,     0,    56,     0,
       0,    57,    58,    59,     0,     0,    60,     0,    61,    62,
     432,     0,    63,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,     0,   252,   253,   254,    15,   437,
       0,  1505,    16,     0,    17,    18,    19,     0,     0,     0,
      20,     0,     0,     0,    21,    22,     0,     0,     0,     0,
       0,     0,     0,    23,    24,    25,     0,   217,   218,    26,
       0,     0,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,     0,
       0,     0,     0,     0,     0,     0,    44,     0,    45,     0,
      46,     0,     0,   219,   220,    47,   221,    48,    49,    50,
       0,   222,    51,   223,     0,     0,     0,    52,     0,     0,
      53,     0,     0,     0,    54,     7,     8,     9,    10,    55,
      11,    12,    13,    14,     0,     0,     0,   496,     0,     0,
       0,     0,    56,     0,     0,    57,    58,    59,     0,     0,
      60,     0,    61,    62,     0,     0,    63,     0,     0,     0,
     232,   233,   234,   235,   236,   237,   238,   239,     0,     0,
       0,     0,    15,   716,     0,     0,    16,   240,    17,    18,
      19,     0,     0,     0,    20,     0,     0,     0,    21,    22,
       0,     0,     0,     0,     0,     0,     0,    23,    24,    25,
       0,     0,     0,    26,     0,     0,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,     0,     0,     0,     0,     0,     0,     0,
      44,     0,    45,     0,    46,     0,     0,     0,     0,    47,
       0,    48,    49,    50,     0,     0,    51,     0,     0,     0,
       0,    52,     0,     0,    53,     0,     0,     0,    54,     7,
       8,     9,    10,    55,    11,    12,    13,    14,     0,   214,
     215,   216,     0,     0,   884,     0,    56,     0,     0,    57,
      58,    59,     0,     0,    60,     0,    61,    62,     0,     0,
      63,     0,     0,   591,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,    15,   252,   253,   254,
      16,     0,    17,    18,    19,     0,     0,     0,    20,     0,
       0,     0,    21,    22,     0,     0,     0,     0,     0,     0,
       0,    23,    24,    25,     0,   217,   218,    26,     0,     0,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,     0,     0,     0,
       0,     0,     0,     0,    44,     0,    45,     0,    46,     0,
       0,   219,   220,    47,   221,    48,    49,    50,     0,   222,
      51,   223,     0,     0,     0,    52,     0,     0,    53,     0,
       0,     0,    54,     7,     8,     9,    10,    55,    11,    12,
      13,    14,   928,   214,   215,   216,     0,     0,     0,     0,
      56,     0,     0,    57,    58,    59,     0,     0,    60,     0,
      61,    62,     0,     0,    63,     0,     0,     0,   232,   233,
     234,   235,   236,   237,   238,   239,     0,     0,     0,     0,
      15,     0,     0,     0,    16,   240,    17,    18,    19,     0,
       0,     0,    20,     0,     0,     0,    21,    22,     0,     0,
       0,     0,     0,     0,     0,    23,    24,    25,     0,   217,
     218,    26,     0,     0,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,     0,     0,     0,     0,     0,     0,     0,    44,     0,
      45,     0,    46,     0,     0,   219,   220,    47,   221,    48,
      49,    50,     0,   222,    51,   223,     0,     0,     0,    52,
       0,     0,    53,     0,     0,     0,    54,     7,     8,     9,
      10,    55,    11,    12,    13,    14,     0,     0,     0,     0,
       0,     0,     0,     0,    56,     0,     0,    57,    58,    59,
       0,     0,    60,     0,    61,    62,  1063,     0,    63,     0,
     933,     0,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,    15,   252,   253,   254,    16,     0,
      17,    18,    19,     0,     0,     0,    20,     0,     0,     0,
      21,    22,     0,     0,     0,     0,     0,     0,     0,    23,
      24,    25,     0,     0,     0,    26,     0,     0,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,     0,     0,     0,     0,     0,
       0,     0,    44,     0,    45,     0,    46,     0,     0,     0,
       0,    47,     0,    48,    49,    50,     0,     0,    51,     0,
       0,     0,     0,    52,     0,     0,    53,     0,     0,     0,
      54,     7,     8,     9,    10,    55,    11,    12,    13,    14,
    1329,     0,     0,     0,     0,     0,     0,     0,    56,     0,
       0,    57,    58,    59,     0,     0,    60,     0,    61,    62,
       0,     0,    63,     0,     0,     0,   232,   233,   234,   235,
     236,   237,   238,   239,     0,     0,     0,     0,    15,     0,
       0,     0,    16,   240,    17,    18,    19,     0,     0,     0,
      20,     0,     0,     0,    21,    22,     0,     0,     0,     0,
       0,     0,     0,    23,    24,    25,     0,     0,     0,    26,
       0,     0,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,     0,
       0,     0,     0,     0,     0,     0,    44,     0,    45,     0,
      46,     0,     0,     0,     0,    47,     0,    48,    49,    50,
       0,     0,    51,     0,     0,     0,     0,    52,     0,     0,
      53,     0,     0,     0,    54,     7,     8,     9,    10,    55,
      11,    12,    13,    14,     0,     0,     0,     0,     0,     0,
       0,     0,    56,     0,     0,    57,    58,    59,     0,     0,
      60,     0,    61,    62,  1471,     0,    63,  1265,     0,     0,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,    15,   252,   253,   254,    16,     0,    17,    18,
      19,     0,     0,     0,    20,     0,     0,     0,    21,    22,
       0,     0,     0,     0,     0,     0,     0,    23,    24,    25,
       0,     0,     0,    26,     0,     0,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,     0,     0,     0,     0,     0,     0,     0,
      44,     0,    45,     0,    46,     0,     0,     0,     0,    47,
       0,    48,    49,    50,     0,     0,    51,     0,     0,     0,
       0,    52,     0,     0,    53,     0,     0,     0,    54,   649,
     650,   651,    10,    55,    11,   652,   653,    67,    68,     0,
       0,  1040,     0,     0,     0,     0,    56,     0,     0,    57,
      58,    59,     0,     0,    60,     0,    61,    62,     0,     0,
      63,   232,   233,   234,   235,   236,   237,   238,   239,     0,
       0,     0,     0,   459,     0,     0,   655,    69,   240,     0,
      70,     0,    71,    72,    73,    74,   460,     0,   656,    76,
       0,     0,    77,   657,     0,     0,    78,     0,     0,     0,
       0,   658,   659,    79,     0,     0,     0,     0,     0,     0,
      80,     0,     0,     0,     0,     0,     0,     0,     0,   214,
     215,   216,     0,     0,     0,     0,    81,     0,     0,     0,
       0,     0,     0,     0,   660,     0,   661,     0,   662,     0,
       0,     0,   461,   663,     0,    82,    83,   664,     0,     0,
     665,    84,     0,     0,     0,   666,     0,     0,   667,    85,
      86,    87,    88,     0,     0,    89,     0,    90,     7,     8,
       9,    10,     0,    11,    12,    13,     0,     0,     0,     0,
     668,     0,     0,   669,   670,   217,   218,     0,   671,     0,
     672,     0,   692,     0,   673,     0,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,     0,   252,   253,
     254,   693,     0,     0,     0,  1300,     0,     0,     0,     0,
       0,   219,  1266,  1267,  1268,     0,     0,  1301,     0,   222,
       0,   223,  1302,   233,   234,   235,   236,   237,   238,   239,
      23,    24,  1269,     0,     0,     0,    26,  1270,     0,   240,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,     0,   232,   233,   234,   235,
     236,   237,   238,   239,     0,    45,     0,    46,     0,     0,
       0,     0,  1303,   240,     0,     0,  1304,     0,     0,  1305,
       0,     0,     0,     0,    52,     0,     0,     0,     0,     0,
       0,    70,     0,    71,    72,    73,     0,     0,     0,     0,
       0,     0,     0,   262,     0,     0,     0,     0,     0,  1306,
       0,     0,  1307,  1308,  1309,   937,     0,  1310,     0,  1311,
      62,    80,     0,  1312,     0,   938,   939,   940,   941,   942,
     943,   944,   945,     0,     0,     0,     0,   263,     0,     0,
       0,     0,   946,     0,   947,   948,   949,   950,   951,   952,
     953,   954,   955,   956,   957,   958,    82,    83,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,     0,   252,
     253,   254,     0,    88,   959,     0,     0,     0,    90,     0,
       0,   214,   215,   216,     0,     0,   334,   335,     0,     0,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,     0,   252,   253,   254,   579,  1386,  1387,  1388,
    1389,  1390,  1391,  1392,  1393,     0,     0,   960,     0,     0,
       0,     0,     0,     0,  1394,     0,     0,   336,     0,     0,
      70,     0,    71,    72,    73,    74,     0,     0,     0,   337,
       0,     0,    77,     0,     0,     0,    78,   217,   218,     0,
       0,     0,     0,    79,     0,     0,   961,     0,     0,   962,
      80,   963,   964,   965,   966,   967,   968,   969,   970,   971,
     972,   973,     0,   974,   975,     0,    81,   976,     0,   334,
     335,     0,     0,   219,   220,     0,   221,   338,     0,     0,
       0,   222,     0,   223,     0,    82,    83,     0,     0,     0,
       0,    84,     0,     0,  1269,     0,     0,     0,     0,   339,
     340,    87,    88,     0,     0,    89,     0,    90,     0,     0,
     336,     0,   341,    70,     0,    71,    72,    73,    74,     0,
       0,     0,   337,     0,     0,    77,     0,     0,   342,    78,
       0,     0,  1395,  1396,  1397,  1398,    79,     0,  1399,  1400,
    1401,  1402,  1403,    80,  1404,  1405,  1406,     0,     0,     0,
       0,     0,     0,     0,     0,   506,   507,     0,     0,    81,
       0,    70,     0,    71,    72,    73,     0,     0,     0,     0,
     338,     0,     0,   262,     0,     0,     0,     0,    82,    83,
       0,     0,     0,     0,    84,     0,     0,     0,     0,     0,
       0,    80,   339,   340,    87,    88,   336,     0,    89,    70,
      90,    71,    72,    73,    74,     0,     0,   263,   337,     0,
       0,    77,   474,     0,     0,    78,     0,     0,     0,     0,
       0,   342,    79,     0,     0,     0,    82,    83,     0,    80,
     232,   233,   234,   235,   236,   237,   238,   239,     0,     0,
       0,     0,     0,    88,     0,    81,     0,   240,    90,     0,
       0,     0,     0,     0,     0,    70,   338,    71,    72,    73,
       0,     0,     0,     0,    82,    83,     0,     0,     0,     0,
      84,   174,     0,    70,     0,    71,    72,    73,   339,   340,
      87,    88,     0,     0,    89,    80,    90,   232,   233,   234,
     235,   236,   237,   238,   239,     0,     0,     0,     0,     0,
       0,   263,     0,    80,   240,     0,     0,   342,   232,   233,
     234,   235,   236,   237,   238,   239,     0,     0,     0,   263,
      82,    83,     0,     0,     0,   240,   232,   233,   234,   235,
     236,   237,   238,   239,     0,     0,     0,    88,    82,    83,
       0,     0,    90,   240,   232,   233,   234,   235,   236,   237,
     238,   239,     0,     0,     0,    88,     0,     0,     0,     0,
      90,   240,     0,     0,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,     0,   252,   253,   254,
     595,   232,   233,   234,   235,   236,   237,   238,   239,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   240,   232,
     233,   234,   235,   236,   237,   238,   239,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   240,     0,     0,     0,
       0,     0,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,     0,   252,   253,   254,   683,     0,     0,
       0,     0,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,     0,   252,   253,   254,   762,     0,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,     0,   252,   253,   254,   903,     0,     0,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
       0,   252,   253,   254,  1021,   232,   233,   234,   235,   236,
     237,   238,   239,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   240,     0,     0,     0,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,     0,   252,   253,
     254,  1286,  1288,     0,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,     0,   252,   253,   254,   847,
     848,   849,   850,   851,   852,   853,   854,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   855,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    -2,     0,
       0,     0,     0,     0,     0,     0,     0,  1387,  1388,  1389,
    1390,  1391,  1392,  1393,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1394,     0,     0,     0,     0,     0,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,     0,   252,   253,   254,   105,     0,   106,     0,     0,
     107,   108,     0,     0,     0,     0,     0,     0,   109,   110,
       0,     0,     0,     0,     0,     0,     0,   111,     0,   112,
     113,   114,   115,     0,     0,     0,   116,     0,     0,     0,
       0,   117,     0,     0,   856,   857,   858,   859,   860,   861,
     862,   863,   864,   865,   866,     0,   867,   868,   869,     0,
     118,   119,   120,   121,   122,   123,     0,     0,     0,     0,
       0,   124,   125,   126,   127,     0,     0,     0,     0,     0,
     128,   129,    67,    68,   130,   131,   457,     0,   458,   132,
       0,     0,     0,     0,     0,   133,   134,     0,   135,     0,
       0,     0,  1396,  1397,  1398,     0,   136,  1399,  1400,  1401,
    1402,  1403,     0,  1404,  1405,  1406,     0,     0,   459,     0,
       0,     0,    69,     0,     0,    70,     0,    71,    72,    73,
      74,   460,     0,     0,    76,     0,     0,    77,     0,     0,
       0,    78,   234,   235,   236,   237,   238,   239,    79,     0,
       0,     0,     0,     0,     0,    80,     0,   240,  1388,  1389,
    1390,  1391,  1392,  1393,     0,     0,     0,     0,     0,     0,
       0,    81,     0,  1394,  1388,  1389,  1390,  1391,  1392,  1393,
       0,    70,     0,    71,    72,    73,     0,   461,     0,  1394,
      82,    83,     0,     0,     0,     0,    84,     0,  1388,  1389,
    1390,  1391,  1392,  1393,    85,    86,    87,    88,     0,     0,
      89,    80,    90,  1394,  1388,  1389,  1390,  1391,  1392,  1393,
       0,     0,     0,     0,     0,   462,     0,   263,     0,  1394,
     463,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    82,    83,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    88,     0,     0,     0,     0,    90,   478,
     479,   480,     0,     0,     0,     0,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,     0,   252,   253,   254,
       0,   185,  1396,  1397,  1398,     0,     0,  1399,  1400,  1401,
    1402,  1403,     0,  1404,  1405,  1406,   481,     0,   482,  1397,
    1398,     0,     0,  1399,  1400,  1401,  1402,  1403,     0,  1404,
    1405,  1406,   302,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1398,   217,   218,  1399,  1400,  1401,
    1402,  1403,     0,  1404,  1405,  1406,     0,     0,     0,   302,
       0,     0,     0,  1399,  1400,  1401,  1402,  1403,     0,  1404,
    1405,  1406,     0,   105,     0,   106,     0,     0,     0,   108,
       0,   483,   220,     0,   221,     0,   109,   110,     0,   222,
       0,   223,     0,     0,     0,     0,     0,   112,   113,   114,
     105,     0,   106,     0,     0,     0,   108,     0,     0,   297,
     214,   215,   216,   109,   110,   484,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   296,   114,     0,     0,     0,
       0,     0,   122,     0,     0,     0,   297,     0,     0,     0,
       0,     0,   127,     0,     0,     0,     0,   481,   128,   482,
       0,     0,   130,   131,   394,    67,    68,     0,     0,   122,
       0,     0,     0,     0,   134,     0,   135,     0,     0,   127,
       0,     0,     0,     0,     0,   128,   217,   218,     0,     0,
     131,     0,     0,  1033,    67,    68,     0,     0,     0,     0,
       0,   134,     0,   135,     0,    69,     0,     0,    70,     0,
      71,    72,    73,    74,    75,     0,     0,    76,     0,     0,
      77,     0,   219,   220,    78,   221,     0,     0,     0,     0,
     222,    79,   223,     0,    69,     0,     0,    70,    80,    71,
      72,    73,    74,    75,     0,     0,    76,     0,     0,    77,
       0,     0,     0,    78,    81,     0,     0,     0,     0,     0,
      79,    70,     0,    71,    72,    73,     0,    80,     0,     0,
       0,     0,     0,    82,    83,     0,     0,     0,     0,    84,
       0,     0,     0,    81,  1447,    67,    68,    85,    86,    87,
      88,    80,     0,    89,     0,    90,     0,     0,     0,     0,
       0,     0,    82,    83,     0,     0,     0,   263,    84,     0,
       0,     0,     0,   694,   695,   696,    85,    86,    87,    88,
       0,     0,    89,     0,    90,    69,    82,    83,    70,     0,
      71,    72,    73,    74,    75,     0,     0,    76,     0,     0,
      77,     0,     0,    88,    78,     0,     0,     0,    90,     0,
       0,    79,     0,     0,     0,     0,     0,    70,    80,    71,
      72,    73,   697,   698,     0,     0,     0,     0,     0,    77,
       0,   186,     0,     0,    81,     0,     0,     0,     0,     0,
      79,   694,   695,   696,     0,     0,     0,    80,     0,     0,
       0,     0,     0,    82,    83,     0,     0,     0,     0,    84,
       0,     0,     0,    81,     0,     0,     0,    85,    86,    87,
      88,     0,     0,    89,     0,    90,     0,     0,     0,     0,
      67,    68,    82,    83,   457,    70,     0,    71,    72,    73,
       0,     0,     0,     0,     0,     0,   699,    77,     0,    88,
       0,     0,    89,     0,    90,     0,     0,     0,    79,    67,
      68,     0,     0,   796,     0,    80,   459,     0,     0,     0,
      69,     0,     0,    70,     0,    71,    72,    73,    74,   460,
       0,    81,    76,     0,     0,    77,     0,     0,     0,    78,
       0,     0,     0,     0,     0,   459,    79,     0,     0,    69,
      82,    83,    70,    80,    71,    72,    73,    74,   460,     0,
       0,    76,     0,     0,    77,     0,     0,    88,    78,    81,
      89,     0,    90,     0,     0,    79,    70,     0,    71,    72,
      73,     0,    80,     0,     0,   461,     0,     0,    82,    83,
       0,     0,     0,     0,    84,     0,     0,     0,    81,     0,
      67,    68,    85,    86,    87,    88,    80,     0,    89,     0,
      90,     0,     0,     0,   461,     0,     0,    82,    83,     0,
       0,     0,   263,    84,   214,   215,   216,     0,     0,    67,
      68,    85,    86,    87,    88,     0,   459,    89,     0,    90,
      69,    82,    83,    70,     0,    71,    72,    73,    74,   460,
       0,     0,    76,     0,     0,    77,     0,     0,    88,    78,
       0,     0,     0,    90,     0,     0,    79,     0,     0,    69,
       0,     0,    70,    80,    71,    72,    73,    74,    75,     0,
       0,    76,     0,     0,    77,     0,   191,     0,    78,    81,
     217,   218,     0,     0,     0,    79,     0,     0,   214,   215,
     216,     0,    80,     0,     0,   461,     0,     0,    82,    83,
       0,     0,     0,     0,    84,    67,    68,     0,    81,     0,
       0,   330,    85,    86,    87,    88,   219,   220,    89,   221,
      90,     0,     0,     0,   222,     0,   223,    82,    83,    67,
      68,     0,     0,    84,     0,     0,     0,     0,     0,     0,
       0,    85,    86,    87,    88,    69,     0,    89,    70,    90,
      71,    72,    73,    74,   217,   218,     0,    76,     0,     0,
      77,     0,     0,     0,    78,     0,     0,     0,     0,    69,
       0,    79,    70,     0,    71,    72,    73,    74,    80,     0,
       0,    76,     0,     0,    77,     0,     0,     0,    78,     0,
     219,   220,     0,   221,    81,    79,     0,     0,   222,     0,
     223,     0,    80,     0,     0,     0,     0,     0,     0,     0,
     608,  1269,     0,    82,    83,    67,  1344,     0,    81,    84,
       0,     0,     0,     0,     0,     0,     0,    85,    86,    87,
      88,     0,     0,    89,     0,    90,     0,    82,    83,     0,
       0,     0,     0,    84,   175,     0,     0,     0,     0,     0,
       0,    85,    86,    87,    88,    69,     0,    89,    70,    90,
      71,    72,    73,    74,   517,     0,     0,    76,     0,     0,
      77,     0,     0,     0,    78,     0,     0,     0,     0,     0,
       0,    79,     0,     0,   176,     0,     0,    70,    80,    71,
      72,    73,    74,   998,     0,     0,   177,     0,     0,    77,
       0,     0,     0,    78,    81,     0,     0,     0,     0,     0,
      79,     0,     0,   214,   215,   216,     0,    80,     0,     0,
       0,     0,     0,    82,    83,     0,     0,     0,     0,    84,
     175,     0,     0,    81,     0,     0,     0,    85,    86,    87,
      88,     0,     0,    89,     0,    90,     0,     0,     0,     0,
       0,     0,    82,    83,    67,     0,     0,     0,    84,     0,
       0,     0,   214,   215,   216,     0,   178,   179,    87,    88,
     176,     0,    89,    70,    90,    71,    72,    73,    74,   217,
     218,     0,   177,     0,     0,    77,     0,     0,     0,    78,
       0,     0,     0,     0,    69,     0,    79,    70,     0,    71,
      72,    73,    74,    80,     0,     0,    76,     0,     0,    77,
       0,     0,     0,    78,     0,   219,   220,     0,   221,    81,
      79,     0,     0,   222,     0,   223,     0,    80,   217,   218,
       0,     0,     0,     0,     0,     0,  1269,     0,    82,    83,
       0,  1346,     0,    81,    84,     0,     0,     0,     0,     0,
       0,     0,   178,   179,    87,    88,     0,     0,    89,     0,
      90,     0,    82,    83,   219,   220,     0,   221,    84,     0,
       0,     0,   222,     0,   223,     0,    85,    86,    87,    88,
       0,   105,    89,   106,    90,  1269,   107,   108,     0,     0,
    1348,     0,     0,     0,   109,   110,     0,     0,     0,     0,
       0,     0,     0,   111,     0,   112,   113,   114,   115,     0,
       0,     0,   116,     0,     0,     0,     0,   117,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,     0,     0,     0,     0,     0,   124,   125,   126,
     127,     0,     0,   105,     0,   106,   128,   129,   107,   108,
     130,   131,     0,     0,     0,   132,   109,   110,     0,     0,
       0,   133,   134,     0,   135,   111,     0,   112,   113,   114,
     115,     0,   136,     0,   116,     0,     0,     0,     0,   117,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   690,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,     0,     0,     0,     0,     0,   124,
     125,   126,   127,     0,     0,   105,     0,   106,   128,   129,
     107,   108,   130,   131,     0,     0,     0,   132,   109,   110,
       0,     0,     0,   133,   134,     0,   135,   111,     0,   112,
     113,   114,   115,     0,   136,     0,   116,     0,     0,     0,
       0,   117,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   872,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,     0,     0,     0,     0,
       0,   124,   125,   126,   127,     0,     0,   105,     0,   106,
     128,   129,   107,   108,   130,   131,     0,     0,     0,   132,
     109,   110,     0,     0,     0,   133,   134,     0,   135,   111,
       0,   112,   113,   114,   115,     0,   136,     0,   116,     0,
       0,     0,     0,   117,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   914,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,     0,     0,
       0,     0,     0,   124,   125,   126,   127,     0,     0,   105,
       0,   106,   128,   129,   107,   108,   130,   131,     0,     0,
       0,   132,   109,   110,     0,     0,     0,   133,   134,     0,
     135,   111,     0,   112,   113,   114,   115,     0,   136,     0,
     116,     0,     0,     0,     0,   117,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1022,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
       0,     0,     0,     0,     0,   124,   125,   126,   127,     0,
       0,   105,     0,   106,   128,   129,   107,   108,   130,   131,
       0,     0,     0,   132,   109,   110,     0,     0,     0,   133,
     134,     0,   135,   111,     0,   112,   113,   114,   115,     0,
     136,     0,   116,     0,     0,     0,     0,   117,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1072,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,     0,     0,     0,     0,     0,   124,   125,   126,
     127,     0,     0,   105,     0,   106,   128,   129,   107,   108,
     130,   131,     0,     0,     0,   132,   109,   110,     0,     0,
       0,   133,   134,     0,   135,   111,     0,   112,   113,   114,
     115,     0,   136,     0,   116,     0,     0,     0,     0,   117,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1291,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,     0,     0,     0,     0,     0,   124,
     125,   126,   127,     0,     0,   105,     0,   106,   128,   129,
       0,   108,   130,   131,   105,     0,   106,   132,   109,   110,
     108,     0,     0,   133,   134,     0,   135,   109,   110,   112,
     296,   114,     0,     0,   136,     0,   116,     0,   112,   113,
     114,   297,     0,     0,     0,   116,     0,     0,     0,     0,
     297,     0,     0,  1430,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,     0,     0,     0,     0,     0,
       0,     0,     0,   122,   127,     0,     0,     0,     0,     0,
     128,     0,     0,   127,     0,   131,     0,     0,     0,   128,
       0,     0,     0,   130,   131,   133,   134,   105,   135,   106,
       0,     0,   107,   108,   133,   134,     0,   135,     0,     0,
     109,   110,     0,  -148,     0,     0,     0,     0,     0,   111,
       0,   112,   113,   114,   115,   105,     0,   106,   116,     0,
       0,   108,     0,   117,   105,     0,   106,     0,   109,   110,
     108,     0,     0,     0,     0,     0,     0,   109,   110,   112,
     296,   114,   118,   119,   120,   121,   122,   123,   112,   296,
     114,   297,     0,   124,   125,   126,   127,     0,     0,     0,
     297,     0,   128,   129,     0,     0,   130,   131,     0,     0,
       0,   132,     0,     0,   122,   308,     0,   133,   134,     0,
     135,     0,     0,   122,   127,     0,     0,     0,     0,     0,
     128,     0,     0,   127,     0,   131,     0,     0,     0,   128,
       0,     0,     0,     0,   131,     0,   134,     0,   135,     0,
       0,     0,     0,     0,     0,   134,     0,   135
};

static const yytype_int16 yycheck[] =
{
       1,    61,   113,   130,   130,    92,   477,   928,   295,   490,
     140,   587,   140,   660,   528,    44,   508,    15,   709,   140,
     182,   146,    15,     6,   752,     8,    44,   461,   586,    15,
      98,   315,   614,   146,    13,   459,    59,     0,   605,   164,
      15,   328,   164,   147,   147,   149,   150,   151,   152,   147,
     154,   164,   156,    15,   158,    15,   490,   481,    10,    11,
      12,    62,    44,   166,    76,   489,   624,   795,    76,   164,
     174,   169,    13,   714,    15,   164,    17,   635,   147,   164,
     150,   185,   186,     6,    33,     8,    76,   191,   192,   147,
      91,    92,   150,   164,    33,   165,   155,   166,    99,    75,
      33,   147,   125,   744,   745,   155,   747,   748,   749,   750,
     718,   140,   720,   721,   722,   723,   724,   150,   155,    60,
     166,   147,   140,   164,   771,   146,   164,   148,   149,   150,
      64,    65,   165,   147,   146,   155,   712,   149,   146,   715,
     166,   149,    10,    11,    12,   146,   147,    76,   149,   150,
     151,   152,   166,   154,   147,   156,   146,   158,   140,   149,
     112,    75,    81,    82,    83,   295,   146,   295,   166,    88,
     257,   258,   147,   174,   295,    13,   164,    15,   164,    17,
     159,   182,   616,   166,   185,   186,   273,   274,   149,   351,
     191,   192,   164,   253,   324,   753,   324,   149,   328,   140,
     328,   149,   164,   324,   164,   147,   164,   328,    76,    77,
     149,   692,   496,   154,   163,   164,   165,   146,   159,   164,
     149,   289,    60,   164,   166,   164,   165,   228,   165,   166,
     163,   164,   165,   791,   792,   150,   147,   521,   805,   164,
     147,   147,   164,   147,   112,   113,   147,   115,   815,   149,
     165,   147,   120,   166,   122,   166,   257,   258,   899,   166,
     166,   753,   166,   165,   166,   166,   295,    10,    11,    12,
     166,   272,   273,   274,   275,   276,   277,   295,   143,   144,
     145,   282,   350,   387,   755,   165,   166,   206,   207,   208,
     209,    61,   147,   934,   164,   324,   147,   905,   166,   328,
     147,   277,   140,   108,   109,   110,   324,   112,   113,   114,
     328,   166,   117,   295,   315,   166,   154,   122,   147,   166,
     164,   159,   127,   128,   147,   130,   131,   132,   147,   134,
     135,   164,   165,    76,    77,   149,   147,   166,   896,   915,
     147,   150,   324,   166,   263,   912,   328,   166,   772,   164,
     351,   998,   147,   165,   788,   166,   643,   147,   164,   166,
     644,   147,   338,   277,   148,   846,   150,   164,   287,   112,
     113,   166,   115,   164,   165,   166,   166,   120,   148,   122,
     166,   164,     6,   153,     8,   155,   387,   157,   164,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   896,   919,   407,   691,  1329,    13,
     147,    15,   846,    17,   184,   997,   164,   984,   188,   189,
     190,   159,   165,    10,    11,    12,    13,   149,  1004,   166,
      17,   164,   165,   166,  1010,  1011,   146,   147,    33,   440,
     164,   165,   166,   444,   445,   446,   447,   448,  1006,  1007,
     518,   164,    10,    11,    12,    13,    60,   458,   164,    17,
     164,   462,   463,   165,   166,   533,   467,   164,   536,   470,
     146,   164,   148,    60,   150,   164,   505,   164,    10,    11,
      12,   113,   114,   115,   460,   461,   165,   166,  1002,   490,
     164,   296,   297,   164,   165,   496,   164,   302,   268,   146,
     164,   148,    60,   150,   505,   164,   165,  1089,   164,   164,
    1092,   164,   164,   643,   490,   643,   164,   518,   164,  1095,
     521,  1249,   643,   164,   111,   112,   164,    20,    21,    22,
      23,   146,   165,   148,   164,   150,   140,   164,   164,    48,
      33,   517,   147,   164,    76,    77,   460,   461,   146,   164,
     154,   164,   155,   140,   112,   159,   164,   146,   477,   148,
     164,   150,   157,   158,   159,   160,   161,   154,   163,   164,
     165,   164,   159,   148,   147,   167,   490,   164,   166,   156,
     112,   113,   140,   115,   166,   586,   587,   588,   120,   873,
     122,    22,    23,   156,   166,   166,   154,   598,   166,   166,
     166,   159,    33,   147,   605,   137,   164,   166,   609,   166,
     166,   587,   672,   614,   643,   166,   386,   618,   619,   620,
     621,   622,   623,   624,  1315,   643,    22,    23,   166,   147,
     166,   660,   608,   166,   635,   166,   166,    33,   166,   166,
     616,   709,   660,   644,   645,   166,   714,   166,    15,   166,
     718,   166,   720,   721,   722,   723,   724,   156,   166,   166,
     166,   643,   155,   156,   157,   158,   159,   160,   161,   698,
     163,   164,   165,   587,   166,   166,   744,   745,   660,   747,
     748,   749,   750,   488,   156,  1261,   166,  1263,   166,   166,
     691,  1419,  1420,  1421,   608,    33,   164,   757,   758,   166,
     166,   165,   616,   704,   159,   765,   165,   767,   467,   166,
     149,   712,   164,   167,   715,   166,    33,   718,     2,   720,
     721,   722,   723,   724,   146,   148,   157,   158,   159,   160,
     161,   732,   163,   164,   165,   147,   712,   147,   147,   715,
     741,  1323,   771,   513,  1320,   147,   164,   164,   149,   164,
     520,   752,   753,   771,    48,   882,   882,  1339,  1340,  1341,
    1241,   157,   158,   159,   160,   161,   164,   163,   164,   165,
     164,   882,    56,    57,    58,    59,    60,   166,   166,    63,
     166,   551,   164,   553,   159,   555,   159,   146,   789,   771,
     791,   792,   169,  1521,   795,    48,    76,   798,   712,   164,
    1528,   715,   155,    33,   805,   155,   155,  1241,   868,   155,
     164,   166,   788,    10,   815,    10,    10,   921,   922,   157,
     158,   159,   160,   161,   825,   163,   164,   165,    10,  1411,
     148,   899,   156,  1409,  1416,   147,   755,   905,   148,   159,
    1422,  1423,   159,   160,   161,   166,   163,   164,   165,   148,
     609,   159,   166,   148,   883,   148,   167,   468,   167,   148,
     619,   620,   621,   622,   623,   166,   934,   159,   166,   166,
     846,   146,   873,   169,   788,   166,   164,   682,   683,   164,
     881,   272,   273,   274,   275,   276,   887,   888,   889,   890,
     891,   892,   893,   164,  1476,   896,   164,   166,  1474,  1266,
    1267,  1268,   672,  1417,   905,   165,   190,   165,   165,   149,
     164,   912,   999,   164,   915,   147,   166,   150,   147,   147,
     921,   922,   159,   166,   166,  1507,  1030,   928,   167,   159,
     160,   161,   846,   163,   164,   165,   147,    10,  1520,   915,
     165,     4,   166,   169,   147,   704,    48,   164,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   998,
     254,   169,   164,   169,   146,   259,   147,  1344,   166,  1346,
     998,  1348,   156,   984,  1351,  1352,  1353,   156,   156,   166,
    1274,   166,   156,   166,    10,   148,   997,    10,   999,   610,
      10,   915,    10,  1004,   148,  1006,  1007,   147,   164,  1010,
    1011,   295,   169,   167,   166,   166,   998,   167,   167,   630,
     631,   632,   633,   634,   169,   167,    15,   166,  1004,  1030,
     789,   166,   166,   164,  1010,  1011,   164,   166,   322,   798,
     164,    10,    11,    12,   166,    10,    11,    12,    13,   440,
      15,   164,    17,   444,   445,   446,   447,   448,   828,   829,
     830,   166,   832,   164,   834,   835,   836,   458,    10,    11,
      12,   462,   463,  1074,   155,   155,   155,   882,   155,   164,
     166,    15,  1083,   166,   146,    10,    10,   148,  1089,   148,
    1004,  1092,   166,   704,  1095,    60,  1010,  1011,   166,   166,
     384,   148,    10,   148,   164,   147,   156,    76,    77,    10,
      11,    12,    13,   166,   166,   166,    17,   401,   402,  1095,
     156,   167,   881,   166,   408,    10,    11,    12,   156,   888,
     889,   890,   891,   892,    76,    77,   166,   166,   156,   166,
      10,   167,   148,   112,   113,    10,   115,   112,   148,   164,
     164,   120,   164,   122,   148,   166,   148,   164,   920,    60,
     307,   166,   166,  1250,   166,   646,  1244,  1315,   328,   883,
     112,   113,   698,   115,  1084,   140,  1244,  1241,   120,   790,
     122,  1095,  1074,   846,  1275,   154,   470,   328,  1204,   154,
     159,    76,    77,   406,   159,    -1,   807,    -1,    -1,   164,
      -1,    -1,    -1,  1204,    -1,    -1,    -1,   598,   150,    -1,
      -1,   112,   154,    -1,    -1,    -1,    -1,   159,    -1,    16,
      17,    18,    19,    20,    21,    22,    23,   112,   113,    -1,
     115,    -1,   516,    -1,    -1,   120,    33,   122,    -1,   140,
    1241,    -1,    -1,    -1,    -1,    -1,   530,  1315,  1249,  1250,
      -1,  1311,    -1,   154,    -1,    -1,    -1,    -1,   159,    -1,
    1261,    -1,  1263,    -1,   149,  1241,    -1,    -1,    -1,    -1,
     881,    -1,    -1,  1274,    -1,    -1,    -1,   888,   889,   890,
     891,   892,    -1,    -1,    -1,  1261,    -1,  1263,    -1,    18,
      19,    20,    21,    22,    23,    -1,    -1,  1357,  1358,    -1,
    1360,    -1,  1362,    -1,    33,    -1,    -1,   591,    -1,    -1,
      -1,    -1,  1082,    -1,    -1,    -1,    -1,    -1,    -1,  1320,
      -1,   605,  1323,    -1,  1083,    -1,    -1,  1241,  1329,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1339,  1340,
    1341,    -1,    -1,    -1,  1320,  1405,    -1,  1261,    -1,  1263,
      -1,    -1,   149,    -1,   151,   152,   153,   154,    -1,   643,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,    -1,
      20,    21,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    62,    -1,    33,   668,   669,   670,   671,    -1,   673,
      -1,    -1,    -1,    -1,    -1,    -1,  1306,  1307,  1308,  1309,
    1310,    -1,  1312,    -1,    85,    -1,  1320,    -1,  1409,    -1,
    1411,    -1,    -1,    -1,    -1,  1416,    -1,    -1,  1419,  1420,
    1421,  1422,  1423,    -1,   105,   154,   155,   156,   157,   158,
     159,   160,   161,  1409,   163,   164,   165,    -1,    -1,    -1,
      -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,    -1,  1514,  1515,  1516,   741,  1518,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1083,  1474,    -1,  1476,  1386,  1387,  1388,  1389,
    1390,  1391,  1392,  1393,  1394,  1395,  1396,  1397,  1398,  1399,
    1400,  1401,  1402,  1403,  1404,  1409,    -1,   178,  1474,    -1,
     181,    -1,    -1,    -1,    -1,    -1,  1507,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,    -1,    -1,    -1,  1520,
    1521,   805,    -1,    -1,    -1,    -1,    -1,  1528,    -1,    -1,
      -1,   815,    -1,    -1,    -1,   819,    -1,    -1,    -1,    -1,
    1450,  1311,    -1,    -1,   225,   226,    -1,    -1,    -1,    -1,
      -1,    -1,   836,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1474,    -1,    -1,   847,   848,   849,   850,   851,   852,   853,
     854,   855,   856,   857,   858,   859,   860,   861,   862,   863,
     864,   865,   866,   867,    -1,   869,    -1,    -1,    -1,    -1,
     271,    -1,    -1,  1503,  1306,  1307,  1308,  1309,  1310,    -1,
    1312,  1371,  1372,  1373,  1374,    -1,  1376,  1377,   289,    17,
     291,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    19,
      20,    21,    22,    23,    -1,    33,    -1,   308,   912,   310,
     311,   312,   313,    33,    -1,    -1,    -1,    -1,    -1,    47,
      10,    11,    12,    -1,   928,    -1,    -1,    -1,    -1,   330,
      -1,    -1,    60,    61,    -1,    -1,    -1,    -1,   339,    -1,
      -1,   342,    -1,    -1,    -1,    -1,    -1,    -1,    76,   350,
      -1,    -1,    -1,    -1,  1386,  1387,  1388,  1389,  1390,  1391,
    1392,  1393,  1394,  1395,  1396,  1397,  1398,  1399,  1400,  1401,
    1402,  1403,  1404,    -1,    -1,    -1,    -1,    -1,   106,    -1,
     984,   109,   986,    -1,   112,    -1,    76,    77,   389,    -1,
      -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     128,    -1,    -1,    -1,    -1,   406,    -1,    -1,    -1,    -1,
      -1,    -1,   140,    -1,    -1,    -1,    -1,    -1,  1450,    -1,
      -1,    -1,   112,   113,    -1,   115,   154,    -1,    -1,    -1,
     120,    -1,   122,    -1,  1038,   155,   156,   157,   158,   159,
     160,   161,   443,   163,   164,   165,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   146,    -1,   459,     3,
       4,     5,     6,    -1,     8,     9,    10,    11,    12,    -1,
     471,  1503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,    -1,    50,    51,    -1,    -1,
      54,    33,    56,    57,    58,    59,    60,    -1,    62,    63,
      -1,    -1,    66,    67,   525,    -1,    70,    -1,    -1,    -1,
      -1,    75,    76,    77,    -1,   536,    -1,    81,    -1,    -1,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   108,    -1,   110,    -1,   112,    -1,
      -1,    -1,    -1,   117,    -1,   119,   120,   121,    -1,    -1,
     124,   125,    -1,    -1,   585,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,    -1,   141,    -1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    10,    11,    12,
     154,    -1,    15,   157,   158,   159,    -1,    -1,   162,    -1,
     164,   165,    -1,    -1,   168,    -1,    -1,   628,    -1,    -1,
    1234,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,    47,   646,    -1,    50,    51,    -1,
      -1,    54,    -1,    56,    57,    58,    59,    60,    -1,    62,
      63,    -1,    -1,    66,    67,    -1,    -1,    70,    -1,    -1,
      -1,    -1,    75,    76,    77,    -1,    -1,    -1,    -1,    -1,
      -1,    84,    -1,    -1,  1288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   702,    -1,    -1,    -1,   108,    -1,   110,    -1,   112,
      -1,    -1,    -1,   116,   117,    -1,   119,   120,   121,    -1,
      -1,   124,   125,    -1,    -1,  1329,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,    -1,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   154,    -1,    -1,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,
      -1,   772,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    -1,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,  1406,    -1,    -1,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    -1,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
     106,   107,   108,   884,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,    -1,    -1,   920,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,    16,
      17,    18,    19,    20,    21,    22,    23,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1001,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    -1,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    -1,    -1,    -1,    -1,
      -1,  1032,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    -1,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   100,
      -1,    -1,   169,    -1,    -1,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,    -1,    -1,    -1,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,    -1,   168,   169,     3,
       4,     5,     6,    -1,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    16,    17,    18,    19,    20,    21,    22,    23,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    33,    -1,
      54,    -1,    56,    57,    58,    59,    -1,    -1,    62,    63,
      -1,    -1,    66,    67,    -1,    -1,    70,    -1,    -1,    -1,
      -1,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,    -1,  1269,    -1,
      -1,    -1,    -1,    -1,   108,    -1,   110,    -1,   112,    -1,
      -1,    -1,    -1,   117,    -1,   119,   120,   121,    -1,    -1,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,    -1,   141,     3,     4,
       5,     6,    -1,     8,     9,    10,    11,    -1,    -1,    -1,
     154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,    -1,
     164,   165,    -1,    -1,   168,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,    -1,    -1,    -1,   169,    50,    -1,    -1,    -1,    54,
      -1,    56,    57,    58,    -1,    -1,    -1,    62,    -1,    64,
      65,    66,    67,    -1,    -1,    -1,    17,    -1,    -1,    -1,
      75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,    47,    -1,    -1,    -1,
      -1,    -1,    -1,   108,    -1,   110,    -1,   112,    -1,    60,
      61,    -1,   117,    -1,   119,   120,   121,    -1,    -1,   124,
      -1,    -1,    -1,    -1,   129,    76,    -1,   132,    -1,    -1,
      -1,   136,    -1,    -1,    -1,  1446,   141,     3,     4,     5,
       6,   146,     8,     9,    10,    11,    -1,    -1,    -1,   154,
      -1,    -1,   157,   158,   159,   106,    -1,   162,   109,   164,
     165,   112,    -1,   168,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    22,    23,    -1,   128,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    33,    -1,    -1,    54,   140,
      56,    57,    58,    -1,    -1,    -1,    62,    -1,    -1,    -1,
      66,    67,    -1,   154,    -1,    -1,    -1,    -1,    -1,    75,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   108,    -1,   110,    -1,   112,    -1,    -1,    -1,
      -1,   117,    -1,   119,   120,   121,    -1,    -1,   124,    -1,
      -1,    -1,    -1,   129,    -1,    -1,   132,    -1,    -1,    -1,
     136,     3,     4,     5,     6,   141,     8,     9,    10,    11,
      -1,    10,    11,    12,    -1,    -1,    -1,    -1,   154,    -1,
      -1,   157,   158,   159,    -1,    -1,   162,    -1,   164,   165,
     166,    -1,   168,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,    50,    51,
      -1,   169,    54,    -1,    56,    57,    58,    -1,    -1,    -1,
      62,    -1,    -1,    -1,    66,    67,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    77,    -1,    76,    77,    81,
      -1,    -1,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,   110,    -1,
     112,    -1,    -1,   112,   113,   117,   115,   119,   120,   121,
      -1,   120,   124,   122,    -1,    -1,    -1,   129,    -1,    -1,
     132,    -1,    -1,    -1,   136,     3,     4,     5,     6,   141,
       8,     9,    10,    11,    -1,    -1,    -1,   146,    -1,    -1,
      -1,    -1,   154,    -1,    -1,   157,   158,   159,    -1,    -1,
     162,    -1,   164,   165,    -1,    -1,   168,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    22,    23,    -1,    -1,
      -1,    -1,    50,    51,    -1,    -1,    54,    33,    56,    57,
      58,    -1,    -1,    -1,    62,    -1,    -1,    -1,    66,    67,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,   110,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,   119,   120,   121,    -1,    -1,   124,    -1,    -1,    -1,
      -1,   129,    -1,    -1,   132,    -1,    -1,    -1,   136,     3,
       4,     5,     6,   141,     8,     9,    10,    11,    -1,    10,
      11,    12,    -1,    -1,    15,    -1,   154,    -1,    -1,   157,
     158,   159,    -1,    -1,   162,    -1,   164,   165,    -1,    -1,
     168,    -1,    -1,   149,    -1,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    50,   163,   164,   165,
      54,    -1,    56,    57,    58,    -1,    -1,    -1,    62,    -1,
      -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    77,    -1,    76,    77,    81,    -1,    -1,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   108,    -1,   110,    -1,   112,    -1,
      -1,   112,   113,   117,   115,   119,   120,   121,    -1,   120,
     124,   122,    -1,    -1,    -1,   129,    -1,    -1,   132,    -1,
      -1,    -1,   136,     3,     4,     5,     6,   141,     8,     9,
      10,    11,   146,    10,    11,    12,    -1,    -1,    -1,    -1,
     154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,    -1,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    22,    23,    -1,    -1,    -1,    -1,
      50,    -1,    -1,    -1,    54,    33,    56,    57,    58,    -1,
      -1,    -1,    62,    -1,    -1,    -1,    66,    67,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    77,    -1,    76,
      77,    81,    -1,    -1,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,
     110,    -1,   112,    -1,    -1,   112,   113,   117,   115,   119,
     120,   121,    -1,   120,   124,   122,    -1,    -1,    -1,   129,
      -1,    -1,   132,    -1,    -1,    -1,   136,     3,     4,     5,
       6,   141,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   154,    -1,    -1,   157,   158,   159,
      -1,    -1,   162,    -1,   164,   165,   166,    -1,   168,    -1,
     148,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    50,   163,   164,   165,    54,    -1,
      56,    57,    58,    -1,    -1,    -1,    62,    -1,    -1,    -1,
      66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   108,    -1,   110,    -1,   112,    -1,    -1,    -1,
      -1,   117,    -1,   119,   120,   121,    -1,    -1,   124,    -1,
      -1,    -1,    -1,   129,    -1,    -1,   132,    -1,    -1,    -1,
     136,     3,     4,     5,     6,   141,     8,     9,    10,    11,
     146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,    -1,
      -1,   157,   158,   159,    -1,    -1,   162,    -1,   164,   165,
      -1,    -1,   168,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    22,    23,    -1,    -1,    -1,    -1,    50,    -1,
      -1,    -1,    54,    33,    56,    57,    58,    -1,    -1,    -1,
      62,    -1,    -1,    -1,    66,    67,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,   110,    -1,
     112,    -1,    -1,    -1,    -1,   117,    -1,   119,   120,   121,
      -1,    -1,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,
     132,    -1,    -1,    -1,   136,     3,     4,     5,     6,   141,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   154,    -1,    -1,   157,   158,   159,    -1,    -1,
     162,    -1,   164,   165,   166,    -1,   168,   147,    -1,    -1,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    50,   163,   164,   165,    54,    -1,    56,    57,
      58,    -1,    -1,    -1,    62,    -1,    -1,    -1,    66,    67,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,   110,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,   119,   120,   121,    -1,    -1,   124,    -1,    -1,    -1,
      -1,   129,    -1,    -1,   132,    -1,    -1,    -1,   136,     3,
       4,     5,     6,   141,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    -1,   154,    -1,    -1,   157,
     158,   159,    -1,    -1,   162,    -1,   164,   165,    -1,    -1,
     168,    16,    17,    18,    19,    20,    21,    22,    23,    -1,
      -1,    -1,    -1,    47,    -1,    -1,    50,    51,    33,    -1,
      54,    -1,    56,    57,    58,    59,    60,    -1,    62,    63,
      -1,    -1,    66,    67,    -1,    -1,    70,    -1,    -1,    -1,
      -1,    75,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
      11,    12,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   108,    -1,   110,    -1,   112,    -1,
      -1,    -1,   116,   117,    -1,   119,   120,   121,    -1,    -1,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,    -1,   141,     3,     4,
       5,     6,    -1,     8,     9,    10,    -1,    -1,    -1,    -1,
     154,    -1,    -1,   157,   158,    76,    77,    -1,   162,    -1,
     164,    -1,   147,    -1,   168,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,    -1,    -1,    62,    -1,   120,
      -1,   122,    67,    17,    18,    19,    20,    21,    22,    23,
      75,    76,   133,    -1,    -1,    -1,    81,   138,    -1,    33,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,    -1,    16,    17,    18,    19,
      20,    21,    22,    23,    -1,   110,    -1,   112,    -1,    -1,
      -1,    -1,   117,    33,    -1,    -1,   121,    -1,    -1,   124,
      -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,
      -1,    54,    -1,    56,    57,    58,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,   154,
      -1,    -1,   157,   158,   159,     6,    -1,   162,    -1,   164,
     165,    84,    -1,   168,    -1,    16,    17,    18,    19,    20,
      21,    22,    23,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    33,    -1,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,   119,   120,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,    -1,   136,    65,    -1,    -1,    -1,   141,    -1,
      -1,    10,    11,    12,    -1,    -1,    10,    11,    -1,    -1,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    16,    17,    18,
      19,    20,    21,    22,    23,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,    -1,    33,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    58,    59,    -1,    -1,    -1,    63,
      -1,    -1,    66,    -1,    -1,    -1,    70,    76,    77,    -1,
      -1,    -1,    -1,    77,    -1,    -1,   147,    -1,    -1,   150,
      84,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,    -1,   164,   165,    -1,   100,   168,    -1,    10,
      11,    -1,    -1,   112,   113,    -1,   115,   111,    -1,    -1,
      -1,   120,    -1,   122,    -1,   119,   120,    -1,    -1,    -1,
      -1,   125,    -1,    -1,   133,    -1,    -1,    -1,    -1,   133,
     134,   135,   136,    -1,    -1,   139,    -1,   141,    -1,    -1,
      51,    -1,   146,    54,    -1,    56,    57,    58,    59,    -1,
      -1,    -1,    63,    -1,    -1,    66,    -1,    -1,   162,    70,
      -1,    -1,   151,   152,   153,   154,    77,    -1,   157,   158,
     159,   160,   161,    84,   163,   164,   165,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    10,    11,    -1,    -1,   100,
      -1,    54,    -1,    56,    57,    58,    -1,    -1,    -1,    -1,
     111,    -1,    -1,    66,    -1,    -1,    -1,    -1,   119,   120,
      -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
      -1,    84,   133,   134,   135,   136,    51,    -1,   139,    54,
     141,    56,    57,    58,    59,    -1,    -1,   100,    63,    -1,
      -1,    66,    11,    -1,    -1,    70,    -1,    -1,    -1,    -1,
      -1,   162,    77,    -1,    -1,    -1,   119,   120,    -1,    84,
      16,    17,    18,    19,    20,    21,    22,    23,    -1,    -1,
      -1,    -1,    -1,   136,    -1,   100,    -1,    33,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    54,   111,    56,    57,    58,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,
     125,   164,    -1,    54,    -1,    56,    57,    58,   133,   134,
     135,   136,    -1,    -1,   139,    84,   141,    16,    17,    18,
      19,    20,    21,    22,    23,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    84,    33,    -1,    -1,   162,    16,    17,
      18,    19,    20,    21,    22,    23,    -1,    -1,    -1,   100,
     119,   120,    -1,    -1,    -1,    33,    16,    17,    18,    19,
      20,    21,    22,    23,    -1,    -1,    -1,   136,   119,   120,
      -1,    -1,   141,    33,    16,    17,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,
     141,    33,    -1,    -1,    -1,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    16,    17,    18,    19,    20,    21,    22,    23,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    16,
      17,    18,    19,    20,    21,    22,    23,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,
      -1,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,    -1,
      -1,    -1,    -1,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    16,    17,    18,    19,    20,
      21,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    33,    -1,    -1,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,   149,    -1,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,    16,
      17,    18,    19,    20,    21,    22,    23,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    17,    18,    19,
      20,    21,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,    47,    -1,    49,    -1,    -1,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    71,
      72,    73,    74,    -1,    -1,    -1,    78,    -1,    -1,    -1,
      -1,    83,    -1,    -1,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,    -1,
     102,   103,   104,   105,   106,   107,    -1,    -1,    -1,    -1,
      -1,   113,   114,   115,   116,    -1,    -1,    -1,    -1,    -1,
     122,   123,    11,    12,   126,   127,    15,    -1,    17,   131,
      -1,    -1,    -1,    -1,    -1,   137,   138,    -1,   140,    -1,
      -1,    -1,   152,   153,   154,    -1,   148,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,    -1,    -1,    47,    -1,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    58,
      59,    60,    -1,    -1,    63,    -1,    -1,    66,    -1,    -1,
      -1,    70,    18,    19,    20,    21,    22,    23,    77,    -1,
      -1,    -1,    -1,    -1,    -1,    84,    -1,    33,    18,    19,
      20,    21,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    33,    18,    19,    20,    21,    22,    23,
      -1,    54,    -1,    56,    57,    58,    -1,   116,    -1,    33,
     119,   120,    -1,    -1,    -1,    -1,   125,    -1,    18,    19,
      20,    21,    22,    23,   133,   134,   135,   136,    -1,    -1,
     139,    84,   141,    33,    18,    19,    20,    21,    22,    23,
      -1,    -1,    -1,    -1,    -1,   154,    -1,   100,    -1,    33,
     159,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,   141,    10,
      11,    12,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
      -1,   164,   152,   153,   154,    -1,    -1,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,    47,    -1,    49,   153,
     154,    -1,    -1,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   154,    76,    77,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,    -1,    -1,    -1,     6,
      -1,    -1,    -1,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,    -1,    47,    -1,    49,    -1,    -1,    -1,    53,
      -1,   112,   113,    -1,   115,    -1,    60,    61,    -1,   120,
      -1,   122,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
      47,    -1,    49,    -1,    -1,    -1,    53,    -1,    -1,    83,
      10,    11,    12,    60,    61,   146,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,   106,    -1,    -1,    -1,    83,    -1,    -1,    -1,
      -1,    -1,   116,    -1,    -1,    -1,    -1,    47,   122,    49,
      -1,    -1,   126,   127,    10,    11,    12,    -1,    -1,   106,
      -1,    -1,    -1,    -1,   138,    -1,   140,    -1,    -1,   116,
      -1,    -1,    -1,    -1,    -1,   122,    76,    77,    -1,    -1,
     127,    -1,    -1,    10,    11,    12,    -1,    -1,    -1,    -1,
      -1,   138,    -1,   140,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    58,    59,    60,    -1,    -1,    63,    -1,    -1,
      66,    -1,   112,   113,    70,   115,    -1,    -1,    -1,    -1,
     120,    77,   122,    -1,    51,    -1,    -1,    54,    84,    56,
      57,    58,    59,    60,    -1,    -1,    63,    -1,    -1,    66,
      -1,    -1,    -1,    70,   100,    -1,    -1,    -1,    -1,    -1,
      77,    54,    -1,    56,    57,    58,    -1,    84,    -1,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
      -1,    -1,    -1,   100,    10,    11,    12,   133,   134,   135,
     136,    84,    -1,   139,    -1,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,    -1,    -1,    -1,   100,   125,    -1,
      -1,    -1,    -1,    10,    11,    12,   133,   134,   135,   136,
      -1,    -1,   139,    -1,   141,    51,   119,   120,    54,    -1,
      56,    57,    58,    59,    60,    -1,    -1,    63,    -1,    -1,
      66,    -1,    -1,   136,    70,    -1,    -1,    -1,   141,    -1,
      -1,    77,    -1,    -1,    -1,    -1,    -1,    54,    84,    56,
      57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,    66,
      -1,   164,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      77,    10,    11,    12,    -1,    -1,    -1,    84,    -1,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   133,   134,   135,
     136,    -1,    -1,   139,    -1,   141,    -1,    -1,    -1,    -1,
      11,    12,   119,   120,    15,    54,    -1,    56,    57,    58,
      -1,    -1,    -1,    -1,    -1,    -1,   133,    66,    -1,   136,
      -1,    -1,   139,    -1,   141,    -1,    -1,    -1,    77,    11,
      12,    -1,    -1,    15,    -1,    84,    47,    -1,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    58,    59,    60,
      -1,   100,    63,    -1,    -1,    66,    -1,    -1,    -1,    70,
      -1,    -1,    -1,    -1,    -1,    47,    77,    -1,    -1,    51,
     119,   120,    54,    84,    56,    57,    58,    59,    60,    -1,
      -1,    63,    -1,    -1,    66,    -1,    -1,   136,    70,   100,
     139,    -1,   141,    -1,    -1,    77,    54,    -1,    56,    57,
      58,    -1,    84,    -1,    -1,   116,    -1,    -1,   119,   120,
      -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,   100,    -1,
      11,    12,   133,   134,   135,   136,    84,    -1,   139,    -1,
     141,    -1,    -1,    -1,   116,    -1,    -1,   119,   120,    -1,
      -1,    -1,   100,   125,    10,    11,    12,    -1,    -1,    11,
      12,   133,   134,   135,   136,    -1,    47,   139,    -1,   141,
      51,   119,   120,    54,    -1,    56,    57,    58,    59,    60,
      -1,    -1,    63,    -1,    -1,    66,    -1,    -1,   136,    70,
      -1,    -1,    -1,   141,    -1,    -1,    77,    -1,    -1,    51,
      -1,    -1,    54,    84,    56,    57,    58,    59,    60,    -1,
      -1,    63,    -1,    -1,    66,    -1,   164,    -1,    70,   100,
      76,    77,    -1,    -1,    -1,    77,    -1,    -1,    10,    11,
      12,    -1,    84,    -1,    -1,   116,    -1,    -1,   119,   120,
      -1,    -1,    -1,    -1,   125,    11,    12,    -1,   100,    -1,
      -1,   107,   133,   134,   135,   136,   112,   113,   139,   115,
     141,    -1,    -1,    -1,   120,    -1,   122,   119,   120,    11,
      12,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   133,   134,   135,   136,    51,    -1,   139,    54,   141,
      56,    57,    58,    59,    76,    77,    -1,    63,    -1,    -1,
      66,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    51,
      -1,    77,    54,    -1,    56,    57,    58,    59,    84,    -1,
      -1,    63,    -1,    -1,    66,    -1,    -1,    -1,    70,    -1,
     112,   113,    -1,   115,   100,    77,    -1,    -1,   120,    -1,
     122,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     116,   133,    -1,   119,   120,    11,   138,    -1,   100,   125,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,   134,   135,
     136,    -1,    -1,   139,    -1,   141,    -1,   119,   120,    -1,
      -1,    -1,    -1,   125,    11,    -1,    -1,    -1,    -1,    -1,
      -1,   133,   134,   135,   136,    51,    -1,   139,    54,   141,
      56,    57,    58,    59,    60,    -1,    -1,    63,    -1,    -1,
      66,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    77,    -1,    -1,    51,    -1,    -1,    54,    84,    56,
      57,    58,    59,    60,    -1,    -1,    63,    -1,    -1,    66,
      -1,    -1,    -1,    70,   100,    -1,    -1,    -1,    -1,    -1,
      77,    -1,    -1,    10,    11,    12,    -1,    84,    -1,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
      11,    -1,    -1,   100,    -1,    -1,    -1,   133,   134,   135,
     136,    -1,    -1,   139,    -1,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,    11,    -1,    -1,    -1,   125,    -1,
      -1,    -1,    10,    11,    12,    -1,   133,   134,   135,   136,
      51,    -1,   139,    54,   141,    56,    57,    58,    59,    76,
      77,    -1,    63,    -1,    -1,    66,    -1,    -1,    -1,    70,
      -1,    -1,    -1,    -1,    51,    -1,    77,    54,    -1,    56,
      57,    58,    59,    84,    -1,    -1,    63,    -1,    -1,    66,
      -1,    -1,    -1,    70,    -1,   112,   113,    -1,   115,   100,
      77,    -1,    -1,   120,    -1,   122,    -1,    84,    76,    77,
      -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,   119,   120,
      -1,   138,    -1,   100,   125,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,   134,   135,   136,    -1,    -1,   139,    -1,
     141,    -1,   119,   120,   112,   113,    -1,   115,   125,    -1,
      -1,    -1,   120,    -1,   122,    -1,   133,   134,   135,   136,
      -1,    47,   139,    49,   141,   133,    52,    53,    -1,    -1,
     138,    -1,    -1,    -1,    60,    61,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    69,    -1,    71,    72,    73,    74,    -1,
      -1,    -1,    78,    -1,    -1,    -1,    -1,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,    -1,    -1,    -1,    -1,    -1,   113,   114,   115,
     116,    -1,    -1,    47,    -1,    49,   122,   123,    52,    53,
     126,   127,    -1,    -1,    -1,   131,    60,    61,    -1,    -1,
      -1,   137,   138,    -1,   140,    69,    -1,    71,    72,    73,
      74,    -1,   148,    -1,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   167,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,    -1,    -1,    -1,    -1,    -1,   113,
     114,   115,   116,    -1,    -1,    47,    -1,    49,   122,   123,
      52,    53,   126,   127,    -1,    -1,    -1,   131,    60,    61,
      -1,    -1,    -1,   137,   138,    -1,   140,    69,    -1,    71,
      72,    73,    74,    -1,   148,    -1,    78,    -1,    -1,    -1,
      -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,    -1,    -1,    -1,    -1,
      -1,   113,   114,   115,   116,    -1,    -1,    47,    -1,    49,
     122,   123,    52,    53,   126,   127,    -1,    -1,    -1,   131,
      60,    61,    -1,    -1,    -1,   137,   138,    -1,   140,    69,
      -1,    71,    72,    73,    74,    -1,   148,    -1,    78,    -1,
      -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,    -1,    -1,
      -1,    -1,    -1,   113,   114,   115,   116,    -1,    -1,    47,
      -1,    49,   122,   123,    52,    53,   126,   127,    -1,    -1,
      -1,   131,    60,    61,    -1,    -1,    -1,   137,   138,    -1,
     140,    69,    -1,    71,    72,    73,    74,    -1,   148,    -1,
      78,    -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,    -1,    -1,
      -1,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
      -1,    -1,    -1,    -1,    -1,   113,   114,   115,   116,    -1,
      -1,    47,    -1,    49,   122,   123,    52,    53,   126,   127,
      -1,    -1,    -1,   131,    60,    61,    -1,    -1,    -1,   137,
     138,    -1,   140,    69,    -1,    71,    72,    73,    74,    -1,
     148,    -1,    78,    -1,    -1,    -1,    -1,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,
      -1,    -1,    -1,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,    -1,    -1,    -1,    -1,    -1,   113,   114,   115,
     116,    -1,    -1,    47,    -1,    49,   122,   123,    52,    53,
     126,   127,    -1,    -1,    -1,   131,    60,    61,    -1,    -1,
      -1,   137,   138,    -1,   140,    69,    -1,    71,    72,    73,
      74,    -1,   148,    -1,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   167,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,    -1,    -1,    -1,    -1,    -1,   113,
     114,   115,   116,    -1,    -1,    47,    -1,    49,   122,   123,
      -1,    53,   126,   127,    47,    -1,    49,   131,    60,    61,
      53,    -1,    -1,   137,   138,    -1,   140,    60,    61,    71,
      72,    73,    -1,    -1,   148,    -1,    78,    -1,    71,    72,
      73,    83,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,
      83,    -1,    -1,   167,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   106,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   116,    -1,    -1,    -1,    -1,    -1,
     122,    -1,    -1,   116,    -1,   127,    -1,    -1,    -1,   122,
      -1,    -1,    -1,   126,   127,   137,   138,    47,   140,    49,
      -1,    -1,    52,    53,   137,   138,    -1,   140,    -1,    -1,
      60,    61,    -1,   155,    -1,    -1,    -1,    -1,    -1,    69,
      -1,    71,    72,    73,    74,    47,    -1,    49,    78,    -1,
      -1,    53,    -1,    83,    47,    -1,    49,    -1,    60,    61,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    71,
      72,    73,   102,   103,   104,   105,   106,   107,    71,    72,
      73,    83,    -1,   113,   114,   115,   116,    -1,    -1,    -1,
      83,    -1,   122,   123,    -1,    -1,   126,   127,    -1,    -1,
      -1,   131,    -1,    -1,   106,   107,    -1,   137,   138,    -1,
     140,    -1,    -1,   106,   116,    -1,    -1,    -1,    -1,    -1,
     122,    -1,    -1,   116,    -1,   127,    -1,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,    -1,   138,    -1,   140,    -1,
      -1,    -1,    -1,    -1,    -1,   138,    -1,   140
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,   143,   144,   145,   171,   172,   277,     3,     4,     5,
       6,     8,     9,    10,    11,    50,    54,    56,    57,    58,
      62,    66,    67,    75,    76,    77,    81,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   108,   110,   112,   117,   119,   120,
     121,   124,   129,   132,   136,   141,   154,   157,   158,   159,
     162,   164,   165,   168,   267,   268,   276,    11,    12,    51,
      54,    56,    57,    58,    59,    60,    63,    66,    70,    77,
      84,   100,   119,   120,   125,   133,   134,   135,   136,   139,
     141,   229,   230,   234,   236,   238,   244,   245,   249,   250,
     255,   256,   257,   258,     0,    47,    49,    52,    53,    60,
      61,    69,    71,    72,    73,    74,    78,    83,   102,   103,
     104,   105,   106,   107,   113,   114,   115,   116,   122,   123,
     126,   127,   131,   137,   138,   140,   148,   175,   177,   178,
     180,   183,   201,   251,   254,   277,   146,   164,   164,   164,
     164,   164,   164,   155,   164,   155,   164,   164,   164,   164,
     164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
     164,   164,   164,   164,   164,    11,    51,    63,   133,   134,
     232,   249,   250,   255,   155,   164,   164,    15,   164,   155,
     164,   164,   164,   267,   267,   267,   267,   267,    11,    54,
      56,    57,    58,    66,    77,    84,   100,   119,   120,   136,
     141,   234,   265,   267,    10,    11,    12,    76,    77,   112,
     113,   115,   120,   122,   150,   154,   159,   271,   272,   274,
     277,   267,    16,    17,    18,    19,    20,    21,    22,    23,
      33,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   163,   164,   165,     6,     8,   229,   230,   164,
      59,   125,    66,   100,   256,   256,   256,   274,   164,   256,
      13,    15,    17,    60,   140,   154,   159,   164,   227,   228,
     277,   228,   146,    10,    11,    12,   112,   149,   275,   235,
     277,   137,   181,   182,   274,   164,    72,    83,   180,   180,
     180,   180,     6,   180,   201,   180,   149,   179,   107,   180,
     164,   164,   164,   164,   180,   146,   274,   149,   149,   149,
     180,   180,   164,   178,   180,   183,   202,   180,   180,   186,
     107,   274,   180,   180,    10,    11,    51,    63,   111,   133,
     134,   146,   162,   189,   192,   231,   233,   236,   238,   244,
     249,   250,   255,   264,   265,   277,   264,   234,   264,   264,
     264,   264,   234,   264,   234,   264,   234,   264,   234,   234,
     234,   234,   234,   234,   234,   234,   234,   234,   234,   234,
     234,   234,   234,   264,   164,   274,   164,   164,   274,   235,
     234,   264,   264,   164,    10,   234,   234,   234,   267,   264,
     264,   166,   147,   166,   274,   274,   147,   169,   150,   217,
     277,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   166,   265,   267,   228,   228,    51,   267,   234,
     159,   274,    13,    15,    17,    60,   140,   154,   159,   227,
     277,   227,   228,   227,   228,   227,   227,    15,    17,    47,
      60,   116,   154,   159,   212,   213,   222,   229,   230,   277,
     165,   247,   248,   277,    11,   246,   256,   149,    10,    11,
      12,    47,    49,   112,   146,   274,   275,   274,    48,   147,
     164,    11,   231,   267,   180,   177,   146,   274,   274,   274,
     274,   274,   172,   146,   267,   155,    10,    11,   192,   231,
     233,   274,   148,   150,   164,   164,   164,    60,   229,   274,
     164,   176,   274,   146,   148,   149,   150,   218,   146,   148,
     150,   219,   148,   184,   274,   275,   235,   167,   166,   166,
     166,   166,   166,   166,   156,   166,   156,   166,   166,   166,
     166,   147,   166,   147,   166,   147,   166,   166,   166,   166,
     166,   166,   166,   166,   166,   166,   166,   267,   234,   264,
     274,   156,   166,   166,   274,   166,   166,   156,   166,   166,
     166,   166,   267,   267,    15,   154,   272,   164,   198,   277,
     267,   149,   166,   169,   166,   166,   166,   227,   159,   274,
     227,   227,   227,   227,   227,   165,   227,   181,   116,   229,
     230,   222,   227,   227,   166,    15,   147,    13,    17,    60,
     140,   154,   159,   164,   225,   275,   277,    13,    15,    17,
      60,   140,   154,   159,   164,   226,   263,   267,   277,   274,
     167,   246,   181,   164,   237,   239,   149,   180,   181,     3,
       4,     5,     9,    10,    15,    50,    62,    67,    75,    76,
     108,   110,   112,   117,   121,   124,   129,   132,   154,   157,
     158,   162,   164,   168,   214,   215,   222,   223,   269,   270,
     276,   277,   166,   166,   172,   146,   147,   147,   147,   147,
     167,   252,   147,   166,    10,    11,    12,    59,    60,   133,
     203,   204,   205,   206,   207,   255,   277,   164,   219,   187,
     148,   234,   190,    13,   159,   191,    51,   267,   229,    13,
      17,    60,   140,   154,   159,   224,   275,   277,   234,   172,
     164,   259,   260,   173,   174,   274,    64,    65,   259,    64,
      65,   146,   267,    13,    17,    60,   111,   140,   154,   159,
     164,   185,   208,   210,   275,   149,   274,   164,   164,   234,
     234,   234,   166,   166,   166,   164,   166,   164,   217,   212,
      17,    33,    47,    60,    61,    76,   106,   109,   112,   128,
     140,   154,   211,   277,   267,   227,   263,   166,    48,   229,
     230,   225,   226,   166,   166,   198,    15,   222,   159,   225,
     225,   225,   225,   225,   225,   165,   217,   159,   274,   226,
     226,   226,   226,   226,   226,   165,   217,   169,   147,   150,
      48,   231,   267,   172,    76,   240,   277,   182,   164,   155,
     155,   232,   155,    15,   164,   155,   164,   267,   267,   267,
     267,   234,   265,   267,   166,    15,   147,    16,    17,    18,
      19,    20,    21,    22,    23,    33,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   163,   164,   165,
     180,   180,   167,   253,    10,    10,    10,    10,   172,   276,
     148,   207,   156,   147,    15,   274,    13,    17,    60,   140,
     154,   159,   164,   225,   226,   188,   210,   148,   212,   159,
     208,   212,   166,   166,   224,   159,   224,   224,   224,   224,
     224,   164,   165,   166,   167,   193,   167,   261,   277,   146,
     147,   146,   164,   148,   148,   167,   148,   148,   146,   220,
     221,   267,   277,   148,   159,   208,   208,     6,    16,    17,
      18,    19,    20,    21,    22,    23,    33,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    65,
     108,   147,   150,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   164,   165,   168,   199,   208,   208,
     208,   208,   149,   164,   165,   211,   150,   217,   219,   246,
     265,   265,   166,   166,   166,   265,   265,   166,    60,   232,
     181,   164,   146,   169,   164,   222,   225,   226,   217,   217,
     164,   164,   211,   225,   166,   263,   226,   166,   263,   267,
     166,   166,   167,   149,   241,   242,   277,   234,   234,   234,
     164,   234,   164,    10,   234,   234,   234,   267,   166,   166,
      15,   223,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   166,   265,   267,   172,   147,   166,   147,
     147,   147,   167,   166,   225,   226,   178,   183,   200,   201,
     206,   274,   150,   159,   150,   216,   277,   217,   219,   166,
     208,   166,   166,   164,   224,   196,   263,   212,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    70,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    82,    83,    84,   100,   106,   107,
     108,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   168,   169,   262,   259,   174,
     264,   264,   220,   167,   147,   208,    10,   166,   169,   166,
       4,   209,   263,   267,   147,   166,   166,   166,   166,   198,
     232,   228,    48,   166,   274,   259,   212,   217,   217,   212,
     212,   164,   169,   164,   169,   147,   113,   114,   115,   133,
     138,   243,   273,   274,   146,   147,   166,   156,   156,   264,
     156,   274,   166,   166,   156,   166,   166,   267,   149,   166,
     169,   167,    10,   148,    10,    10,    10,   148,   216,   234,
      50,    62,    67,   117,   121,   124,   154,   157,   158,   159,
     162,   164,   168,   266,   268,   147,   198,   166,   164,   198,
     197,   212,   169,   166,   261,   167,   167,   166,   167,   146,
     267,   214,   169,   185,   211,   228,    15,   166,   167,   166,
     166,   166,   212,   212,   138,   273,   138,   273,   138,   273,
     274,   113,   114,   115,    15,   172,   243,   164,   164,   166,
     164,   166,   164,   267,   147,   166,   147,   166,   166,   147,
     166,   164,   155,   155,   155,    15,   164,   155,   266,   266,
     266,   266,   266,   234,   265,   266,    16,    17,    18,    19,
      20,    21,    22,    23,    33,   151,   152,   153,   154,   157,
     158,   159,   160,   161,   163,   164,   165,   188,   164,   194,
     212,   166,   198,   167,    15,   220,   166,   146,   166,   198,
     198,   198,   166,   166,   273,   273,   273,   273,   273,   273,
     167,   265,   265,   265,   265,    10,   148,    10,   148,   148,
      10,   148,   234,   234,   234,   234,   164,    10,   234,   234,
     166,   166,   266,   266,   266,   266,   266,   266,   266,   266,
     266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
     266,   166,   265,   267,   195,   212,   166,   198,   167,   198,
     259,   211,   211,   211,   198,   198,   166,   166,   166,   166,
     166,   147,   147,   166,   166,   156,   156,   156,   274,   166,
     166,   156,   266,   149,   166,   169,   212,   166,   198,   167,
     148,    10,    10,   148,   164,   164,   164,   166,   164,   266,
     166,   198,   166,   166,   265,   265,   265,   265,   198,   211,
     148,   148,   166,   166,   166,   166,   211
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   170,   171,   171,   171,   172,   172,   172,   173,   173,
     174,   174,   174,   176,   175,   177,   177,   177,   177,   177,
     177,   177,   177,   177,   177,   177,   177,   177,   177,   177,
     177,   177,   177,   177,   177,   177,   177,   177,   179,   178,
     180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
     180,   180,   180,   180,   180,   180,   180,   180,   181,   181,
     182,   182,   182,   184,   183,   183,   183,   183,   183,   185,
     185,   187,   186,   186,   188,   188,   190,   189,   191,   189,
     193,   192,   194,   192,   195,   192,   196,   192,   197,   192,
     192,   198,   198,   198,   198,   198,   198,   198,   198,   198,
     198,   198,   198,   198,   198,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   200,   200,   200,   201,   202,   201,
     201,   201,   203,   203,   204,   204,   205,   205,   206,   206,
     206,   206,   206,   206,   206,   206,   206,   207,   207,   207,
     207,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   209,   208,   210,   210,   211,   211,   211,   212,
     212,   212,   212,   212,   213,   213,   214,   214,   214,   214,
     214,   215,   215,   216,   216,   217,   217,   218,   218,   218,
     218,   218,   219,   219,   219,   219,   219,   219,   220,   220,
     220,   221,   221,   221,   221,   222,   222,   222,   222,   222,
     222,   222,   222,   223,   223,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   225,   225,   225,   225,   225,   225,
     225,   225,   225,   225,   225,   226,   226,   226,   226,   226,
     226,   226,   226,   226,   226,   226,   227,   227,   227,   227,
     227,   227,   227,   227,   227,   227,   228,   228,   228,   228,
     228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
     229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
     229,   229,   230,   231,   231,   231,   231,   231,   231,   231,
     231,   231,   231,   231,   231,   231,   232,   232,   232,   232,
     232,   232,   232,   232,   233,   233,   234,   234,   234,   234,
     235,   235,   235,   235,   237,   236,   239,   238,   240,   240,
     241,   241,   242,   242,   243,   243,   243,   243,   243,   243,
     243,   243,   243,   243,   244,   245,   245,   245,   245,   246,
     246,   247,   247,   247,   248,   248,   248,   249,   249,   249,
     250,   250,   250,   252,   251,   253,   251,   251,   251,   254,
     254,   254,   255,   255,   255,   256,   256,   256,   256,   256,
     256,   256,   256,   256,   256,   256,   256,   256,   256,   257,
     257,   257,   258,   260,   259,   261,   261,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   263,   263,   264,   264,
     265,   265,   266,   266,   266,   266,   266,   266,   266,   266,
     266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
     266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
     266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
     266,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   271,   271,   271,   271,   271,
     272,   272,   272,   272,   273,   273,   273,   274,   274,   274,
     274,   274,   274,   274,   274,   274,   274,   275,   275,   275,
     275,   276,   276,   276,   276,   277
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     2,     1,     2,     2,     1,     3,
       4,     5,     4,     0,     5,     1,     1,     1,     1,     1,
       2,     1,     1,     2,     2,     2,     2,     7,     9,    11,
       9,    11,    13,     9,    13,     9,     7,     5,     0,     3,
       1,     2,     2,     3,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     4,     5,     5,     1,     3,
       1,     4,     4,     0,     4,     3,     3,     3,     1,     2,
       4,     0,     4,     3,     2,     4,     0,     6,     0,     6,
       0,     7,     0,    11,     0,    12,     0,     8,     0,     9,
       1,     1,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     4,     5,     6,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     1,     1,     1,     1,     2,     0,     6,
       2,     2,     1,     1,     1,     3,     1,     1,     1,     2,
       4,     2,     3,     3,     4,     2,     3,     1,     1,     1,
       1,     1,     2,     3,     2,     2,     2,     2,     2,     3,
       4,     3,     0,     6,     2,     3,     1,     3,     4,     1,
       1,     1,     3,     2,     1,     3,     1,     1,     1,     3,
       2,     1,     3,     1,     2,     1,     2,     1,     3,     5,
       3,     3,     1,     3,     3,     3,     3,     4,     1,     1,
       2,     1,     3,     3,     5,     3,     4,     5,     3,     4,
       5,     2,     4,     1,     1,     1,     1,     2,     2,     2,
       2,     2,     3,     4,     1,     1,     2,     2,     2,     2,
       2,     3,     4,     7,     3,     1,     2,     2,     2,     2,
       2,     2,     3,     4,     7,     3,     1,     1,     2,     2,
       2,     2,     2,     2,     3,     4,     1,     1,     2,     2,
       2,     2,     2,     2,     3,     4,     5,     9,     9,     9,
       1,     1,     2,     1,     1,     1,     3,     4,     4,     4,
       4,     1,     1,     1,     1,     2,     1,     1,     1,     3,
       4,     2,     4,     4,     4,     1,     1,     1,     2,     3,
       2,     4,     4,     1,     1,     1,     2,     3,     2,     3,
       1,     4,     5,     5,     0,     6,     0,     9,     1,     1,
       1,     1,     2,     3,     1,     2,     2,     2,     3,     3,
       3,     3,     3,     3,     4,     3,     1,     4,     2,     1,
       1,     1,     3,     5,     1,     2,     4,     1,     2,     2,
       1,     1,     1,     0,     6,     0,     7,     4,     5,     3,
       5,     4,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     1,
       1,     2,     1,     0,     2,     1,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
       1,     3,     1,     4,     7,     7,     7,     7,     4,     4,
       5,     4,     2,     2,     2,     2,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     5,     4,     4,     3,     3,     3,
       3,     1,     4,     7,     7,     7,     7,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     5,     4,     2,     5,     4,     4,     2,
       2,     2,     2,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     5,     4,     4,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     8,    11,     4,     4,     6,     4,     4,     6,     6,
       4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
       1,     4,     7,     7,     7,     7,     4,     4,     5,     4,
       2,     5,     4,     4,     2,     2,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     5,     4,     4,
       3,     3,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     4,
       2,     3,     1,     2,     1,     2,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     0
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (&yylloc, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (yylocationp);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 3:
#line 450 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_expr = (yyvsp[0].u.expr);
}
#line 3965 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 4:
#line 454 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_type = (yyvsp[0].u.type);
}
#line 3973 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 10:
#line 472 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  delete (yyvsp[-1].u.expr);
}
#line 3981 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 11:
#line 476 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  delete (yyvsp[-2].u.expr);
}
#line 3989 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 12:
#line 480 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  delete (yyvsp[-1].u.expr);
}
#line 3997 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 13:
#line 492 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) |
                     ((yyvsp[-1].u.integer) & CPPInstance::SC_c_binding));
}
#line 4006 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 14:
#line 497 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_storage_class();
}
#line 4014 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 21:
#line 510 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = (yylsp[0]);
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
#line 4031 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 22:
#line 523 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", (yylsp[0]));
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
#line 4044 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 23:
#line 532 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_scope->set_current_vis(V_published);
}
#line 4052 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 24:
#line 536 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (publish_nest_level > 0) {
    current_scope->set_current_vis(V_published);
  } else {
    current_scope->set_current_vis(V_public);
  }
}
#line 4064 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 25:
#line 544 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_scope->set_current_vis(V_protected);
}
#line 4072 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 26:
#line 548 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_scope->set_current_vis(V_private);
}
#line 4080 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 27:
#line 552 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
  }

  CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-4].u.identifier), getter->as_function_group(), NULL, current_scope, (yylsp[-6]).file);
  current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-6]));
}
#line 4095 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 28:
#line 563 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));

  } else {
    CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    CPPFunctionGroup *setter_func = NULL;

    if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      setter_func = setter->as_function_group();
    }

    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), getter->as_function_group(),
                                                         setter_func, current_scope, (yylsp[-8]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4120 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 29:
#line 584 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));

  } else {
    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    CPPFunctionGroup *setter_func = NULL;

    if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      setter_func = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == (CPPDeclaration *)NULL || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
      deleter = NULL;
    }

    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-8].u.identifier), getter->as_function_group(),
                                                         setter_func, current_scope, (yylsp[-10]).file);
    if (deleter) {
      make_property->_del_function = deleter->as_function_group();
    }
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-10]));
  }
}
#line 4154 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 30:
#line 614 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == (CPPDeclaration *)NULL || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = NULL;
  }

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
  }

  CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), getter->as_function_group(), NULL, current_scope, (yylsp[-8]).file);
  make_property->_length_function = length_getter->as_function_group();
  current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
}
#line 4175 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 31:
#line 631 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *length_getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == (CPPDeclaration *)NULL || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    length_getter = NULL;
  }

  CPPDeclaration *getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));

  } else {
    CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    CPPFunctionGroup *setter_func = NULL;

    if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      setter_func = setter->as_function_group();
    }

    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-8].u.identifier), getter->as_function_group(),
                                                         setter_func, current_scope, (yylsp[-10]).file);
    make_property->_length_function = length_getter->as_function_group();
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-10]));
  }
}
#line 4207 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 32:
#line 659 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *length_getter = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == (CPPDeclaration *)NULL || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    length_getter = NULL;
  }

  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));

  } else {
    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    CPPFunctionGroup *setter_func = NULL;

    if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      setter_func = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == (CPPDeclaration *)NULL || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
      deleter = NULL;
    }

    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-10].u.identifier), getter->as_function_group(),
                                                         setter_func, current_scope, (yylsp[-12]).file);
    make_property->_length_function = length_getter->as_function_group();
    if (deleter) {
      make_property->_del_function = deleter->as_function_group();
    }
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-12]));
  }
}
#line 4248 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 33:
#line 696 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *hasser = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (hasser == (CPPDeclaration *)NULL || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid has-function: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
  }

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
  }

  if (hasser && getter) {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-6].u.identifier),
                                        hasser->as_function_group(),
                                        getter->as_function_group(),
                                        NULL, NULL,
                                        current_scope, (yylsp[-8]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4274 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 34:
#line 718 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *hasser = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (hasser == (CPPDeclaration *)NULL || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid has-function: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
  }

  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
  }

  CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
  }

  CPPDeclaration *clearer = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (clearer == (CPPDeclaration *)NULL || clearer->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid clear-function: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
  }

  if (hasser && getter && setter && clearer) {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-10].u.identifier),
                                        hasser->as_function_group(),
                                        getter->as_function_group(),
                                        setter->as_function_group(),
                                        clearer->as_function_group(),
                                        current_scope, (yylsp[-12]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-12]));
  }
}
#line 4311 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 35:
#line 751 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == (CPPDeclaration *)NULL || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = NULL;
  }

  CPPDeclaration *element_getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (element_getter == (CPPDeclaration *)NULL || element_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid element method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    element_getter = NULL;
  }

  if (length_getter != (CPPDeclaration *)NULL && element_getter != (CPPDeclaration *)NULL) {
    CPPMakeSeq *make_seq = new CPPMakeSeq((yyvsp[-6].u.identifier),
                                          length_getter->as_function_group(),
                                          element_getter->as_function_group(),
                                          current_scope, (yylsp[-8]).file);
    current_scope->add_declaration(make_seq, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4337 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 36:
#line 773 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPExpression::Result result = (yyvsp[-4].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-4]));
  } else if (!result.as_boolean()) {
    stringstream str;
    str << *(yyvsp[-2].u.expr);
    yywarning("static_assert failed: " + str.str(), (yylsp[-4]));
  }
}
#line 4352 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 37:
#line 784 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This alternative version of static_assert was introduced in C++17.
  CPPExpression::Result result = (yyvsp[-2].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-2]));
  } else if (!result.as_boolean()) {
    yywarning("static_assert failed", (yylsp[-2]));
  }
}
#line 4366 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 38:
#line 797 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
#line 4376 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 39:
#line 803 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  delete current_scope;
  pop_scope();
}
#line 4385 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 40:
#line 812 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = 0;
}
#line 4393 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 41:
#line 816 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This isn't really a storage class, but it helps with parsing.
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_const;
}
#line 4402 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 42:
#line 821 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
}
#line 4410 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 43:
#line 825 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
  if ((yyvsp[-1].str) == "C") {
    (yyval.u.integer) |= (int)CPPInstance::SC_c_binding;
  } else if ((yyvsp[-1].str) == "C++") {
    (yyval.u.integer) &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + (yyvsp[-1].str) + "\"", (yylsp[-1]));
  }
}
#line 4425 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 44:
#line 836 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_static;
}
#line 4433 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 45:
#line 840 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_inline;
}
#line 4441 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 46:
#line 844 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_virtual;
}
#line 4449 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 47:
#line 848 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_explicit;
}
#line 4457 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 48:
#line 852 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_register;
}
#line 4465 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 49:
#line 856 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_volatile;
}
#line 4473 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 50:
#line 860 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_mutable;
}
#line 4481 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 51:
#line 864 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_constexpr;
}
#line 4489 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 52:
#line 868 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_blocking;
}
#line 4497 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 53:
#line 872 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extension;
}
#line 4505 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 54:
#line 876 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_thread_local;
}
#line 4513 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 55:
#line 880 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Ignore attribute specifiers for now.
  (yyval.u.integer) = (yyvsp[0].u.integer);
}
#line 4522 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 56:
#line 885 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer);
}
#line 4530 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 57:
#line 889 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer);
}
#line 4538 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 63:
#line 907 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We don't need to push/pop type, because we can't nest
  // type_like_declaration.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 4553 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 64:
#line 918 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_storage_class();
}
#line 4561 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 65:
#line 923 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration((yyvsp[-1].u.decl), global_scope, current_lexer, (yylsp[-1]));
}
#line 4574 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 66:
#line 932 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-1].u.instance) != (CPPInstance *)NULL) {
    (yyvsp[-1].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
    current_scope->add_declaration((yyvsp[-1].u.instance), global_scope, current_lexer, (yylsp[-1]));
    (yyvsp[-1].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 4586 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 67:
#line 940 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-1].u.instance) != (CPPInstance *)NULL) {
    (yyvsp[-1].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
    current_scope->add_declaration((yyvsp[-1].u.instance), global_scope, current_lexer, (yylsp[-1]));
    (yyvsp[-1].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 4598 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 69:
#line 956 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-1].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
}
#line 4613 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 70:
#line 967 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-3].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-3]).file);
  inst->set_initializer((yyvsp[-2].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-3]));
}
#line 4628 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 71:
#line 982 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 4643 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 72:
#line 993 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_storage_class();
}
#line 4651 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 73:
#line 997 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-1].u.instance) != (CPPDeclaration *)NULL) {
    CPPInstance *inst = (yyvsp[-1].u.instance)->as_instance();
    if (inst != (CPPInstance *)NULL) {
      inst->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
      current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
      CPPTypedefType *typedef_type = new CPPTypedefType(inst->_type, inst->_ident, current_scope);
      current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
    }
  }
}
#line 4667 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 74:
#line 1012 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-1].u.inst_ident), current_scope, (yylsp[-1]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
}
#line 4680 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 75:
#line 1021 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-3].u.inst_ident), current_scope, (yylsp[-3]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-3]));
}
#line 4693 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 76:
#line 1035 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 4701 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 77:
#line 1039 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type;
  if ((yyvsp[-5].u.identifier)->get_simple_name() == current_scope->get_simple_name() ||
      (yyvsp[-5].u.identifier)->get_simple_name() == string("~") + current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    yywarning("function has no return type, assuming int", (yylsp[-5]));
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }
  pop_scope();

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-5].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
}
#line 4725 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 78:
#line 1059 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 4733 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 79:
#line 1063 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  CPPType *type;
  if ((yyvsp[-5].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-5].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
}
#line 4755 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 80:
#line 1086 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 4763 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 81:
#line 1090 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  if ((yyvsp[-5].u.identifier)->is_scoped()) {
    yyerror("Invalid destructor name: ~" + (yyvsp[-5].u.identifier)->get_fully_scoped_name(), (yylsp[-5]));
  } else {
    CPPIdentifier *ident =
      new CPPIdentifier("~" + (yyvsp[-5].u.identifier)->get_simple_name(), (yylsp[-5]));
    delete (yyvsp[-5].u.identifier);

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);

    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

    (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
  }
}
#line 4786 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 82:
#line 1116 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 4794 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 83:
#line 1120 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  CPPType *type = (yyvsp[-10].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[-10].u.identifier)->get_fully_scoped_name(), (yylsp[-10]));
  }
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[-7].u.inst_ident);
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-10]).file);
}
#line 4812 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 84:
#line 1134 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 4820 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 85:
#line 1138 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  CPPType *type = (yyvsp[-11].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[-11].u.identifier)->get_fully_scoped_name(), (yylsp[-11]));
  }
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[-7].u.inst_ident);
  ii->add_scoped_pointer_modifier((yyvsp[-9].u.identifier));
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-11]).file);
}
#line 4838 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 86:
#line 1154 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-3].u.identifier) != NULL) {
    push_scope((yyvsp[-3].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 4848 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 87:
#line 1160 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-7].u.identifier) != NULL) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give typecast operators the name "operator typecast <name>",
  // where <name> is a simple name of the type to be typecast.  Use
  // the method's return type to determine the full type description.
  string name = "operator typecast " + (yyvsp[-6].u.type)->get_simple_name();
  CPPIdentifier *ident = (yyvsp[-7].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier(name, (yylsp[-6]));
  } else {
    ident->add_name(name);
  }
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 4877 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 88:
#line 1185 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-4].u.identifier) != NULL) {
    push_scope((yyvsp[-4].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 4887 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 89:
#line 1191 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-8].u.identifier) != NULL) {
    pop_scope();
  }

  CPPIdentifier *ident = (yyvsp[-8].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator typecast", (yylsp[-5]));
  } else {
    ident->add_name("operator typecast");
  }
  (yyvsp[-5].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 4907 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 90:
#line 1211 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *decl =
    (yyvsp[0].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != (CPPDeclaration *)NULL) {
    (yyval.u.instance) = decl->as_instance();
  } else {
    (yyval.u.instance) = (CPPInstance *)NULL;
  }
}
#line 4921 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 91:
#line 1224 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = 0;
}
#line 4929 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 92:
#line 1228 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_const_method;
}
#line 4937 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 93:
#line 1232 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_volatile_method;
}
#line 4945 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 94:
#line 1236 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_noexcept;
}
#line 4953 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 95:
#line 1249 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_final;
}
#line 4961 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 96:
#line 1253 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_override;
}
#line 4969 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 97:
#line 1257 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_lvalue_method;
}
#line 4977 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 98:
#line 1261 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_rvalue_method;
}
#line 4985 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 99:
#line 1265 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Used for lambdas, currently ignored.
  (yyval.u.integer) = (yyvsp[-1].u.integer);
}
#line 4994 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 100:
#line 1270 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Used for lambdas in C++17, currently ignored.
  (yyval.u.integer) = (yyvsp[-1].u.integer);
}
#line 5003 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 101:
#line 1275 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-3].u.integer);
}
#line 5011 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 102:
#line 1279 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-4].u.integer);
}
#line 5019 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 103:
#line 1283 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-5].u.integer);
}
#line 5027 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 104:
#line 1287 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-3].u.integer);
}
#line 5035 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 105:
#line 1294 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "!";
}
#line 5043 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 106:
#line 1298 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "~";
}
#line 5051 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 107:
#line 1302 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "*";
}
#line 5059 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 108:
#line 1306 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "/";
}
#line 5067 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 109:
#line 1310 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "%";
}
#line 5075 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 110:
#line 1314 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "+";
}
#line 5083 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 111:
#line 1318 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "-";
}
#line 5091 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 112:
#line 1322 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "|";
}
#line 5099 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 113:
#line 1326 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "&";
}
#line 5107 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 114:
#line 1330 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "^";
}
#line 5115 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 115:
#line 1334 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "||";
}
#line 5123 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 116:
#line 1338 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "&&";
}
#line 5131 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 117:
#line 1342 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "==";
}
#line 5139 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 118:
#line 1346 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "!=";
}
#line 5147 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 119:
#line 1350 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<=";
}
#line 5155 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 120:
#line 1354 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">=";
}
#line 5163 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 121:
#line 1358 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<";
}
#line 5171 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 122:
#line 1362 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">";
}
#line 5179 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 123:
#line 1366 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<<";
}
#line 5187 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 124:
#line 1370 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">>";
}
#line 5195 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 125:
#line 1374 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "=";
}
#line 5203 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 126:
#line 1378 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ",";
}
#line 5211 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 127:
#line 1382 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "++";
}
#line 5219 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 128:
#line 1386 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "--";
}
#line 5227 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 129:
#line 1390 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "*=";
}
#line 5235 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 130:
#line 1394 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "/=";
}
#line 5243 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 131:
#line 1398 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "%=";
}
#line 5251 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 132:
#line 1402 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "+=";
}
#line 5259 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 133:
#line 1406 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "-=";
}
#line 5267 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 134:
#line 1410 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "|=";
}
#line 5275 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 135:
#line 1414 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "&=";
}
#line 5283 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 136:
#line 1418 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "^=";
}
#line 5291 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 137:
#line 1422 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<<=";
}
#line 5299 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 138:
#line 1426 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">>=";
}
#line 5307 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 139:
#line 1430 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "->";
}
#line 5315 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 140:
#line 1434 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "[]";
}
#line 5323 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 141:
#line 1438 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "()";
}
#line 5331 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 142:
#line 1442 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "new";
}
#line 5339 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 143:
#line 1446 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "delete";
}
#line 5347 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 148:
#line 1460 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope(new CPPTemplateScope(current_scope));
}
#line 5355 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 149:
#line 1464 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
}
#line 5363 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 154:
#line 1478 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 5373 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 155:
#line 1484 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 5383 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 158:
#line 1498 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((CPPIdentifier *)NULL));
}
#line 5391 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 159:
#line 1502 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[0].u.identifier)));
}
#line 5399 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 160:
#line 1506 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[-2].u.identifier), (yyvsp[0].u.type)));
}
#line 5407 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 161:
#line 1510 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((CPPIdentifier *)NULL);
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
#line 5417 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 162:
#line 1516 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[0].u.identifier));
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
#line 5427 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 163:
#line 1522 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 5437 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 164:
#line 1528 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 5448 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 165:
#line 1535 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[0]).file);
  (yyval.u.decl) = inst;
}
#line 5457 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 166:
#line 1540 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[0]).file);
  (yyval.u.decl) = inst;
}
#line 5467 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 167:
#line 1549 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 5475 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 168:
#line 1553 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  yywarning("Not a type: " + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 5484 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 169:
#line 1558 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != NULL);
}
#line 5496 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 170:
#line 1566 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != NULL);
}
#line 5508 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 171:
#line 1578 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 5516 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 172:
#line 1582 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = (yyvsp[-1].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator "+(yyvsp[0].str), (yylsp[0]));
  } else {
    ident->_names.push_back("operator "+(yyvsp[0].str));
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
#line 5534 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 173:
#line 1596 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A C++11 literal operator.
  if (!(yyvsp[-1].str).empty()) {
    yyerror("expected empty string", (yylsp[-1]));
  }
  CPPIdentifier *ident = (yyvsp[-2].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator \"\" "+(yyvsp[0].u.identifier)->get_simple_name(), (yylsp[0]));
  } else {
    ident->_names.push_back("operator \"\" "+(yyvsp[0].u.identifier)->get_simple_name());
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
#line 5553 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 174:
#line 1611 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 5562 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 175:
#line 1616 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 5571 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 176:
#line 1621 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 5580 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 177:
#line 1626 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 5589 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 178:
#line 1631 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 5598 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 179:
#line 1636 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 5607 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 180:
#line 1641 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 5616 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 181:
#line 1646 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 5625 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 182:
#line 1651 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Create a scope for this function (in case it is a function)
  CPPScope *scope = new CPPScope((yyvsp[-1].u.inst_ident)->get_scope(current_scope, global_scope),
                                 CPPNameComponent(""), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 5642 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 183:
#line 1664 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  if ((yyvsp[-2].u.param_list)->is_parameter_expr() && (yyvsp[0].u.integer) == 0) {
    // Oops, this must have been an instance declaration with a
    // parameter list, not a function prototype.
    (yyval.u.inst_ident)->add_initializer_modifier((yyvsp[-2].u.param_list));

  } else {
    // This was (probably) a function prototype.
    (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
  }
}
#line 5660 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 184:
#line 1682 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This is handled a bit awkwardly right now.  Ideally it'd be wrapped
  // up in the instance_identifier rule, but then more needs to happen in
  // order to avoid shift/reduce conflicts.
  if ((yyvsp[0].u.type) != NULL) {
    (yyvsp[-1].u.inst_ident)->add_trailing_return_type((yyvsp[0].u.type));
  }
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
}
#line 5674 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 185:
#line 1692 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Bitfield definition.
  (yyvsp[-2].u.inst_ident)->_bit_width = (yyvsp[0].u.integer);
  (yyval.u.inst_ident) = (yyvsp[-2].u.inst_ident);
}
#line 5684 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 186:
#line 1702 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = NULL;
}
#line 5692 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 187:
#line 1706 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 5700 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 188:
#line 1710 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 5709 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 189:
#line 1719 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
}
#line 5717 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 190:
#line 1723 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5726 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 191:
#line 1728 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 5734 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 192:
#line 1732 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5743 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 193:
#line 1737 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5752 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 194:
#line 1745 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 5761 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 195:
#line 1750 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 5770 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 196:
#line 1758 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
}
#line 5778 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 197:
#line 1762 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5787 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 198:
#line 1767 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 5795 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 199:
#line 1771 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5804 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 200:
#line 1776 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5813 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 201:
#line 1784 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 5822 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 202:
#line 1789 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 5831 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 203:
#line 1797 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5839 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 204:
#line 1801 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 5847 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 205:
#line 1808 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5855 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 206:
#line 1812 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 5863 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 207:
#line 1819 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5871 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 208:
#line 1823 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5879 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 209:
#line 1827 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5887 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 210:
#line 1831 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 5895 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 211:
#line 1835 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 5903 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 212:
#line 1842 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5911 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 213:
#line 1846 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5919 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 214:
#line 1850 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 5927 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 215:
#line 1854 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 5935 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 216:
#line 1858 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 5943 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 217:
#line 1862 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5951 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 221:
#line 1875 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
}
#line 5958 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 225:
#line 1884 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 5967 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 226:
#line 1889 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 5977 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 227:
#line 1895 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 5987 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 228:
#line 1901 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 5996 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 229:
#line 1906 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6006 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 230:
#line 1912 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6016 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 231:
#line 1918 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6024 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 232:
#line 1922 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6032 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 233:
#line 1933 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6040 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 234:
#line 1937 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_parameter));
  (yyval.u.instance) = new CPPInstance(type, "expr");
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6051 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 235:
#line 1947 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
#line 6059 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 236:
#line 1951 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 6067 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 237:
#line 1955 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6076 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 238:
#line 1960 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6085 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 239:
#line 1965 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6094 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 240:
#line 1970 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6103 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 241:
#line 1975 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6112 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 242:
#line 1980 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6121 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 243:
#line 1985 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6130 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 244:
#line 1993 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
#line 6138 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 245:
#line 1997 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 6146 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 246:
#line 2001 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6155 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 247:
#line 2006 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6164 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 248:
#line 2011 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6173 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 249:
#line 2016 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6182 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 250:
#line 2021 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6191 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 251:
#line 2026 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6200 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 252:
#line 2031 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6209 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 253:
#line 2036 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 6219 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 254:
#line 2042 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 6228 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 255:
#line 2050 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6237 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 256:
#line 2055 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6246 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 257:
#line 2060 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6255 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 258:
#line 2065 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6264 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 259:
#line 2070 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6273 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 260:
#line 2075 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6282 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 261:
#line 2080 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6291 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 262:
#line 2085 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6300 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 263:
#line 2090 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6309 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 264:
#line 2095 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 6319 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 265:
#line 2101 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 6328 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 266:
#line 2109 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
#line 6336 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 267:
#line 2113 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6345 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 268:
#line 2118 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6354 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 269:
#line 2123 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6363 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 270:
#line 2128 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6372 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 271:
#line 2133 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6381 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 272:
#line 2138 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6390 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 273:
#line 2143 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6399 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 274:
#line 2148 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6408 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 275:
#line 2153 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6417 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 276:
#line 2161 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
#line 6425 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 277:
#line 2165 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6434 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 278:
#line 2170 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6443 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 279:
#line 2175 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6452 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 280:
#line 2180 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6461 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 281:
#line 2185 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6470 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 282:
#line 2190 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6479 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 283:
#line 2195 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6488 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 284:
#line 2200 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6497 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 285:
#line 2205 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6506 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 286:
#line 2210 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6516 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 287:
#line 2216 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6527 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 288:
#line 2223 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6538 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 289:
#line 2230 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6549 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 290:
#line 2240 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 6557 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 291:
#line 2244 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != NULL);
}
#line 6569 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 292:
#line 2252 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 6577 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 293:
#line 2256 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6585 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 294:
#line 2260 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6593 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 295:
#line 2264 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.enum_type));
}
#line 6601 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 296:
#line 2268 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6621 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 297:
#line 2284 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-3]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6641 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 298:
#line 2300 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 6654 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 299:
#line 2309 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6662 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 300:
#line 2313 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == NULL) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.type) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
#line 6676 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 301:
#line 2323 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6684 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 302:
#line 2330 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != NULL);
}
#line 6696 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 303:
#line 2341 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 6704 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 304:
#line 2345 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.decl) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.decl) != NULL);
}
#line 6716 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 305:
#line 2353 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 6724 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 306:
#line 2357 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6732 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 307:
#line 2361 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.struct_type)));
}
#line 6740 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 308:
#line 2365 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.enum_type)));
}
#line 6748 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 309:
#line 2369 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 6768 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 310:
#line 2385 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-3]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 6788 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 311:
#line 2401 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  yywarning(string("C++ does not permit forward declaration of untyped enum ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));

  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 6810 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 312:
#line 2419 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.decl) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 6823 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 313:
#line 2428 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6831 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 314:
#line 2432 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == NULL) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.decl) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.decl) = enum_type->get_underlying_type();
  }
}
#line 6845 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 315:
#line 2442 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6853 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 316:
#line 2449 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 6861 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 317:
#line 2453 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != NULL);
}
#line 6873 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 318:
#line 2461 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 6881 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 319:
#line 2465 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6901 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 320:
#line 2481 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6921 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 321:
#line 2497 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 6934 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 322:
#line 2506 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == NULL) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.type) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
#line 6948 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 323:
#line 2516 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6956 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 324:
#line 2523 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = (yyvsp[0].u.decl);
}
#line 6964 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 325:
#line 2527 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  yyerror(string("unknown type '") + (yyvsp[0].u.identifier)->get_fully_scoped_name() + "'", (yylsp[0]));

  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 6974 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 326:
#line 2535 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 6982 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 327:
#line 2539 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 6991 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 328:
#line 2544 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 6999 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 329:
#line 2548 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7008 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 334:
#line 2563 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPVisibility starting_vis =
  ((yyvsp[-2].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType((yyvsp[-2].u.extension_enum), NULL, current_scope,
                                        new_scope, (yylsp[-2]).file);
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 7026 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 335:
#line 2577 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 7037 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 336:
#line 2587 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPVisibility starting_vis =
  ((yyvsp[-2].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, (yyvsp[0].u.identifier)->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope,
                                        new_scope, (yylsp[-2]).file);
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 7061 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 337:
#line 2607 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 7072 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 339:
#line 2618 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->_final = true;
}
#line 7080 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 344:
#line 2635 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_unknown, false);
}
#line 7088 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 345:
#line 2639 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, false);
}
#line 7096 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 346:
#line 2643 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, false);
}
#line 7104 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 347:
#line 2647 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, false);
}
#line 7112 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 348:
#line 2651 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 7120 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 349:
#line 2655 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 7128 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 350:
#line 2659 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 7136 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 351:
#line 2663 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 7144 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 352:
#line 2667 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 7152 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 353:
#line 2671 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 7160 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 354:
#line 2678 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.enum_type) = current_enum;
  current_enum = NULL;
}
#line 7169 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 355:
#line 2686 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_enum = new CPPEnumType((yyvsp[-2].u.extension_enum), NULL, (yyvsp[0].u.type), current_scope, NULL, (yylsp[-2]).file);
}
#line 7177 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 356:
#line 2690 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_enum = new CPPEnumType((yyvsp[0].u.extension_enum), NULL, current_scope, NULL, (yylsp[0]).file);
}
#line 7185 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 357:
#line 2694 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[-2].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), (yyvsp[0].u.type), current_scope, new_scope, (yylsp[-3]).file);
}
#line 7194 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 358:
#line 2699 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[0].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, new_scope, (yylsp[-1]).file);
}
#line 7203 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 359:
#line 2707 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7211 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 360:
#line 2711 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
}
#line 7219 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 362:
#line 2719 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[-1].u.identifier)->get_simple_name(), NULL, current_lexer, (yylsp[-1]));
}
#line 7228 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 363:
#line 2724 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[-3].u.identifier)->get_simple_name(), (yyvsp[-1].u.expr), current_lexer, (yylsp[-3]));
}
#line 7237 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 365:
#line 2732 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[0].u.identifier)->get_simple_name(), NULL, current_lexer, (yylsp[0]));
}
#line 7246 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 366:
#line 2737 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[-2].u.identifier)->get_simple_name(), (yyvsp[0].u.expr), current_lexer, (yylsp[-2]));
}
#line 7255 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 367:
#line 2745 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum;
}
#line 7263 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 368:
#line 2749 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_class;
}
#line 7271 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 369:
#line 2753 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_struct;
}
#line 7279 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 370:
#line 2760 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_class;
}
#line 7287 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 371:
#line 2764 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_struct;
}
#line 7295 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 372:
#line 2768 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_union;
}
#line 7303 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 373:
#line 2775 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-2]).file);
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-2]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 7325 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 374:
#line 2793 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
}
#line 7333 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 375:
#line 2797 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-2]).file);
  nspace->_is_inline = true;
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-2]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 7356 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 376:
#line 2816 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
}
#line 7364 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 379:
#line 2825 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), false, (yylsp[-2]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-2]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7374 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 380:
#line 2831 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This is really just an alternative way to declare a typedef.
  CPPTypedefType *typedef_type = new CPPTypedefType((yyvsp[-1].u.type), (yyvsp[-3].u.identifier), current_scope);
  typedef_type->_using = true;
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-4]));
}
#line 7385 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 381:
#line 2838 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), true, (yylsp[-3]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-3]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7395 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 385:
#line 2853 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_bool);
}
#line 7403 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 386:
#line 2857 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char);
}
#line 7411 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 387:
#line 2861 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_wchar_t);
}
#line 7419 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 388:
#line 2865 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char16_t);
}
#line 7427 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 389:
#line 2869 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char32_t);
}
#line 7435 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 390:
#line 2873 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
#line 7444 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 391:
#line 2878 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
#line 7453 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 392:
#line 2883 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
#line 7462 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 393:
#line 2888 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
#line 7471 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 394:
#line 2893 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int);
}
#line 7479 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 395:
#line 2897 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_short;
}
#line 7488 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 396:
#line 2902 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  if ((yyval.u.simple_type)->_flags & CPPSimpleType::F_long) {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_longlong;
  } else {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_long;
  }
}
#line 7501 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 397:
#line 2911 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_unsigned;
}
#line 7510 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 398:
#line 2916 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_signed;
}
#line 7519 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 399:
#line 2924 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float);
}
#line 7527 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 400:
#line 2928 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double);
}
#line 7535 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 401:
#line 2932 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
#line 7544 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 402:
#line 2940 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_void);
}
#line 7552 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 403:
#line 2949 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_lexer->_resolve_identifiers = false;
}
#line 7560 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 404:
#line 2953 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_lexer->_resolve_identifiers = true;
}
#line 7568 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 512:
#line 2997 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
}
#line 7575 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 536:
#line 3006 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 7583 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 537:
#line 3010 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7591 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 538:
#line 3017 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 7599 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 539:
#line 3021 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7607 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 540:
#line 3028 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7615 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 541:
#line 3032 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(',', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7623 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 542:
#line 3039 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7631 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 543:
#line 3043 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 7639 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 544:
#line 3047 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 7647 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 545:
#line 3051 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 7655 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 546:
#line 3055 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 7663 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 547:
#line 3059 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 7671 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 548:
#line 3063 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 7679 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 549:
#line 3067 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *arg = (yyvsp[-1].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (arg == (CPPDeclaration *)NULL) {
    yyerror("undefined sizeof argument: " + (yyvsp[-1].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));
  } else if (arg->get_subtype() == CPPDeclaration::ST_instance) {
    CPPInstance *inst = arg->as_instance();
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(inst->_type));
  } else {
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(arg->as_type()));
  }
}
#line 7695 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 550:
#line 3079 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 7703 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 551:
#line 3083 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 7711 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 552:
#line 3087 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 7719 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 553:
#line 3091 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 7727 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 554:
#line 3095 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 7735 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 555:
#line 3099 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 7743 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 556:
#line 3103 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 7751 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 557:
#line 3107 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 7759 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 558:
#line 3111 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7767 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 559:
#line 3115 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7775 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 560:
#line 3119 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7783 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 561:
#line 3123 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7791 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 562:
#line 3127 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7799 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 563:
#line 3131 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7807 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 564:
#line 3135 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7815 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 565:
#line 3139 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7823 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 566:
#line 3143 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7831 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 567:
#line 3147 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7839 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 568:
#line 3151 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7847 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 569:
#line 3155 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7855 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 570:
#line 3159 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7863 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 571:
#line 3163 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7871 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 572:
#line 3167 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7879 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 573:
#line 3171 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7887 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 574:
#line 3175 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7895 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 575:
#line 3179 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 7903 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 576:
#line 3183 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 7911 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 577:
#line 3187 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 7919 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 578:
#line 3191 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7927 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 579:
#line 3195 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7935 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 580:
#line 3199 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 7943 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 581:
#line 3207 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7951 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 582:
#line 3211 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 7959 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 583:
#line 3215 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 7967 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 584:
#line 3219 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 7975 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 585:
#line 3223 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 7983 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 586:
#line 3227 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 7991 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 587:
#line 3231 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A constructor call.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  }
  assert(type != NULL);
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8005 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 588:
#line 3241 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Aggregate initialization.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  }
  assert(type != NULL);
  (yyval.u.expr) = new CPPExpression(CPPExpression::aggregate_init_op(type, (yyvsp[-1].u.expr)));
}
#line 8019 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 589:
#line 3251 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8029 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 590:
#line 3257 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8039 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 591:
#line 3263 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_wchar_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8049 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 592:
#line 3269 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char16_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8059 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 593:
#line 3275 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char32_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8069 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 594:
#line 3281 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8079 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 595:
#line 3287 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8090 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 596:
#line 3294 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8101 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 597:
#line 3301 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8112 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 598:
#line 3308 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8123 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 599:
#line 3315 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8133 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 600:
#line 3321 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8143 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 601:
#line 3327 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 8151 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 602:
#line 3331 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *arg = (yyvsp[-1].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (arg == (CPPDeclaration *)NULL) {
    yyerror("undefined sizeof argument: " + (yyvsp[-1].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));
  } else if (arg->get_subtype() == CPPDeclaration::ST_instance) {
    CPPInstance *inst = arg->as_instance();
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(inst->_type));
  } else {
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(arg->as_type()));
  }
}
#line 8167 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 603:
#line 3343 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 8175 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 604:
#line 3347 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 8183 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 605:
#line 3351 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 8191 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 606:
#line 3355 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 8199 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 607:
#line 3359 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 8214 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 608:
#line 3370 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 8229 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 609:
#line 3381 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 8237 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 610:
#line 3385 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 8245 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 611:
#line 3389 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 8253 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 612:
#line 3393 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 8261 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 613:
#line 3397 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 8269 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 614:
#line 3401 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 8277 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 615:
#line 3405 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8285 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 616:
#line 3409 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8293 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 617:
#line 3413 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8301 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 618:
#line 3417 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8309 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 619:
#line 3421 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8317 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 620:
#line 3425 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8325 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 621:
#line 3429 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8333 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 622:
#line 3433 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8341 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 623:
#line 3437 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8349 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 624:
#line 3441 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8357 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 625:
#line 3445 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8365 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 626:
#line 3449 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8373 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 627:
#line 3453 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8381 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 628:
#line 3457 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8389 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 629:
#line 3461 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8397 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 630:
#line 3465 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8405 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 631:
#line 3469 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8413 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 632:
#line 3473 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8421 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 633:
#line 3477 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8429 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 634:
#line 3481 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8437 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 635:
#line 3485 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8445 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 636:
#line 3489 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 8453 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 637:
#line 3493 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8461 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 638:
#line 3497 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8469 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 639:
#line 3501 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 8477 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 640:
#line 3508 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 8485 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 641:
#line 3512 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(true);
}
#line 8493 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 642:
#line 3516 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(false);
}
#line 8501 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 643:
#line 3520 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 8509 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 644:
#line 3524 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 8517 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 645:
#line 3528 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8525 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 646:
#line 3532 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8533 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 647:
#line 3536 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 8541 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 648:
#line 3540 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 8551 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 649:
#line 3546 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 8561 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 650:
#line 3552 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 8569 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 651:
#line 3556 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-6].u.closure_type)->_flags = (yyvsp[-4].u.integer);
  (yyvsp[-6].u.closure_type)->_return_type = (yyvsp[-3].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[-6].u.closure_type)));
}
#line 8579 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 652:
#line 3562 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-9].u.closure_type)->_parameters = (yyvsp[-6].u.param_list);
  (yyvsp[-9].u.closure_type)->_flags = (yyvsp[-4].u.integer);
  (yyvsp[-9].u.closure_type)->_return_type = (yyvsp[-3].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[-9].u.closure_type)));
}
#line 8590 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 653:
#line 3569 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_HAS_VIRTUAL_DESTRUCTOR, (yyvsp[-1].u.type)));
}
#line 8598 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 654:
#line 3573 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ABSTRACT, (yyvsp[-1].u.type)));
}
#line 8606 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 655:
#line 3577 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 8614 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 656:
#line 3581 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[-1].u.type)));
}
#line 8622 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 657:
#line 3585 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[-1].u.type)));
}
#line 8630 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 658:
#line 3589 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 8638 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 659:
#line 3593 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONVERTIBLE_TO, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 8646 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 660:
#line 3597 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_DESTRUCTIBLE, (yyvsp[-1].u.type)));
}
#line 8654 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 661:
#line 3601 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_EMPTY, (yyvsp[-1].u.type)));
}
#line 8662 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 662:
#line 3605 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ENUM, (yyvsp[-1].u.type)));
}
#line 8670 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 663:
#line 3609 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FINAL, (yyvsp[-1].u.type)));
}
#line 8678 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 664:
#line 3613 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FUNDAMENTAL, (yyvsp[-1].u.type)));
}
#line 8686 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 665:
#line 3617 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POD, (yyvsp[-1].u.type)));
}
#line 8694 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 666:
#line 3621 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POLYMORPHIC, (yyvsp[-1].u.type)));
}
#line 8702 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 667:
#line 3625 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_STANDARD_LAYOUT, (yyvsp[-1].u.type)));
}
#line 8710 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 668:
#line 3629 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_TRIVIAL, (yyvsp[-1].u.type)));
}
#line 8718 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 669:
#line 3633 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_UNION, (yyvsp[-1].u.type)));
}
#line 8726 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 670:
#line 3647 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8734 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 671:
#line 3651 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 8742 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 672:
#line 3655 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 8750 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 673:
#line 3659 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 8758 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 674:
#line 3663 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 8766 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 675:
#line 3667 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 8774 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 676:
#line 3671 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 8782 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 677:
#line 3675 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *arg = (yyvsp[-1].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (arg == (CPPDeclaration *)NULL) {
    yyerror("undefined sizeof argument: " + (yyvsp[-1].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));
  } else if (arg->get_subtype() == CPPDeclaration::ST_instance) {
    CPPInstance *inst = arg->as_instance();
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(inst->_type));
  } else {
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(arg->as_type()));
  }
}
#line 8798 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 678:
#line 3687 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 8806 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 679:
#line 3691 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 8814 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 680:
#line 3695 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 8822 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 681:
#line 3699 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 8830 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 682:
#line 3703 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 8845 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 683:
#line 3714 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 8860 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 684:
#line 3725 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 8868 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 685:
#line 3729 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 8876 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 686:
#line 3733 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 8884 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 687:
#line 3737 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 8892 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 688:
#line 3741 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 8900 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 689:
#line 3745 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8908 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 690:
#line 3749 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8916 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 691:
#line 3753 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8924 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 692:
#line 3757 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8932 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 693:
#line 3761 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8940 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 694:
#line 3765 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8948 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 695:
#line 3769 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8956 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 696:
#line 3773 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8964 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 697:
#line 3777 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8972 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 698:
#line 3781 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8980 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 699:
#line 3785 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8988 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 700:
#line 3789 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8996 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 701:
#line 3793 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9004 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 702:
#line 3797 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9012 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 703:
#line 3801 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9020 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 704:
#line 3805 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9028 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 705:
#line 3809 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9036 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 706:
#line 3813 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9044 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 707:
#line 3817 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9052 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 708:
#line 3821 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 9060 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 709:
#line 3825 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 9068 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 710:
#line 3829 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 9076 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 711:
#line 3833 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9084 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 712:
#line 3837 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9092 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 713:
#line 3841 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 9100 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 714:
#line 3848 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 9108 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 715:
#line 3852 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(true);
}
#line 9116 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 716:
#line 3856 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(false);
}
#line 9124 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 717:
#line 3860 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 9132 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 718:
#line 3864 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 9140 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 719:
#line 3868 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9148 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 720:
#line 3872 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9156 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 721:
#line 3876 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 9164 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 722:
#line 3880 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 9174 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 723:
#line 3886 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 9184 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 724:
#line 3892 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 9192 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 725:
#line 3900 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.closure_type) = new CPPClosureType();
}
#line 9200 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 726:
#line 3904 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_value);
}
#line 9208 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 727:
#line 3908 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_reference);
}
#line 9216 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 728:
#line 3912 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.closure_type) = new CPPClosureType();
  (yyvsp[-1].u.capture)->_initializer = (yyvsp[0].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[-1].u.capture));
  delete (yyvsp[-1].u.capture);
}
#line 9227 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 729:
#line 3919 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.closure_type) = (yyvsp[-3].u.closure_type);
  (yyvsp[-1].u.capture)->_initializer = (yyvsp[0].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[-1].u.capture));
  delete (yyvsp[-1].u.capture);
}
#line 9238 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 730:
#line 3929 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
#line 9248 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 731:
#line 3935 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[-1].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
#line 9258 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 732:
#line 3941 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  if ((yyval.u.capture)->_name == "this") {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
  } else {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  }
}
#line 9272 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 733:
#line 3951 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  if ((yyval.u.capture)->_name != "this") {
    yywarning("only capture name 'this' may be preceded by an asterisk", (yylsp[0]));
  }
}
#line 9285 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 734:
#line 3963 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, true);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
  }
  (yyval.u.type) = type;
}
#line 9297 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 735:
#line 3971 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 9305 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 736:
#line 3975 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[-1].u.identifier));
  ctp->_packed = true;
  (yyval.u.type) = CPPType::new_type(ctp);
}
#line 9315 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 737:
#line 4005 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9323 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 738:
#line 4009 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9331 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 739:
#line 4013 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9339 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 740:
#line 4017 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("final", (yylsp[0]));
}
#line 9347 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 741:
#line 4021 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 9355 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 742:
#line 4025 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This is not a keyword in Python, so it is useful to be able to use this
  // in MAKE_PROPERTY definitions, etc.
  (yyval.u.identifier) = new CPPIdentifier("signed", (yylsp[0]));
}
#line 9365 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 743:
#line 4031 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("float", (yylsp[0]));
}
#line 9373 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 744:
#line 4035 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("public", (yylsp[0]));
}
#line 9381 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 745:
#line 4039 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("private", (yylsp[0]));
}
#line 9389 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 746:
#line 4043 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("static", (yylsp[0]));
}
#line 9397 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 747:
#line 4054 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9405 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 748:
#line 4058 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9413 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 749:
#line 4062 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9421 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 750:
#line 4066 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 9429 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 751:
#line 4074 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].str));
}
#line 9437 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 752:
#line 4078 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9445 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 753:
#line 4082 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // The right string takes on the literal type of the left.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  (yyval.u.expr)->_str += (yyvsp[0].str);
}
#line 9455 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 754:
#line 4088 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We have to check that the two literal types match up.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  if ((yyvsp[0].u.expr)->_type != CPPExpression::T_string && (yyvsp[0].u.expr)->_type != (yyvsp[-1].u.expr)->_type) {
    yywarning("cannot concatenate two string literals of different types", (yyloc));
  }
  (yyval.u.expr)->_str += (yyvsp[0].u.expr)->_str;
}
#line 9468 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;


#line 9472 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
