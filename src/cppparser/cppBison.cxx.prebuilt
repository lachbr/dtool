/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 2

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         cppyyparse
#define yylex           cppyylex
#define yyerror         cppyyerror
#define yydebug         cppyydebug
#define yynerrs         cppyynerrs


/* Copy the first part of user declarations.  */
#line 7 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:339  */


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppMakeProperty.h"
#include "cppMakeSeq.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedefType.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = NULL;
CPPScope *global_scope = NULL;
CPPPreprocessor *current_lexer = NULL;

static CPPStructType *current_struct = NULL;
static CPPEnumType *current_enum = NULL;
static int current_storage_class = 0;
static CPPType *current_type = NULL;
static CPPExpression *current_expr = NULL;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static vector<CPPScope *> last_scopes;
static vector<int> last_storage_classes;
static vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg, current_lexer->_last_token_loc);
}

static void
yyerror(YYLTYPE *loc, const string &msg) {
  current_lexer->error(msg, *loc);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;

}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = (CPPExpression *)NULL;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = (CPPType *)NULL;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != NULL) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}


#line 266 "built/tmp/cppBison.yxx.c" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "cppBison.yxx.h".  */
#ifndef YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
# define YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int cppyydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    REAL = 258,
    INTEGER = 259,
    CHAR_TOK = 260,
    SIMPLE_STRING = 261,
    SIMPLE_IDENTIFIER = 262,
    STRING_LITERAL = 263,
    CUSTOM_LITERAL = 264,
    IDENTIFIER = 265,
    TYPENAME_IDENTIFIER = 266,
    SCOPING = 267,
    TYPEDEFNAME = 268,
    ELLIPSIS = 269,
    OROR = 270,
    ANDAND = 271,
    EQCOMPARE = 272,
    NECOMPARE = 273,
    LECOMPARE = 274,
    GECOMPARE = 275,
    LSHIFT = 276,
    RSHIFT = 277,
    POINTSAT_STAR = 278,
    DOT_STAR = 279,
    UNARY = 280,
    UNARY_NOT = 281,
    UNARY_NEGATE = 282,
    UNARY_MINUS = 283,
    UNARY_PLUS = 284,
    UNARY_STAR = 285,
    UNARY_REF = 286,
    POINTSAT = 287,
    SCOPE = 288,
    PLUSPLUS = 289,
    MINUSMINUS = 290,
    TIMESEQUAL = 291,
    DIVIDEEQUAL = 292,
    MODEQUAL = 293,
    PLUSEQUAL = 294,
    MINUSEQUAL = 295,
    OREQUAL = 296,
    ANDEQUAL = 297,
    XOREQUAL = 298,
    LSHIFTEQUAL = 299,
    RSHIFTEQUAL = 300,
    KW_ALIGNAS = 301,
    KW_ALIGNOF = 302,
    KW_AUTO = 303,
    KW_BEGIN_PUBLISH = 304,
    KW_BLOCKING = 305,
    KW_BOOL = 306,
    KW_CATCH = 307,
    KW_CHAR = 308,
    KW_CHAR16_T = 309,
    KW_CHAR32_T = 310,
    KW_CLASS = 311,
    KW_CONST = 312,
    KW_CONSTEXPR = 313,
    KW_CONST_CAST = 314,
    KW_DECLTYPE = 315,
    KW_DEFAULT = 316,
    KW_DELETE = 317,
    KW_DOUBLE = 318,
    KW_DYNAMIC_CAST = 319,
    KW_ELSE = 320,
    KW_END_PUBLISH = 321,
    KW_ENUM = 322,
    KW_EXTENSION = 323,
    KW_EXTERN = 324,
    KW_EXPLICIT = 325,
    KW_PUBLISHED = 326,
    KW_FALSE = 327,
    KW_FINAL = 328,
    KW_FLOAT = 329,
    KW_FRIEND = 330,
    KW_FOR = 331,
    KW_GOTO = 332,
    KW_IF = 333,
    KW_INLINE = 334,
    KW_INT = 335,
    KW_LONG = 336,
    KW_MAKE_PROPERTY = 337,
    KW_MAKE_PROPERTY2 = 338,
    KW_MAKE_SEQ = 339,
    KW_MUTABLE = 340,
    KW_NAMESPACE = 341,
    KW_NEW = 342,
    KW_NOEXCEPT = 343,
    KW_NULLPTR = 344,
    KW_OPERATOR = 345,
    KW_OVERRIDE = 346,
    KW_PRIVATE = 347,
    KW_PROTECTED = 348,
    KW_PUBLIC = 349,
    KW_REGISTER = 350,
    KW_REINTERPRET_CAST = 351,
    KW_RETURN = 352,
    KW_SHORT = 353,
    KW_SIGNED = 354,
    KW_SIZEOF = 355,
    KW_STATIC = 356,
    KW_STATIC_ASSERT = 357,
    KW_STATIC_CAST = 358,
    KW_STRUCT = 359,
    KW_TEMPLATE = 360,
    KW_THREAD_LOCAL = 361,
    KW_THROW = 362,
    KW_TRUE = 363,
    KW_TRY = 364,
    KW_TYPEDEF = 365,
    KW_TYPEID = 366,
    KW_TYPENAME = 367,
    KW_UNION = 368,
    KW_UNSIGNED = 369,
    KW_USING = 370,
    KW_VIRTUAL = 371,
    KW_VOID = 372,
    KW_VOLATILE = 373,
    KW_WCHAR_T = 374,
    KW_WHILE = 375,
    START_CPP = 376,
    START_CONST_EXPR = 377,
    START_TYPE = 378
  };
#endif
/* Tokens.  */
#define REAL 258
#define INTEGER 259
#define CHAR_TOK 260
#define SIMPLE_STRING 261
#define SIMPLE_IDENTIFIER 262
#define STRING_LITERAL 263
#define CUSTOM_LITERAL 264
#define IDENTIFIER 265
#define TYPENAME_IDENTIFIER 266
#define SCOPING 267
#define TYPEDEFNAME 268
#define ELLIPSIS 269
#define OROR 270
#define ANDAND 271
#define EQCOMPARE 272
#define NECOMPARE 273
#define LECOMPARE 274
#define GECOMPARE 275
#define LSHIFT 276
#define RSHIFT 277
#define POINTSAT_STAR 278
#define DOT_STAR 279
#define UNARY 280
#define UNARY_NOT 281
#define UNARY_NEGATE 282
#define UNARY_MINUS 283
#define UNARY_PLUS 284
#define UNARY_STAR 285
#define UNARY_REF 286
#define POINTSAT 287
#define SCOPE 288
#define PLUSPLUS 289
#define MINUSMINUS 290
#define TIMESEQUAL 291
#define DIVIDEEQUAL 292
#define MODEQUAL 293
#define PLUSEQUAL 294
#define MINUSEQUAL 295
#define OREQUAL 296
#define ANDEQUAL 297
#define XOREQUAL 298
#define LSHIFTEQUAL 299
#define RSHIFTEQUAL 300
#define KW_ALIGNAS 301
#define KW_ALIGNOF 302
#define KW_AUTO 303
#define KW_BEGIN_PUBLISH 304
#define KW_BLOCKING 305
#define KW_BOOL 306
#define KW_CATCH 307
#define KW_CHAR 308
#define KW_CHAR16_T 309
#define KW_CHAR32_T 310
#define KW_CLASS 311
#define KW_CONST 312
#define KW_CONSTEXPR 313
#define KW_CONST_CAST 314
#define KW_DECLTYPE 315
#define KW_DEFAULT 316
#define KW_DELETE 317
#define KW_DOUBLE 318
#define KW_DYNAMIC_CAST 319
#define KW_ELSE 320
#define KW_END_PUBLISH 321
#define KW_ENUM 322
#define KW_EXTENSION 323
#define KW_EXTERN 324
#define KW_EXPLICIT 325
#define KW_PUBLISHED 326
#define KW_FALSE 327
#define KW_FINAL 328
#define KW_FLOAT 329
#define KW_FRIEND 330
#define KW_FOR 331
#define KW_GOTO 332
#define KW_IF 333
#define KW_INLINE 334
#define KW_INT 335
#define KW_LONG 336
#define KW_MAKE_PROPERTY 337
#define KW_MAKE_PROPERTY2 338
#define KW_MAKE_SEQ 339
#define KW_MUTABLE 340
#define KW_NAMESPACE 341
#define KW_NEW 342
#define KW_NOEXCEPT 343
#define KW_NULLPTR 344
#define KW_OPERATOR 345
#define KW_OVERRIDE 346
#define KW_PRIVATE 347
#define KW_PROTECTED 348
#define KW_PUBLIC 349
#define KW_REGISTER 350
#define KW_REINTERPRET_CAST 351
#define KW_RETURN 352
#define KW_SHORT 353
#define KW_SIGNED 354
#define KW_SIZEOF 355
#define KW_STATIC 356
#define KW_STATIC_ASSERT 357
#define KW_STATIC_CAST 358
#define KW_STRUCT 359
#define KW_TEMPLATE 360
#define KW_THREAD_LOCAL 361
#define KW_THROW 362
#define KW_TRUE 363
#define KW_TRY 364
#define KW_TYPEDEF 365
#define KW_TYPEID 366
#define KW_TYPENAME 367
#define KW_UNION 368
#define KW_UNSIGNED 369
#define KW_USING 370
#define KW_VIRTUAL 371
#define KW_VOID 372
#define KW_VOLATILE 373
#define KW_WCHAR_T 374
#define KW_WHILE 375
#define START_CPP 376
#define START_CONST_EXPR 377
#define START_TYPE 378

/* Value type.  */

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int cppyyparse (void);

#endif /* !YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 571 "built/tmp/cppBison.yxx.c" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  85
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   5303

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  148
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  109
/* YYNRULES -- Number of rules.  */
#define YYNRULES  675
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  1317

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   378

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   147,     2,     2,     2,   139,   132,     2,
     142,   144,   137,   135,   125,   136,   141,   138,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   127,   126,
     133,   128,   134,   129,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   143,     2,   146,   131,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   124,   130,   145,   140,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   422,   422,   423,   427,   434,   435,   436,   440,   441,
     445,   449,   462,   461,   473,   474,   475,   476,   477,   478,
     479,   480,   493,   502,   506,   514,   518,   522,   533,   554,
     576,   609,   631,   642,   656,   655,   670,   674,   678,   689,
     693,   697,   701,   705,   709,   713,   717,   721,   725,   729,
     733,   741,   742,   746,   747,   751,   755,   764,   772,   784,
     783,   799,   798,   820,   828,   839,   848,   862,   861,   877,
     876,   891,   906,   912,   921,   928,   941,   940,   965,   964,
     992,   991,  1022,  1021,  1040,  1039,  1060,  1059,  1091,  1090,
    1116,  1129,  1133,  1137,  1141,  1145,  1149,  1154,  1158,  1169,
    1173,  1177,  1181,  1185,  1189,  1193,  1197,  1201,  1205,  1209,
    1213,  1217,  1221,  1225,  1229,  1233,  1237,  1241,  1245,  1249,
    1253,  1257,  1261,  1265,  1269,  1273,  1277,  1281,  1285,  1289,
    1293,  1297,  1301,  1305,  1309,  1313,  1317,  1321,  1328,  1329,
    1334,  1333,  1341,  1345,  1346,  1350,  1356,  1365,  1369,  1373,
    1377,  1381,  1387,  1397,  1401,  1406,  1418,  1422,  1436,  1451,
    1456,  1461,  1466,  1471,  1476,  1481,  1486,  1492,  1491,  1513,
    1523,  1533,  1537,  1541,  1550,  1554,  1559,  1563,  1568,  1576,
    1581,  1589,  1593,  1598,  1602,  1607,  1615,  1620,  1628,  1632,
    1639,  1643,  1650,  1654,  1658,  1662,  1666,  1673,  1677,  1681,
    1685,  1689,  1693,  1700,  1701,  1702,  1706,  1709,  1710,  1711,
    1715,  1720,  1726,  1732,  1743,  1747,  1757,  1761,  1765,  1770,
    1775,  1780,  1785,  1790,  1795,  1803,  1807,  1811,  1816,  1821,
    1826,  1831,  1836,  1841,  1846,  1852,  1860,  1864,  1869,  1874,
    1879,  1884,  1889,  1894,  1902,  1906,  1911,  1916,  1921,  1926,
    1931,  1936,  1941,  1947,  1954,  1961,  1971,  1975,  1983,  1987,
    1991,  1995,  1999,  2015,  2031,  2040,  2047,  2051,  2059,  2063,
    2067,  2071,  2075,  2091,  2107,  2125,  2134,  2141,  2145,  2153,
    2157,  2173,  2189,  2198,  2205,  2209,  2217,  2221,  2230,  2229,
    2254,  2253,  2283,  2284,  2291,  2292,  2296,  2297,  2301,  2305,
    2309,  2313,  2317,  2321,  2325,  2329,  2333,  2337,  2344,  2352,
    2356,  2360,  2365,  2373,  2377,  2384,  2385,  2390,  2397,  2398,
    2403,  2411,  2415,  2419,  2426,  2430,  2434,  2442,  2441,  2464,
    2463,  2486,  2487,  2491,  2497,  2504,  2513,  2514,  2515,  2519,
    2523,  2527,  2531,  2535,  2539,  2544,  2549,  2554,  2559,  2563,
    2568,  2577,  2582,  2590,  2594,  2598,  2606,  2616,  2616,  2626,
    2627,  2631,  2632,  2633,  2634,  2635,  2636,  2637,  2638,  2639,
    2640,  2641,  2641,  2641,  2642,  2642,  2642,  2642,  2643,  2643,
    2643,  2643,  2643,  2644,  2644,  2644,  2645,  2645,  2645,  2645,
    2645,  2646,  2646,  2646,  2646,  2646,  2647,  2647,  2647,  2647,
    2647,  2648,  2648,  2648,  2648,  2648,  2649,  2649,  2649,  2649,
    2650,  2650,  2650,  2650,  2650,  2651,  2651,  2651,  2651,  2651,
    2652,  2652,  2652,  2652,  2652,  2652,  2653,  2653,  2653,  2653,
    2653,  2654,  2654,  2654,  2654,  2655,  2655,  2655,  2655,  2656,
    2656,  2656,  2656,  2656,  2657,  2657,  2657,  2658,  2658,  2658,
    2658,  2658,  2659,  2659,  2659,  2659,  2659,  2660,  2660,  2660,
    2660,  2660,  2663,  2663,  2663,  2663,  2663,  2663,  2663,  2663,
    2663,  2663,  2663,  2664,  2664,  2664,  2664,  2664,  2664,  2664,
    2664,  2664,  2664,  2665,  2665,  2669,  2673,  2680,  2684,  2691,
    2695,  2702,  2706,  2710,  2714,  2718,  2722,  2726,  2730,  2734,
    2738,  2742,  2746,  2750,  2754,  2758,  2762,  2766,  2770,  2774,
    2778,  2782,  2786,  2790,  2794,  2798,  2802,  2806,  2810,  2814,
    2818,  2822,  2826,  2830,  2834,  2838,  2842,  2846,  2854,  2858,
    2862,  2866,  2870,  2874,  2878,  2888,  2894,  2900,  2906,  2912,
    2918,  2924,  2931,  2938,  2945,  2952,  2958,  2964,  2968,  2972,
    2976,  2980,  2991,  3002,  3006,  3010,  3014,  3018,  3022,  3026,
    3030,  3034,  3038,  3042,  3046,  3050,  3054,  3058,  3062,  3066,
    3070,  3074,  3078,  3082,  3086,  3090,  3094,  3098,  3102,  3106,
    3110,  3114,  3118,  3122,  3129,  3133,  3137,  3141,  3145,  3149,
    3153,  3157,  3161,  3167,  3173,  3177,  3181,  3195,  3199,  3203,
    3207,  3211,  3215,  3219,  3223,  3227,  3231,  3235,  3246,  3257,
    3261,  3265,  3269,  3273,  3277,  3281,  3285,  3289,  3293,  3297,
    3301,  3305,  3309,  3313,  3317,  3321,  3325,  3329,  3333,  3337,
    3341,  3345,  3349,  3353,  3357,  3361,  3365,  3369,  3373,  3380,
    3384,  3388,  3392,  3396,  3400,  3404,  3408,  3412,  3418,  3424,
    3432,  3433,  3434,  3438,  3439,  3440,  3441,  3445,  3453,  3461,
    3489,  3493,  3497,  3501,  3505,  3511,  3515,  3519,  3530,  3534,
    3538,  3546,  3550,  3554,  3560,  3571
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "REAL", "INTEGER", "CHAR_TOK",
  "SIMPLE_STRING", "SIMPLE_IDENTIFIER", "STRING_LITERAL", "CUSTOM_LITERAL",
  "IDENTIFIER", "TYPENAME_IDENTIFIER", "SCOPING", "TYPEDEFNAME",
  "ELLIPSIS", "OROR", "ANDAND", "EQCOMPARE", "NECOMPARE", "LECOMPARE",
  "GECOMPARE", "LSHIFT", "RSHIFT", "POINTSAT_STAR", "DOT_STAR", "UNARY",
  "UNARY_NOT", "UNARY_NEGATE", "UNARY_MINUS", "UNARY_PLUS", "UNARY_STAR",
  "UNARY_REF", "POINTSAT", "SCOPE", "PLUSPLUS", "MINUSMINUS", "TIMESEQUAL",
  "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL", "MINUSEQUAL", "OREQUAL",
  "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL", "RSHIFTEQUAL", "KW_ALIGNAS",
  "KW_ALIGNOF", "KW_AUTO", "KW_BEGIN_PUBLISH", "KW_BLOCKING", "KW_BOOL",
  "KW_CATCH", "KW_CHAR", "KW_CHAR16_T", "KW_CHAR32_T", "KW_CLASS",
  "KW_CONST", "KW_CONSTEXPR", "KW_CONST_CAST", "KW_DECLTYPE", "KW_DEFAULT",
  "KW_DELETE", "KW_DOUBLE", "KW_DYNAMIC_CAST", "KW_ELSE", "KW_END_PUBLISH",
  "KW_ENUM", "KW_EXTENSION", "KW_EXTERN", "KW_EXPLICIT", "KW_PUBLISHED",
  "KW_FALSE", "KW_FINAL", "KW_FLOAT", "KW_FRIEND", "KW_FOR", "KW_GOTO",
  "KW_IF", "KW_INLINE", "KW_INT", "KW_LONG", "KW_MAKE_PROPERTY",
  "KW_MAKE_PROPERTY2", "KW_MAKE_SEQ", "KW_MUTABLE", "KW_NAMESPACE",
  "KW_NEW", "KW_NOEXCEPT", "KW_NULLPTR", "KW_OPERATOR", "KW_OVERRIDE",
  "KW_PRIVATE", "KW_PROTECTED", "KW_PUBLIC", "KW_REGISTER",
  "KW_REINTERPRET_CAST", "KW_RETURN", "KW_SHORT", "KW_SIGNED", "KW_SIZEOF",
  "KW_STATIC", "KW_STATIC_ASSERT", "KW_STATIC_CAST", "KW_STRUCT",
  "KW_TEMPLATE", "KW_THREAD_LOCAL", "KW_THROW", "KW_TRUE", "KW_TRY",
  "KW_TYPEDEF", "KW_TYPEID", "KW_TYPENAME", "KW_UNION", "KW_UNSIGNED",
  "KW_USING", "KW_VIRTUAL", "KW_VOID", "KW_VOLATILE", "KW_WCHAR_T",
  "KW_WHILE", "START_CPP", "START_CONST_EXPR", "START_TYPE", "'{'", "','",
  "';'", "':'", "'='", "'?'", "'|'", "'^'", "'&'", "'<'", "'>'", "'+'",
  "'-'", "'*'", "'/'", "'%'", "'~'", "'.'", "'('", "'['", "')'", "'}'",
  "']'", "'!'", "$accept", "grammar", "cpp", "constructor_inits",
  "constructor_init", "extern_c", "$@1", "declaration",
  "friend_declaration", "$@2", "storage_class", "attribute_specifiers",
  "attribute_specifier", "type_like_declaration",
  "multiple_var_declaration", "$@3", "$@4",
  "multiple_instance_identifiers", "multiple_const_instance_identifiers",
  "typedef_declaration", "$@5", "$@6", "typedef_instance_identifiers",
  "typedef_const_instance_identifiers", "constructor_prototype", "$@7",
  "$@8", "function_prototype", "$@9", "$@10", "$@11", "$@12", "$@13",
  "function_post", "function_operator", "more_template_declaration",
  "template_declaration", "$@14", "template_formal_parameters",
  "template_nonempty_formal_parameters", "template_formal_parameter",
  "template_formal_parameter_type", "instance_identifier", "$@15",
  "instance_identifier_and_maybe_trailing_return_type",
  "maybe_trailing_return_type", "function_parameter_list",
  "function_parameters", "formal_parameter_list", "formal_parameters",
  "template_parameter_maybe_initialize", "maybe_initialize",
  "maybe_initialize_or_constructor_body",
  "maybe_initialize_or_function_body", "structure_init",
  "structure_init_body", "function_parameter", "formal_parameter",
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier",
  "not_paren_empty_instance_identifier", "empty_instance_identifier",
  "type", "type_decl", "predefined_type", "var_type_decl", "full_type",
  "anonymous_struct", "$@16", "named_struct", "$@17", "maybe_final",
  "maybe_class_derivation", "class_derivation", "base_specification",
  "enum", "enum_decl", "enum_element_type", "enum_body_trailing_comma",
  "enum_body", "enum_keyword", "struct_keyword", "namespace_declaration",
  "$@18", "$@19", "using_declaration", "simple_type", "simple_int_type",
  "simple_float_type", "simple_void_type", "code", "$@20", "code_block",
  "element", "optional_const_expr", "optional_const_expr_comma",
  "const_expr_comma", "no_angle_bracket_const_expr", "const_expr",
  "const_operand", "formal_const_expr", "formal_const_operand",
  "capture_list", "capture", "class_derivation_name", "name",
  "name_no_final", "string_literal", "empty", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   123,    44,    59,    58,    61,    63,
     124,    94,    38,    60,    62,    43,    45,    42,    47,    37,
     126,    46,    40,    91,    41,   125,    93,    33
};
# endif

#define YYPACT_NINF -749

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-749)))

#define YYTABLE_NINF -671

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
      -2,  -749,  2788,  4412,    66,  2980,  -749,  -749,  -749,  -749,
    -749,  -749,  -749,  -749,   -81,   -17,     0,     5,    16,    24,
      37,    53,    73,  -749,  -749,    68,   106,   116,  4611,  -749,
    -749,    82,   126,   157,   162,   174,  -749,   170,   171,   181,
    2788,  2788,  2788,  2788,  2788,  1434,  3192,  2788,  3664,  -749,
     124,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  4633,   182,
    -749,   -30,  -749,  -749,  3317,  1125,  1125,  -749,  1254,  -749,
    1125,  -749,  -749,   235,  -749,  -749,  -749,  -749,   203,    47,
     819,  -749,  -749,  -749,  -749,  -749,  -749,  5160,  5160,  -749,
    5160,   799,  5160,   206,  -749,  5116,   192,   198,   207,  5160,
     998,   228,   239,   246,  5160,  5160,   232,  5130,  5160,  5160,
    1591,  5160,  5160,  -749,   237,  -749,  -749,  -749,  3190,  -749,
    -749,  -749,  -749,  -749,  -749,  2788,  4412,  2788,  2788,  2788,
    2788,  4412,  2788,  4412,  2788,  2788,  2788,  -749,  -749,   244,
    1254,   248,  1254,  1254,  -749,  4412,  2788,  2788,  4412,  4412,
    1434,  2788,  2788,    14,    14,    14,    14,    14,   -81,     0,
       5,    16,    24,    53,    68,   106,  2527,   658,   905,  2775,
     181,   252,   -55,  3664,  -749,  -749,  -749,  -749,  -749,  -749,
    -749,  -749,  -749,  1254,   253,   256,  -749,  -749,    14,  2788,
    2788,  2788,  2788,  2788,  2788,  2788,  2788,  2788,  2788,  2788,
    2788,  2788,  2788,  2788,  2788,  2788,  2788,  2788,  2788,  2788,
    2228,  2788,  -749,  -749,   235,  2788,  -749,  -749,  -749,  1125,
    -749,  -749,  -749,  -749,  -749,   267,   193,   235,   235,   193,
     193,  3979,   272,  -749,   281,  -749,  -749,  -749,  -749,   893,
     301,    12,    17,   111,  -749,  -749,  -749,  5160,  -749,  -749,
    -749,  5160,  -749,  -749,  -749,  5063,  1562,  -749,  1254,  1254,
    1254,  -749,  -749,   321,  -749,  -749,  -749,  -749,  -749,  2788,
    3094,  -749,   316,  -749,  3262,  -749,  1254,   230,  -749,  -749,
    1254,   284,   306,  -749,  4179,   325,  4479,  1254,  -749,  1254,
     328,   285,   342,  -749,  -749,  -749,  -749,   519,   819,  -749,
     327,   347,  -749,   341,   360,   361,   363,   370,   348,   372,
     388,   383,   397,   401,  2788,  -749,  2788,  -749,  -749,   398,
     403,   404,   406,   423,   415,  3388,   431,   432,  2788,  2788,
    -749,  -749,   -19,  3192,  3846,  3866,  1271,  1271,   322,   322,
     338,   338,  -749,  3591,  1139,  3882,  4044,   322,   322,   179,
     179,    14,    14,    14,  -749,  -749,   -43,  1318,  -749,  3406,
     193,   440,   193,   193,   193,   193,   193,   435,  -749,   272,
    -749,   272,  -749,   435,   435,  -749,   193,  4534,  4390,   193,
     193,   447,    55,  -749,   959,  -749,  2788,  1254,   434,  -749,
    -749,  -749,  -749,   893,  -749,   522,  -749,  -749,  -749,   477,
     482,   483,   494,  4685,  -749,  3367,  2887,   362,   484,  4179,
     285,  -749,  -749,   507,  -749,  4412,   488,   510,   495,  -749,
      25,  -749,  -749,  -749,  2788,  4633,   426,  -749,  -749,   496,
    -749,  -749,  1254,    26,  -749,  -749,  -749,  1552,  -749,  -749,
     499,  -749,   512,  -749,  -749,  -749,  -749,  -749,  -749,  -749,
     500,  -749,   501,  -749,  -749,  -749,  3424,   509,   503,  -749,
    -749,  -749,   515,  -749,  -749,  -749,  -749,    14,  3664,  -749,
    4251,   359,  -749,  -749,  2788,  -749,  -749,  -749,   435,   193,
     435,   435,   435,   435,   435,  2788,   -52,  4633,   959,  -749,
     -46,     9,   597,  -749,  4323,   521,   959,   959,   959,   959,
     959,   959,   -88,  -749,  -749,   513,  3664,  -749,   -72,  -749,
     538,  4739,  -749,   536,  -749,  4793,  -749,   654,   655,   656,
    -749,  -749,   381,   548,  -749,  -749,  1254,  2439,  1254,   541,
     552,  -749,   959,  -749,  -749,    25,  -749,  -749,   499,  -749,
     554,   532,  1254,  1994,  4251,   544,   499,  4251,   499,  3442,
     426,   545,   426,   426,   426,   426,   426,    78,  -749,  -749,
    4847,  -749,   539,  -749,   119,  -749,   155,   559,   560,   542,
     562,   564,  2340,  3609,   556,   499,   499,  3093,   499,   499,
     499,   499,  -749,    22,   395,  -749,   893,  2788,  2788,  -749,
    -749,  2788,  2788,   547,  4556,  -749,  -749,  -749,  -749,   553,
     570,  -749,  3664,   435,   550,   555,   959,   -88,   558,   563,
     359,  -749,  -749,   959,   567,   567,   567,   567,   567,   110,
    2788,  2788,  -749,  -749,   600,  -749,  2788,  -749,  2621,   574,
     577,  -749,  -749,  -749,   -39,   581,   615,  4901,    41,  -749,
     617,   959,   619,  4290,  2887,   -35,   499,  -749,   395,  -749,
    5160,  -749,  -749,  -749,  -749,  -749,  -749,  -749,   606,   618,
     620,  -749,  -749,  4611,  -749,  -749,   622,   610,   625,  -749,
     623,  2788,  2788,  2788,  2788,  1434,  2788,   627,    61,  -749,
    -749,  3682,  -749,   124,  -749,   629,   499,   297,   635,  -749,
     395,  -749,   122,   426,   621,   621,   621,   621,   621,  -749,
    2788,  -749,  4251,  -749,  1849,  -749,  -749,  1254,  2788,  2788,
    -749,  -749,  -749,  -749,  -749,  2340,   624,   637,  3664,  -749,
    -749,   499,   132,   132,   756,  -749,  -749,  -749,  -749,  -749,
    -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,
    -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,
    -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,
    -749,   640,   648,  -749,  -749,   132,   132,   132,   382,   763,
    -749,  2788,  -749,  1552,   671,  -749,   538,   -22,    35,    38,
      44,   597,  4611,   235,   277,  -749,  -749,  4251,   -88,  -749,
    4251,  4251,  -749,   567,   639,  3664,   651,  3628,  2194,  2733,
    4057,  1254,   442,  -749,  1254,  -749,  -749,  -749,  2621,  4955,
     788,   673,   792,   793,  -749,   678,  4412,   -35,  4412,  -749,
    -749,  -749,  -749,  2900,  -749,  -749,  -749,   395,   684,  -749,
    -749,  4412,  4412,  4412,   668,  4412,  4412,  4412,  1434,    14,
      14,    14,    14,   667,    50,    14,  -749,  -749,  2111,  2788,
    2788,  2788,  2788,  2788,  2788,  2788,  2788,  2788,  2788,  2788,
    2788,  2788,  2788,  2788,  2788,  2788,  2788,  2788,  2788,  2788,
    2452,  2788,   597,   396,   670,   597,   689,  -749,  -749,   621,
    4251,   669,   675,  -749,  -749,  -749,  -749,  -749,  -749,  -749,
    -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,
    -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,
    -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,
    -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,
    -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,
    -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,
    -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,
    -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,
    -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,
    -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,
    -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,
    -749,  -749,  -749,  -749,  -749,  -749,  -749,  -749,   686,  -749,
     688,   676,   691,  -749,  2564,   132,  -749,  -749,  -749,  -749,
    -749,  1994,   692,  3609,   499,  -749,  -749,  -749,  -749,   359,
     235,  -749,  -749,   690,   696,   698,  -749,   701,   703,  4251,
    -749,  -749,  2397,  -749,  2397,  -749,  2397,  -749,  -749,  2397,
    2397,  2397,  -749,  5009,  -749,  -749,   709,  -749,    87,   712,
    -749,  -749,  -749,  -749,   710,   725,   729,   737,   730,   740,
    2900,  2900,  2900,  2900,  2900,  1434,  2900,  3829,  -749,   750,
    -749,   499,   732,   743,   746,  2788,   748,   739,   751,   742,
    3461,  2788,  -749,  -749,  -749,  3846,  3866,  1271,  1271,   322,
     322,   338,   338,  -749,  3646,  1139,  3882,  4044,   322,   322,
     179,   179,    14,    14,    14,  -749,  -749,   108,  1454,   315,
     745,  -749,   315,   499,  4251,   744,  -749,   597,  1704,  -749,
    -749,  -749,  -749,  2340,  3664,   754,  -749,  -749,   765,  -749,
    -749,  -749,   597,   597,   597,   755,  -749,  -749,  -749,  -749,
    -749,  -749,  -749,   764,   885,   775,   776,  4412,  4412,  4412,
    4412,  4412,  4412,    75,    75,    75,    75,    75,   759,   134,
      75,  2900,  2900,  2900,  2900,  2900,  2900,  2900,  2900,  2900,
    2900,  2900,  2900,  2900,  2900,  2900,  2900,  2900,  2900,  2900,
    2676,  2788,   499,  -749,  -749,   766,   767,   770,   774,  -749,
     778,  -749,  -749,    14,  2788,  -749,  -749,  -749,  4251,  -749,
     777,   597,   315,  -749,   762,   597,  -749,   359,   359,   359,
     597,  -749,   816,  -749,  -749,   801,   815,   828,   831,   832,
     838,  2900,  -749,  1117,  3913,  1290,  1290,  2879,  2879,   461,
     461,  -749,  3811,  2242,  4067,  4083,   486,   486,    75,    75,
      75,  -749,  -749,   146,  2014,  -749,  2788,  2788,  -749,  2788,
    2788,  3664,  4251,   833,   597,   315,  -749,   315,   834,  -749,
    -749,  -749,   315,   968,  -749,   839,   845,   847,  -749,   848,
      75,  2900,  -749,  -749,   161,   164,   166,   175,   849,   597,
     315,  -749,   850,  2788,  2788,  2788,  2788,  3829,  -749,  -749,
    -749,  -749,   597,   359,   870,   184,   204,   213,   216,   359,
    -749,  -749,  -749,  -749,  -749,  -749,  -749
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   675,     0,     0,     0,   675,     5,   588,   584,   587,
     671,   672,   590,   591,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   586,   592,     0,     0,     0,     0,   594,
     593,     0,     0,     0,     0,     0,   585,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   675,     0,     3,   528,
     589,   257,   265,   339,   340,   342,   343,   324,     0,     0,
     354,   321,   353,   348,   345,   344,   347,   325,     0,   326,
     346,   356,   341,   675,     4,   259,   260,   261,     0,   310,
       0,   256,   336,   337,   338,     1,    21,   675,   675,    22,
     675,   675,   675,     0,    34,   675,     0,     0,     0,   675,
       0,     0,     0,     0,   675,   675,     0,   675,   675,   675,
       0,   675,   675,     6,     0,    16,     7,    19,     0,    14,
      55,    15,    17,    18,    36,   675,     0,   675,   675,   675,
     675,     0,   675,     0,   675,   675,   675,   278,   283,     0,
       0,   549,     0,     0,   277,     0,   675,   675,     0,     0,
       0,   675,   675,   558,   556,   555,   557,   554,   257,   339,
     340,   342,   343,   354,   353,   348,   345,   344,   347,   346,
     341,     0,     0,   489,   660,   661,   662,   665,   663,   667,
     666,   664,   654,   653,     0,   651,   656,   650,   553,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   673,   674,   675,     0,   322,   323,   355,   345,
     350,   349,   352,   258,   351,     0,   675,   675,   675,   675,
     675,   675,     0,   286,   244,   675,   668,   669,   670,     0,
     312,   660,   661,   663,   288,   262,   290,   675,    47,    46,
      48,   675,    37,    42,    23,   675,     0,    40,     0,     0,
       0,    45,   675,     0,    26,    25,    24,    43,    39,     0,
       0,   142,     0,    49,     0,    20,     0,     0,    41,    44,
       0,   285,   267,   276,     0,     0,     0,     0,    12,     0,
       0,     0,   284,    59,   269,   270,   271,   310,     0,   266,
       0,   488,   487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   279,   675,   281,   280,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     583,   655,   675,   675,   567,   568,   569,   570,   571,   572,
     575,   576,   582,     0,   564,   565,   566,   573,   574,   562,
     563,   559,   560,   561,   581,   580,     0,     0,   287,     0,
     675,     0,   675,   675,   675,   675,   675,   249,   236,     0,
     245,     0,   246,   248,   247,   175,   675,     0,     0,   675,
     675,     0,   176,   179,   675,   174,   675,   318,     0,   315,
     314,   309,   313,     0,   675,   675,    38,    35,   675,     0,
       0,     0,     0,   675,   327,     0,   675,   285,   267,     0,
       0,   284,    67,     0,   333,     0,     0,    51,    53,    76,
      78,   285,   267,    61,     0,     0,   675,   268,   675,     0,
     357,   192,     0,     0,    57,   357,   197,     0,    58,    56,
       0,   274,   312,   272,   534,   548,   540,   536,   538,   539,
       0,   546,     0,   545,   535,   542,     0,     0,     0,   541,
     544,   547,     0,   551,   552,   543,   537,   529,   490,    92,
     675,   675,    91,   652,     0,   579,   578,   264,   250,   675,
     241,   237,   238,   240,   239,   675,     0,     0,   675,   213,
       0,     0,   675,   178,     0,     0,   675,   675,   675,   675,
     675,   675,   675,   226,   225,     0,   486,   485,   319,   308,
     263,   675,   293,   675,   292,   675,   329,     0,     0,     0,
     331,   675,     0,     0,   154,   155,     0,     0,     0,     0,
     144,   145,   675,   153,   143,     0,    69,    71,     0,   335,
       0,     0,     0,   675,   675,     0,     0,   675,     0,     0,
     675,     0,   675,   675,   675,   675,   675,     0,   217,   216,
     675,    80,     0,   675,     0,     8,     0,     0,     0,     0,
       0,     0,   675,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    60,   675,   675,   156,     0,     0,     0,   282,
     550,     0,     0,     0,     0,    94,    96,    93,    95,     0,
       0,   171,   577,   242,     0,     0,   675,   675,     0,     0,
     675,   177,   180,   675,   231,   227,   228,   230,   229,     0,
       0,   675,   210,   190,   251,   316,     0,   289,     0,     0,
     295,   294,   332,   675,     0,     0,     0,   675,     0,    33,
     147,   675,   149,   675,     0,   675,     0,    68,   675,   334,
     675,    52,   643,   639,   642,   645,   646,   182,     0,     0,
       0,   641,   647,     0,   649,   648,     0,     0,     0,   640,
       0,     0,     0,     0,     0,     0,     0,     0,   183,   214,
     186,   215,   597,   644,   181,     0,     0,     0,     0,    62,
     675,   275,     0,   675,   222,   218,   219,   221,   220,    86,
     675,    13,   675,   193,   358,   359,   357,     0,   675,   675,
     195,   196,   198,   200,   201,   675,     0,   204,   206,   203,
     199,     0,   163,   159,     0,   109,   110,   111,   112,   113,
     114,   117,   118,   133,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   137,   136,   120,   119,
     106,   108,   107,   115,   116,   104,   105,   101,   102,   103,
     100,     0,     0,    99,   157,   160,   162,   161,     0,     0,
     167,   675,   169,     0,     0,    63,   273,     0,     0,     0,
       0,   675,     0,   675,     0,   357,   243,   675,   675,   211,
     675,   675,   252,   232,   235,   191,     0,   320,   667,     0,
     666,     0,     0,   296,     0,   298,   657,   675,     0,   675,
       0,     0,     0,     0,   328,     0,     0,   675,     0,   138,
     141,   139,   146,     0,   151,   188,    70,   675,     0,    72,
      50,     0,     0,     0,   605,     0,     0,     0,     0,   613,
     612,   611,   610,     0,     0,   609,    54,   185,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   675,     0,     0,   675,     0,    65,    88,   223,
     675,     0,     0,   361,   362,   366,   363,   370,   364,   365,
     367,   368,   369,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   436,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   675,   478,   479,   480,   471,   483,
     467,   468,   466,   473,   474,   462,   463,   464,   465,   472,
     470,   477,   475,   481,   476,   482,   469,   360,     0,     9,
       0,     0,     0,   202,   205,   164,   158,   135,   134,   166,
     170,   675,     0,   191,     0,   532,   531,   533,   530,   675,
     675,   172,    97,     0,     0,     0,   212,     0,     0,   675,
     233,   317,     0,   301,     0,   300,     0,   299,   659,     0,
       0,     0,   658,   675,   297,   330,     0,    27,     0,     0,
      32,   148,   152,   150,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   189,   491,     0,
      74,     0,     0,     0,     0,   675,     0,     0,     0,     0,
       0,     0,   638,   184,   187,   622,   623,   624,   625,   626,
     627,   630,   631,   637,     0,   619,   620,   621,   628,   629,
     617,   618,   614,   615,   616,   636,   635,     0,     0,    77,
       0,    82,    79,     0,   675,     0,   224,   675,     0,   194,
      11,    10,   207,   675,   208,     0,   165,    64,     0,   173,
      98,   595,   675,   675,   675,     0,   307,   306,   305,   304,
     303,   302,   291,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   504,   502,   501,   503,   500,     0,     0,
     499,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    73,   604,     0,     0,     0,     0,   603,
       0,   607,   608,   598,     0,   634,   633,    84,   675,    66,
       0,   675,    81,   484,     0,   675,   357,   675,   675,   675,
     675,    28,     0,    29,    31,     0,     0,     0,     0,     0,
       0,     0,   527,   513,   514,   515,   516,   517,   518,   519,
     520,   526,     0,   510,   511,   512,   508,   509,   505,   506,
     507,   525,   524,     0,     0,    75,     0,     0,   606,     0,
       0,   632,   675,     0,   675,    87,   209,   168,     0,   255,
     254,   253,   234,     0,   498,     0,     0,     0,   497,     0,
     492,     0,   523,   522,     0,     0,     0,     0,     0,   675,
      89,   596,     0,     0,     0,     0,     0,   521,   601,   600,
     602,   599,   675,   675,     0,     0,     0,     0,     0,   675,
      83,    30,   495,   494,   496,   493,    85
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -749,  -749,  -226,  -749,   292,  -749,  -749,   747,  -749,  -749,
     -28,   459,  -749,  -106,  -749,  -749,  -749,   -11,  -113,  -749,
    -749,  -749,   -67,  -177,  -749,  -749,  -749,   749,  -749,  -749,
    -749,  -749,  -749,  -383,  -749,  -749,   374,  -749,  -749,  -749,
     377,   491,  -339,  -749,  -509,  -567,  -445,  -749,     1,  -749,
     208,  -542,  -749,  -376,  -702,  -749,  -354,   178,  -438,   172,
      54,  -195,   -41,   -77,  -550,  -206,    28,  -103,  -749,   -83,
    -749,  -749,  -749,  -749,   219,   -70,  -749,  -362,  -749,  -749,
      -8,    -7,  -749,  -749,  -749,  -749,   -14,    30,  -749,  -749,
    -433,  -749,    46,  -749,  -478,  -124,   -27,  -119,   526,  -249,
    -749,  -749,   700,  -749,  -748,   708,   817,  -513,    -1
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     4,     5,   564,   565,   115,   428,   116,   117,   255,
     118,   416,   417,   119,   120,   440,   548,   582,   689,   275,
     538,   646,   647,   826,   290,   544,   547,   291,   702,  1208,
    1262,   880,  1124,   471,   764,   820,   121,   272,   529,   530,
     531,   532,   583,  1021,   584,   600,   381,   382,   677,   678,
     824,   622,   434,   438,   716,   717,   383,   680,   557,   502,
     232,   233,    73,   411,   141,   293,    74,    75,   394,    76,
     395,   513,   629,   630,   803,    77,    78,   391,   387,   388,
      79,    80,   122,   521,   633,   123,    81,    82,    83,    84,
     562,   563,   704,  1007,   505,   300,   301,  1077,   173,    49,
     681,   682,   184,   185,   805,   806,   585,    50,   124
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
       6,   271,   569,   304,   305,   306,   307,   604,   309,   638,
     311,   312,   313,  1012,   144,   294,   772,   214,   172,   358,
     142,   143,   320,   321,   489,   593,   216,   326,   327,   648,
     683,   510,   370,   372,   537,   295,   403,   545,   469,   690,
     620,   292,   774,   792,   783,   187,   197,   212,   296,   213,
    1043,  1045,  1047,   625,   594,   621,   626,   236,   237,   248,
     249,   125,   250,   252,   253,   789,    85,   257,   412,   493,
     329,   261,   234,   171,   217,   847,   267,   268,   423,   270,
     273,   274,   329,   278,   279,  -668,   810,   567,   568,   330,
    -669,   485,   605,   823,   220,   221,   222,   485,   608,   685,
     224,   475,   688,   329,   299,   811,   828,  1179,   621,   610,
     297,   298,   692,   834,   694,   695,   696,   697,   698,     1,
       2,     3,  1025,   470,   302,   126,   302,   302,   302,   302,
     212,   302,   213,   302,   302,   302,  -668,   827,   238,  -668,
     612,  -669,   127,   796,  -669,   302,   302,   128,   876,   769,
     302,   302,   485,   609,   303,   209,   210,   211,   129,   308,
     329,   310,   546,   329,   770,   771,   130,   294,   511,   329,
     131,   294,   515,   319,   239,   329,   322,   323,   324,  1026,
     494,   294,  1027,   356,  -670,   815,   848,   295,  1028,   679,
     384,   295,   457,   292,  1092,   132,   220,   221,   222,   224,
     296,   295,   560,   536,   296,   361,   133,   687,   775,   362,
     134,   197,  1154,   234,   296,   145,  1189,  1190,  1191,   257,
     699,   700,   881,   396,   776,   368,   234,   234,   368,   368,
     385,  1155,  1030,   329,   389,  -670,   722,   723,  -670,   765,
     766,   767,   768,   706,   707,   426,  1036,   225,   135,   220,
     363,   226,  1205,   621,   794,   879,   299,   882,   136,   329,
     299,     6,   297,   298,   878,   700,   297,   298,   146,   392,
     299,   329,   829,  1008,   770,   771,   297,   298,  1232,   708,
     367,   369,   371,   373,   374,  1079,   329,   174,   175,   329,
    1282,   329,   227,  1022,  1146,   637,  1147,   709,  1148,   147,
     329,  1149,  1150,  1151,   148,  1298,   294,   149,  1299,   329,
    1300,   364,   150,   151,   877,   302,   206,   207,   208,  1301,
     209,   210,   211,   152,   215,   365,   295,   235,  1312,   329,
     366,   472,   187,   254,   258,   683,   488,   384,   329,   296,
     259,   329,  1035,   195,   196,  1037,  1038,   873,  1313,   260,
     176,   177,  1034,   228,   197,   264,   414,  1314,   415,   368,
    1315,   368,   368,   368,   368,   368,   265,   229,   178,   179,
     197,   180,   230,   266,   269,   368,   181,   231,   368,   368,
     280,   333,  1015,   504,   550,   507,   314,    10,   595,    11,
     316,   594,   533,     6,   514,   299,   328,     6,  1029,   332,
     596,   297,   298,   597,   360,   534,   598,   809,   -90,   435,
     -90,   436,   -90,   437,   478,   386,   480,   481,   482,   483,
     484,  1032,   599,   392,  -236,   559,   419,     6,   393,   384,
     486,  1214,   595,   490,   491,  1125,   236,   237,   551,   770,
     771,   874,   552,   540,   596,   404,   606,   597,   420,   406,
     598,  1080,   430,   384,   431,   432,   433,   204,   205,   206,
     207,   208,  1138,   209,   210,   211,   599,   424,   439,   385,
     601,   444,   329,   204,   205,   206,   207,   208,   368,   209,
     210,   211,   450,   553,   507,   445,   -90,   504,   -90,  1119,
     -90,   472,  1122,  1179,   679,   504,   504,   504,   504,   504,
     504,   623,   384,   384,   446,   447,   384,   448,   683,   236,
     237,   574,   631,   533,   449,   575,   451,   238,  1179,   435,
       6,   436,   452,   773,   770,   771,  1019,   453,    48,   241,
     242,   504,   458,   603,  1049,  1050,  1051,   819,   770,   771,
    1120,   454,   684,   385,   554,   455,   385,   459,   460,   559,
     461,   559,   559,   559,   559,   559,   576,   462,   555,   463,
     777,   778,   705,   556,   779,   780,   153,   154,   155,   156,
     157,   719,   648,   188,  1078,   465,   466,   479,   485,   509,
     144,  1053,   601,   623,  1010,  1011,   142,   143,  1031,   577,
     238,   492,   176,   177,  1145,   512,  1184,  1185,  1186,  1187,
    1188,   516,  1189,  1190,  1191,   504,   623,   517,   518,   601,
     243,   179,   504,   180,   690,   270,   392,   578,   181,   519,
     507,   804,   830,  1186,  1187,  1188,   535,  1189,  1190,  1191,
     533,   579,     6,   539,   541,   542,   580,   543,   561,   586,
     504,   581,   587,   588,   825,   591,   239,   623,   844,   144,
    1269,  1270,  1271,   590,   469,   142,   143,   592,   613,   624,
     607,   384,  -311,   628,   634,   635,   636,   679,   614,   615,
     616,   617,   618,   619,   639,   643,   325,   644,   650,  1210,
     649,   686,   693,   827,   703,   710,   711,   712,   713,   623,
     714,   781,   559,   721,   785,   784,   786,   787,   807,   507,
     790,   385,   808,   843,   645,   791,   812,   302,   302,    53,
     621,    54,    55,    56,   719,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,  1310,   357,    63,   219,
     813,   359,  1316,  -243,  1212,   816,   384,   818,   831,   384,
     384,   832,   836,   833,   186,   835,    65,    66,   837,  1217,
    1218,  1219,  1014,  1263,   700,   838,  1016,  1020,   144,  1013,
     507,   846,    70,   872,   142,   143,   223,    72,   788,   875,
     472,  1039,   234,  1268,  1017,   793,   385,   623,   245,   385,
     385,   804,   804,   804,  1018,   405,  1024,  1040,  1056,  1057,
     146,   804,  1058,  1059,  1060,   251,     6,   384,   263,  1081,
    1085,  1091,  1121,   817,  1123,  1126,   825,  1288,   277,  1127,
    1131,  1078,  1078,  1078,  1078,  1078,   623,  1078,  1265,   241,
     242,  1129,  1267,  1130,  1140,  1139,  1132,  1272,  1136,   384,
     456,  1141,  1142,  1117,  1061,  1143,  1063,  1144,   315,    87,
     317,   318,  1157,  1153,   467,   468,  1156,    88,  1158,  1082,
    1083,  1084,  1159,  1086,  1087,  1088,  1089,    90,    91,    92,
    1160,   472,  1161,  1162,   472,  1192,  1194,  1195,   247,   385,
    1196,  1290,  1198,  1199,    99,  1200,  1201,  1207,  1211,  1216,
    1221,   331,   176,   177,   104,  1222,   240,   246,  1215,  1220,
     105,  1223,  1224,  1231,   390,   108,  1303,  1266,  1256,  1257,
     243,   179,   506,   180,  1258,   111,  1259,   112,   181,  1309,
    1260,  1264,  1078,  1078,  1078,  1078,  1078,  1078,  1078,  1078,
    1078,  1078,  1078,  1078,  1078,  1078,  1078,  1078,  1078,  1078,
    1078,  1273,   114,   244,    53,  1274,    54,    55,    56,  1275,
     549,  1163,  1164,  1165,  1166,  1167,    53,  1170,    54,    55,
      56,  1197,  1276,   573,   399,  1277,   400,   401,   402,   236,
     237,   495,  1279,    63,   219,   496,  1278,  1289,  1292,  1291,
     384,  1293,  1078,   705,   413,    63,   219,  1294,   418,  1295,
    1296,    65,    66,  1302,  1304,   427,  1311,   429,   384,  1009,
     602,   651,   397,    65,    66,   441,   443,    70,   174,   175,
    1209,   506,    72,  1137,  1193,  1255,   497,   821,   641,    70,
     684,   822,  1135,   410,    72,  1062,  1094,  1054,   601,   234,
    1128,     0,  1078,   473,     0,   804,     0,   804,   385,   804,
       0,   186,   804,   804,   804,     0,     0,   147,  1169,     0,
     238,     0,  1233,  1234,  1235,  1236,  1237,  1238,  1239,  1240,
    1241,  1242,  1243,  1244,  1245,  1246,  1247,  1248,  1249,  1250,
    1251,   176,   177,     0,     0,     0,     0,   498,     0,     0,
       0,     0,     0,   384,   302,     0,     0,     0,     0,   178,
     179,   499,   180,     0,     0,   508,   500,   181,   718,     0,
       0,   501,     0,  1168,     0,     0,     0,     0,     0,     0,
       0,     0,  1280,     0,   442,   246,     0,     0,     0,     0,
       0,     0,   262,   385,     0,     0,   472,     0,     0,     0,
       0,     0,   719,  1172,  1173,  1174,  1175,  1176,  1177,  1178,
     566,   472,   472,   472,     0,     0,   795,   506,     0,  1179,
       0,     0,   797,     0,     0,     0,   191,   192,   193,   194,
     195,   196,  1297,  1253,     0,     0,     0,   384,     0,     0,
       0,   197,     0,     0,     0,     0,    53,     0,    54,    55,
      56,     0,     0,     0,     0,  1225,  1226,  1227,  1228,  1229,
    1230,     0,     0,     0,     0,     0,     0,   839,   840,   841,
     842,   503,   845,     0,     0,    63,   219,   385,     0,     0,
     472,     0,     0,     0,   472,     0,   601,   601,   601,   472,
       0,   384,     0,    65,    66,     0,   506,     0,     0,  1284,
    1285,     0,  1286,  1287,   640,     0,   642,     0,     0,    70,
       0,   718,     0,   558,    72,     0,     0,  1181,  1182,  1183,
     418,     0,  1184,  1185,  1186,  1187,  1188,     0,  1189,  1190,
    1191,   385,     0,   472,   174,   175,  1305,  1306,  1307,  1308,
     200,   201,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,     0,     0,     0,     0,     0,   472,     0,
     193,   194,   195,   196,     0,     0,     0,   506,     0,  1023,
       0,   472,   601,   197,     0,   503,     0,     0,   601,  1175,
    1176,  1177,  1178,   503,   503,   503,   503,   503,   503,     0,
       0,     0,  1179,     0,     0,     0,     0,   176,   177,     0,
       0,     0,     0,   189,   190,   191,   192,   193,   194,   195,
     196,     0,     0,     0,     0,   178,   179,     0,   180,   503,
     197,     0,     0,   181,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1090,     0,     0,   558,     0,   558,
     558,   558,   558,   558,     0,  1095,  1096,  1097,  1098,  1099,
    1100,  1101,  1102,  1103,  1104,  1105,  1106,  1107,  1108,  1109,
    1110,  1111,  1112,  1113,  1114,  1115,     0,  1118,     0,     0,
       0,     0,     0,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,   566,     0,     0,     0,     0,
       0,     0,     0,   503,     0,  1184,  1185,  1186,  1187,  1188,
     503,  1189,  1190,  1191,     0,     0,     0,     7,     8,     9,
      10,     0,    11,    12,    13,   158,     0,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   503,   209,
     210,   211,     0,     0,   476,     0,     0,     0,     0,   189,
     190,   191,   192,   193,   194,   195,   196,     0,     0,     0,
       0,    15,    52,     0,     0,   159,   197,   160,   161,   162,
      57,    58,  1033,    20,    59,     0,     0,   163,    22,     0,
       0,    61,     0,     0,     0,     0,    23,    24,   164,  1048,
     558,     0,  1052,     0,   165,   166,     0,     0,     0,     0,
       0,    28,     0,    29,     0,    30,     0,     0,     0,     0,
      31,     0,   167,   168,    34,     0,     0,    35,    67,     0,
    1134,     0,    36,     0,     0,    37,    68,    69,   169,     0,
       0,    71,     0,   170,     0,     7,     8,     9,    10,     0,
      11,    12,    13,    14,     0,     0,    40,     0,     0,    41,
      42,    43,   174,   175,    44,     0,    45,    46,     0,     0,
       0,    47,     0,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,     0,    15,
    1206,   174,   175,    16,     0,    17,    18,    19,     0,     0,
       0,    20,     0,   570,   571,    21,    22,  1203,     0,     0,
       0,     0,     0,     0,    23,    24,    25,     0,     0,     0,
       0,     0,    26,    27,     0,   176,   177,     0,     0,    28,
       0,    29,     0,    30,     0,     0,     0,     0,    31,     0,
      32,    33,    34,   178,   179,    35,   180,     0,     0,   718,
      36,   181,     0,    37,   176,   177,    38,     0,     0,     0,
       0,    39,     0,     0,     0,     0,   572,   276,     0,     0,
       0,     0,   178,   179,    40,   180,   398,    41,    42,    43,
     181,     0,    44,     0,    45,    46,     0,     0,     0,    47,
       0,     0,     0,     0,     0,     0,     0,   883,   884,   885,
     886,   887,   888,   889,   890,   891,   892,  1254,   893,   894,
     895,   896,   897,   898,   899,   900,   901,   902,   903,     0,
    1261,     0,     0,     0,     0,     0,   904,   905,   906,   907,
     908,   909,   910,   911,   912,   913,   914,   915,   916,   917,
     918,   919,   920,     0,     0,   921,   922,   923,   924,   925,
     926,   927,   928,   929,   930,   931,   932,   933,   934,   935,
       0,   936,     0,   937,   938,   939,   940,   941,   942,   943,
     944,   945,   946,   947,   948,   949,     0,     0,     0,   950,
     951,   952,     0,   953,   954,   955,   956,   957,   958,   959,
     960,   961,   962,   963,   964,   965,   966,   967,   968,     0,
     969,   970,   971,   972,   973,   974,   975,   976,   977,   978,
     979,   980,   981,   982,   983,     0,     0,     0,   984,   985,
     986,   987,   988,   989,   990,   991,   992,   993,   994,   995,
     996,   997,   998,   999,  1000,  1001,  1002,  1003,  1004,  1213,
    1005,  1006,   883,   884,   885,   886,   887,   888,   889,   890,
     891,   892,     0,   893,   894,   895,   896,   897,   898,   899,
     900,   901,   902,   903,     0,     0,     0,     0,     0,     0,
       0,   904,   905,   906,   907,   908,   909,   910,   911,   912,
     913,   914,   915,   916,   917,   918,   919,   920,     0,     0,
     921,   922,   923,   924,   925,   926,   927,   928,   929,   930,
     931,   932,   933,   934,   935,     0,   936,     0,   937,   938,
     939,   940,   941,   942,   943,   944,   945,   946,   947,   948,
     949,     0,     0,     0,   950,   951,   952,     0,   953,   954,
     955,   956,   957,   958,   959,   960,   961,   962,   963,   964,
     965,   966,   967,   968,     0,   969,   970,   971,   972,   973,
     974,   975,   976,   977,   978,   979,   980,   981,   982,   983,
       0,     0,     0,   984,   985,   986,   987,   988,   989,   990,
     991,   992,   993,   994,   995,   996,   997,   998,   999,  1000,
    1001,  1002,  1003,  1004,     0,  1005,  1006,   652,   653,   654,
      10,     0,    11,   655,   656,    51,     0,     0,   657,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   189,
     190,   191,   192,   193,   194,   195,   196,     0,     0,     0,
       0,   658,    52,     0,     0,    53,   197,    54,    55,    56,
      57,   377,     0,   659,    59,     0,     0,    60,   660,     0,
       0,    61,     0,     0,     0,     0,   661,   662,    62,     0,
       0,     0,     0,     0,    63,    64,     0,     0,     0,     0,
       0,   663,     0,   664,     0,   665,     0,     0,     0,   378,
     666,     0,    65,    66,   667,     0,     0,   668,    67,     0,
       0,     0,   669,     0,     0,   670,    68,    69,    70,     0,
       0,    71,     0,    72,   652,   653,   654,    10,     0,    11,
     655,   656,    51,     0,     0,  1093,   671,     0,     0,   672,
     673,     0,     0,     0,   674,     0,   675,     0,     0,     0,
       0,   676,     0,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,   658,    52,
    1283,     0,    53,     0,    54,    55,    56,    57,   377,     0,
     659,    59,     0,     0,    60,   660,     0,     0,    61,     0,
       0,     0,     0,   661,   662,    62,     0,     0,     0,     0,
       0,    63,    64,     0,     0,     0,     0,     0,   663,     0,
     664,     0,   665,     0,   174,   175,   378,   666,     0,    65,
      66,   667,     0,     0,   668,    67,     0,     0,     0,   669,
       0,     0,   670,    68,    69,    70,     0,     0,    71,     0,
      72,     7,     8,     9,    10,     0,    11,    12,    13,    14,
       0,     0,     0,   671,     0,     0,   672,   673,     0,     0,
      57,   674,     0,   675,     0,     0,     0,     0,   676,  1173,
    1174,  1175,  1176,  1177,  1178,     0,     0,   176,   177,     0,
       0,     0,     0,     0,  1179,    15,     0,     0,     0,    16,
       0,    17,    18,    19,     0,   178,   179,    20,   180,     0,
       0,    21,    22,   181,     0,     0,     0,     0,    67,     0,
      23,    24,    25,     0,     0,     0,   801,    69,    26,    27,
    1042,     0,     0,     0,     0,    28,     0,    29,     0,    30,
       0,     0,     0,     0,    31,     0,    32,    33,    34,     0,
       0,    35,     0,     0,     0,     0,    36,     0,     0,    37,
       0,     0,    38,     7,     8,     9,    10,    39,    11,    12,
      13,    14,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,    41,    42,    43,     0,     0,    44,     0,
      45,    46,   355,  1182,  1183,    47,     0,  1184,  1185,  1186,
    1187,  1188,     0,  1189,  1190,  1191,     0,    15,     0,     0,
       0,    16,     0,    17,    18,    19,     0,     0,     0,    20,
       0,     0,     0,    21,    22,     0,     0,   174,   175,     0,
       0,     0,    23,    24,    25,     0,     0,     0,     0,     0,
      26,    27,     0,     0,     0,     0,     0,    28,     0,    29,
       0,    30,     0,     0,     0,     0,    31,     0,    32,    33,
      34,     0,     0,    35,     0,     0,     0,     0,    36,   524,
     525,    37,     0,    57,    38,     7,     8,     9,    10,    39,
      11,    12,    13,    14,   715,     0,     0,     0,     0,     0,
     176,   177,    40,     0,     0,    41,    42,    43,     0,     0,
      44,     0,    45,    46,     0,     0,     0,    47,   178,   179,
      53,   180,    54,    55,    56,     0,   181,     0,     0,    15,
       0,    67,    60,    16,     0,    17,    18,    19,     0,   801,
      69,    20,     0,    62,     0,    21,    22,     0,     0,    63,
      64,     0,     0,     0,    23,    24,    25,     0,     0,     0,
       0,     0,    26,    27,     0,     0,     0,    65,    66,    28,
       0,    29,     0,    30,     0,     0,     0,     0,    31,     0,
      32,    33,    34,    70,     0,    35,    71,     0,    72,     0,
      36,     0,     0,    37,     0,     0,    38,     7,     8,     9,
      10,    39,    11,    12,    13,    14,     0,     0,    53,     0,
      54,    55,    56,     0,    40,     0,     0,    41,    42,    43,
     218,     0,    44,     0,    45,    46,  1116,     0,     0,    47,
       0,     0,     0,     0,     0,     0,     0,    63,   219,     0,
       0,    15,     0,     0,     0,    16,     0,    17,    18,    19,
       0,     0,     0,    20,     0,    65,    66,    21,    22,     0,
       0,   174,   175,     0,     0,     0,    23,    24,    25,     0,
       0,    70,     0,     0,    26,    27,    72,     0,     0,     0,
       0,    28,     0,    29,     0,    30,     0,     0,     0,     0,
      31,     0,    32,    33,    34,     0,     0,    35,     0,   136,
       0,     0,    36,     0,     0,    37,     0,    57,    38,     7,
       8,     9,    10,    39,    11,    12,    13,    14,  1133,     0,
       0,     0,     0,     0,   176,   177,    40,     0,     0,    41,
      42,    43,     0,     0,    44,     0,    45,    46,     0,     0,
       0,    47,   178,   798,   799,   800,     0,     0,     0,     0,
     181,     0,     0,    15,     0,    67,     0,    16,     0,    17,
      18,    19,     0,   801,    69,    20,     0,   802,     0,    21,
      22,     0,     0,   174,   175,     0,     0,     0,    23,    24,
      25,     0,     0,     0,     0,     0,    26,    27,     0,     0,
       0,     0,     0,    28,     0,    29,     0,    30,     0,     0,
       0,     0,    31,     0,    32,    33,    34,     0,     0,    35,
       0,     0,     0,     0,    36,     0,     0,    37,     0,    57,
      38,     7,     8,     9,    10,    39,    11,    12,    13,    14,
       0,     0,     0,     0,     0,     0,   176,   177,    40,     0,
       0,    41,    42,    43,     0,     0,    44,     0,    45,    46,
    1252,     0,     0,    47,   178,   179,    53,   180,    54,    55,
      56,     0,   181,     0,     0,    15,     0,    67,     0,    16,
       0,    17,    18,    19,     0,   801,    69,    20,     0,  1044,
       0,    21,    22,     0,     0,    63,   219,     0,     0,     0,
      23,    24,    25,     0,     0,     0,     0,     0,    26,    27,
       0,     0,     0,    65,    66,    28,     0,    29,     0,    30,
       0,     0,     0,     0,    31,     0,    32,    33,    34,    70,
       0,    35,     0,     0,    72,     0,    36,   524,   525,    37,
    1177,  1178,    38,     7,     8,     9,    10,    39,    11,    12,
      13,  1179,     0,     0,     0,     0,     0,   151,     0,     0,
      40,     0,     0,    41,    42,    43,     0,     0,    44,     0,
      45,    46,     0,     0,     0,    47,     0,     0,    53,     0,
      54,    55,    56,   526,   527,     0,     0,  1064,     0,     0,
      60,     0,     0,     0,     0,     0,     0,     0,     0,  1065,
       0,    62,     0,     0,  1066,     0,     0,    63,    64,     0,
       0,     0,    23,    24,     0,     0,     0,     0,     0,     0,
      -2,     0,     0,     0,     0,    65,    66,     0,     0,    29,
       0,    30,     0,     0,     0,     0,  1067,     0,     0,   528,
    1068,    70,     0,  1069,    71,     0,    72,     0,    36,     0,
       0,     0,     0,     0,  1184,  1185,  1186,  1187,  1188,     0,
    1189,  1190,  1191,     0,     0,     0,     0,     0,     0,    86,
      87,     0,  1070,     0,     0,  1071,  1072,  1073,    88,     0,
    1074,     0,  1075,    46,     0,     0,    89,  1076,    90,    91,
      92,    93,     0,     0,     0,    94,     0,     0,     0,    95,
       0,     0,    96,    97,    98,    99,   100,     0,     0,     0,
       0,     0,   101,   102,   103,   104,     0,     0,     0,     0,
       0,   105,   106,     0,     0,   107,   108,     0,     0,     0,
     109,     0,     0,     0,     0,   110,   111,     0,   112,   724,
       0,     0,     0,     0,   281,   282,   113,     0,   725,   726,
     727,   728,   729,   730,   731,   732,     0,     0,     0,     0,
       0,     0,     0,   114,     0,   733,     0,   734,   735,   736,
     737,   738,   739,   740,   741,   742,   743,   744,   745,     0,
       0,     0,   283,     0,     0,    53,     0,    54,    55,    56,
      57,   284,     0,     0,   285,   746,     0,    60,     0,     0,
       0,    61,     0,     0,     0,     0,     0,     0,    62,     0,
       0,     0,     0,     0,    63,    64,     0,     0,     0,     0,
     747,     0,     0,     0,   286,     0,     0,     0,     0,     0,
       0,     0,    65,    66,     0,     0,     0,     0,    67,     0,
     281,   282,   174,   175,     0,     0,   287,    69,    70,     0,
       0,    71,     0,    72,     0,     0,     0,     0,   748,     0,
       0,   749,     0,   750,   751,   752,   753,   754,   755,   756,
     757,   758,   759,   760,   289,   761,   762,     0,   283,     0,
     763,    53,     0,    54,    55,    56,    57,   284,     0,     0,
     285,     0,     0,    60,     0,     0,     0,    61,     0,     0,
       0,     0,     0,     0,    62,   176,   177,     0,     0,     0,
      63,    64,   407,   408,     0,     0,     0,     0,     0,     0,
     286,     0,     0,   178,   179,     0,   180,     0,    65,    66,
       0,   181,     0,     0,    67,     0,     0,     0,     0,     0,
       0,     0,   287,    69,    70,     0,     0,    71,     0,    72,
     283,     0,     0,    53,   288,    54,    55,    56,    57,   409,
     182,     0,   285,     0,   183,    60,     0,     0,     0,    61,
     289,     0,     0,     0,     0,     0,    62,     0,     0,     0,
       0,     0,    63,    64,     0,     0,     0,     0,     0,     0,
       0,     0,   286,     0,     0,     0,     0,     0,     0,     0,
      65,    66,     0,     0,     0,     0,    67,     0,    53,     0,
      54,    55,    56,     0,   287,    69,    70,     0,     0,    71,
     218,    72,   189,   190,   191,   192,   193,   194,   195,   196,
       0,     0,     0,     0,     0,     0,     0,    63,   219,   197,
       0,     0,   289,   189,   190,   191,   192,   193,   194,   195,
     196,     0,     0,     0,     0,    65,    66,     0,     0,     0,
     197,   189,   190,   191,   192,   193,   194,   195,   196,     0,
       0,    70,     0,     0,     0,     0,    72,     0,   197,   189,
     190,   191,   192,   193,   194,   195,   196,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   197,   189,   190,   191,
     192,   193,   194,   195,   196,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   197,     0,   189,   190,   191,   192,
     193,   194,   195,   196,     0,     0,     0,     0,     0,     0,
       0,     0,   522,   197,     0,     0,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   523,     0,     0,     0,     0,     0,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,   464,     0,     0,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
     477,     0,     0,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,   589,     0,
       0,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   691,     0,     0,     0,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,  1202,   189,   190,   191,   192,
     193,   194,   195,   196,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   197,   189,   190,   191,   192,   193,   194,
     195,   196,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   197,     0,   189,   190,   191,   192,   193,   194,   195,
     196,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     197,   189,   190,   191,   192,   193,   194,   195,   196,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   197,   189,
     190,   191,   192,   193,   194,   195,   196,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   197,   849,   850,   851,
     852,   853,   854,   855,   856,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   857,     0,     0,     0,   474,     0,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,   720,     0,     0,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,  1041,     0,     0,     0,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,     0,  1204,     0,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
       0,     0,     0,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,     0,     0,
       0,   858,   859,   860,   861,   862,   863,   864,   865,   866,
     867,   868,     0,   869,   870,   871,  1171,  1172,  1173,  1174,
    1175,  1176,  1177,  1178,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1179,  1171,  1172,  1173,  1174,  1175,  1176,
    1177,  1178,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1179,   190,   191,   192,   193,   194,   195,   196,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   197,     0,
       0,     0,     0,   191,   192,   193,   194,   195,   196,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   197,   191,
     192,   193,   194,   195,   196,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   197,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1173,  1174,  1175,  1176,  1177,  1178,     0,     0,  1281,     0,
    1180,  1181,  1182,  1183,     0,  1179,  1184,  1185,  1186,  1187,
    1188,     0,  1189,  1190,  1191,     0,     0,     0,  1180,  1181,
    1182,  1183,     0,     0,  1184,  1185,  1186,  1187,  1188,     0,
    1189,  1190,  1191,     0,     0,     0,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
      51,     0,     0,   375,     0,   376,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
       0,     0,     0,     0,   201,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,     0,    52,     0,     0,
      53,     0,    54,    55,    56,    57,   377,     0,     0,    59,
       0,     0,    60,  1181,  1182,  1183,    61,     0,  1184,  1185,
    1186,  1187,  1188,    62,  1189,  1190,  1191,     0,     0,    63,
      64,   191,   192,   193,   194,   195,   196,   174,   175,     0,
       0,     0,     0,     0,   378,     0,   197,    65,    66,     0,
       0,     0,     0,    67,  1173,  1174,  1175,  1176,  1177,  1178,
       0,    68,    69,    70,     0,     0,    71,     0,    72,  1179,
    1173,  1174,  1175,  1176,  1177,  1178,     0,     0,     0,     0,
       0,   379,     0,    57,     0,  1179,   380,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     176,   177,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   178,   179,
       0,   180,     0,     0,     0,     0,   181,     0,     0,     0,
       0,    67,     0,     0,     0,     0,     0,     0,     0,   801,
      69,     0,     0,  1046,     0,     0,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,     0,   421,
     422,     0,     0,     0,     0,     0,     0,     0,     0,  1183,
       0,     0,  1184,  1185,  1186,  1187,  1188,     0,  1189,  1190,
    1191,     0,     0,     0,     0,     0,     0,     0,  1184,  1185,
    1186,  1187,  1188,     0,  1189,  1190,  1191,   283,     0,     0,
      53,     0,    54,    55,    56,    57,     0,     0,     0,   285,
       0,     0,    60,     0,     0,     0,    61,     0,     0,     0,
       0,     0,     0,    62,     0,     0,     0,     0,     0,    63,
      64,     0,    51,     0,     0,   375,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    65,    66,     0,
       0,     0,     0,    67,     0,     0,     0,     0,     0,     0,
       0,   287,    69,    70,     0,     0,    71,     0,    72,    52,
       0,     0,    53,     0,    54,    55,    56,    57,   377,     0,
       0,    59,     0,     0,    60,     0,     0,     0,    61,     0,
       0,     0,     0,     0,     0,    62,     0,     0,     0,     0,
       0,    63,    64,     0,    51,     0,     0,   611,     0,     0,
      87,     0,     0,     0,     0,     0,   378,     0,    88,    65,
      66,     0,     0,     0,     0,    67,     0,     0,    90,    91,
      92,     0,     0,    68,    69,    70,     0,     0,    71,   247,
      72,    52,     0,     0,    53,    99,    54,    55,    56,    57,
     377,     0,     0,    59,     0,   104,    60,     0,     0,     0,
      61,   105,     0,     0,     0,   107,   108,    62,     0,     0,
       0,    51,     0,    63,    64,     0,   111,     0,   112,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   378,     0,
       0,    65,    66,    51,     0,     0,     0,    67,     0,     0,
       0,     0,     0,   114,     0,    68,    69,    70,    52,     0,
      71,    53,    72,    54,    55,    56,    57,   377,     0,     0,
      59,     0,     0,    60,     0,     0,     0,    61,     0,     0,
      52,     0,     0,    53,    62,    54,    55,    56,    57,    58,
      63,    64,    59,     0,     0,    60,     0,     0,     0,    61,
       0,     0,     0,     0,     0,   378,    62,     0,    65,    66,
      51,     0,    63,    64,    67,     0,     0,     0,     0,     0,
       0,     0,    68,    69,    70,     0,     0,    71,     0,    72,
      65,    66,     0,     0,     0,     0,    67,     0,     0,     0,
       0,     0,     0,     0,    68,    69,    70,    52,     0,    71,
      53,    72,    54,    55,    56,    57,   425,     0,     0,    59,
       0,     0,    60,     0,     0,    51,    61,     0,     0,     0,
       0,     0,     0,    62,     0,     0,     0,     0,     0,    63,
      64,     0,     0,     0,     0,     0,     0,   137,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    65,    66,     0,
       0,     0,    52,    67,     0,    53,     0,    54,    55,    56,
      57,    68,    69,    70,    59,     0,    71,    60,    72,     0,
       0,    61,     0,     0,   138,     0,     0,    53,    62,    54,
      55,    56,    57,   782,    63,    64,   139,     0,     0,    60,
       0,     0,   137,    61,     0,     0,     0,     0,     0,   487,
      62,     0,    65,    66,     0,     0,    63,    64,    67,     0,
       0,     0,     0,     0,    51,     0,    68,    69,    70,     0,
       0,    71,     0,    72,    65,    66,     0,     0,     0,   138,
      67,     0,    53,     0,    54,    55,    56,    57,   140,    69,
      70,   139,     0,    71,    60,    72,     0,     0,    61,     0,
       0,    52,     0,     0,    53,    62,    54,    55,    56,    57,
       0,    63,    64,    59,     0,     0,    60,     0,     0,     0,
      61,     0,     0,     0,     0,     0,     0,    62,     0,    65,
      66,     0,     0,    63,    64,    67,     0,     0,     0,     0,
       0,     0,     0,   140,    69,    70,     0,     0,    71,     0,
      72,    65,    66,     0,    86,    87,     0,    67,     0,     0,
       0,     0,     0,    88,     0,    68,    69,    70,     0,     0,
      71,    89,    72,    90,    91,    92,    93,     0,     0,     0,
      94,     0,     0,     0,    95,     0,     0,    96,    97,    98,
      99,   100,     0,     0,     0,     0,     0,   101,   102,   103,
     104,     0,     0,     0,     0,     0,   105,   106,    86,    87,
     107,   108,     0,     0,     0,   109,     0,    88,     0,     0,
     110,   111,     0,   112,     0,    89,     0,    90,    91,    92,
      93,   113,     0,     0,    94,     0,     0,     0,    95,     0,
       0,    96,    97,    98,    99,   100,     0,     0,   114,     0,
     520,   101,   102,   103,   104,     0,     0,     0,     0,     0,
     105,   106,    86,    87,   107,   108,     0,     0,     0,   109,
       0,    88,     0,     0,   110,   111,     0,   112,     0,    89,
       0,    90,    91,    92,    93,   113,     0,     0,    94,     0,
       0,     0,    95,     0,     0,    96,    97,    98,    99,   100,
       0,     0,   114,     0,   627,   101,   102,   103,   104,     0,
       0,     0,     0,     0,   105,   106,    86,    87,   107,   108,
       0,     0,     0,   109,     0,    88,     0,     0,   110,   111,
       0,   112,     0,    89,     0,    90,    91,    92,    93,   113,
       0,     0,    94,     0,     0,     0,    95,     0,     0,    96,
      97,    98,    99,   100,     0,     0,   114,     0,   632,   101,
     102,   103,   104,     0,     0,     0,     0,     0,   105,   106,
      86,    87,   107,   108,     0,     0,     0,   109,     0,    88,
       0,     0,   110,   111,     0,   112,     0,    89,     0,    90,
      91,    92,    93,   113,     0,     0,    94,     0,     0,     0,
      95,     0,     0,    96,    97,    98,    99,   100,     0,     0,
     114,     0,   701,   101,   102,   103,   104,     0,     0,     0,
       0,     0,   105,   106,    86,    87,   107,   108,     0,     0,
       0,   109,     0,    88,     0,     0,   110,   111,     0,   112,
       0,    89,     0,    90,    91,    92,    93,   113,     0,     0,
      94,     0,     0,     0,    95,     0,     0,    96,    97,    98,
      99,   100,     0,     0,   114,     0,   814,   101,   102,   103,
     104,     0,     0,     0,     0,     0,   105,   106,    86,    87,
     107,   108,     0,     0,     0,   109,     0,    88,     0,     0,
     110,   111,     0,   112,     0,    89,     0,    90,    91,    92,
      93,   113,     0,     0,    94,     0,     0,     0,    95,     0,
       0,    96,    97,    98,    99,   100,     0,     0,   114,     0,
    1055,   101,   102,   103,   104,     0,     0,     0,     0,     0,
     105,   106,    86,    87,   107,   108,     0,     0,     0,   109,
       0,    88,     0,     0,   110,   111,     0,   112,     0,    89,
       0,    90,    91,    92,    93,   113,     0,     0,    94,     0,
       0,     0,    95,     0,     0,    96,    97,    98,    99,   100,
       0,     0,   114,     0,  1152,   101,   102,   103,   104,     0,
       0,     0,     0,     0,   105,   106,    87,     0,   107,   108,
       0,     0,     0,   109,    88,     0,     0,     0,   110,   111,
      87,   112,     0,     0,    90,    91,    92,     0,    88,     0,
       0,     0,     0,     0,     0,   247,     0,     0,    90,    91,
      92,    99,   256,     0,     0,     0,   114,     0,     0,   247,
      87,   104,     0,     0,     0,    99,     0,   105,    88,     0,
       0,     0,   108,     0,     0,   104,     0,     0,    90,    91,
      92,   105,   111,     0,   112,     0,   108,     0,     0,   247,
       0,     0,     0,     0,     0,    99,   111,     0,   112,     0,
       0,     0,     0,     0,     0,   104,     0,     0,     0,   114,
       0,   105,     0,  -140,     0,     0,   108,     0,     0,     0,
       0,     0,     0,   114,     0,     0,   111,     0,   112,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   114
};

static const yytype_int16 yycheck[] =
{
       1,   107,   435,   127,   128,   129,   130,   485,   132,   522,
     134,   135,   136,   715,    28,   118,   583,    58,    45,   214,
      28,    28,   146,   147,   378,   470,    56,   151,   152,   538,
     543,   393,   227,   228,   410,   118,   262,    12,    57,   548,
     128,   118,   584,   610,   594,    46,    32,     6,   118,     8,
     798,   799,   800,   125,    32,   143,   128,    10,    11,    87,
      88,   142,    90,    91,    92,   607,     0,    95,   274,    14,
     125,    99,    73,    45,   104,    14,   104,   105,   284,   107,
     108,   109,   125,   111,   112,    73,   125,    61,    62,   144,
      73,   143,   144,   128,    64,    65,    66,   143,   144,   544,
      70,   144,   547,   125,   118,   144,   648,    32,   143,   492,
     118,   118,   550,   663,   552,   553,   554,   555,   556,   121,
     122,   123,   144,   142,   125,   142,   127,   128,   129,   130,
       6,   132,     8,   134,   135,   136,   124,   646,    91,   127,
     494,   124,   142,   621,   127,   146,   147,   142,   690,   127,
     151,   152,   143,   144,   126,   141,   142,   143,   142,   131,
     125,   133,   137,   125,   142,   143,   142,   270,   394,   125,
     133,   274,   398,   145,   127,   125,   148,   149,   150,   144,
     125,   284,   144,   210,    73,   144,   125,   270,   144,   543,
     231,   274,   316,   270,   144,   142,   166,   167,   168,   169,
     270,   284,   428,   409,   274,    12,   133,   546,   584,    16,
     142,    32,   125,   214,   284,   133,   141,   142,   143,   247,
     142,   143,   700,   251,   586,   226,   227,   228,   229,   230,
     231,   144,   782,   125,   235,   124,   575,   576,   127,   578,
     579,   580,   581,   124,   125,   286,   788,    12,   142,   219,
      57,    16,   144,   143,   144,   693,   270,   702,   142,   125,
     274,   262,   270,   270,   142,   143,   274,   274,   142,   239,
     284,   125,   648,   706,   142,   143,   284,   284,   144,   124,
     226,   227,   228,   229,   230,   827,   125,    10,    11,   125,
     144,   125,    57,   771,  1042,   521,  1044,   142,  1046,   142,
     125,  1049,  1050,  1051,   142,   144,   409,   133,   144,   125,
     144,   118,   142,   142,   690,   316,   137,   138,   139,   144,
     141,   142,   143,   142,   142,   132,   409,   124,   144,   125,
     137,   332,   333,   127,   142,   848,   377,   378,   125,   409,
     142,   125,   787,    21,    22,   790,   791,   686,   144,   142,
      73,    74,   785,   118,    32,   127,   126,   144,   128,   360,
     144,   362,   363,   364,   365,   366,   127,   132,    91,    92,
      32,    94,   137,   127,   142,   376,    99,   142,   379,   380,
     143,   125,   721,   384,   425,   386,   142,     6,    73,     8,
     142,    32,   406,   394,   395,   409,   144,   398,   781,   146,
      85,   409,   409,    88,   137,   406,    91,   633,   124,   124,
     126,   126,   128,   128,   360,   143,   362,   363,   364,   365,
     366,   144,   107,   393,   143,   426,   142,   428,   127,   470,
     376,  1133,    73,   379,   380,   880,    10,    11,    12,   142,
     143,   144,    16,   415,    85,   124,   487,    88,   142,   133,
      91,   827,   124,   494,   126,   127,   128,   135,   136,   137,
     138,   139,  1029,   141,   142,   143,   107,   142,   126,   470,
     471,   144,   125,   135,   136,   137,   138,   139,   479,   141,
     142,   143,   134,    57,   485,   144,   124,   488,   126,   872,
     128,   492,   875,    32,   848,   496,   497,   498,   499,   500,
     501,   502,   543,   544,   144,   144,   547,   144,  1021,    10,
      11,    12,   513,   527,   144,    16,   144,    91,    32,   124,
     521,   126,   134,   128,   142,   143,   144,   144,     2,    10,
      11,   532,   134,   479,    92,    93,    94,   643,   142,   143,
     144,   144,   543,   544,   118,   144,   547,   144,   144,   550,
     144,   552,   553,   554,   555,   556,    57,   134,   132,   144,
     587,   588,   563,   137,   591,   592,    40,    41,    42,    43,
      44,   572,  1081,    47,   823,   144,   144,   137,   143,   145,
     594,   807,   583,   584,   708,   709,   594,   594,   783,    90,
      91,   144,    73,    74,  1039,    73,   135,   136,   137,   138,
     139,   124,   141,   142,   143,   606,   607,   125,   125,   610,
      91,    92,   613,    94,  1123,   643,   586,   118,    99,   125,
     621,   628,   650,   137,   138,   139,   142,   141,   142,   143,
     644,   132,   633,   126,   146,   125,   137,   142,   142,   127,
     641,   142,   142,   142,   645,   142,   127,   648,   675,   663,
    1217,  1218,  1219,   144,    57,   663,   663,   142,   137,   146,
     488,   702,   124,   127,    10,    10,    10,  1021,   496,   497,
     498,   499,   500,   501,   126,   134,   150,   125,   146,  1124,
     126,   137,   137,  1192,   145,   126,   126,   145,   126,   690,
     126,   144,   693,   137,   124,   142,   146,   142,   124,   700,
     142,   702,   125,   675,   532,   142,   125,   708,   709,    51,
     143,    53,    54,    55,   715,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,  1303,   211,    80,    81,
     125,   215,  1309,   143,  1127,   128,   787,   128,   142,   790,
     791,   133,   142,   133,    46,   133,    98,    99,   133,  1142,
    1143,  1144,   125,  1208,   143,   142,    10,     4,   782,   145,
     771,   144,   114,   144,   782,   782,    68,   119,   606,   144,
     781,   142,   783,  1216,   144,   613,   787,   788,    80,   790,
     791,   798,   799,   800,   146,   269,   125,   146,    10,   126,
     142,   808,    10,    10,   126,     6,   807,   848,   100,   125,
     142,   144,   142,   641,   125,   146,   817,  1262,   110,   144,
     144,  1070,  1071,  1072,  1073,  1074,   827,  1076,  1211,    10,
      11,   145,  1215,   145,   144,  1030,   145,  1220,   146,   880,
     314,   145,   144,   870,   816,   144,   818,   144,   140,    50,
     142,   143,   142,   144,   328,   329,   144,    58,   133,   831,
     832,   833,   133,   835,   836,   837,   838,    68,    69,    70,
     133,   872,   142,   133,   875,   125,   144,   134,    79,   880,
     134,  1264,   134,   144,    85,   134,   144,   142,   144,   124,
     126,   183,    73,    74,    95,    10,    79,    80,   144,   144,
     101,   126,   126,   144,    11,   106,  1289,   145,   142,   142,
      91,    92,   386,    94,   144,   116,   142,   118,    99,  1302,
     142,   144,  1171,  1172,  1173,  1174,  1175,  1176,  1177,  1178,
    1179,  1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,  1188,
    1189,   125,   143,   124,    51,   144,    53,    54,    55,   134,
     424,  1070,  1071,  1072,  1073,  1074,    51,  1076,    53,    54,
      55,  1085,   134,   437,   256,   134,   258,   259,   260,    10,
      11,    12,   134,    80,    81,    16,   144,   144,    10,   145,
    1021,   142,  1231,   984,   276,    80,    81,   142,   280,   142,
     142,    98,    99,   144,   144,   287,   126,   289,  1039,   707,
     474,   542,   255,    98,    99,   297,   298,   114,    10,    11,
    1123,   485,   119,  1024,  1081,  1192,    57,   643,   527,   114,
    1021,   644,  1021,   274,   119,   817,   848,   808,  1029,  1030,
     984,    -1,  1281,   333,    -1,  1042,    -1,  1044,  1039,  1046,
      -1,   333,  1049,  1050,  1051,    -1,    -1,   142,  1075,    -1,
      91,    -1,  1171,  1172,  1173,  1174,  1175,  1176,  1177,  1178,
    1179,  1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,  1188,
    1189,    73,    74,    -1,    -1,    -1,    -1,   118,    -1,    -1,
      -1,    -1,    -1,  1124,  1085,    -1,    -1,    -1,    -1,    91,
      92,   132,    94,    -1,    -1,   387,   137,    99,   572,    -1,
      -1,   142,    -1,  1075,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1231,    -1,   297,   298,    -1,    -1,    -1,    -1,
      -1,    -1,   124,  1124,    -1,    -1,  1127,    -1,    -1,    -1,
      -1,    -1,  1133,    16,    17,    18,    19,    20,    21,    22,
     432,  1142,  1143,  1144,    -1,    -1,   620,   621,    -1,    32,
      -1,    -1,   626,    -1,    -1,    -1,    17,    18,    19,    20,
      21,    22,  1281,  1190,    -1,    -1,    -1,  1208,    -1,    -1,
      -1,    32,    -1,    -1,    -1,    -1,    51,    -1,    53,    54,
      55,    -1,    -1,    -1,    -1,  1157,  1158,  1159,  1160,  1161,
    1162,    -1,    -1,    -1,    -1,    -1,    -1,   671,   672,   673,
     674,   384,   676,    -1,    -1,    80,    81,  1208,    -1,    -1,
    1211,    -1,    -1,    -1,  1215,    -1,  1217,  1218,  1219,  1220,
      -1,  1262,    -1,    98,    99,    -1,   700,    -1,    -1,  1256,
    1257,    -1,  1259,  1260,   526,    -1,   528,    -1,    -1,   114,
      -1,   715,    -1,   426,   119,    -1,    -1,   130,   131,   132,
     542,    -1,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,  1262,    -1,  1264,    10,    11,  1293,  1294,  1295,  1296,
     131,   132,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,    -1,    -1,    -1,    -1,  1289,    -1,
      19,    20,    21,    22,    -1,    -1,    -1,   771,    -1,   773,
      -1,  1302,  1303,    32,    -1,   488,    -1,    -1,  1309,    19,
      20,    21,    22,   496,   497,   498,   499,   500,   501,    -1,
      -1,    -1,    32,    -1,    -1,    -1,    -1,    73,    74,    -1,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      22,    -1,    -1,    -1,    -1,    91,    92,    -1,    94,   532,
      32,    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   838,    -1,    -1,   550,    -1,   552,
     553,   554,   555,   556,    -1,   849,   850,   851,   852,   853,
     854,   855,   856,   857,   858,   859,   860,   861,   862,   863,
     864,   865,   866,   867,   868,   869,    -1,   871,    -1,    -1,
      -1,    -1,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,   707,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   606,    -1,   135,   136,   137,   138,   139,
     613,   141,   142,   143,    -1,    -1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    10,    11,    -1,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   641,   141,
     142,   143,    -1,    -1,   146,    -1,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,
      -1,    47,    48,    -1,    -1,    51,    32,    53,    54,    55,
      56,    57,   784,    59,    60,    -1,    -1,    63,    64,    -1,
      -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,   801,
     693,    -1,   804,    -1,    80,    81,    -1,    -1,    -1,    -1,
      -1,    87,    -1,    89,    -1,    91,    -1,    -1,    -1,    -1,
      96,    -1,    98,    99,   100,    -1,    -1,   103,   104,    -1,
    1014,    -1,   108,    -1,    -1,   111,   112,   113,   114,    -1,
      -1,   117,    -1,   119,    -1,     3,     4,     5,     6,    -1,
       8,     9,    10,    11,    -1,    -1,   132,    -1,    -1,   135,
     136,   137,    10,    11,   140,    -1,   142,   143,    -1,    -1,
      -1,   147,    -1,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,    47,
     146,    10,    11,    51,    -1,    53,    54,    55,    -1,    -1,
      -1,    59,    -1,    61,    62,    63,    64,  1091,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    80,    81,    -1,    73,    74,    -1,    -1,    87,
      -1,    89,    -1,    91,    -1,    -1,    -1,    -1,    96,    -1,
      98,    99,   100,    91,    92,   103,    94,    -1,    -1,  1133,
     108,    99,    -1,   111,    73,    74,   114,    -1,    -1,    -1,
      -1,   119,    -1,    -1,    -1,    -1,   124,    86,    -1,    -1,
      -1,    -1,    91,    92,   132,    94,   124,   135,   136,   137,
      99,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,   147,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,  1191,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    -1,
    1204,    -1,    -1,    -1,    -1,    -1,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    -1,    -1,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    67,    -1,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,    -1,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,    -1,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    -1,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    67,    -1,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,    -1,    -1,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,    -1,   146,   147,     3,     4,     5,
       6,    -1,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,
      -1,    47,    48,    -1,    -1,    51,    32,    53,    54,    55,
      56,    57,    -1,    59,    60,    -1,    -1,    63,    64,    -1,
      -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,
      -1,    -1,    -1,    -1,    80,    81,    -1,    -1,    -1,    -1,
      -1,    87,    -1,    89,    -1,    91,    -1,    -1,    -1,    95,
      96,    -1,    98,    99,   100,    -1,    -1,   103,   104,    -1,
      -1,    -1,   108,    -1,    -1,   111,   112,   113,   114,    -1,
      -1,   117,    -1,   119,     3,     4,     5,     6,    -1,     8,
       9,    10,    11,    -1,    -1,    14,   132,    -1,    -1,   135,
     136,    -1,    -1,    -1,   140,    -1,   142,    -1,    -1,    -1,
      -1,   147,    -1,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    47,    48,
     146,    -1,    51,    -1,    53,    54,    55,    56,    57,    -1,
      59,    60,    -1,    -1,    63,    64,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    80,    81,    -1,    -1,    -1,    -1,    -1,    87,    -1,
      89,    -1,    91,    -1,    10,    11,    95,    96,    -1,    98,
      99,   100,    -1,    -1,   103,   104,    -1,    -1,    -1,   108,
      -1,    -1,   111,   112,   113,   114,    -1,    -1,   117,    -1,
     119,     3,     4,     5,     6,    -1,     8,     9,    10,    11,
      -1,    -1,    -1,   132,    -1,    -1,   135,   136,    -1,    -1,
      56,   140,    -1,   142,    -1,    -1,    -1,    -1,   147,    17,
      18,    19,    20,    21,    22,    -1,    -1,    73,    74,    -1,
      -1,    -1,    -1,    -1,    32,    47,    -1,    -1,    -1,    51,
      -1,    53,    54,    55,    -1,    91,    92,    59,    94,    -1,
      -1,    63,    64,    99,    -1,    -1,    -1,    -1,   104,    -1,
      72,    73,    74,    -1,    -1,    -1,   112,   113,    80,    81,
     116,    -1,    -1,    -1,    -1,    87,    -1,    89,    -1,    91,
      -1,    -1,    -1,    -1,    96,    -1,    98,    99,   100,    -1,
      -1,   103,    -1,    -1,    -1,    -1,   108,    -1,    -1,   111,
      -1,    -1,   114,     3,     4,     5,     6,   119,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     132,    -1,    -1,   135,   136,   137,    -1,    -1,   140,    -1,
     142,   143,   144,   131,   132,   147,    -1,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,    47,    -1,    -1,
      -1,    51,    -1,    53,    54,    55,    -1,    -1,    -1,    59,
      -1,    -1,    -1,    63,    64,    -1,    -1,    10,    11,    -1,
      -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,
      80,    81,    -1,    -1,    -1,    -1,    -1,    87,    -1,    89,
      -1,    91,    -1,    -1,    -1,    -1,    96,    -1,    98,    99,
     100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,    10,
      11,   111,    -1,    56,   114,     3,     4,     5,     6,   119,
       8,     9,    10,    11,   124,    -1,    -1,    -1,    -1,    -1,
      73,    74,   132,    -1,    -1,   135,   136,   137,    -1,    -1,
     140,    -1,   142,   143,    -1,    -1,    -1,   147,    91,    92,
      51,    94,    53,    54,    55,    -1,    99,    -1,    -1,    47,
      -1,   104,    63,    51,    -1,    53,    54,    55,    -1,   112,
     113,    59,    -1,    74,    -1,    63,    64,    -1,    -1,    80,
      81,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    80,    81,    -1,    -1,    -1,    98,    99,    87,
      -1,    89,    -1,    91,    -1,    -1,    -1,    -1,    96,    -1,
      98,    99,   100,   114,    -1,   103,   117,    -1,   119,    -1,
     108,    -1,    -1,   111,    -1,    -1,   114,     3,     4,     5,
       6,   119,     8,     9,    10,    11,    -1,    -1,    51,    -1,
      53,    54,    55,    -1,   132,    -1,    -1,   135,   136,   137,
      63,    -1,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    -1,
      -1,    47,    -1,    -1,    -1,    51,    -1,    53,    54,    55,
      -1,    -1,    -1,    59,    -1,    98,    99,    63,    64,    -1,
      -1,    10,    11,    -1,    -1,    -1,    72,    73,    74,    -1,
      -1,   114,    -1,    -1,    80,    81,   119,    -1,    -1,    -1,
      -1,    87,    -1,    89,    -1,    91,    -1,    -1,    -1,    -1,
      96,    -1,    98,    99,   100,    -1,    -1,   103,    -1,   142,
      -1,    -1,   108,    -1,    -1,   111,    -1,    56,   114,     3,
       4,     5,     6,   119,     8,     9,    10,    11,   124,    -1,
      -1,    -1,    -1,    -1,    73,    74,   132,    -1,    -1,   135,
     136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,
      -1,   147,    91,    92,    93,    94,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    47,    -1,   104,    -1,    51,    -1,    53,
      54,    55,    -1,   112,   113,    59,    -1,   116,    -1,    63,
      64,    -1,    -1,    10,    11,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    80,    81,    -1,    -1,
      -1,    -1,    -1,    87,    -1,    89,    -1,    91,    -1,    -1,
      -1,    -1,    96,    -1,    98,    99,   100,    -1,    -1,   103,
      -1,    -1,    -1,    -1,   108,    -1,    -1,   111,    -1,    56,
     114,     3,     4,     5,     6,   119,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    -1,    73,    74,   132,    -1,
      -1,   135,   136,   137,    -1,    -1,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    91,    92,    51,    94,    53,    54,
      55,    -1,    99,    -1,    -1,    47,    -1,   104,    -1,    51,
      -1,    53,    54,    55,    -1,   112,   113,    59,    -1,   116,
      -1,    63,    64,    -1,    -1,    80,    81,    -1,    -1,    -1,
      72,    73,    74,    -1,    -1,    -1,    -1,    -1,    80,    81,
      -1,    -1,    -1,    98,    99,    87,    -1,    89,    -1,    91,
      -1,    -1,    -1,    -1,    96,    -1,    98,    99,   100,   114,
      -1,   103,    -1,    -1,   119,    -1,   108,    10,    11,   111,
      21,    22,   114,     3,     4,     5,     6,   119,     8,     9,
      10,    32,    -1,    -1,    -1,    -1,    -1,   142,    -1,    -1,
     132,    -1,    -1,   135,   136,   137,    -1,    -1,   140,    -1,
     142,   143,    -1,    -1,    -1,   147,    -1,    -1,    51,    -1,
      53,    54,    55,    56,    57,    -1,    -1,    47,    -1,    -1,
      63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,
      -1,    74,    -1,    -1,    64,    -1,    -1,    80,    81,    -1,
      -1,    -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
       0,    -1,    -1,    -1,    -1,    98,    99,    -1,    -1,    89,
      -1,    91,    -1,    -1,    -1,    -1,    96,    -1,    -1,   112,
     100,   114,    -1,   103,   117,    -1,   119,    -1,   108,    -1,
      -1,    -1,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    49,
      50,    -1,   132,    -1,    -1,   135,   136,   137,    58,    -1,
     140,    -1,   142,   143,    -1,    -1,    66,   147,    68,    69,
      70,    71,    -1,    -1,    -1,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    84,    85,    86,    -1,    -1,    -1,
      -1,    -1,    92,    93,    94,    95,    -1,    -1,    -1,    -1,
      -1,   101,   102,    -1,    -1,   105,   106,    -1,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,   116,    -1,   118,     6,
      -1,    -1,    -1,    -1,    10,    11,   126,    -1,    15,    16,
      17,    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   143,    -1,    32,    -1,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    -1,
      -1,    -1,    48,    -1,    -1,    51,    -1,    53,    54,    55,
      56,    57,    -1,    -1,    60,    62,    -1,    63,    -1,    -1,
      -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,
      -1,    -1,    -1,    -1,    80,    81,    -1,    -1,    -1,    -1,
      87,    -1,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    99,    -1,    -1,    -1,    -1,   104,    -1,
      10,    11,    10,    11,    -1,    -1,   112,   113,   114,    -1,
      -1,   117,    -1,   119,    -1,    -1,    -1,    -1,   125,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   140,   142,   143,    -1,    48,    -1,
     147,    51,    -1,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    -1,    -1,    -1,    67,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    73,    74,    -1,    -1,    -1,
      80,    81,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,
      90,    -1,    -1,    91,    92,    -1,    94,    -1,    98,    99,
      -1,    99,    -1,    -1,   104,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   112,   113,   114,    -1,    -1,   117,    -1,   119,
      48,    -1,    -1,    51,   124,    53,    54,    55,    56,    57,
     128,    -1,    60,    -1,   132,    63,    -1,    -1,    -1,    67,
     140,    -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,    -1,
      -1,    -1,    80,    81,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    99,    -1,    -1,    -1,    -1,   104,    -1,    51,    -1,
      53,    54,    55,    -1,   112,   113,   114,    -1,    -1,   117,
      63,   119,    15,    16,    17,    18,    19,    20,    21,    22,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    32,
      -1,    -1,   140,    15,    16,    17,    18,    19,    20,    21,
      22,    -1,    -1,    -1,    -1,    98,    99,    -1,    -1,    -1,
      32,    15,    16,    17,    18,    19,    20,    21,    22,    -1,
      -1,   114,    -1,    -1,    -1,    -1,   119,    -1,    32,    15,
      16,    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    15,    16,    17,
      18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    15,    16,    17,    18,
      19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   125,    32,    -1,    -1,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,   144,    -1,    -1,    -1,    -1,    -1,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,   144,    -1,    -1,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,   144,    -1,
      -1,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,   144,    15,    16,    17,    18,
      19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    32,    15,    16,    17,    18,    19,    20,
      21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    32,    -1,    15,    16,    17,    18,    19,    20,    21,
      22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    15,    16,    17,    18,    19,    20,    21,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    15,
      16,    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    15,    16,    17,
      18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    -1,   127,    -1,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,   126,    -1,    -1,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,   125,    -1,    -1,    -1,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   127,    -1,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,    -1,    -1,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,    -1,
      -1,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    15,    16,    17,    18,
      19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    32,    15,    16,    17,    18,    19,    20,
      21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    32,    16,    17,    18,    19,    20,    21,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,
      -1,    -1,    -1,    17,    18,    19,    20,    21,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    17,
      18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      17,    18,    19,    20,    21,    22,    -1,    -1,   127,    -1,
     129,   130,   131,   132,    -1,    32,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,    -1,    -1,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,    -1,    -1,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      11,    -1,    -1,    14,    -1,    16,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,    -1,    -1,    -1,   132,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,    48,    -1,    -1,
      51,    -1,    53,    54,    55,    56,    57,    -1,    -1,    60,
      -1,    -1,    63,   130,   131,   132,    67,    -1,   135,   136,
     137,   138,   139,    74,   141,   142,   143,    -1,    -1,    80,
      81,    17,    18,    19,    20,    21,    22,    10,    11,    -1,
      -1,    -1,    -1,    -1,    95,    -1,    32,    98,    99,    -1,
      -1,    -1,    -1,   104,    17,    18,    19,    20,    21,    22,
      -1,   112,   113,   114,    -1,    -1,   117,    -1,   119,    32,
      17,    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,
      -1,   132,    -1,    56,    -1,    32,   137,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,
      -1,    94,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
      -1,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,    -1,    -1,   116,    -1,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,    10,
      11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,
      -1,    -1,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    48,    -1,    -1,
      51,    -1,    53,    54,    55,    56,    -1,    -1,    -1,    60,
      -1,    -1,    63,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    80,
      81,    -1,    11,    -1,    -1,    14,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,    -1,
      -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,    -1,    -1,   117,    -1,   119,    48,
      -1,    -1,    51,    -1,    53,    54,    55,    56,    57,    -1,
      -1,    60,    -1,    -1,    63,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,
      -1,    80,    81,    -1,    11,    -1,    -1,    14,    -1,    -1,
      50,    -1,    -1,    -1,    -1,    -1,    95,    -1,    58,    98,
      99,    -1,    -1,    -1,    -1,   104,    -1,    -1,    68,    69,
      70,    -1,    -1,   112,   113,   114,    -1,    -1,   117,    79,
     119,    48,    -1,    -1,    51,    85,    53,    54,    55,    56,
      57,    -1,    -1,    60,    -1,    95,    63,    -1,    -1,    -1,
      67,   101,    -1,    -1,    -1,   105,   106,    74,    -1,    -1,
      -1,    11,    -1,    80,    81,    -1,   116,    -1,   118,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    -1,
      -1,    98,    99,    11,    -1,    -1,    -1,   104,    -1,    -1,
      -1,    -1,    -1,   143,    -1,   112,   113,   114,    48,    -1,
     117,    51,   119,    53,    54,    55,    56,    57,    -1,    -1,
      60,    -1,    -1,    63,    -1,    -1,    -1,    67,    -1,    -1,
      48,    -1,    -1,    51,    74,    53,    54,    55,    56,    57,
      80,    81,    60,    -1,    -1,    63,    -1,    -1,    -1,    67,
      -1,    -1,    -1,    -1,    -1,    95,    74,    -1,    98,    99,
      11,    -1,    80,    81,   104,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   112,   113,   114,    -1,    -1,   117,    -1,   119,
      98,    99,    -1,    -1,    -1,    -1,   104,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   112,   113,   114,    48,    -1,   117,
      51,   119,    53,    54,    55,    56,    57,    -1,    -1,    60,
      -1,    -1,    63,    -1,    -1,    11,    67,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    80,
      81,    -1,    -1,    -1,    -1,    -1,    -1,    11,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,    -1,
      -1,    -1,    48,   104,    -1,    51,    -1,    53,    54,    55,
      56,   112,   113,   114,    60,    -1,   117,    63,   119,    -1,
      -1,    67,    -1,    -1,    48,    -1,    -1,    51,    74,    53,
      54,    55,    56,    57,    80,    81,    60,    -1,    -1,    63,
      -1,    -1,    11,    67,    -1,    -1,    -1,    -1,    -1,    95,
      74,    -1,    98,    99,    -1,    -1,    80,    81,   104,    -1,
      -1,    -1,    -1,    -1,    11,    -1,   112,   113,   114,    -1,
      -1,   117,    -1,   119,    98,    99,    -1,    -1,    -1,    48,
     104,    -1,    51,    -1,    53,    54,    55,    56,   112,   113,
     114,    60,    -1,   117,    63,   119,    -1,    -1,    67,    -1,
      -1,    48,    -1,    -1,    51,    74,    53,    54,    55,    56,
      -1,    80,    81,    60,    -1,    -1,    63,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,    98,
      99,    -1,    -1,    80,    81,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,    -1,    -1,   117,    -1,
     119,    98,    99,    -1,    49,    50,    -1,   104,    -1,    -1,
      -1,    -1,    -1,    58,    -1,   112,   113,   114,    -1,    -1,
     117,    66,   119,    68,    69,    70,    71,    -1,    -1,    -1,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    84,
      85,    86,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,
      95,    -1,    -1,    -1,    -1,    -1,   101,   102,    49,    50,
     105,   106,    -1,    -1,    -1,   110,    -1,    58,    -1,    -1,
     115,   116,    -1,   118,    -1,    66,    -1,    68,    69,    70,
      71,   126,    -1,    -1,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    84,    85,    86,    -1,    -1,   143,    -1,
     145,    92,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,
     101,   102,    49,    50,   105,   106,    -1,    -1,    -1,   110,
      -1,    58,    -1,    -1,   115,   116,    -1,   118,    -1,    66,
      -1,    68,    69,    70,    71,   126,    -1,    -1,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    84,    85,    86,
      -1,    -1,   143,    -1,   145,    92,    93,    94,    95,    -1,
      -1,    -1,    -1,    -1,   101,   102,    49,    50,   105,   106,
      -1,    -1,    -1,   110,    -1,    58,    -1,    -1,   115,   116,
      -1,   118,    -1,    66,    -1,    68,    69,    70,    71,   126,
      -1,    -1,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    84,    85,    86,    -1,    -1,   143,    -1,   145,    92,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,   101,   102,
      49,    50,   105,   106,    -1,    -1,    -1,   110,    -1,    58,
      -1,    -1,   115,   116,    -1,   118,    -1,    66,    -1,    68,
      69,    70,    71,   126,    -1,    -1,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    84,    85,    86,    -1,    -1,
     143,    -1,   145,    92,    93,    94,    95,    -1,    -1,    -1,
      -1,    -1,   101,   102,    49,    50,   105,   106,    -1,    -1,
      -1,   110,    -1,    58,    -1,    -1,   115,   116,    -1,   118,
      -1,    66,    -1,    68,    69,    70,    71,   126,    -1,    -1,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    84,
      85,    86,    -1,    -1,   143,    -1,   145,    92,    93,    94,
      95,    -1,    -1,    -1,    -1,    -1,   101,   102,    49,    50,
     105,   106,    -1,    -1,    -1,   110,    -1,    58,    -1,    -1,
     115,   116,    -1,   118,    -1,    66,    -1,    68,    69,    70,
      71,   126,    -1,    -1,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    84,    85,    86,    -1,    -1,   143,    -1,
     145,    92,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,
     101,   102,    49,    50,   105,   106,    -1,    -1,    -1,   110,
      -1,    58,    -1,    -1,   115,   116,    -1,   118,    -1,    66,
      -1,    68,    69,    70,    71,   126,    -1,    -1,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    84,    85,    86,
      -1,    -1,   143,    -1,   145,    92,    93,    94,    95,    -1,
      -1,    -1,    -1,    -1,   101,   102,    50,    -1,   105,   106,
      -1,    -1,    -1,   110,    58,    -1,    -1,    -1,   115,   116,
      50,   118,    -1,    -1,    68,    69,    70,    -1,    58,    -1,
      -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,    68,    69,
      70,    85,    86,    -1,    -1,    -1,   143,    -1,    -1,    79,
      50,    95,    -1,    -1,    -1,    85,    -1,   101,    58,    -1,
      -1,    -1,   106,    -1,    -1,    95,    -1,    -1,    68,    69,
      70,   101,   116,    -1,   118,    -1,   106,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,   116,    -1,   118,    -1,
      -1,    -1,    -1,    -1,    -1,    95,    -1,    -1,    -1,   143,
      -1,   101,    -1,   133,    -1,    -1,   106,    -1,    -1,    -1,
      -1,    -1,    -1,   143,    -1,    -1,   116,    -1,   118,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   143
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,   121,   122,   123,   149,   150,   256,     3,     4,     5,
       6,     8,     9,    10,    11,    47,    51,    53,    54,    55,
      59,    63,    64,    72,    73,    74,    80,    81,    87,    89,
      91,    96,    98,    99,   100,   103,   108,   111,   114,   119,
     132,   135,   136,   137,   140,   142,   143,   147,   246,   247,
     255,    11,    48,    51,    53,    54,    55,    56,    57,    60,
      63,    67,    74,    80,    81,    98,    99,   104,   112,   113,
     114,   117,   119,   210,   214,   215,   217,   223,   224,   228,
     229,   234,   235,   236,   237,     0,    49,    50,    58,    66,
      68,    69,    70,    71,    75,    79,    82,    83,    84,    85,
      86,    92,    93,    94,    95,   101,   102,   105,   106,   110,
     115,   116,   118,   126,   143,   153,   155,   156,   158,   161,
     162,   184,   230,   233,   256,   142,   142,   142,   142,   142,
     142,   133,   142,   133,   142,   142,   142,    11,    48,    60,
     112,   212,   228,   229,   234,   133,   142,   142,   142,   133,
     142,   142,   142,   246,   246,   246,   246,   246,    11,    51,
      53,    54,    55,    63,    74,    80,    81,    98,    99,   114,
     119,   214,   244,   246,    10,    11,    73,    74,    91,    92,
      94,    99,   128,   132,   250,   251,   253,   256,   246,    15,
      16,    17,    18,    19,    20,    21,    22,    32,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   141,
     142,   143,     6,     8,   210,   142,    56,   104,    63,    81,
     235,   235,   235,   253,   235,    12,    16,    57,   118,   132,
     137,   142,   208,   209,   256,   124,    10,    11,    91,   127,
     254,    10,    11,    91,   124,   253,   254,    79,   158,   158,
     158,     6,   158,   158,   127,   157,    86,   158,   142,   142,
     142,   158,   124,   253,   127,   127,   127,   158,   158,   142,
     158,   161,   185,   158,   158,   167,    86,   253,   158,   158,
     143,    10,    11,    48,    57,    60,    90,   112,   124,   140,
     172,   175,   211,   213,   215,   217,   223,   228,   229,   234,
     243,   244,   256,   214,   243,   243,   243,   243,   214,   243,
     214,   243,   243,   243,   142,   253,   142,   253,   253,   214,
     243,   243,   214,   214,   214,   246,   243,   243,   144,   125,
     144,   253,   146,   125,   246,   246,   246,   246,   246,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     246,   246,   246,   246,   246,   144,   244,   246,   209,   246,
     137,    12,    16,    57,   118,   132,   137,   208,   256,   208,
     209,   208,   209,   208,   208,    14,    16,    57,    95,   132,
     137,   194,   195,   204,   210,   256,   143,   226,   227,   256,
      11,   225,   235,   127,   216,   218,   158,   155,   124,   253,
     253,   253,   253,   150,   124,   246,   133,    10,    11,    57,
     175,   211,   213,   253,   126,   128,   159,   160,   253,   142,
     142,    10,    11,   213,   142,    57,   210,   253,   154,   253,
     124,   126,   127,   128,   200,   124,   126,   128,   201,   126,
     163,   253,   254,   253,   144,   144,   144,   144,   144,   144,
     134,   144,   134,   144,   144,   144,   246,   243,   134,   144,
     144,   144,   134,   144,   144,   144,   144,   246,   246,    57,
     142,   181,   256,   250,   127,   144,   146,   144,   208,   137,
     208,   208,   208,   208,   208,   143,   208,    95,   210,   204,
     208,   208,   144,    14,   125,    12,    16,    57,   118,   132,
     137,   142,   207,   254,   256,   242,   246,   256,   253,   145,
     225,   150,    73,   219,   256,   150,   124,   125,   125,   125,
     145,   231,   125,   144,    10,    11,    56,    57,   112,   186,
     187,   188,   189,   234,   256,   142,   213,   201,   168,   126,
     214,   146,   125,   142,   173,    12,   137,   174,   164,   246,
     210,    12,    16,    57,   118,   132,   137,   206,   254,   256,
     150,   142,   238,   239,   151,   152,   253,    61,    62,   238,
      61,    62,   124,   246,    12,    16,    57,    90,   118,   132,
     137,   142,   165,   190,   192,   254,   127,   142,   142,   144,
     144,   142,   142,   194,    32,    73,    85,    88,    91,   107,
     193,   256,   246,   208,   242,   144,   210,   207,   144,   144,
     181,    14,   204,   137,   207,   207,   207,   207,   207,   207,
     128,   143,   199,   256,   146,   125,   128,   145,   127,   220,
     221,   256,   145,   232,    10,    10,    10,   150,   255,   126,
     253,   189,   253,   134,   125,   207,   169,   170,   192,   126,
     146,   159,     3,     4,     5,     9,    10,    14,    47,    59,
      64,    72,    73,    87,    89,    91,    96,   100,   103,   108,
     111,   132,   135,   136,   140,   142,   147,   196,   197,   204,
     205,   248,   249,   255,   256,   194,   137,   190,   194,   166,
     192,   144,   206,   137,   206,   206,   206,   206,   206,   142,
     143,   145,   176,   145,   240,   256,   124,   125,   124,   142,
     126,   126,   145,   126,   126,   124,   202,   203,   246,   256,
     126,   137,   190,   190,     6,    15,    16,    17,    18,    19,
      20,    21,    22,    32,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    62,    87,   125,   128,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   142,   143,   147,   182,   190,   190,   190,   190,   127,
     142,   143,   193,   128,   199,   201,   225,   244,   244,   244,
     244,   144,    57,   212,   142,   124,   146,   142,   207,   199,
     142,   142,   193,   207,   144,   246,   242,   246,    92,    93,
      94,   112,   116,   222,   229,   252,   253,   124,   125,   150,
     125,   144,   125,   125,   145,   144,   128,   207,   128,   161,
     183,   184,   188,   128,   198,   256,   171,   192,   199,   201,
     158,   142,   133,   133,   212,   133,   142,   133,   142,   246,
     246,   246,   246,   214,   244,   246,   144,    14,   125,    15,
      16,    17,    18,    19,    20,    21,    22,    32,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   141,
     142,   143,   144,   190,   144,   144,   199,   201,   142,   206,
     179,   242,   194,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    67,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      85,    86,    87,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   146,   147,   241,   238,   152,
     243,   243,   202,   145,   125,   190,    10,   144,   146,   144,
       4,   191,   242,   246,   125,   144,   144,   144,   144,   181,
     212,   209,   144,   253,   238,   194,   199,   194,   194,   142,
     146,   125,   116,   252,   116,   252,   116,   252,   253,    92,
      93,    94,   253,   150,   222,   145,    10,   126,    10,    10,
     126,   214,   198,   214,    47,    59,    64,    96,   100,   103,
     132,   135,   136,   137,   140,   142,   147,   245,   247,   199,
     201,   125,   214,   214,   214,   142,   214,   214,   214,   214,
     246,   144,   144,    14,   205,   246,   246,   246,   246,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     246,   246,   246,   246,   246,   246,   144,   244,   246,   181,
     144,   142,   181,   125,   180,   194,   146,   144,   240,   145,
     145,   144,   145,   124,   246,   196,   146,   165,   193,   209,
     144,   145,   144,   144,   144,   194,   252,   252,   252,   252,
     252,   252,   145,   144,   125,   144,   144,   142,   133,   133,
     133,   142,   133,   245,   245,   245,   245,   245,   214,   244,
     245,    15,    16,    17,    18,    19,    20,    21,    22,    32,
     129,   130,   131,   132,   135,   136,   137,   138,   139,   141,
     142,   143,   125,   170,   144,   134,   134,   243,   134,   144,
     134,   144,   144,   246,   127,   144,   146,   142,   177,   166,
     194,   144,   181,   145,   202,   144,   124,   181,   181,   181,
     144,   126,    10,   126,   126,   214,   214,   214,   214,   214,
     214,   144,   144,   245,   245,   245,   245,   245,   245,   245,
     245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
     245,   245,   144,   244,   246,   171,   142,   142,   144,   142,
     142,   246,   178,   194,   144,   181,   145,   181,   238,   193,
     193,   193,   181,   125,   144,   134,   134,   134,   144,   134,
     245,   127,   144,   146,   244,   244,   244,   244,   194,   144,
     181,   145,    10,   142,   142,   142,   142,   245,   144,   144,
     144,   144,   144,   181,   144,   244,   244,   244,   244,   181,
     193,   126,   144,   144,   144,   144,   193
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   148,   149,   149,   149,   150,   150,   150,   151,   151,
     152,   152,   154,   153,   155,   155,   155,   155,   155,   155,
     155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
     155,   155,   155,   155,   157,   156,   158,   158,   158,   158,
     158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
     158,   159,   159,   160,   160,   161,   161,   161,   161,   163,
     162,   164,   162,   165,   165,   166,   166,   168,   167,   169,
     167,   167,   170,   170,   171,   171,   173,   172,   174,   172,
     176,   175,   177,   175,   178,   175,   179,   175,   180,   175,
     175,   181,   181,   181,   181,   181,   181,   181,   181,   182,
     182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
     182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
     182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
     182,   182,   182,   182,   182,   182,   182,   182,   183,   183,
     185,   184,   184,   186,   186,   187,   187,   188,   188,   188,
     188,   188,   188,   189,   189,   189,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   191,   190,   192,
     192,   193,   193,   193,   194,   194,   194,   194,   194,   195,
     195,   196,   196,   196,   196,   196,   197,   197,   198,   198,
     199,   199,   200,   200,   200,   200,   200,   201,   201,   201,
     201,   201,   201,   202,   202,   202,   203,   203,   203,   203,
     204,   204,   204,   204,   205,   205,   206,   206,   206,   206,
     206,   206,   206,   206,   206,   207,   207,   207,   207,   207,
     207,   207,   207,   207,   207,   207,   208,   208,   208,   208,
     208,   208,   208,   208,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   209,   209,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   212,   212,   212,
     212,   212,   212,   212,   213,   213,   214,   214,   216,   215,
     218,   217,   219,   219,   220,   220,   221,   221,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   223,   224,
     224,   224,   224,   225,   225,   226,   226,   226,   227,   227,
     227,   228,   228,   228,   229,   229,   229,   231,   230,   232,
     230,   230,   230,   233,   233,   233,   234,   234,   234,   235,
     235,   235,   235,   235,   235,   235,   235,   235,   235,   235,
     235,   235,   235,   236,   236,   236,   237,   239,   238,   240,
     240,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   242,   242,   243,   243,   244,
     244,   245,   245,   245,   245,   245,   245,   245,   245,   245,
     245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
     245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
     245,   245,   245,   245,   245,   245,   245,   245,   246,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     246,   246,   246,   246,   247,   247,   247,   247,   247,   247,
     247,   247,   247,   247,   247,   247,   247,   248,   248,   248,
     248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
     248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
     248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
     248,   248,   248,   248,   248,   248,   248,   248,   248,   249,
     249,   249,   249,   249,   249,   249,   249,   249,   249,   249,
     250,   250,   250,   251,   251,   251,   251,   252,   252,   252,
     253,   253,   253,   253,   253,   253,   253,   253,   254,   254,
     254,   255,   255,   255,   255,   256
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     2,     1,     2,     2,     1,     3,
       4,     4,     0,     5,     1,     1,     1,     1,     1,     1,
       2,     1,     1,     2,     2,     2,     2,     7,     9,     9,
      13,     9,     7,     5,     0,     3,     1,     2,     3,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       6,     1,     3,     1,     4,     1,     3,     3,     3,     0,
       4,     0,     5,     2,     4,     2,     4,     0,     4,     0,
       5,     3,     2,     4,     2,     4,     0,     6,     0,     6,
       0,     7,     0,    11,     0,    12,     0,     8,     0,     9,
       1,     1,     1,     2,     2,     2,     2,     4,     5,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     1,     1,     1,
       0,     6,     2,     1,     1,     1,     3,     2,     4,     2,
       4,     3,     4,     1,     1,     1,     1,     2,     3,     2,
       2,     2,     2,     2,     3,     4,     3,     0,     6,     2,
       3,     1,     3,     4,     1,     1,     1,     3,     2,     1,
       3,     1,     1,     1,     3,     2,     1,     3,     1,     2,
       1,     2,     1,     3,     5,     3,     3,     1,     3,     3,
       3,     3,     4,     1,     1,     2,     1,     3,     3,     5,
       3,     4,     5,     2,     1,     1,     1,     1,     2,     2,
       2,     2,     2,     3,     4,     1,     1,     2,     2,     2,
       2,     2,     3,     4,     7,     3,     1,     2,     2,     2,
       2,     2,     3,     4,     1,     2,     2,     2,     2,     2,
       3,     4,     5,     9,     9,     9,     1,     1,     2,     1,
       1,     1,     2,     4,     4,     1,     1,     1,     2,     1,
       1,     1,     2,     4,     2,     4,     1,     1,     1,     2,
       2,     2,     4,     1,     1,     1,     2,     3,     0,     5,
       0,     8,     1,     1,     1,     1,     2,     3,     1,     2,
       2,     2,     3,     3,     3,     3,     3,     3,     4,     3,
       1,     4,     2,     1,     1,     1,     3,     5,     1,     2,
       4,     1,     2,     2,     1,     1,     1,     0,     6,     0,
       7,     4,     5,     3,     5,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     1,     1,     2,     1,     0,     2,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     1,     1,     1,     1,     1,
       3,     1,     4,     7,     7,     7,     7,     4,     4,     2,
       2,     2,     2,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     5,     4,     4,     3,     3,     3,     3,     1,     4,
       7,     7,     7,     7,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     4,     2,
       5,     4,     4,     2,     2,     2,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     5,     4,     4,
       3,     3,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     8,    11,     1,     4,     7,
       7,     7,     7,     4,     4,     2,     5,     4,     4,     2,
       2,     2,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     5,     4,     4,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     2,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     0
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (&yylloc, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (yylocationp);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 3:
#line 424 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_expr = (yyvsp[0].u.expr);
}
#line 3498 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 4:
#line 428 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_type = (yyvsp[0].u.type);
}
#line 3506 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 10:
#line 446 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  delete (yyvsp[-1].u.expr);
}
#line 3514 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 11:
#line 450 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  delete (yyvsp[-1].u.expr);
}
#line 3522 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 12:
#line 462 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) |
                     ((yyvsp[-1].u.integer) & CPPInstance::SC_c_binding));
}
#line 3531 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 13:
#line 467 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_storage_class();
}
#line 3539 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 21:
#line 481 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = (yylsp[0]);
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
#line 3556 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 22:
#line 494 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", (yylsp[0]));
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
#line 3569 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 23:
#line 503 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_scope->set_current_vis(V_published);
}
#line 3577 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 24:
#line 507 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (publish_nest_level > 0) {
    current_scope->set_current_vis(V_published);
  } else {
    current_scope->set_current_vis(V_public);
  }
}
#line 3589 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 25:
#line 515 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_scope->set_current_vis(V_protected);
}
#line 3597 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 26:
#line 519 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_scope->set_current_vis(V_private);
}
#line 3605 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 27:
#line 523 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
  }

  CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-4].u.identifier), getter->as_function_group(), NULL, current_scope, (yylsp[-6]).file);
  current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-6]));
}
#line 3620 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 28:
#line 534 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));

  } else {
    CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    CPPFunctionGroup *setter_func = NULL;

    if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      setter_func = setter->as_function_group();
    }

    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), getter->as_function_group(),
                                                         setter_func, current_scope, (yylsp[-8]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 3645 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 29:
#line 555 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *hasser = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (hasser == (CPPDeclaration *)NULL || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid has-function: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
  }

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
  }

  if (hasser && getter) {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-6].u.identifier),
                                        hasser->as_function_group(),
                                        getter->as_function_group(),
                                        NULL, NULL,
                                        current_scope, (yylsp[-8]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 3671 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 30:
#line 577 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *hasser = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (hasser == (CPPDeclaration *)NULL || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid has-function: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
  }

  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
  }

  CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
  }

  CPPDeclaration *clearer = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (clearer == (CPPDeclaration *)NULL || clearer->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid clear-function: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
  }

  if (hasser && getter && setter && clearer) {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-10].u.identifier),
                                        hasser->as_function_group(),
                                        getter->as_function_group(),
                                        setter->as_function_group(),
                                        clearer->as_function_group(),
                                        current_scope, (yylsp[-12]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-12]));
  }
}
#line 3708 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 31:
#line 610 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == (CPPDeclaration *)NULL || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = NULL;
  }

  CPPDeclaration *element_getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (element_getter == (CPPDeclaration *)NULL || element_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid element method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    element_getter = NULL;
  }

  if (length_getter != (CPPDeclaration *)NULL && element_getter != (CPPDeclaration *)NULL) {
    CPPMakeSeq *make_seq = new CPPMakeSeq((yyvsp[-6].u.identifier),
                                          length_getter->as_function_group(),
                                          element_getter->as_function_group(),
                                          current_scope, (yylsp[-8]).file);
    current_scope->add_declaration(make_seq, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 3734 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 32:
#line 632 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPExpression::Result result = (yyvsp[-4].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-4]));
  } else if (!result.as_boolean()) {
    stringstream str;
    str << *(yyvsp[-2].u.expr);
    yywarning("static_assert failed: " + str.str(), (yylsp[-4]));
  }
}
#line 3749 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 33:
#line 643 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This alternative version of static_assert was introduced in C++17.
  CPPExpression::Result result = (yyvsp[-2].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-2]));
  } else if (!result.as_boolean()) {
    yywarning("static_assert failed", (yylsp[-2]));
  }
}
#line 3763 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 34:
#line 656 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
#line 3773 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 35:
#line 662 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  delete current_scope;
  pop_scope();
}
#line 3782 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 36:
#line 671 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = 0;
}
#line 3790 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 37:
#line 675 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
}
#line 3798 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 38:
#line 679 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
  if ((yyvsp[-1].str) == "C") {
    (yyval.u.integer) |= (int)CPPInstance::SC_c_binding;
  } else if ((yyvsp[-1].str) == "C++") {
    (yyval.u.integer) &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + (yyvsp[-1].str) + "\"", (yylsp[-1]));
  }
}
#line 3813 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 39:
#line 690 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_static;
}
#line 3821 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 40:
#line 694 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_inline;
}
#line 3829 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 41:
#line 698 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_virtual;
}
#line 3837 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 42:
#line 702 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_explicit;
}
#line 3845 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 43:
#line 706 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_register;
}
#line 3853 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 44:
#line 710 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_volatile;
}
#line 3861 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 45:
#line 714 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_mutable;
}
#line 3869 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 46:
#line 718 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_constexpr;
}
#line 3877 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 47:
#line 722 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_blocking;
}
#line 3885 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 48:
#line 726 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extension;
}
#line 3893 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 49:
#line 730 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_thread_local;
}
#line 3901 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 50:
#line 734 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Ignore attribute specifiers for now.
  (yyval.u.integer) = (yyvsp[0].u.integer);
}
#line 3910 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 55:
#line 752 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  /* multiple_var_declaration adds itself to the scope. */
}
#line 3918 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 56:
#line 756 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration((yyvsp[-1].u.decl), global_scope, current_lexer, (yylsp[-1]));
}
#line 3931 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 57:
#line 765 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-1].u.instance) != (CPPInstance *)NULL) {
    (yyvsp[-1].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
    current_scope->add_declaration((yyvsp[-1].u.instance), global_scope, current_lexer, (yylsp[-1]));
    (yyvsp[-1].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 3943 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 58:
#line 773 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-1].u.instance) != (CPPInstance *)NULL) {
    (yyvsp[-1].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
    current_scope->add_declaration((yyvsp[-1].u.instance), global_scope, current_lexer, (yylsp[-1]));
    (yyvsp[-1].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 3955 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 59:
#line 784 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 3970 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 60:
#line 795 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_storage_class();
}
#line 3978 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 61:
#line 799 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-2].u.integer));
}
#line 3993 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 62:
#line 810 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_storage_class();
}
#line 4001 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 63:
#line 821 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-1].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
}
#line 4013 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 64:
#line 829 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-3].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-3]).file);
  inst->set_initializer((yyvsp[-2].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-3]));
}
#line 4025 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 65:
#line 840 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-1].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
}
#line 4038 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 66:
#line 849 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-3].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-3]).file);
  inst->set_initializer((yyvsp[-2].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-3]));
}
#line 4051 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 67:
#line 862 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 4066 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 68:
#line 873 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_storage_class();
}
#line 4074 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 69:
#line 877 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-2].u.integer));
}
#line 4089 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 70:
#line 888 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_storage_class();
}
#line 4097 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 71:
#line 892 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-1].u.instance) != (CPPDeclaration *)NULL) {
    CPPInstance *inst = (yyvsp[-1].u.instance)->as_instance();
    if (inst != (CPPInstance *)NULL) {
      inst->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
      current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
      CPPTypedefType *typedef_type = new CPPTypedefType(inst->_type, inst->_ident, current_scope);
      current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
    }
  }
}
#line 4113 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 72:
#line 907 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-1].u.inst_ident), current_scope, (yylsp[-1]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
}
#line 4123 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 73:
#line 913 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-3].u.inst_ident), current_scope, (yylsp[-3]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-3]));
}
#line 4133 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 74:
#line 922 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-1].u.inst_ident), current_scope, (yylsp[-1]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
}
#line 4144 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 75:
#line 929 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-3].u.inst_ident), current_scope, (yylsp[-3]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-3]));
}
#line 4155 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 76:
#line 941 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 4163 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 77:
#line 945 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type;
  if ((yyvsp[-5].u.identifier)->get_simple_name() == current_scope->get_simple_name() ||
      (yyvsp[-5].u.identifier)->get_simple_name() == string("~") + current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    yywarning("function has no return type, assuming int", (yylsp[-5]));
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }
  pop_scope();

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-5].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
}
#line 4187 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 78:
#line 965 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 4195 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 79:
#line 969 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  CPPType *type;
  if ((yyvsp[-5].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-5].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
}
#line 4217 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 80:
#line 992 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 4225 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 81:
#line 996 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  if ((yyvsp[-5].u.identifier)->is_scoped()) {
    yyerror("Invalid destructor name: ~" + (yyvsp[-5].u.identifier)->get_fully_scoped_name(), (yylsp[-5]));
  } else {
    CPPIdentifier *ident =
      new CPPIdentifier("~" + (yyvsp[-5].u.identifier)->get_simple_name(), (yylsp[-5]));
    delete (yyvsp[-5].u.identifier);

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);

    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

    (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
  }
}
#line 4248 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 82:
#line 1022 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 4256 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 83:
#line 1026 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  CPPType *type = (yyvsp[-10].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[-10].u.identifier)->get_fully_scoped_name(), (yylsp[-10]));
  }
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[-7].u.inst_ident);
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-10]).file);
}
#line 4274 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 84:
#line 1040 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 4282 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 85:
#line 1044 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  CPPType *type = (yyvsp[-11].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[-11].u.identifier)->get_fully_scoped_name(), (yylsp[-11]));
  }
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[-7].u.inst_ident);
  ii->add_scoped_pointer_modifier((yyvsp[-9].u.identifier));
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-11]).file);
}
#line 4300 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 86:
#line 1060 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-3].u.identifier) != NULL) {
    push_scope((yyvsp[-3].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 4310 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 87:
#line 1066 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-7].u.identifier) != NULL) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give typecast operators the name "operator typecast <name>",
  // where <name> is a simple name of the type to be typecast.  Use
  // the method's return type to determine the full type description.
  string name = "operator typecast " + (yyvsp[-6].u.type)->get_simple_name();
  CPPIdentifier *ident = (yyvsp[-7].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier(name, (yylsp[-6]));
  } else {
    ident->add_name(name);
  }
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 4339 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 88:
#line 1091 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-4].u.identifier) != NULL) {
    push_scope((yyvsp[-4].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 4349 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 89:
#line 1097 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-8].u.identifier) != NULL) {
    pop_scope();
  }

  CPPIdentifier *ident = (yyvsp[-8].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator typecast", (yylsp[-5]));
  } else {
    ident->add_name("operator typecast");
  }
  (yyvsp[-5].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 4369 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 90:
#line 1117 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *decl =
    (yyvsp[0].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != (CPPDeclaration *)NULL) {
    (yyval.u.instance) = decl->as_instance();
  } else {
    (yyval.u.instance) = (CPPInstance *)NULL;
  }
}
#line 4383 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 91:
#line 1130 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = 0;
}
#line 4391 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 92:
#line 1134 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (int)CPPFunctionType::F_const_method;
}
#line 4399 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 93:
#line 1138 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (int)CPPFunctionType::F_noexcept;
}
#line 4407 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 94:
#line 1142 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (int)CPPFunctionType::F_final;
}
#line 4415 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 95:
#line 1146 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (int)CPPFunctionType::F_override;
}
#line 4423 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 96:
#line 1150 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Used for lambdas, currently ignored.
  (yyval.u.integer) = 0;
}
#line 4432 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 97:
#line 1155 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-3].u.integer);
}
#line 4440 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 98:
#line 1159 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-4].u.integer);
}
#line 4448 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 99:
#line 1170 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "!";
}
#line 4456 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 100:
#line 1174 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "~";
}
#line 4464 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 101:
#line 1178 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "*";
}
#line 4472 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 102:
#line 1182 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "/";
}
#line 4480 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 103:
#line 1186 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "%";
}
#line 4488 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 104:
#line 1190 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "+";
}
#line 4496 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 105:
#line 1194 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "-";
}
#line 4504 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 106:
#line 1198 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "|";
}
#line 4512 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 107:
#line 1202 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "&";
}
#line 4520 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 108:
#line 1206 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "^";
}
#line 4528 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 109:
#line 1210 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "||";
}
#line 4536 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 110:
#line 1214 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "&&";
}
#line 4544 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 111:
#line 1218 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "==";
}
#line 4552 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 112:
#line 1222 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "!=";
}
#line 4560 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 113:
#line 1226 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<=";
}
#line 4568 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 114:
#line 1230 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">=";
}
#line 4576 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 115:
#line 1234 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<";
}
#line 4584 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 116:
#line 1238 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">";
}
#line 4592 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 117:
#line 1242 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<<";
}
#line 4600 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 118:
#line 1246 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">>";
}
#line 4608 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 119:
#line 1250 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "=";
}
#line 4616 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 120:
#line 1254 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ",";
}
#line 4624 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 121:
#line 1258 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "++";
}
#line 4632 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 122:
#line 1262 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "--";
}
#line 4640 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 123:
#line 1266 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "*=";
}
#line 4648 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 124:
#line 1270 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "/=";
}
#line 4656 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 125:
#line 1274 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "%=";
}
#line 4664 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 126:
#line 1278 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "+=";
}
#line 4672 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 127:
#line 1282 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "-=";
}
#line 4680 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 128:
#line 1286 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "|=";
}
#line 4688 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 129:
#line 1290 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "&=";
}
#line 4696 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 130:
#line 1294 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "^=";
}
#line 4704 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 131:
#line 1298 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<<=";
}
#line 4712 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 132:
#line 1302 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">>=";
}
#line 4720 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 133:
#line 1306 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "->";
}
#line 4728 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 134:
#line 1310 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "[]";
}
#line 4736 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 135:
#line 1314 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "()";
}
#line 4744 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 136:
#line 1318 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "new";
}
#line 4752 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 137:
#line 1322 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "delete";
}
#line 4760 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 140:
#line 1334 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope(new CPPTemplateScope(current_scope));
}
#line 4768 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 141:
#line 1338 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
}
#line 4776 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 145:
#line 1351 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 4786 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 146:
#line 1357 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 4796 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 147:
#line 1366 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[0].u.identifier)));
}
#line 4804 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 148:
#line 1370 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[-2].u.identifier), (yyvsp[0].u.type)));
}
#line 4812 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 149:
#line 1374 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[0].u.identifier)));
}
#line 4820 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 150:
#line 1378 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[-2].u.identifier), (yyvsp[0].u.type)));
}
#line 4828 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 151:
#line 1382 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 4838 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 152:
#line 1388 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 4849 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 153:
#line 1398 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 4857 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 154:
#line 1402 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  yywarning("Not a type: " + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 4866 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 155:
#line 1407 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != NULL);
}
#line 4878 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 156:
#line 1419 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 4886 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 157:
#line 1423 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = (yyvsp[-1].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator "+(yyvsp[0].str), (yylsp[0]));
  } else {
    ident->_names.push_back("operator "+(yyvsp[0].str));
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
#line 4904 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 158:
#line 1437 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A C++11 literal operator.
  if (!(yyvsp[-1].str).empty()) {
    yyerror("expected empty string", (yylsp[-1]));
  }
  CPPIdentifier *ident = (yyvsp[-2].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator \"\" "+(yyvsp[0].u.identifier)->get_simple_name(), (yylsp[0]));
  } else {
    ident->_names.push_back("operator \"\" "+(yyvsp[0].u.identifier)->get_simple_name());
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
#line 4923 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 159:
#line 1452 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 4932 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 160:
#line 1457 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 4941 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 161:
#line 1462 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 4950 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 162:
#line 1467 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 4959 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 163:
#line 1472 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 4968 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 164:
#line 1477 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 4977 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 165:
#line 1482 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 4986 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 166:
#line 1487 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 4995 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 167:
#line 1492 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-1].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 5003 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 168:
#line 1496 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  if ((yyvsp[-2].u.param_list)->is_parameter_expr() && (yyvsp[0].u.integer) == 0) {
    // Oops, this must have been an instance declaration with a
    // parameter list, not a function prototype.
    (yyval.u.inst_ident)->add_initializer_modifier((yyvsp[-2].u.param_list));

  } else {
    // This was (probably) a function prototype.
    (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
  }
}
#line 5021 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 169:
#line 1514 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This is handled a bit awkwardly right now.  Ideally it'd be wrapped
  // up in the instance_identifier rule, but then more needs to happen in
  // order to avoid shift/reduce conflicts.
  if ((yyvsp[0].u.type) != NULL) {
    (yyvsp[-1].u.inst_ident)->add_trailing_return_type((yyvsp[0].u.type));
  }
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
}
#line 5035 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 170:
#line 1524 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Bitfield definition.
  (yyvsp[-2].u.inst_ident)->_bit_width = (yyvsp[0].u.integer);
  (yyval.u.inst_ident) = (yyvsp[-2].u.inst_ident);
}
#line 5045 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 171:
#line 1534 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = NULL;
}
#line 5053 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 172:
#line 1538 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 5061 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 173:
#line 1542 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 5070 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 174:
#line 1551 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
}
#line 5078 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 175:
#line 1555 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5087 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 176:
#line 1560 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 5095 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 177:
#line 1564 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5104 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 178:
#line 1569 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5113 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 179:
#line 1577 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 5122 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 180:
#line 1582 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 5131 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 181:
#line 1590 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
}
#line 5139 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 182:
#line 1594 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5148 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 183:
#line 1599 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 5156 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 184:
#line 1603 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5165 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 185:
#line 1608 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5174 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 186:
#line 1616 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 5183 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 187:
#line 1621 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 5192 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 188:
#line 1629 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5200 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 189:
#line 1633 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 5208 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 190:
#line 1640 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5216 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 191:
#line 1644 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 5224 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 192:
#line 1651 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5232 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 193:
#line 1655 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5240 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 194:
#line 1659 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5248 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 195:
#line 1663 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 5256 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 196:
#line 1667 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 5264 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 197:
#line 1674 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5272 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 198:
#line 1678 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5280 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 199:
#line 1682 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 5288 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 200:
#line 1686 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 5296 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 201:
#line 1690 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 5304 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 202:
#line 1694 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5312 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 206:
#line 1707 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
}
#line 5319 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 210:
#line 1716 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 5328 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 211:
#line 1721 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 5338 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 212:
#line 1727 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 5348 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 213:
#line 1733 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 5356 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 214:
#line 1744 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 5364 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 215:
#line 1748 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_parameter));
  (yyval.u.instance) = new CPPInstance(type, "expr");
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 5375 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 216:
#line 1758 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
#line 5383 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 217:
#line 1762 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 5391 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 218:
#line 1766 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 5400 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 219:
#line 1771 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 5409 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 220:
#line 1776 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 5418 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 221:
#line 1781 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 5427 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 222:
#line 1786 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 5436 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 223:
#line 1791 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 5445 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 224:
#line 1796 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 5454 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 225:
#line 1804 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
#line 5462 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 226:
#line 1808 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 5470 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 227:
#line 1812 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 5479 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 228:
#line 1817 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 5488 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 229:
#line 1822 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 5497 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 230:
#line 1827 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 5506 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 231:
#line 1832 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 5515 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 232:
#line 1837 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 5524 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 233:
#line 1842 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 5533 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 234:
#line 1847 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 5543 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 235:
#line 1853 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 5552 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 236:
#line 1861 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
#line 5560 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 237:
#line 1865 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 5569 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 238:
#line 1870 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 5578 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 239:
#line 1875 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 5587 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 240:
#line 1880 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 5596 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 241:
#line 1885 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 5605 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 242:
#line 1890 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 5614 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 243:
#line 1895 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 5623 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 244:
#line 1903 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
#line 5631 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 245:
#line 1907 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 5640 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 246:
#line 1912 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 5649 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 247:
#line 1917 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 5658 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 248:
#line 1922 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 5667 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 249:
#line 1927 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 5676 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 250:
#line 1932 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 5685 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 251:
#line 1937 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 5694 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 252:
#line 1942 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 5704 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 253:
#line 1948 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 5715 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 254:
#line 1955 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 5726 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 255:
#line 1962 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 5737 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 256:
#line 1972 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 5745 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 257:
#line 1976 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != NULL);
}
#line 5757 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 258:
#line 1984 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 5765 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 259:
#line 1988 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 5773 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 260:
#line 1992 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 5781 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 261:
#line 1996 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.enum_type));
}
#line 5789 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 262:
#line 2000 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 5809 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 263:
#line 2016 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-3]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 5829 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 264:
#line 2032 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 5842 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 265:
#line 2041 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 5850 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 266:
#line 2048 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 5858 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 267:
#line 2052 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.decl) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.decl) != NULL);
}
#line 5870 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 268:
#line 2060 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 5878 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 269:
#line 2064 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 5886 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 270:
#line 2068 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.struct_type)));
}
#line 5894 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 271:
#line 2072 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.enum_type)));
}
#line 5902 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 272:
#line 2076 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 5922 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 273:
#line 2092 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-3]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 5942 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 274:
#line 2108 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  yywarning(string("C++ does not permit forward declaration of untyped enum ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));

  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 5964 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 275:
#line 2126 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.decl) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 5977 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 276:
#line 2135 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 5985 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 277:
#line 2142 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 5993 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 278:
#line 2146 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != NULL);
}
#line 6005 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 279:
#line 2154 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 6013 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 280:
#line 2158 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6033 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 281:
#line 2174 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6053 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 282:
#line 2190 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 6066 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 283:
#line 2199 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6074 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 284:
#line 2206 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = (yyvsp[0].u.decl);
}
#line 6082 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 285:
#line 2210 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  yyerror(string("unknown type '") + (yyvsp[0].u.identifier)->get_fully_scoped_name() + "'", (yylsp[0]));

  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 6092 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 286:
#line 2218 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 6100 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 287:
#line 2222 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 6109 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 288:
#line 2230 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPVisibility starting_vis =
  ((yyvsp[-1].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType((yyvsp[-1].u.extension_enum), NULL, current_scope,
                                        new_scope, (yylsp[-1]).file);
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 6127 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 289:
#line 2244 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 6138 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 290:
#line 2254 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPVisibility starting_vis =
  ((yyvsp[-1].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, (yyvsp[0].u.identifier)->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope,
                                        new_scope, (yylsp[-1]).file);
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 6162 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 291:
#line 2274 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 6173 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 293:
#line 2285 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->_final = true;
}
#line 6181 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 298:
#line 2302 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_unknown, false);
}
#line 6189 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 299:
#line 2306 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, false);
}
#line 6197 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 300:
#line 2310 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, false);
}
#line 6205 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 301:
#line 2314 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, false);
}
#line 6213 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 302:
#line 2318 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 6221 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 303:
#line 2322 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 6229 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 304:
#line 2326 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 6237 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 305:
#line 2330 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 6245 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 306:
#line 2334 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 6253 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 307:
#line 2338 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 6261 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 308:
#line 2345 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.enum_type) = current_enum;
  current_enum = NULL;
}
#line 6270 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 309:
#line 2353 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_enum = new CPPEnumType((yyvsp[-2].u.extension_enum), NULL, (yyvsp[0].u.type), current_scope, NULL, (yylsp[-2]).file);
}
#line 6278 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 310:
#line 2357 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_enum = new CPPEnumType((yyvsp[0].u.extension_enum), NULL, current_scope, NULL, (yylsp[0]).file);
}
#line 6286 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 311:
#line 2361 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[-2].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), (yyvsp[0].u.type), current_scope, new_scope, (yylsp[-3]).file);
}
#line 6295 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 312:
#line 2366 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[0].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, new_scope, (yylsp[-1]).file);
}
#line 6304 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 313:
#line 2374 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 6312 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 314:
#line 2378 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
}
#line 6320 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 316:
#line 2386 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[-1].u.identifier)->get_simple_name(), NULL, current_lexer, (yylsp[-1]));
}
#line 6329 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 317:
#line 2391 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[-3].u.identifier)->get_simple_name(), (yyvsp[-1].u.expr), current_lexer, (yylsp[-3]));
}
#line 6338 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 319:
#line 2399 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[0].u.identifier)->get_simple_name(), NULL, current_lexer, (yylsp[0]));
}
#line 6347 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 320:
#line 2404 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[-2].u.identifier)->get_simple_name(), (yyvsp[0].u.expr), current_lexer, (yylsp[-2]));
}
#line 6356 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 321:
#line 2412 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum;
}
#line 6364 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 322:
#line 2416 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_class;
}
#line 6372 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 323:
#line 2420 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_struct;
}
#line 6380 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 324:
#line 2427 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_class;
}
#line 6388 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 325:
#line 2431 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_struct;
}
#line 6396 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 326:
#line 2435 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_union;
}
#line 6404 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 327:
#line 2442 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-2]).file);
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-2]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 6426 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 328:
#line 2460 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
}
#line 6434 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 329:
#line 2464 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-2]).file);
  nspace->_is_inline = true;
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-2]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 6457 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 330:
#line 2483 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
}
#line 6465 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 333:
#line 2492 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), false, (yylsp[-2]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-2]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 6475 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 334:
#line 2498 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This is really just an alternative way to declare a typedef.
  CPPTypedefType *typedef_type = new CPPTypedefType((yyvsp[-1].u.type), (yyvsp[-3].u.identifier), current_scope);
  typedef_type->_using = true;
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-4]));
}
#line 6486 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 335:
#line 2505 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), true, (yylsp[-3]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-3]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 6496 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 339:
#line 2520 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_bool);
}
#line 6504 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 340:
#line 2524 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char);
}
#line 6512 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 341:
#line 2528 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_wchar_t);
}
#line 6520 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 342:
#line 2532 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char16_t);
}
#line 6528 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 343:
#line 2536 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char32_t);
}
#line 6536 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 344:
#line 2540 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
#line 6545 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 345:
#line 2545 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
#line 6554 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 346:
#line 2550 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
#line 6563 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 347:
#line 2555 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
#line 6572 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 348:
#line 2560 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int);
}
#line 6580 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 349:
#line 2564 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_short;
}
#line 6589 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 350:
#line 2569 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  if ((yyval.u.simple_type)->_flags & CPPSimpleType::F_long) {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_longlong;
  } else {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_long;
  }
}
#line 6602 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 351:
#line 2578 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_unsigned;
}
#line 6611 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 352:
#line 2583 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_signed;
}
#line 6620 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 353:
#line 2591 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float);
}
#line 6628 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 354:
#line 2595 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double);
}
#line 6636 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 355:
#line 2599 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
#line 6645 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 356:
#line 2607 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_void);
}
#line 6653 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 357:
#line 2616 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_lexer->_resolve_identifiers = false;
}
#line 6661 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 358:
#line 2620 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_lexer->_resolve_identifiers = true;
}
#line 6669 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 461:
#line 2661 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
}
#line 6676 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 485:
#line 2670 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 6684 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 486:
#line 2674 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 6692 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 487:
#line 2681 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 6700 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 488:
#line 2685 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 6708 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 489:
#line 2692 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 6716 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 490:
#line 2696 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(',', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6724 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 491:
#line 2703 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 6732 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 492:
#line 2707 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 6740 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 493:
#line 2711 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 6748 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 494:
#line 2715 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 6756 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 495:
#line 2719 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 6764 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 496:
#line 2723 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 6772 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 497:
#line 2727 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 6780 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 498:
#line 2731 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 6788 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 499:
#line 2735 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 6796 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 500:
#line 2739 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 6804 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 501:
#line 2743 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 6812 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 502:
#line 2747 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 6820 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 503:
#line 2751 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 6828 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 504:
#line 2755 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 6836 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 505:
#line 2759 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6844 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 506:
#line 2763 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6852 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 507:
#line 2767 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6860 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 508:
#line 2771 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6868 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 509:
#line 2775 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6876 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 510:
#line 2779 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6884 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 511:
#line 2783 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6892 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 512:
#line 2787 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6900 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 513:
#line 2791 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6908 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 514:
#line 2795 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6916 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 515:
#line 2799 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6924 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 516:
#line 2803 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6932 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 517:
#line 2807 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6940 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 518:
#line 2811 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6948 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 519:
#line 2815 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6956 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 520:
#line 2819 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6964 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 521:
#line 2823 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6972 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 522:
#line 2827 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 6980 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 523:
#line 2831 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 6988 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 524:
#line 2835 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 6996 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 525:
#line 2839 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7004 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 526:
#line 2843 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7012 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 527:
#line 2847 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 7020 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 528:
#line 2855 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7028 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 529:
#line 2859 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 7036 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 530:
#line 2863 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 7044 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 531:
#line 2867 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 7052 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 532:
#line 2871 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 7060 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 533:
#line 2875 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 7068 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 534:
#line 2879 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A constructor call.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  }
  assert(type != NULL);
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 7082 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 535:
#line 2889 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 7092 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 536:
#line 2895 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 7102 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 537:
#line 2901 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_wchar_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 7112 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 538:
#line 2907 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char16_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 7122 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 539:
#line 2913 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char32_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 7132 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 540:
#line 2919 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 7142 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 541:
#line 2925 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 7153 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 542:
#line 2932 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 7164 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 543:
#line 2939 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 7175 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 544:
#line 2946 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 7186 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 545:
#line 2953 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 7196 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 546:
#line 2959 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 7206 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 547:
#line 2965 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 7214 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 548:
#line 2969 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 7222 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 549:
#line 2973 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 7230 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 550:
#line 2977 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 7238 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 551:
#line 2981 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 7253 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 552:
#line 2992 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 7268 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 553:
#line 3003 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 7276 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 554:
#line 3007 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 7284 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 555:
#line 3011 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 7292 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 556:
#line 3015 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 7300 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 557:
#line 3019 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 7308 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 558:
#line 3023 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 7316 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 559:
#line 3027 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7324 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 560:
#line 3031 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7332 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 561:
#line 3035 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7340 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 562:
#line 3039 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7348 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 563:
#line 3043 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7356 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 564:
#line 3047 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7364 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 565:
#line 3051 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7372 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 566:
#line 3055 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7380 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 567:
#line 3059 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7388 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 568:
#line 3063 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7396 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 569:
#line 3067 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7404 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 570:
#line 3071 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7412 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 571:
#line 3075 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7420 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 572:
#line 3079 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7428 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 573:
#line 3083 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7436 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 574:
#line 3087 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7444 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 575:
#line 3091 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7452 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 576:
#line 3095 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7460 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 577:
#line 3099 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7468 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 578:
#line 3103 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 7476 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 579:
#line 3107 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 7484 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 580:
#line 3111 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 7492 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 581:
#line 3115 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7500 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 582:
#line 3119 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7508 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 583:
#line 3123 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 7516 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 584:
#line 3130 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 7524 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 585:
#line 3134 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(true);
}
#line 7532 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 586:
#line 3138 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(false);
}
#line 7540 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 587:
#line 3142 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 7548 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 588:
#line 3146 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 7556 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 589:
#line 3150 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7564 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 590:
#line 3154 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7572 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 591:
#line 3158 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 7580 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 592:
#line 3162 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 7590 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 593:
#line 3168 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 7600 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 594:
#line 3174 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 7608 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 595:
#line 3178 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = NULL;
}
#line 7616 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 596:
#line 3182 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = NULL;
}
#line 7624 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 597:
#line 3196 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7632 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 598:
#line 3200 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 7640 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 599:
#line 3204 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 7648 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 600:
#line 3208 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 7656 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 601:
#line 3212 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 7664 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 602:
#line 3216 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 7672 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 603:
#line 3220 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 7680 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 604:
#line 3224 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 7688 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 605:
#line 3228 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 7696 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 606:
#line 3232 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 7704 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 607:
#line 3236 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 7719 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 608:
#line 3247 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 7734 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 609:
#line 3258 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 7742 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 610:
#line 3262 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 7750 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 611:
#line 3266 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 7758 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 612:
#line 3270 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 7766 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 613:
#line 3274 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 7774 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 614:
#line 3278 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7782 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 615:
#line 3282 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7790 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 616:
#line 3286 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7798 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 617:
#line 3290 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7806 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 618:
#line 3294 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7814 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 619:
#line 3298 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7822 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 620:
#line 3302 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7830 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 621:
#line 3306 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7838 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 622:
#line 3310 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7846 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 623:
#line 3314 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7854 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 624:
#line 3318 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7862 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 625:
#line 3322 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7870 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 626:
#line 3326 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7878 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 627:
#line 3330 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7886 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 628:
#line 3334 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7894 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 629:
#line 3338 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7902 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 630:
#line 3342 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7910 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 631:
#line 3346 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7918 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 632:
#line 3350 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7926 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 633:
#line 3354 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 7934 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 634:
#line 3358 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 7942 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 635:
#line 3362 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 7950 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 636:
#line 3366 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7958 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 637:
#line 3370 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7966 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 638:
#line 3374 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 7974 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 639:
#line 3381 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 7982 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 640:
#line 3385 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(true);
}
#line 7990 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 641:
#line 3389 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(false);
}
#line 7998 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 642:
#line 3393 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 8006 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 643:
#line 3397 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 8014 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 644:
#line 3401 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8022 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 645:
#line 3405 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8030 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 646:
#line 3409 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 8038 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 647:
#line 3413 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 8048 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 648:
#line 3419 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 8058 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 649:
#line 3425 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 8066 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 657:
#line 3446 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, true);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
  }
  (yyval.u.type) = type;
}
#line 8078 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 658:
#line 3454 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, true, current_lexer);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
  }
  (yyval.u.type) = type;
}
#line 8090 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 659:
#line 3462 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 8098 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 660:
#line 3490 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 8106 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 661:
#line 3494 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 8114 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 662:
#line 3498 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("final", (yylsp[0]));
}
#line 8122 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 663:
#line 3502 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 8130 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 664:
#line 3506 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This is not a keyword in Python, so it is useful to be able to use this
  // in MAKE_PROPERTY definitions, etc.
  (yyval.u.identifier) = new CPPIdentifier("signed", (yylsp[0]));
}
#line 8140 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 665:
#line 3512 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("float", (yylsp[0]));
}
#line 8148 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 666:
#line 3516 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("public", (yylsp[0]));
}
#line 8156 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 667:
#line 3520 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("private", (yylsp[0]));
}
#line 8164 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 668:
#line 3531 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 8172 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 669:
#line 3535 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 8180 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 670:
#line 3539 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 8188 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 671:
#line 3547 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].str));
}
#line 8196 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 672:
#line 3551 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8204 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 673:
#line 3555 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // The right string takes on the literal type of the left.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  (yyval.u.expr)->_str += (yyvsp[0].str);
}
#line 8214 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 674:
#line 3561 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We have to check that the two literal types match up.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  if ((yyvsp[0].u.expr)->_type != CPPExpression::T_string && (yyvsp[0].u.expr)->_type != (yyvsp[-1].u.expr)->_type) {
    yywarning("cannot concatenate two string literals of different types", (yyloc));
  }
  (yyval.u.expr)->_str += (yyvsp[0].u.expr)->_str;
}
#line 8227 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;


#line 8231 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
