/* A Bison parser, made from cppBison.yxx
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse cppyyparse
#define yylex cppyylex
#define yyerror cppyyerror
#define yylval cppyylval
#define yychar cppyychar
#define yydebug cppyydebug
#define yynerrs cppyynerrs
#define YYLSP_NEEDED 1

# define	REAL	257
# define	INTEGER	258
# define	CHAR	259
# define	STRING	260
# define	SIMPLE_IDENTIFIER	261
# define	IDENTIFIER	262
# define	TYPENAME_IDENTIFIER	263
# define	SCOPING	264
# define	TYPEDEFNAME	265
# define	ELLIPSIS	266
# define	OROR	267
# define	ANDAND	268
# define	EQCOMPARE	269
# define	NECOMPARE	270
# define	LECOMPARE	271
# define	GECOMPARE	272
# define	LSHIFT	273
# define	RSHIFT	274
# define	POINTSAT_STAR	275
# define	DOT_STAR	276
# define	UNARY	277
# define	UNARY_NOT	278
# define	UNARY_NEGATE	279
# define	UNARY_MINUS	280
# define	UNARY_STAR	281
# define	UNARY_REF	282
# define	POINTSAT	283
# define	SCOPE	284
# define	PLUSPLUS	285
# define	MINUSMINUS	286
# define	TIMESEQUAL	287
# define	DIVIDEEQUAL	288
# define	MODEQUAL	289
# define	PLUSEQUAL	290
# define	MINUSEQUAL	291
# define	OREQUAL	292
# define	ANDEQUAL	293
# define	XOREQUAL	294
# define	LSHIFTEQUAL	295
# define	RSHIFTEQUAL	296
# define	TOKENPASTE	297
# define	KW_BEGIN_PUBLISH	298
# define	KW_BOOL	299
# define	KW_CATCH	300
# define	KW_CHAR	301
# define	KW_CLASS	302
# define	KW_CONST	303
# define	KW_DELETE	304
# define	KW_DOUBLE	305
# define	KW_DYNAMIC_CAST	306
# define	KW_ELSE	307
# define	KW_END_PUBLISH	308
# define	KW_ENUM	309
# define	KW_EXTERN	310
# define	KW_EXPLICIT	311
# define	KW_PUBLISHED	312
# define	KW_FALSE	313
# define	KW_FLOAT	314
# define	KW_FRIEND	315
# define	KW_FOR	316
# define	KW_GOTO	317
# define	KW_IF	318
# define	KW_INLINE	319
# define	KW_INT	320
# define	KW_LONG	321
# define	KW_LONGLONG	322
# define	KW_MUTABLE	323
# define	KW_NAMESPACE	324
# define	KW_NEW	325
# define	KW_OPERATOR	326
# define	KW_PRIVATE	327
# define	KW_PROTECTED	328
# define	KW_PUBLIC	329
# define	KW_REGISTER	330
# define	KW_RETURN	331
# define	KW_SHORT	332
# define	KW_SIGNED	333
# define	KW_SIZEOF	334
# define	KW_STATIC	335
# define	KW_STATIC_CAST	336
# define	KW_STRUCT	337
# define	KW_TEMPLATE	338
# define	KW_THROW	339
# define	KW_TRUE	340
# define	KW_TRY	341
# define	KW_TYPEDEF	342
# define	KW_TYPENAME	343
# define	KW_UNION	344
# define	KW_UNSIGNED	345
# define	KW_USING	346
# define	KW_VIRTUAL	347
# define	KW_VOID	348
# define	KW_VOLATILE	349
# define	KW_WHILE	350
# define	START_CPP	351
# define	START_CONST_EXPR	352
# define	START_TYPE	353

#line 6 "cppBison.yxx"


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedef.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = NULL;
CPPScope *global_scope = NULL;
CPPPreprocessor *current_lexer = NULL;

static CPPStructType *current_struct = NULL; 
static CPPEnumType *current_enum = NULL;
static int current_storage_class = 0;
static CPPType *current_type = NULL;
static CPPExpression *current_expr = NULL;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static vector<CPPScope *> last_scopes;
static vector<int> last_storage_classes;
static vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc.first_line, loc.first_column);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc.first_line, loc.first_column);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
    
}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = (CPPExpression *)NULL;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = (CPPType *)NULL;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;
  
  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != NULL) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}


#ifndef YYLTYPE
typedef struct yyltype
{
  int first_line;
  int first_column;

  int last_line;
  int last_column;
} yyltype;

# define YYLTYPE yyltype
# define YYLTYPE_IS_TRIVIAL 1
#endif

#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		934
#define	YYFLAG		-32768
#define	YYNTBASE	124

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 353 ? yytranslate[x] : 217)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   122,     2,     2,     2,   115,   108,     2,
     118,   120,   113,   111,   101,   112,   117,   114,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   103,   102,
     109,   104,   110,   105,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   119,     2,   123,   107,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   100,   106,   121,   116,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    17,    19,    23,
      28,    29,    35,    37,    39,    41,    43,    45,    47,    50,
      52,    54,    57,    60,    63,    66,    67,    71,    73,    76,
      80,    83,    86,    89,    92,    95,    98,   101,   103,   107,
     111,   112,   117,   118,   124,   127,   132,   135,   140,   141,
     146,   147,   153,   157,   160,   165,   168,   173,   174,   181,
     182,   189,   190,   198,   199,   210,   211,   223,   224,   233,
     234,   244,   246,   248,   250,   255,   261,   263,   265,   267,
     269,   271,   273,   275,   277,   279,   281,   283,   285,   287,
     289,   291,   293,   295,   297,   299,   301,   303,   305,   307,
     309,   311,   313,   315,   317,   319,   321,   323,   325,   327,
     329,   331,   334,   337,   339,   341,   343,   345,   346,   353,
     355,   357,   359,   363,   366,   371,   375,   380,   382,   384,
     386,   389,   391,   394,   397,   400,   403,   407,   412,   416,
     420,   421,   428,   430,   432,   434,   438,   441,   443,   447,
     449,   452,   454,   457,   459,   463,   469,   473,   478,   480,
     482,   485,   487,   491,   495,   501,   505,   509,   514,   516,
     518,   520,   522,   525,   528,   531,   535,   540,   542,   544,
     546,   549,   552,   555,   559,   564,   572,   576,   578,   581,
     584,   587,   591,   596,   604,   606,   608,   611,   613,   615,
     617,   619,   622,   625,   627,   629,   632,   634,   636,   638,
     640,   643,   646,   648,   650,   653,   656,   659,   662,   666,
     667,   673,   674,   682,   684,   686,   689,   693,   696,   699,
     702,   706,   710,   714,   718,   722,   726,   727,   733,   734,
     741,   743,   745,   748,   750,   754,   758,   764,   766,   768,
     770,   772,   773,   780,   785,   788,   792,   794,   796,   798,
     800,   802,   804,   806,   808,   810,   812,   814,   817,   820,
     823,   826,   828,   831,   833,   837,   840,   842,   843,   846,
     848,   851,   853,   855,   857,   859,   861,   863,   865,   867,
     869,   871,   873,   875,   877,   879,   881,   883,   885,   887,
     889,   891,   893,   895,   897,   899,   901,   903,   905,   907,
     909,   911,   913,   915,   917,   919,   921,   923,   925,   927,
     929,   931,   933,   935,   937,   939,   941,   943,   945,   947,
     949,   951,   953,   955,   957,   959,   961,   963,   965,   967,
     969,   971,   973,   975,   977,   979,   981,   983,   985,   987,
     989,   991,   993,   995,   997,   999,  1001,  1003,  1005,  1007,
    1009,  1011,  1013,  1015,  1017,  1019,  1021,  1023,  1025,  1027,
    1029,  1031,  1033,  1035,  1037,  1039,  1041,  1043,  1045,  1047,
    1049,  1051,  1053,  1055,  1057,  1061,  1063,  1065,  1067,  1069,
    1071,  1075,  1077,  1082,  1090,  1098,  1103,  1106,  1109,  1112,
    1115,  1118,  1122,  1126,  1130,  1134,  1138,  1142,  1146,  1150,
    1154,  1158,  1162,  1166,  1170,  1174,  1178,  1184,  1189,  1194,
    1198,  1202,  1206,  1210,  1212,  1217,  1225,  1233,  1238,  1243,
    1248,  1253,  1258,  1263,  1268,  1273,  1278,  1283,  1288,  1291,
    1297,  1300,  1303,  1306,  1309,  1312,  1316,  1320,  1324,  1328,
    1332,  1336,  1340,  1344,  1348,  1352,  1356,  1360,  1364,  1368,
    1372,  1376,  1380,  1386,  1391,  1396,  1400,  1404,  1408,  1412,
    1414,  1416,  1418,  1420,  1422,  1424,  1426,  1428,  1433,  1441,
    1449,  1454,  1457,  1463,  1466,  1469,  1472,  1475,  1479,  1483,
    1487,  1491,  1495,  1499,  1503,  1507,  1511,  1515,  1519,  1523,
    1527,  1531,  1535,  1539,  1543,  1549,  1554,  1559,  1563,  1567,
    1571,  1575,  1577,  1579,  1581,  1583,  1585,  1587,  1589,  1592,
    1595,  1597,  1599,  1601,  1604
};
static const short yyrhs[] =
{
      97,   125,     0,    98,   209,     0,    99,   178,     0,   216,
       0,   125,   102,     0,   125,   130,     0,   127,     0,   126,
     101,   127,     0,   214,   118,   206,   120,     0,     0,   133,
     100,   129,   125,   121,     0,   134,     0,   156,     0,   128,
       0,   194,     0,   196,     0,   131,     0,    88,   140,     0,
      44,     0,    54,     0,    58,   103,     0,    75,   103,     0,
      74,   103,     0,    73,   103,     0,     0,    61,   132,   130,
       0,   216,     0,   133,    56,     0,   133,    56,   215,     0,
     133,    81,     0,   133,    65,     0,   133,    93,     0,   133,
      57,     0,   133,    95,     0,   133,    69,     0,   133,    76,
       0,   135,     0,   133,   176,   102,     0,   133,   145,   168,
       0,     0,   133,   176,   136,   138,     0,     0,   133,    49,
     175,   137,   139,     0,   162,   168,     0,   162,   167,   101,
     138,     0,   162,   168,     0,   162,   167,   101,   139,     0,
       0,   133,   176,   141,   143,     0,     0,   133,    49,   175,
     142,   144,     0,   133,   145,   168,     0,   162,   168,     0,
     162,   167,   101,   143,     0,   162,   168,     0,   162,   167,
     101,   144,     0,     0,     8,   118,   146,   164,   120,   153,
       0,     0,     9,   118,   147,   164,   120,   153,     0,     0,
     116,   214,   118,   148,   164,   120,   153,     0,     0,     9,
     118,   113,   162,   120,   118,   149,   164,   120,   153,     0,
       0,     9,   118,    10,   113,   162,   120,   118,   150,   164,
     120,   153,     0,     0,    72,   175,   172,   118,   151,   164,
     120,   153,     0,     0,    72,    49,   175,   172,   118,   152,
     164,   120,   153,     0,     8,     0,   216,     0,    49,     0,
     153,    85,   118,   120,     0,   153,    85,   118,   214,   120,
       0,   122,     0,   116,     0,   113,     0,   114,     0,   115,
       0,   111,     0,   112,     0,   106,     0,   108,     0,   107,
       0,    13,     0,    14,     0,    15,     0,    16,     0,    17,
       0,    18,     0,   109,     0,   110,     0,    19,     0,    20,
       0,   104,     0,   101,     0,    31,     0,    32,     0,    33,
       0,    34,     0,    35,     0,    36,     0,    37,     0,    38,
       0,    39,     0,    40,     0,    41,     0,    42,     0,    29,
       0,   119,   123,     0,   118,   120,     0,    71,     0,    50,
       0,   134,     0,   156,     0,     0,    84,   157,   109,   158,
     110,   155,     0,   216,     0,   159,     0,   160,     0,   159,
     101,   160,     0,    48,   214,     0,    48,   214,   104,   178,
       0,   161,   173,   166,     0,    49,   161,   173,   166,     0,
     197,     0,     8,     0,     9,     0,    89,   214,     0,   214,
       0,    72,   154,     0,    49,   162,     0,   113,   162,     0,
     108,   162,     0,    10,   113,   162,     0,   162,   119,   205,
     123,     0,   162,   103,     4,     0,   118,   162,   120,     0,
       0,   162,   118,   163,   164,   120,   153,     0,   216,     0,
      12,     0,   165,     0,   165,   101,    12,     0,   165,    12,
       0,   171,     0,   165,   101,   171,     0,   216,     0,   104,
     208,     0,   216,     0,   104,   209,     0,   102,     0,   100,
     201,   121,     0,   103,   126,   100,   201,   121,     0,   104,
     209,   102,     0,   104,   100,   169,   121,     0,   216,     0,
     170,     0,   170,   101,     0,   209,     0,   100,   169,   121,
       0,   170,   101,   209,     0,   170,   101,   100,   169,   121,
       0,   175,   173,   167,     0,     8,   173,   167,     0,    49,
     175,   173,   167,     0,   211,     0,   216,     0,     8,     0,
       9,     0,    49,   172,     0,   113,   172,     0,   108,   172,
       0,    10,   113,   172,     0,   172,   119,   205,   123,     0,
     216,     0,     8,     0,     9,     0,    49,   173,     0,   113,
     173,     0,   108,   173,     0,    10,   113,   173,     0,   173,
     119,   205,   123,     0,   118,   173,   120,   118,   164,   120,
     153,     0,   118,   173,   120,     0,   216,     0,    49,   174,
       0,   113,   174,     0,   108,   174,     0,    10,   113,   174,
       0,   174,   119,   205,   123,     0,   118,   174,   120,   118,
     164,   120,   153,     0,   197,     0,     9,     0,    89,   214,
       0,   179,     0,   181,     0,   186,     0,   188,     0,   193,
     214,     0,   192,   214,     0,   197,     0,     9,     0,    89,
     214,     0,   179,     0,   181,     0,   186,     0,   188,     0,
     193,   214,     0,   192,   214,     0,   197,     0,     9,     0,
      89,   214,     0,   193,   214,     0,   192,   214,     0,   175,
     174,     0,    49,   175,   174,     0,     0,   193,   100,   180,
     125,   121,     0,     0,   193,   214,   182,   183,   100,   125,
     121,     0,   216,     0,   184,     0,   103,   185,     0,   184,
     101,   185,     0,    75,   213,     0,    74,   213,     0,    73,
     213,     0,    93,    75,   213,     0,    93,    74,   213,     0,
      93,    73,   213,     0,    75,    93,   213,     0,    74,    93,
     213,     0,    73,    93,   213,     0,     0,   192,   100,   187,
     190,   121,     0,     0,   192,   214,   100,   189,   190,   121,
       0,   216,     0,   191,     0,   191,   101,     0,   214,     0,
     214,   104,   209,     0,   191,   101,   214,     0,   191,   101,
     214,   104,   209,     0,    55,     0,    48,     0,    83,     0,
      90,     0,     0,    70,   214,   100,   195,   125,   121,     0,
      70,   100,   125,   121,     0,    92,   214,     0,    92,    70,
     214,     0,   198,     0,   199,     0,   200,     0,    45,     0,
      47,     0,    78,     0,    67,     0,    68,     0,    91,     0,
      79,     0,    66,     0,    78,   198,     0,    67,   198,     0,
      91,   198,     0,    79,   198,     0,    60,     0,    67,    60,
       0,    51,     0,    67,    67,    60,     0,    67,    51,     0,
      94,     0,     0,   202,   203,     0,   216,     0,   203,   204,
       0,     3,     0,     4,     0,     6,     0,     5,     0,     8,
       0,     9,     0,    10,     0,     7,     0,    12,     0,    13,
       0,    14,     0,    15,     0,    16,     0,    17,     0,    18,
       0,    19,     0,    20,     0,    21,     0,    22,     0,    29,
       0,    30,     0,    31,     0,    32,     0,    33,     0,    34,
       0,    35,     0,    36,     0,    37,     0,    38,     0,    39,
       0,    40,     0,    41,     0,    42,     0,    45,     0,    46,
       0,    47,     0,    48,     0,    49,     0,    50,     0,    51,
       0,    52,     0,    53,     0,    55,     0,    56,     0,    57,
       0,    59,     0,    60,     0,    61,     0,    62,     0,    63,
       0,    64,     0,    65,     0,    66,     0,    67,     0,    69,
       0,    71,     0,    73,     0,    74,     0,    75,     0,    58,
       0,    76,     0,    77,     0,    78,     0,    79,     0,    80,
       0,    81,     0,    82,     0,    83,     0,    85,     0,    86,
       0,    87,     0,    88,     0,    89,     0,    90,     0,    91,
       0,    93,     0,    94,     0,    95,     0,    96,     0,    43,
       0,    72,     0,   111,     0,   112,     0,   113,     0,   114,
       0,   108,     0,   106,     0,   107,     0,   122,     0,   116,
       0,   104,     0,   115,     0,   109,     0,   110,     0,   118,
       0,   120,     0,   117,     0,   101,     0,   102,     0,   103,
       0,   119,     0,   123,     0,   105,     0,   100,   203,   121,
       0,   216,     0,   209,     0,   216,     0,   207,     0,   209,
       0,   207,   101,   209,     0,   210,     0,   118,   178,   120,
     208,     0,    82,   109,   178,   110,   118,   207,   120,     0,
      52,   109,   178,   110,   118,   207,   120,     0,    80,   118,
     178,   120,     0,   122,   208,     0,   116,   208,     0,   112,
     208,     0,   113,   208,     0,   108,   208,     0,   208,   113,
     208,     0,   208,   114,   208,     0,   208,   115,   208,     0,
     208,   111,   208,     0,   208,   112,   208,     0,   208,   106,
     208,     0,   208,   108,   208,     0,   208,    13,   208,     0,
     208,    14,   208,     0,   208,    15,   208,     0,   208,    16,
     208,     0,   208,    17,   208,     0,   208,    18,   208,     0,
     208,    19,   208,     0,   208,    20,   208,     0,   208,   105,
     208,   103,   208,     0,   208,   119,   209,   123,     0,   208,
     118,   207,   120,     0,   208,   118,   120,     0,   208,   117,
     208,     0,   208,    29,   208,     0,   118,   207,   120,     0,
     210,     0,   118,   178,   120,   209,     0,    82,   109,   178,
     110,   118,   207,   120,     0,    52,   109,   178,   110,   118,
     207,   120,     0,     9,   118,   206,   120,     0,    66,   118,
     206,   120,     0,    47,   118,   206,   120,     0,    45,   118,
     206,   120,     0,    78,   118,   206,   120,     0,    67,   118,
     206,   120,     0,    91,   118,   206,   120,     0,    79,   118,
     206,   120,     0,    60,   118,   206,   120,     0,    51,   118,
     206,   120,     0,    80,   118,   178,   120,     0,    71,   177,
       0,    71,   177,   118,   206,   120,     0,   122,   209,     0,
     116,   209,     0,   112,   209,     0,   113,   209,     0,   108,
     209,     0,   209,   113,   209,     0,   209,   114,   209,     0,
     209,   115,   209,     0,   209,   111,   209,     0,   209,   112,
     209,     0,   209,   106,   209,     0,   209,   108,   209,     0,
     209,    13,   209,     0,   209,    14,   209,     0,   209,    15,
     209,     0,   209,    16,   209,     0,   209,    17,   209,     0,
     209,    18,   209,     0,   209,   109,   209,     0,   209,   110,
     209,     0,   209,    19,   209,     0,   209,    20,   209,     0,
     209,   105,   209,   103,   209,     0,   209,   119,   209,   123,
       0,   209,   118,   207,   120,     0,   209,   118,   120,     0,
     209,   117,   209,     0,   209,    29,   209,     0,   118,   207,
     120,     0,     4,     0,    86,     0,    59,     0,     5,     0,
       3,     0,   215,     0,     8,     0,   212,     0,   118,   178,
     120,   209,     0,    82,   109,   178,   110,   118,   207,   120,
       0,    52,   109,   178,   110,   118,   207,   120,     0,    80,
     118,   178,   120,     0,    71,   177,     0,    71,   177,   118,
     206,   120,     0,   122,   209,     0,   116,   209,     0,   112,
     209,     0,   108,   209,     0,   211,   113,   209,     0,   211,
     114,   209,     0,   211,   115,   209,     0,   211,   111,   209,
       0,   211,   112,   209,     0,   211,   106,   209,     0,   211,
     108,   209,     0,   211,    13,   209,     0,   211,    14,   209,
       0,   211,    15,   209,     0,   211,    16,   209,     0,   211,
      17,   209,     0,   211,    18,   209,     0,   211,   109,   209,
       0,   211,   110,   209,     0,   211,    19,   209,     0,   211,
      20,   209,     0,   211,   105,   209,   103,   209,     0,   211,
     119,   209,   123,     0,   211,   118,   207,   120,     0,   211,
     118,   120,     0,   211,   117,   209,     0,   211,    29,   209,
       0,   118,   207,   120,     0,     4,     0,    86,     0,    59,
       0,     5,     0,     3,     0,   215,     0,   214,     0,   193,
     214,     0,    89,   214,     0,     8,     0,     9,     0,     6,
       0,   215,     6,     0,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   376,   378,   382,   388,   390,   391,   394,   396,   399,
     411,   411,   423,   425,   426,   427,   428,   429,   430,   431,
     444,   453,   457,   461,   465,   471,   471,   486,   491,   495,
     506,   510,   514,   518,   522,   526,   530,   536,   541,   550,
     560,   560,   576,   576,   593,   602,   612,   622,   634,   634,
     650,   650,   661,   674,   683,   693,   703,   714,   714,   739,
     739,   763,   763,   793,   793,   808,   808,   825,   825,   856,
     856,   882,   894,   899,   903,   907,   913,   918,   922,   926,
     930,   934,   938,   942,   946,   950,   954,   958,   962,   966,
     970,   974,   978,   982,   986,   990,   994,   998,  1002,  1006,
    1010,  1014,  1018,  1022,  1026,  1030,  1034,  1038,  1042,  1046,
    1050,  1054,  1058,  1062,  1066,  1072,  1074,  1077,  1077,  1088,
    1090,  1093,  1100,  1108,  1113,  1117,  1123,  1132,  1137,  1142,
    1147,  1154,  1159,  1173,  1178,  1183,  1188,  1193,  1198,  1203,
    1208,  1208,  1229,  1234,  1239,  1243,  1248,  1255,  1261,  1268,
    1273,  1279,  1284,  1290,  1295,  1299,  1303,  1307,  1313,  1315,
    1316,  1319,  1323,  1324,  1325,  1328,  1334,  1342,  1348,  1357,
    1362,  1366,  1370,  1375,  1380,  1385,  1390,  1397,  1402,  1406,
    1410,  1415,  1420,  1425,  1430,  1435,  1441,  1448,  1453,  1458,
    1463,  1468,  1473,  1478,  1486,  1491,  1496,  1500,  1504,  1508,
    1512,  1516,  1532,  1550,  1555,  1560,  1564,  1568,  1572,  1576,
    1580,  1596,  1614,  1619,  1624,  1628,  1644,  1662,  1669,  1678,
    1678,  1702,  1702,  1732,  1734,  1737,  1739,  1742,  1747,  1751,
    1755,  1759,  1763,  1767,  1771,  1775,  1781,  1781,  1793,  1793,
    1805,  1807,  1808,  1811,  1817,  1822,  1827,  1834,  1841,  1846,
    1850,  1856,  1856,  1879,  1882,  1889,  1897,  1899,  1900,  1903,
    1908,  1912,  1917,  1922,  1927,  1932,  1937,  1941,  1946,  1955,
    1960,  1967,  1972,  1977,  1981,  1986,  1993,  2003,  2003,  2013,
    2015,  2018,  2022,  2025,  2028,  2031,  2034,  2037,  2040,  2043,
    2043,  2043,  2044,  2044,  2044,  2044,  2045,  2045,  2045,  2045,
    2045,  2046,  2046,  2046,  2047,  2047,  2047,  2047,  2047,  2048,
    2048,  2048,  2048,  2048,  2049,  2049,  2049,  2049,  2049,  2050,
    2050,  2050,  2050,  2050,  2051,  2051,  2051,  2052,  2052,  2052,
    2052,  2053,  2053,  2053,  2054,  2054,  2054,  2054,  2054,  2055,
    2055,  2055,  2055,  2056,  2056,  2056,  2056,  2056,  2057,  2057,
    2057,  2057,  2057,  2057,  2058,  2058,  2058,  2058,  2058,  2059,
    2059,  2060,  2063,  2063,  2063,  2063,  2063,  2063,  2063,  2063,
    2063,  2063,  2063,  2064,  2064,  2064,  2064,  2064,  2064,  2064,
    2064,  2064,  2064,  2065,  2065,  2068,  2073,  2079,  2084,  2090,
    2095,  2101,  2106,  2110,  2114,  2118,  2122,  2126,  2130,  2142,
    2146,  2150,  2154,  2158,  2162,  2166,  2170,  2174,  2178,  2182,
    2186,  2190,  2194,  2198,  2202,  2206,  2210,  2214,  2218,  2222,
    2226,  2230,  2234,  2241,  2246,  2250,  2254,  2258,  2265,  2271,
    2277,  2283,  2290,  2297,  2304,  2311,  2317,  2323,  2327,  2331,
    2335,  2339,  2343,  2355,  2359,  2363,  2367,  2371,  2375,  2379,
    2383,  2387,  2391,  2395,  2399,  2403,  2407,  2411,  2415,  2419,
    2423,  2427,  2431,  2435,  2439,  2443,  2447,  2451,  2455,  2461,
    2466,  2470,  2474,  2478,  2482,  2486,  2499,  2504,  2508,  2512,
    2516,  2520,  2524,  2528,  2532,  2536,  2548,  2552,  2556,  2560,
    2564,  2568,  2572,  2576,  2580,  2584,  2588,  2592,  2596,  2600,
    2604,  2608,  2612,  2616,  2620,  2624,  2628,  2632,  2636,  2640,
    2644,  2650,  2655,  2659,  2663,  2667,  2671,  2677,  2686,  2694,
    2716,  2721,  2727,  2732,  2738
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "REAL", "INTEGER", "CHAR", "STRING", 
  "SIMPLE_IDENTIFIER", "IDENTIFIER", "TYPENAME_IDENTIFIER", "SCOPING", 
  "TYPEDEFNAME", "ELLIPSIS", "OROR", "ANDAND", "EQCOMPARE", "NECOMPARE", 
  "LECOMPARE", "GECOMPARE", "LSHIFT", "RSHIFT", "POINTSAT_STAR", 
  "DOT_STAR", "UNARY", "UNARY_NOT", "UNARY_NEGATE", "UNARY_MINUS", 
  "UNARY_STAR", "UNARY_REF", "POINTSAT", "SCOPE", "PLUSPLUS", 
  "MINUSMINUS", "TIMESEQUAL", "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL", 
  "MINUSEQUAL", "OREQUAL", "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL", 
  "RSHIFTEQUAL", "TOKENPASTE", "KW_BEGIN_PUBLISH", "KW_BOOL", "KW_CATCH", 
  "KW_CHAR", "KW_CLASS", "KW_CONST", "KW_DELETE", "KW_DOUBLE", 
  "KW_DYNAMIC_CAST", "KW_ELSE", "KW_END_PUBLISH", "KW_ENUM", "KW_EXTERN", 
  "KW_EXPLICIT", "KW_PUBLISHED", "KW_FALSE", "KW_FLOAT", "KW_FRIEND", 
  "KW_FOR", "KW_GOTO", "KW_IF", "KW_INLINE", "KW_INT", "KW_LONG", 
  "KW_LONGLONG", "KW_MUTABLE", "KW_NAMESPACE", "KW_NEW", "KW_OPERATOR", 
  "KW_PRIVATE", "KW_PROTECTED", "KW_PUBLIC", "KW_REGISTER", "KW_RETURN", 
  "KW_SHORT", "KW_SIGNED", "KW_SIZEOF", "KW_STATIC", "KW_STATIC_CAST", 
  "KW_STRUCT", "KW_TEMPLATE", "KW_THROW", "KW_TRUE", "KW_TRY", 
  "KW_TYPEDEF", "KW_TYPENAME", "KW_UNION", "KW_UNSIGNED", "KW_USING", 
  "KW_VIRTUAL", "KW_VOID", "KW_VOLATILE", "KW_WHILE", "START_CPP", 
  "START_CONST_EXPR", "START_TYPE", "'{'", "','", "';'", "':'", "'='", 
  "'?'", "'|'", "'^'", "'&'", "'<'", "'>'", "'+'", "'-'", "'*'", "'/'", 
  "'%'", "'~'", "'.'", "'('", "'['", "')'", "'}'", "'!'", "']'", 
  "grammar", "cpp", "constructor_inits", "constructor_init", "extern_c", 
  "@1", "declaration", "friend_declaration", "@2", "storage_class", 
  "type_like_declaration", "multiple_var_declaration", "@3", "@4", 
  "multiple_instance_identifiers", "multiple_const_instance_identifiers", 
  "typedef_declaration", "@5", "@6", "typedef_instance_identifiers", 
  "typedef_const_instance_identifiers", "function_prototype", "@7", "@8", 
  "@9", "@10", "@11", "@12", "@13", "function_post", "function_operator", 
  "more_template_declaration", "template_declaration", "@14", 
  "template_formal_parameters", "template_nonempty_formal_parameters", 
  "template_formal_parameter", "template_formal_parameter_type", 
  "instance_identifier", "@15", "formal_parameter_list", 
  "formal_parameters", "template_parameter_maybe_initialize", 
  "maybe_initialize", "maybe_initialize_or_function_body", 
  "structure_init", "structure_init_body", "formal_parameter", 
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier", 
  "empty_instance_identifier", "type", "type_decl", "predefined_type", 
  "full_type", "anonymous_struct", "@16", "named_struct", "@17", 
  "maybe_class_derivation", "class_derivation", "base_specification", 
  "anonymous_enum", "@18", "named_enum", "@19", "enum_body", 
  "enum_body_no_trailing_comma", "enum_keyword", "struct_keyword", 
  "namespace_declaration", "@20", "using_declaration", "simple_type", 
  "simple_int_type", "simple_float_type", "simple_void_type", "code", 
  "@21", "code_block", "element", "optional_const_expr", 
  "optional_const_expr_comma", "const_expr_comma", 
  "no_angle_bracket_const_expr", "const_expr", "const_operand", 
  "formal_const_expr", "formal_const_operand", "class_derivation_name", 
  "name", "string", "empty", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,   124,   124,   124,   125,   125,   125,   126,   126,   127,
     129,   128,   130,   130,   130,   130,   130,   130,   130,   130,
     130,   130,   130,   130,   130,   132,   131,   133,   133,   133,
     133,   133,   133,   133,   133,   133,   133,   134,   134,   134,
     136,   135,   137,   135,   138,   138,   139,   139,   141,   140,
     142,   140,   140,   143,   143,   144,   144,   146,   145,   147,
     145,   148,   145,   149,   145,   150,   145,   151,   145,   152,
     145,   145,   153,   153,   153,   153,   154,   154,   154,   154,
     154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
     154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
     154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
     154,   154,   154,   154,   154,   155,   155,   157,   156,   158,
     158,   159,   159,   160,   160,   160,   160,   161,   161,   161,
     161,   162,   162,   162,   162,   162,   162,   162,   162,   162,
     163,   162,   164,   164,   164,   164,   164,   165,   165,   166,
     166,   167,   167,   168,   168,   168,   168,   168,   169,   169,
     169,   170,   170,   170,   170,   171,   171,   171,   171,   172,
     172,   172,   172,   172,   172,   172,   172,   173,   173,   173,
     173,   173,   173,   173,   173,   173,   173,   174,   174,   174,
     174,   174,   174,   174,   175,   175,   175,   175,   175,   175,
     175,   175,   175,   176,   176,   176,   176,   176,   176,   176,
     176,   176,   177,   177,   177,   177,   177,   178,   178,   180,
     179,   182,   181,   183,   183,   184,   184,   185,   185,   185,
     185,   185,   185,   185,   185,   185,   187,   186,   189,   188,
     190,   190,   190,   191,   191,   191,   191,   192,   193,   193,
     193,   195,   194,   194,   196,   196,   197,   197,   197,   198,
     198,   198,   198,   198,   198,   198,   198,   198,   198,   198,
     198,   199,   199,   199,   199,   199,   200,   202,   201,   203,
     203,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   205,   205,   206,   206,   207,
     207,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   208,   209,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   209,   209,   209,   209,   209,   210,
     210,   210,   210,   210,   210,   210,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
     211,   212,   212,   212,   212,   212,   212,   213,   213,   213,
     214,   214,   215,   215,   216
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     2,     2,     2,     1,     2,     2,     1,     3,     4,
       0,     5,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     2,     2,     2,     2,     0,     3,     1,     2,     3,
       2,     2,     2,     2,     2,     2,     2,     1,     3,     3,
       0,     4,     0,     5,     2,     4,     2,     4,     0,     4,
       0,     5,     3,     2,     4,     2,     4,     0,     6,     0,
       6,     0,     7,     0,    10,     0,    11,     0,     8,     0,
       9,     1,     1,     1,     4,     5,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     1,     1,     1,     0,     6,     1,
       1,     1,     3,     2,     4,     3,     4,     1,     1,     1,
       2,     1,     2,     2,     2,     2,     3,     4,     3,     3,
       0,     6,     1,     1,     1,     3,     2,     1,     3,     1,
       2,     1,     2,     1,     3,     5,     3,     4,     1,     1,
       2,     1,     3,     3,     5,     3,     3,     4,     1,     1,
       1,     1,     2,     2,     2,     3,     4,     1,     1,     1,
       2,     2,     2,     3,     4,     7,     3,     1,     2,     2,
       2,     3,     4,     7,     1,     1,     2,     1,     1,     1,
       1,     2,     2,     1,     1,     2,     1,     1,     1,     1,
       2,     2,     1,     1,     2,     2,     2,     2,     3,     0,
       5,     0,     7,     1,     1,     2,     3,     2,     2,     2,
       3,     3,     3,     3,     3,     3,     0,     5,     0,     6,
       1,     1,     2,     1,     3,     3,     5,     1,     1,     1,
       1,     0,     6,     4,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     2,
       2,     1,     2,     1,     3,     2,     1,     0,     2,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     1,     1,     1,     1,     1,
       3,     1,     4,     7,     7,     4,     2,     2,     2,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     5,     4,     4,     3,
       3,     3,     3,     1,     4,     7,     7,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     2,     5,
       2,     2,     2,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     5,     4,     4,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     7,     7,
       4,     2,     5,     2,     2,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     5,     4,     4,     3,     3,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     1,     1,     2,     0
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,   524,     0,     0,   524,     4,   473,   469,   472,   522,
     475,     0,     0,     0,     0,     0,   471,     0,     0,     0,
       0,     0,     0,     0,     0,   470,     0,     0,     0,     0,
       0,     0,     0,     2,   423,   474,   195,   259,   260,   248,
       0,   273,   247,   271,   266,   262,   263,   261,   265,   249,
       0,   250,   264,   276,   524,     3,   197,   198,   199,   200,
       0,     0,   194,   256,   257,   258,    19,    20,     0,    25,
       0,     0,     0,     0,   117,   524,     0,     5,    14,     6,
      17,     0,    12,    37,    13,    15,    16,    27,   524,   524,
     524,   524,     0,   524,   524,   524,   213,     0,   438,     0,
       0,   212,   524,   524,     0,     0,   524,   444,   442,   443,
     441,   195,   259,   260,   273,   271,   266,   262,   261,   265,
     264,     0,     0,   389,   440,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   523,   524,   275,
     272,   262,   268,   262,   267,   270,   520,   521,   196,   269,
       0,   524,   524,   524,   524,   217,   187,   236,   202,   219,
     201,    21,   524,   524,     0,    24,    23,    22,     0,     0,
      18,     0,   254,    71,   204,     0,    28,    33,    31,    35,
       0,    36,    30,     0,    32,    34,    10,     0,     0,    40,
     206,   207,   208,   209,     0,     0,   203,     0,   388,   387,
       0,     0,     0,     0,     0,     0,     0,   214,   524,   216,
     215,     0,     0,     0,     0,     0,     0,     0,   468,   452,
     453,   454,   455,   456,   457,   460,   461,   467,     0,   450,
     451,   458,   459,   448,   449,   445,   446,   447,   466,   465,
       0,     0,   218,   274,   524,   188,   190,   189,     0,   524,
     524,   238,   524,   524,    26,   524,   251,   524,     0,     0,
      48,   255,    57,    59,    42,    29,     0,   524,   205,   524,
       0,   277,   153,     0,     0,    39,    38,     0,   211,   210,
     427,   430,   429,   436,     0,   435,   428,   432,     0,   431,
     434,   437,     0,   433,   424,   390,     0,   464,   463,   191,
       0,     0,   386,   385,     0,   241,   243,   240,   524,   524,
       0,     0,   224,   223,   253,   524,   128,   129,     0,     0,
       0,     0,   120,   121,   524,   127,   119,    50,    52,     0,
     524,     0,     0,   524,     0,   524,   170,   171,     0,   524,
     524,   524,     0,   169,   524,    61,     0,   524,     0,     7,
       0,   524,     0,     0,     0,     0,     0,     0,     0,    41,
     524,   131,     0,   439,     0,   462,   524,   192,   237,   242,
       0,     0,   220,     0,     0,     0,     0,   225,   524,     0,
     524,   123,   524,   130,   524,     0,   178,   179,     0,   524,
     524,   524,   524,   524,   177,     0,    49,   524,   515,   511,
     514,   524,   143,     0,     0,   513,     0,     0,     0,   512,
       0,     0,     0,     0,     0,     0,   144,   147,   524,   168,
     476,   516,   142,     0,     0,     0,    43,   524,     0,   524,
     172,   174,   173,    67,   524,    11,   524,   154,   278,   279,
     277,     0,   524,   524,     0,   159,   161,   158,   156,     0,
     133,    86,    87,    88,    89,    90,    91,    94,    95,   110,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   114,   113,    97,    96,    83,    85,    84,    92,
      93,    81,    82,    78,    79,    80,    77,     0,     0,    76,
     132,   135,   134,     0,     0,     0,   140,   524,     0,    44,
     151,     0,     0,     0,   245,   244,   239,     0,     0,     0,
     229,   517,     0,   228,     0,   227,     0,     0,     0,   524,
     226,   252,     0,   524,     0,   115,   118,   116,   122,   524,
     180,   182,   181,     0,     0,   524,   125,   149,    51,   524,
       0,    53,   524,   524,     0,   481,     0,     0,   486,   485,
     484,     0,     0,   483,   524,   146,     0,   524,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   524,     0,    46,    69,   175,   524,     0,
       0,   281,   282,   284,   283,   288,   285,   286,   287,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   360,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   340,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   361,
     337,   338,   339,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   524,   378,   379,   380,   371,   383,   367,   368,
     366,   373,   374,   362,   363,   364,   365,   372,   370,   377,
     375,   381,   376,   369,   382,   280,     0,     8,     0,     0,
     157,   160,   136,   112,   111,   139,   138,   152,   524,     0,
       0,   426,   425,   524,     0,   519,   235,   518,   234,   233,
     232,   231,   230,   222,   124,   126,   183,   186,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   150,   391,     0,
       0,    55,     0,     0,   166,   524,     0,   524,     0,     0,
       0,   510,    73,    58,    72,   145,   148,   165,   494,   495,
     496,   497,   498,   499,   502,   503,   509,     0,   492,   493,
     500,   501,   490,   491,   487,   488,   489,   508,   507,     0,
       0,     0,    63,    60,     0,   524,     0,   176,   524,     0,
     155,     9,   162,   524,   163,     0,   137,    45,   193,   246,
     524,     0,     0,     0,   400,   398,   399,   397,     0,     0,
     396,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   184,     0,    54,   152,   167,     0,     0,   480,     0,
     477,     0,     0,   506,   505,    65,   524,    47,     0,   524,
      62,   384,     0,   524,     0,     0,     0,     0,     0,   422,
     408,   409,   410,   411,   412,   413,   414,   415,   421,     0,
     406,   407,   404,   405,   401,   402,   403,   420,   419,     0,
       0,    56,     0,   482,     0,     0,   504,   524,     0,   524,
      68,   164,   141,   524,     0,   395,     0,   392,     0,   418,
     417,     0,     0,    74,     0,     0,   524,    70,   185,     0,
       0,   416,   479,   478,    75,   524,    64,     0,     0,    66,
     394,   393,     0,     0,     0
};

static const short yydefgoto[] =
{
     932,     4,   358,   359,    78,   279,    79,    80,   172,    81,
      82,    83,   287,   344,   369,   436,   180,   339,   405,   406,
     548,   198,   340,   343,   446,   856,   897,   598,   795,   763,
     500,   536,    84,   178,   331,   332,   333,   334,   370,   718,
     425,   426,   546,   508,   285,   454,   455,   427,   352,   403,
     165,    54,   199,    98,    55,    56,   262,    57,   263,   321,
     322,   387,    58,   260,    59,   318,   314,   315,    60,    61,
      85,   325,    86,    62,    63,    64,    65,   356,   357,   448,
     705,   311,   207,   208,   747,   123,    34,   429,   430,   520,
     371,    35,   209
};

static const short yypact[] =
{
     231,-32768,  1990,  2879,  2743,-32768,-32768,-32768,-32768,-32768,
  -32768,   -88,   -86,   -84,   -78,   -43,-32768,   -37,   -23,   -15,
    2941,     3,     6,    10,     9,-32768,    13,  1990,  1990,  1990,
    1990,  1210,  1990,  2479,-32768,    82,-32768,-32768,-32768,-32768,
    2989,-32768,-32768,-32768,-32768,  1560,-32768,  1522,  1522,-32768,
     157,-32768,  1522,-32768,   105,-32768,-32768,-32768,-32768,-32768,
      43,    98,-32768,-32768,-32768,-32768,-32768,-32768,    41,-32768,
     100,   114,   142,   151,-32768,-32768,   241,-32768,-32768,-32768,
  -32768,  2232,-32768,-32768,-32768,-32768,-32768,-32768,  1990,  1990,
    1990,  1990,  2879,  1990,  1990,  1990,-32768,   157,   113,   157,
     157,-32768,  1990,  1990,  2879,  2879,  1990,    97,    97,    97,
      97,   -88,   -86,   -84,   -78,   -37,   -23,  1987,   759,  1206,
    1390,    21,   -66,  2479,    97,  1990,  1990,  1990,  1990,  1990,
    1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,
    1990,  1990,  1990,  1990,  1990,  1486,  1990,-32768,   105,-32768,
  -32768,   814,-32768,  1522,-32768,-32768,-32768,-32768,-32768,-32768,
     147,   105,   105,   105,   105,   144,-32768,-32768,   165,-32768,
     -30,-32768,   617,-32768,   168,-32768,-32768,-32768,   191,  2286,
  -32768,   157,-32768,   152,   190,  2989,   300,-32768,-32768,-32768,
    2927,-32768,-32768,   157,-32768,-32768,-32768,   157,   344,   212,
  -32768,-32768,-32768,-32768,    43,    98,-32768,   196,   219,-32768,
     214,   217,   221,   230,   239,   246,   250,-32768,  1990,-32768,
  -32768,   257,   268,   270,   273,   276,  1990,  1990,-32768,  1411,
    2148,  2681,  2681,    38,    38,   402,   402,-32768,  2424,   824,
     799,    38,    38,   298,   298,    97,    97,    97,-32768,-32768,
     -60,  1225,   144,-32768,   105,   144,   144,   144,   132,  1990,
     157,-32768,-32768,   292,-32768,  3015,-32768,  2803,  2989,   344,
  -32768,-32768,-32768,    26,-32768,    82,  2989,   263,-32768,-32768,
     286,-32768,-32768,   157,  1570,-32768,-32768,   197,   165,   -30,
  -32768,-32768,-32768,-32768,   287,-32768,-32768,-32768,   288,-32768,
  -32768,-32768,   296,-32768,    97,  2479,  1990,-32768,-32768,   144,
     302,   303,  2479,-32768,   308,   320,   326,-32768,   157,  3040,
     220,   332,   333,-32768,-32768,-32768,-32768,-32768,   157,  2865,
     157,   325,   336,-32768,   218,-32768,-32768,-32768,-32768,   197,
    1302,   329,   197,  1302,   197,   263,-32768,-32768,   342,   263,
     263,   263,   106,-32768,  3064,-32768,   335,-32768,   188,-32768,
     353,  1654,  2445,   363,   197,  2120,   197,   197,   197,-32768,
     729,-32768,  1990,-32768,  1990,  2479,  1302,-32768,-32768,   157,
    1990,   357,-32768,   275,   450,   605,   376,-32768,-32768,   220,
    3089,   377,   218,-32768,   396,  2803,-32768,-32768,   369,   218,
     218,   218,   218,   -58,-32768,   197,-32768,   729,-32768,-32768,
  -32768,   218,-32768,  2989,   381,-32768,  2941,   373,   385,-32768,
    1990,  1990,  1990,  1210,  1990,   375,    16,-32768,   218,  2496,
  -32768,    82,-32768,   197,   179,   379,-32768,   729,   161,   263,
     386,   386,   386,-32768,  1990,-32768,  1302,-32768,  1086,-32768,
  -32768,   157,  1990,  1654,   383,   395,  2479,-32768,-32768,   197,
     173,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   387,   388,-32768,
  -32768,   173,   173,   243,   415,  1570,-32768,  1990,   407,-32768,
  -32768,   -38,   -33,   389,   406,  2479,-32768,   157,   675,   157,
  -32768,-32768,   675,-32768,   675,-32768,   675,   675,   675,  3113,
  -32768,-32768,  2879,   -58,  2341,-32768,-32768,-32768,-32768,   218,
     399,   399,   399,   184,   644,  1990,-32768,-32768,-32768,   729,
     421,-32768,   -48,   218,  2879,   423,  2879,  2879,    97,    97,
      97,   404,   -22,    97,   493,-32768,  1394,   -48,  1990,  1990,
    1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,
    1990,  1990,  1990,  1990,  1990,  1990,  1990,  1990,  1738,  1990,
     254,   542,   429,   493,   448,-32768,-32768,   386,  1302,   427,
     434,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   439,-32768,   441,   443,
  -32768,  1822,   173,-32768,-32768,-32768,-32768,  2445,  1302,   442,
     197,-32768,-32768,   493,  1990,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   399,   444,   458,   451,
     459,   644,   644,   644,   644,  1210,   644,  2620,-32768,   447,
     470,-32768,   197,  1990,-32768,   -48,   462,  1990,   453,   465,
    1990,-32768,-32768,   503,-32768,-32768,-32768,-32768,  1411,  2148,
    2681,  2681,    38,    38,   402,   402,-32768,  2462,   824,   799,
      38,    38,   298,   298,    97,    97,    97,-32768,-32768,     0,
    2070,   460,-32768,   503,   197,  1302,   469,-32768,   493,   965,
  -32768,-32768,-32768,  1654,  2479,   471,-32768,-32768,   503,  2479,
    1302,  2879,  2879,  2879,   117,   117,   117,   117,   474,    22,
     117,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,  1906,
    1990,-32768,   197,-32768,  2479,-32768,   472,   478,-32768,   484,
      97,   488,  1990,-32768,-32768,-32768,  1302,-32768,   489,   493,
     503,-32768,   491,   493,   490,   505,   516,   533,   644,-32768,
    2636,  2651,  2790,  2790,   267,   267,   527,   527,-32768,  2603,
    2666,   468,   412,   412,   117,   117,   117,-32768,-32768,    28,
    2100,-32768,  1990,-32768,  1990,    18,  2479,  1302,   538,   493,
     503,-32768,   503,   493,   544,-32768,   546,   117,   644,-32768,
  -32768,    92,   120,-32768,   540,   545,   493,   503,   503,  1990,
    1990,  2620,-32768,-32768,-32768,   493,   503,   128,   137,   503,
  -32768,-32768,   667,   668,-32768
};

static const short yypgoto[] =
{
  -32768,  -166,-32768,   222,-32768,-32768,   497,-32768,-32768,   -59,
     280,-32768,-32768,-32768,   -50,  -118,-32768,-32768,-32768,   -75,
    -163,   501,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -578,
  -32768,-32768,   291,-32768,-32768,-32768,   294,   364,  -319,-32768,
    -321,-32768,   149,  -348,  -240,  -452,-32768,   133,  -312,  -309,
      47,   -21,   521,   290,   -20,   -69,-32768,   -68,-32768,-32768,
  -32768,   313,   -67,-32768,   -57,-32768,   390,-32768,    24,    77,
  -32768,-32768,-32768,    23,    17,-32768,-32768,   260,-32768,    25,
  -32768,  -413,   -85,   -29,   125,    48,   -87,-32768,-32768,  -285,
     403,  -144,    -1
};


#define	YYLAST		3234


static const short yytable[] =
{
       5,   709,   122,    87,   210,   211,   212,   265,   214,   215,
     216,   121,   200,   201,   202,   793,   179,   221,   222,   148,
     407,   225,   435,   434,   203,   437,   156,   157,   565,   338,
      88,   599,    89,   438,    90,   227,   341,   440,   441,   442,
      91,   227,   275,   101,    99,   460,   544,   501,   502,   503,
      33,   156,   157,   166,   228,   513,   753,   131,   132,   550,
     307,   545,   152,   227,   154,   155,    92,   133,   227,   159,
    -221,   545,   213,  -221,    87,   107,   108,   109,   110,   227,
     124,    93,   721,   533,   223,   224,   549,   722,   147,   594,
     540,   541,   542,   543,   719,    94,   319,   100,   761,   523,
     525,   227,   552,    95,   206,   204,   156,   157,   156,   157,
     200,   201,   202,   354,   590,   160,   250,   566,   105,   567,
     853,   102,   203,   227,   103,   600,   133,   597,   104,   227,
     509,   106,   749,   298,   152,   154,   155,   159,   913,   342,
     712,   226,   869,   167,   171,   808,   829,   166,   909,   139,
     140,   141,   142,   143,   161,   144,   145,   146,   205,   390,
     166,   166,   166,   166,   274,   156,   157,   551,   152,   277,
     152,    87,     5,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   227,   251,   252,   431,   595,   169,   431,
     173,   750,   206,   204,   754,   156,   157,   363,   255,   256,
     257,   258,   922,   162,   144,   145,   146,   175,   163,   767,
     860,   227,   529,   164,   443,   444,   396,   397,   398,   227,
     736,   218,   431,   726,   838,   839,   840,   728,   227,   729,
     923,   730,   731,   732,   755,   176,   364,   337,   930,   156,
     157,   259,   310,   166,   177,   345,   205,   931,   313,   317,
     254,     5,   323,   259,    87,   261,   336,   399,   266,   365,
     272,   346,   347,   348,   304,   305,   353,   796,     5,   596,
     444,   900,   591,   156,   157,   902,   827,   828,   450,   451,
     335,   506,   507,   383,   384,   385,   829,   506,   507,   592,
     267,   309,   431,   545,   737,   366,     9,   312,   273,   751,
     367,   181,   349,   386,   286,   368,   290,   317,    87,   428,
     227,   917,   428,    39,     5,   918,   400,   133,     1,     2,
       3,   401,   362,   404,   291,   534,   402,   292,   926,   432,
     294,   293,   432,   511,   353,   512,   591,   929,   353,   353,
     353,   862,   335,    87,   375,   428,   449,   591,    49,   295,
     457,   506,   507,   715,   517,    51,   296,   708,   518,   510,
     297,   350,   506,   507,   791,   432,   351,   299,   833,   834,
     835,   836,   837,   302,   838,   839,   840,     5,   300,    87,
     301,   404,   553,    87,   562,   320,   303,   805,   404,   404,
     404,   404,   547,   561,   355,   372,   510,   845,   373,   456,
     404,   141,   142,   143,   374,   144,   145,   146,   335,   716,
     376,   379,   431,   156,   157,   428,   377,   404,   515,   378,
     380,   133,   388,   407,   389,   394,   510,   395,   353,   101,
      99,   829,   433,   313,   281,   432,   282,   283,   284,   526,
     527,   528,   457,   158,   431,   439,   447,   748,   156,   157,
     519,   519,   519,   168,   170,   200,   201,   202,   558,   559,
     560,   452,   563,   174,   858,   437,   459,   203,   516,   182,
      74,   532,   539,   823,   824,   825,   826,   827,   828,   864,
     554,   556,   312,   100,   557,   564,   711,   829,    39,   593,
     217,   456,   219,   220,   710,   444,   313,   713,   720,   723,
     724,   714,   734,   139,   140,   141,   142,   143,   545,   144,
     145,   146,   752,   549,   760,   835,   836,   837,    87,   838,
     839,   840,   547,    49,   756,   898,   758,   759,   404,   517,
      51,   757,   762,   522,   313,   428,   716,   792,   510,   794,
     797,   510,   404,   717,   798,   312,   829,   206,   204,   789,
     800,   801,   810,   764,   802,   806,   510,   811,   813,   812,
     841,   842,   846,   848,   431,   849,   915,   428,   855,   833,
     834,   835,   836,   837,   271,   838,   839,   840,   851,   859,
     892,   863,   764,   312,   868,   519,   278,   432,   893,   519,
     280,   519,   894,   519,   519,   519,   895,   288,   289,   899,
     903,   205,   901,   156,   157,   904,   768,   769,   770,   771,
     772,   773,   774,   775,   776,   777,   778,   779,   780,   781,
     782,   783,   784,   785,   786,   787,   905,   790,   833,   834,
     835,   836,   837,   906,   838,   839,   840,     6,     7,     8,
       9,   431,    10,    39,   748,   748,   748,   748,   916,   748,
     924,    66,   919,   316,   920,   925,   431,   933,   934,   264,
     807,    67,   847,   707,   535,    68,   857,   843,    69,   891,
     269,   449,   735,   156,   157,   537,   360,    70,    49,   538,
      71,    72,    73,   392,   517,    51,   738,   428,   524,   766,
     270,    74,   530,    16,     0,    75,   555,   799,   381,    76,
     706,     0,   431,     0,     0,     0,   819,   432,     0,     0,
       0,   316,   764,    39,   739,   818,   740,     0,     0,     0,
      25,   391,     0,   393,   748,   748,   748,   748,   748,   748,
     748,   748,   748,   748,   748,   748,   748,   748,   748,   748,
     748,   748,   741,   431,   510,     0,   742,   743,    49,   804,
     744,     0,   745,     0,   517,    51,   746,     0,     0,     0,
       0,     0,   809,     0,   428,     0,     0,     0,     0,     0,
       0,   748,   514,     0,     0,     0,   521,   521,   521,   428,
       0,   865,   866,   867,   432,     0,     0,   764,     0,     0,
       0,   844,   457,     0,    37,     0,    38,     0,   850,   432,
     889,     0,     0,     0,   127,   128,   129,   130,   131,   132,
       0,   748,     0,     0,     0,    44,   153,    46,   133,   281,
       0,   282,   504,   505,     0,   428,     0,    47,    48,   127,
     128,   129,   130,   131,   132,     0,     0,   506,   507,     0,
      52,   456,     0,   133,   360,   432,     0,     0,   764,    37,
       0,    38,   764,   911,     0,   912,   814,   815,   816,   817,
       0,   820,     0,     0,   253,     0,   428,   102,     0,     0,
      44,   153,    46,     0,     0,     0,     0,     0,   890,     0,
     927,   928,    47,    48,     0,     0,   432,     0,   764,     0,
     896,     0,   764,     0,     0,    52,     0,   360,   137,   138,
     139,   140,   141,   142,   143,   764,   144,   145,   146,     0,
     725,   521,   727,     0,   764,   521,     0,   521,     0,   521,
     521,   521,   136,   137,   138,   139,   140,   141,   142,   143,
       0,   144,   145,   146,     0,     0,   870,   871,   872,   873,
     874,   875,   876,   877,   878,   879,   880,   881,   882,   883,
     884,   885,   886,   887,     0,     0,     0,     0,   601,   602,
     603,   604,   605,   606,   607,   608,     0,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,     0,     0,
       0,     0,     0,   907,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,     0,
     635,   636,   637,   638,   639,   640,   641,   642,   643,     0,
     644,   645,   646,   647,   648,   649,   650,   651,   652,   653,
     654,   655,   656,   921,   657,     0,   658,   659,   660,   661,
     662,   663,   664,   665,   666,   667,   668,   669,   670,     0,
     671,   672,   673,   674,   675,   676,   677,     0,   678,   679,
     680,   681,     0,     0,     0,   682,   683,   684,   685,   686,
     687,   688,   689,   690,   691,   692,   693,   694,   695,   696,
     697,   698,   699,   700,   701,   702,   861,   703,   704,   601,
     602,   603,   604,   605,   606,   607,   608,     0,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,     0,
       0,     0,     0,     0,     0,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
       0,   635,   636,   637,   638,   639,   640,   641,   642,   643,
       0,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   654,   655,   656,     0,   657,     0,   658,   659,   660,
     661,   662,   663,   664,   665,   666,   667,   668,   669,   670,
       0,   671,   672,   673,   674,   675,   676,   677,     0,   678,
     679,   680,   681,     0,     0,     0,   682,   683,   684,   685,
     686,   687,   688,   689,   690,   691,   692,   693,   694,   695,
     696,   697,   698,   699,   700,   701,   702,     0,   703,   704,
       0,     0,     0,     6,     7,     8,     9,     0,    10,   111,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   125,   126,
     127,   128,   129,   130,   131,   132,     0,     0,     0,     0,
       0,    37,     0,    38,   133,   112,     0,   113,    39,    40,
       0,   114,    15,     0,     0,    42,     0,     0,     0,    16,
     115,     0,    44,   153,    46,     0,   116,   117,    46,     0,
       0,    20,     0,     0,    47,    48,     0,     0,   118,   119,
      23,     0,    24,    49,     0,     0,    25,    52,   914,    50,
      51,   120,     0,     0,    53,   408,   409,   410,     9,     0,
     411,    36,     0,     0,   412,     0,     0,     0,    27,     0,
       0,     0,    28,    29,   103,     0,    30,     0,    31,     0,
     134,   135,    32,   136,   137,   138,   139,   140,   141,   142,
     143,     0,   144,   145,   146,     0,     0,    37,   308,    38,
      39,   413,     0,    41,   414,     0,     0,    42,     0,     0,
       0,   415,    43,     0,     0,     0,     0,     0,    44,    45,
      46,     0,     0,   416,     0,     0,     0,     0,     0,     0,
      47,    48,   417,     0,   418,    49,     0,     0,   419,     0,
       0,    50,    51,    52,     0,     0,    53,   408,   409,   410,
       9,     0,   411,    36,     0,     0,   765,     0,     0,     0,
     420,     0,     0,     0,   421,     0,     0,     0,   422,     0,
     423,     0,     0,     0,   424,   126,   127,   128,   129,   130,
     131,   132,     0,     0,     0,    37,     0,    38,     0,    37,
     133,    38,    39,   413,     0,    41,   414,     0,     0,    42,
       0,     0,     0,   415,    43,     0,    44,   153,    46,     0,
      44,    45,    46,     0,     0,   416,     0,     0,    47,    48,
       0,     0,    47,    48,   417,     0,   418,    49,     0,     0,
     419,    52,     0,    50,    51,    52,     0,     0,    53,     6,
       7,     8,     9,     0,    10,    11,     0,     0,     0,     0,
       0,     0,   420,     0,     0,     0,   421,     0,   106,     0,
     422,     0,   423,     0,     0,     0,   424,   135,     0,   136,
     137,   138,   139,   140,   141,   142,   143,     0,   144,   145,
     146,    12,     0,    13,     0,     0,     0,    14,    15,     0,
       0,     0,     0,     0,     0,    16,    17,     0,     0,     0,
       0,     0,    18,    19,     0,     0,     0,    20,     0,     0,
       0,     0,     0,     0,    21,    22,    23,    37,    24,    38,
       0,     0,    25,     6,     7,     8,     9,    26,    10,    11,
       0,     0,     0,     0,     0,     0,     0,     0,    44,   153,
      46,     0,     0,     0,    27,     0,     0,     0,    28,    29,
      47,    48,    30,     0,    31,    37,   249,    38,    32,     0,
       0,   149,     0,    52,     0,    12,     0,    13,     0,     0,
     150,    14,    15,     0,     0,     0,    44,   151,    46,    16,
      17,     0,     0,     0,     0,     0,    18,    19,    47,    48,
       0,    20,     0,     0,     0,     0,     0,     0,    21,    22,
      23,    52,    24,     0,     0,     0,    25,     6,     7,     8,
       9,    26,    10,    11,     0,     0,     0,     0,     0,     0,
     361,     0,     0,     0,     0,     0,     0,     0,    27,     0,
       0,     0,    28,    29,     0,     0,    30,     0,    31,     0,
       0,     0,    32,     0,     0,     0,     0,     0,     0,    12,
       0,    13,     0,     0,     0,    14,    15,     0,     0,     0,
       0,     0,     0,    16,    17,     0,     0,     0,     0,     0,
      18,    19,     0,     0,     0,    20,     0,     0,     0,     0,
       0,     0,    21,    22,    23,     0,    24,     0,     0,     0,
      25,     6,     7,     8,     9,    26,    10,    11,     0,     0,
       0,     0,     0,     0,   453,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,    28,    29,     0,     0,
      30,     0,    31,     0,     0,     0,    32,     0,     0,     0,
       0,     0,     0,    12,     0,    13,     0,     0,     0,    14,
      15,     0,     0,     0,     0,     0,     0,    16,    17,     0,
       0,     0,     0,     0,    18,    19,     0,     0,     0,    20,
       0,     0,     0,     0,     0,     0,    21,    22,    23,     0,
      24,     0,     0,     0,    25,     6,     7,     8,     9,    26,
      10,    11,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
      28,    29,     0,     0,    30,     0,    31,     0,   788,     0,
      32,     0,     0,     0,     0,     0,     0,    12,     0,    13,
       0,     0,     0,    14,    15,     0,     0,     0,     0,     0,
       0,    16,    17,     0,     0,     0,     0,     0,    18,    19,
       0,     0,     0,    20,     0,     0,     0,     0,     0,     0,
      21,    22,    23,     0,    24,     0,     0,     0,    25,     6,
       7,     8,     9,    26,    10,    11,     0,     0,     0,     0,
       0,     0,   803,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,    28,    29,     0,     0,    30,     0,
      31,     0,     0,     0,    32,     0,     0,     0,     0,     0,
       0,    12,     0,    13,     0,     0,     0,    14,    15,     0,
       0,     0,     0,     0,     0,    16,    17,     0,     0,     0,
       0,     0,    18,    19,     0,     0,     0,    20,     0,     0,
       0,     0,     0,     0,    21,    22,    23,     0,    24,     0,
       0,     0,    25,     6,     7,     8,     9,    26,    10,    11,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,    28,    29,
       0,     0,    30,     0,    31,     0,   888,     0,    32,     0,
       0,     0,    37,     0,    38,    12,     0,    13,   149,     0,
       0,    14,    15,     0,     0,     0,     0,   150,     0,    16,
      17,     0,     0,    44,   151,    46,    18,    19,     0,     0,
       0,    20,     0,     0,     0,    47,    48,     0,    21,    22,
      23,     0,    24,     0,     0,     0,    25,     0,    52,     0,
       0,    26,     0,   125,   126,   127,   128,   129,   130,   131,
     132,     0,     0,     0,     0,     0,     0,     0,    27,   133,
       0,     0,    28,    29,     0,    95,    30,     0,    31,     0,
       0,     0,    32,   125,   126,   127,   128,   129,   130,   131,
     132,     0,     0,     0,     0,     0,     0,     0,     0,   133,
       0,     0,     0,   461,   462,   463,   464,   465,   466,   467,
     468,     0,     0,     0,     0,     0,     0,     0,     0,   469,
       0,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   127,   128,   129,   130,   131,   132,     0,
     482,     0,     0,     0,     0,   134,   135,   133,   136,   137,
     138,   139,   140,   141,   142,   143,     0,   144,   145,   146,
       0,   483,     0,   854,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   134,   135,     0,   136,   137,
     138,   139,   140,   141,   142,   143,     0,   144,   145,   146,
       0,   484,     0,   910,   485,     0,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,     0,   497,   498,
     183,   184,   499,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   135,     0,   136,   137,   138,   139,
     140,   141,   142,   143,     0,   144,   145,   146,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,    38,
      39,   185,     0,    41,     0,     0,     0,    42,   186,   187,
       0,     0,    43,     0,   183,   184,     0,   188,    44,    45,
      46,   189,     0,     0,   190,     0,     0,     0,   191,     0,
      47,    48,     0,   192,     0,    49,     0,     0,     0,     0,
       0,   193,    51,    52,     0,   194,    53,   195,     0,     0,
       0,    37,   196,    38,    39,   268,     0,    41,     0,     0,
       0,    42,   186,   187,     0,     0,    43,     0,   197,   183,
     184,   188,    44,    45,    46,   189,     0,     0,   190,     0,
       0,     0,   191,     0,    47,    48,     0,   192,     0,    49,
       0,     0,     0,     0,     0,   193,    51,    52,     0,   194,
      53,   195,     0,     0,     0,     0,    37,     0,    38,    39,
     185,     0,    41,     0,     0,     0,    42,   186,   187,     0,
       0,    43,   197,     0,     0,     0,   188,    44,    45,    46,
     189,     0,     0,   190,     0,     0,     0,   191,     0,    47,
      48,     0,   192,     0,    49,     0,     0,     0,     0,     0,
     193,    51,    52,     0,   194,    53,   195,   125,   126,   127,
     128,   129,   130,   131,   132,     0,     0,     0,     0,     0,
       0,     0,     0,   133,     0,     0,     0,   197,   125,   126,
     127,   128,   129,   130,   131,   132,     0,     0,     0,     0,
       0,     0,     0,     0,   133,   125,   126,   127,   128,   129,
     130,   131,   132,     0,     0,     0,     0,     0,     0,     0,
       0,   133,   125,   126,   127,   128,   129,   130,   131,   132,
       0,     0,     0,     0,     0,     0,     0,     0,   133,   568,
     569,   570,   571,   572,   573,   574,   575,     0,     0,     0,
       0,     0,     0,     0,     0,   576,     0,   306,     0,   134,
     135,     0,   136,   137,   138,   139,   140,   141,   142,   143,
       0,   144,   145,   146,     0,     0,     0,   458,     0,     0,
     134,   135,     0,   136,   137,   138,   139,   140,   141,   142,
     143,     0,   144,   145,   146,   852,     0,   134,   135,     0,
     136,   137,   138,   139,   140,   141,   142,   143,     0,   144,
     145,   146,     0,     0,   134,   135,     0,   136,   137,   138,
     139,   140,   141,   142,   143,     0,   144,   145,   146,     0,
       0,   577,   578,     0,   579,   580,   581,   582,   583,   584,
     585,   586,     0,   587,   588,   589,   821,   822,   823,   824,
     825,   826,   827,   828,     0,     0,     0,     0,     0,     0,
       0,     0,   829,   821,   822,   823,   824,   825,   826,   827,
     828,     0,     0,     0,     0,     0,     0,     0,     0,   829,
     822,   823,   824,   825,   826,   827,   828,     0,     0,     0,
       0,     0,     0,     0,     0,   829,   823,   824,   825,   826,
     827,   828,     0,     0,     0,     0,     0,     0,     0,     0,
     829,   823,   824,   825,   826,   827,   828,     0,     0,     0,
       0,     0,     0,     0,     0,   829,     0,     0,   129,   130,
     131,   132,     0,     0,     0,     0,   908,     0,   830,   831,
     133,   832,     0,     0,   833,   834,   835,   836,   837,     0,
     838,   839,   840,     0,     0,   830,   831,     0,   832,     0,
       0,   833,   834,   835,   836,   837,     0,   838,   839,   840,
       0,     0,   831,    -1,   832,     0,     0,   833,   834,   835,
     836,   837,     0,   838,   839,   840,     0,   831,     0,   832,
       0,     0,   833,   834,   835,   836,   837,     0,   838,   839,
     840,     0,     0,     0,   832,     0,     0,   833,   834,   835,
     836,   837,     0,   838,   839,   840,     0,    66,     0,     0,
     137,   138,   139,   140,   141,   142,   143,    67,   144,   145,
     146,    68,     0,     0,    69,     0,     0,   825,   826,   827,
     828,   326,   327,    70,     0,     0,    71,    72,    73,   829,
       0,     0,     0,     0,     0,     0,     0,    74,     0,     0,
       0,    75,     0,     0,     0,    76,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    77,     0,     0,    37,     0,
      38,   328,   329,     0,    41,     0,     0,     0,     0,     0,
       0,     0,     0,    43,     0,     0,     0,     0,     0,    44,
      45,    46,     0,   326,   327,     0,     0,     0,     0,     0,
       0,    47,    48,     0,     0,     0,     0,     0,    36,     0,
       0,     0,   330,     0,    52,     0,     0,    53,     0,     0,
       0,   833,   834,   835,   836,   837,     0,   838,   839,   840,
      37,     0,    38,     0,     0,     0,    41,     0,     0,     0,
       0,     0,     0,     0,    37,    43,    38,    39,    40,     0,
      41,    44,    45,    46,    42,     0,    36,     0,     0,    43,
       0,     0,     0,    47,    48,    44,    45,    46,     0,     0,
      96,     0,     0,     0,   330,     0,    52,    47,    48,    53,
       0,     0,    49,     0,     0,     0,     0,     0,    50,    51,
      52,     0,    37,    53,    38,    39,   276,     0,    41,     0,
       0,     0,    42,     0,     0,     0,    37,    43,    38,    39,
       0,     0,    41,    44,    45,    46,    42,     0,    36,     0,
       0,    43,     0,     0,     0,    47,    48,    44,    45,    46,
      49,     0,     0,     0,     0,     0,    50,    51,    52,    47,
      48,    53,     0,     0,    49,     0,     0,     0,     0,     0,
      97,    51,    52,     0,    37,    53,    38,    39,     0,     0,
      41,     0,     0,     0,    42,     0,     0,     0,     0,    43,
       0,     0,     0,     0,     0,    44,    45,    46,     0,    66,
       0,     0,     0,     0,     0,     0,     0,    47,    48,    67,
       0,     0,    49,    68,     0,     0,    69,     0,    50,    51,
      52,     0,     0,    53,    66,    70,     0,     0,    71,    72,
      73,     0,     0,     0,    67,     0,     0,     0,    68,    74,
       0,    69,     0,    75,     0,     0,     0,    76,    66,     0,
      70,     0,     0,    71,    72,    73,     0,    77,    67,     0,
       0,     0,    68,     0,    74,    69,     0,     0,    75,     0,
       0,     0,    76,    66,    70,     0,   324,    71,    72,    73,
       0,     0,    77,    67,     0,     0,     0,    68,    74,     0,
      69,     0,    75,     0,     0,     0,    76,    66,     0,    70,
       0,   382,    71,    72,    73,     0,    77,    67,     0,     0,
       0,    68,     0,    74,    69,     0,     0,    75,     0,     0,
       0,    76,     0,    70,     0,   445,    71,    72,    73,     0,
       0,    77,     0,     0,     0,     0,     0,    74,     0,     0,
       0,    75,     0,     0,     0,    76,     0,     0,     0,     0,
     531,     0,     0,     0,     0,    77,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   733
};

static const short yycheck[] =
{
       1,   453,    31,     4,    89,    90,    91,   173,    93,    94,
      95,    31,    81,    81,    81,   593,    75,   102,   103,    40,
     339,   106,   343,   342,    81,   344,     8,     9,    12,   269,
     118,   444,   118,   345,   118,   101,    10,   349,   350,   351,
     118,   101,   186,    20,    20,   364,   104,   366,   367,   368,
       2,     8,     9,    54,   120,   376,   104,    19,    20,   407,
     120,   119,    45,   101,    47,    48,   109,    29,   101,    52,
     100,   119,    92,   103,    75,    27,    28,    29,    30,   101,
      32,   118,   120,   392,   104,   105,   405,   120,     6,   437,
     399,   400,   401,   402,   507,   118,   262,    20,   120,   384,
     385,   101,   411,   118,    81,    81,     8,     9,     8,     9,
     179,   179,   179,   279,   433,    10,   145,   101,   109,   428,
     120,   118,   179,   101,   118,   446,    29,   439,   118,   101,
     370,   118,   545,   218,   117,   118,   119,   120,   120,   113,
     459,   120,   120,   100,   103,   723,    29,   148,   120,   111,
     112,   113,   114,   115,    49,   117,   118,   119,    81,   325,
     161,   162,   163,   164,   185,     8,     9,   407,   151,   190,
     153,   172,   173,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   101,   146,   148,   340,   437,   100,   343,
     100,   549,   179,   179,   552,     8,     9,    10,   161,   162,
     163,   164,   120,   108,   117,   118,   119,   103,   113,   567,
     798,   101,   388,   118,   118,   119,     8,     9,    10,   101,
     539,   118,   376,   518,   117,   118,   119,   522,   101,   524,
     120,   526,   527,   528,   553,   103,    49,   268,   120,     8,
       9,   119,   120,   254,   103,   276,   179,   120,   259,   260,
     113,   262,   263,   119,   265,   100,   267,    49,   100,    72,
     118,     8,     9,    10,   226,   227,   277,   598,   279,   118,
     119,   859,   103,     8,     9,   863,    19,    20,   100,   101,
     267,   118,   119,    73,    74,    75,    29,   118,   119,   120,
     109,   254,   446,   119,   120,   108,     6,   259,   118,   549,
     113,    70,    49,    93,   102,   118,   120,   318,   319,   340,
     101,   899,   343,    48,   325,   903,   108,    29,    97,    98,
      99,   113,   284,   334,   120,   394,   118,   120,   916,   340,
     110,   120,   343,   372,   345,   374,   103,   925,   349,   350,
     351,   803,   329,   354,   306,   376,   357,   103,    83,   120,
     361,   118,   119,   120,    89,    90,   120,   452,    93,   370,
     120,   108,   118,   119,   120,   376,   113,   120,   111,   112,
     113,   114,   115,   110,   117,   118,   119,   388,   120,   390,
     120,   392,   413,   394,   423,   103,   120,   718,   399,   400,
     401,   402,   403,   423,   118,   118,   407,   755,   120,   361,
     411,   113,   114,   115,   118,   117,   118,   119,   395,     4,
     118,   101,   566,     8,     9,   446,   123,   428,   380,   121,
     104,    29,   100,   752,   101,   110,   437,   101,   439,   416,
     416,    29,   113,   444,   100,   446,   102,   103,   104,    73,
      74,    75,   453,    50,   598,   113,   121,   544,     8,     9,
     383,   384,   385,    60,    61,   534,   534,   534,   420,   421,
     422,   118,   424,    70,   795,   794,   113,   534,   121,    76,
      84,   104,   113,    15,    16,    17,    18,    19,    20,   810,
     109,   118,   444,   416,   109,   120,   101,    29,    48,   120,
      97,   453,    99,   100,   121,   119,   507,   120,   101,   120,
     104,   123,   532,   111,   112,   113,   114,   115,   119,   117,
     118,   119,   101,   842,   120,   113,   114,   115,   529,   117,
     118,   119,   533,    83,   554,   856,   556,   557,   539,    89,
      90,   118,    49,    93,   545,   566,     4,   118,   549,   101,
     123,   552,   553,   505,   120,   507,    29,   534,   534,   588,
     121,   120,   118,   564,   121,   123,   567,   109,   109,   118,
     123,   101,   110,   120,   718,   110,   897,   598,   118,   111,
     112,   113,   114,   115,   181,   117,   118,   119,    85,   120,
     118,   120,   593,   545,   120,   518,   193,   598,   120,   522,
     197,   524,   118,   526,   527,   528,   118,   204,   205,   120,
     120,   534,   121,     8,     9,   110,   568,   569,   570,   571,
     572,   573,   574,   575,   576,   577,   578,   579,   580,   581,
     582,   583,   584,   585,   586,   587,   120,   589,   111,   112,
     113,   114,   115,   110,   117,   118,   119,     3,     4,     5,
       6,   795,     8,    48,   741,   742,   743,   744,   120,   746,
     120,    44,   118,   260,   118,   120,   810,     0,     0,   172,
     720,    54,   757,   451,   394,    58,   794,   752,    61,   842,
     179,   682,   533,     8,     9,   394,   283,    70,    83,   395,
      73,    74,    75,   329,    89,    90,    52,   718,    93,   566,
     179,    84,   389,    59,    -1,    88,   416,   682,   318,    92,
     450,    -1,   856,    -1,    -1,    -1,   745,   718,    -1,    -1,
      -1,   318,   723,    48,    80,   745,    82,    -1,    -1,    -1,
      86,   328,    -1,   330,   821,   822,   823,   824,   825,   826,
     827,   828,   829,   830,   831,   832,   833,   834,   835,   836,
     837,   838,   108,   897,   755,    -1,   112,   113,    83,   711,
     116,    -1,   118,    -1,    89,    90,   122,    -1,    -1,    -1,
      -1,    -1,   724,    -1,   795,    -1,    -1,    -1,    -1,    -1,
      -1,   868,   379,    -1,    -1,    -1,   383,   384,   385,   810,
      -1,   811,   812,   813,   795,    -1,    -1,   798,    -1,    -1,
      -1,   753,   803,    -1,    45,    -1,    47,    -1,   760,   810,
     839,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      -1,   908,    -1,    -1,    -1,    66,    67,    68,    29,   100,
      -1,   102,   103,   104,    -1,   856,    -1,    78,    79,    15,
      16,    17,    18,    19,    20,    -1,    -1,   118,   119,    -1,
      91,   803,    -1,    29,   451,   856,    -1,    -1,   859,    45,
      -1,    47,   863,   892,    -1,   894,   741,   742,   743,   744,
      -1,   746,    -1,    -1,    60,    -1,   897,   118,    -1,    -1,
      66,    67,    68,    -1,    -1,    -1,    -1,    -1,   840,    -1,
     919,   920,    78,    79,    -1,    -1,   897,    -1,   899,    -1,
     852,    -1,   903,    -1,    -1,    91,    -1,   504,   109,   110,
     111,   112,   113,   114,   115,   916,   117,   118,   119,    -1,
     517,   518,   519,    -1,   925,   522,    -1,   524,    -1,   526,
     527,   528,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,   118,   119,    -1,    -1,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,    -1,    -1,    -1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    -1,    -1,
      -1,    -1,    -1,   868,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,   908,    69,    -1,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    -1,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    -1,    69,    -1,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    -1,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
      -1,    -1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    13,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    45,    -1,    47,    29,    45,    -1,    47,    48,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    -1,    59,
      60,    -1,    66,    67,    68,    -1,    66,    67,    68,    -1,
      -1,    71,    -1,    -1,    78,    79,    -1,    -1,    78,    79,
      80,    -1,    82,    83,    -1,    -1,    86,    91,   895,    89,
      90,    91,    -1,    -1,    94,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    12,    -1,    -1,    -1,   108,    -1,
      -1,    -1,   112,   113,   118,    -1,   116,    -1,   118,    -1,
     105,   106,   122,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,   118,   119,    -1,    -1,    45,   123,    47,
      48,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      -1,    59,    60,    -1,    -1,    -1,    -1,    -1,    66,    67,
      68,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      78,    79,    80,    -1,    82,    83,    -1,    -1,    86,    -1,
      -1,    89,    90,    91,    -1,    -1,    94,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    12,    -1,    -1,    -1,
     108,    -1,    -1,    -1,   112,    -1,    -1,    -1,   116,    -1,
     118,    -1,    -1,    -1,   122,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    45,    -1,    47,    -1,    45,
      29,    47,    48,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    -1,    59,    60,    -1,    66,    67,    68,    -1,
      66,    67,    68,    -1,    -1,    71,    -1,    -1,    78,    79,
      -1,    -1,    78,    79,    80,    -1,    82,    83,    -1,    -1,
      86,    91,    -1,    89,    90,    91,    -1,    -1,    94,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,   108,    -1,    -1,    -1,   112,    -1,   118,    -1,
     116,    -1,   118,    -1,    -1,    -1,   122,   106,    -1,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,   118,
     119,    45,    -1,    47,    -1,    -1,    -1,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    59,    60,    -1,    -1,    -1,
      -1,    -1,    66,    67,    -1,    -1,    -1,    71,    -1,    -1,
      -1,    -1,    -1,    -1,    78,    79,    80,    45,    82,    47,
      -1,    -1,    86,     3,     4,     5,     6,    91,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,
      68,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,   113,
      78,    79,   116,    -1,   118,    45,   120,    47,   122,    -1,
      -1,    51,    -1,    91,    -1,    45,    -1,    47,    -1,    -1,
      60,    51,    52,    -1,    -1,    -1,    66,    67,    68,    59,
      60,    -1,    -1,    -1,    -1,    -1,    66,    67,    78,    79,
      -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,
      80,    91,    82,    -1,    -1,    -1,    86,     3,     4,     5,
       6,    91,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,
      -1,    -1,   112,   113,    -1,    -1,   116,    -1,   118,    -1,
      -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      -1,    47,    -1,    -1,    -1,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    59,    60,    -1,    -1,    -1,    -1,    -1,
      66,    67,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,
      -1,    -1,    78,    79,    80,    -1,    82,    -1,    -1,    -1,
      86,     3,     4,     5,     6,    91,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   108,    -1,    -1,    -1,   112,   113,    -1,    -1,
     116,    -1,   118,    -1,    -1,    -1,   122,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    -1,    47,    -1,    -1,    -1,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,    -1,
      -1,    -1,    -1,    -1,    66,    67,    -1,    -1,    -1,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,    -1,
      82,    -1,    -1,    -1,    86,     3,     4,     5,     6,    91,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,
     112,   113,    -1,    -1,   116,    -1,   118,    -1,   120,    -1,
     122,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    47,
      -1,    -1,    -1,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    59,    60,    -1,    -1,    -1,    -1,    -1,    66,    67,
      -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      78,    79,    80,    -1,    82,    -1,    -1,    -1,    86,     3,
       4,     5,     6,    91,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,   112,   113,    -1,    -1,   116,    -1,
     118,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    -1,    47,    -1,    -1,    -1,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    59,    60,    -1,    -1,    -1,
      -1,    -1,    66,    67,    -1,    -1,    -1,    71,    -1,    -1,
      -1,    -1,    -1,    -1,    78,    79,    80,    -1,    82,    -1,
      -1,    -1,    86,     3,     4,     5,     6,    91,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,   113,
      -1,    -1,   116,    -1,   118,    -1,   120,    -1,   122,    -1,
      -1,    -1,    45,    -1,    47,    45,    -1,    47,    51,    -1,
      -1,    51,    52,    -1,    -1,    -1,    -1,    60,    -1,    59,
      60,    -1,    -1,    66,    67,    68,    66,    67,    -1,    -1,
      -1,    71,    -1,    -1,    -1,    78,    79,    -1,    78,    79,
      80,    -1,    82,    -1,    -1,    -1,    86,    -1,    91,    -1,
      -1,    91,    -1,    13,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    29,
      -1,    -1,   112,   113,    -1,   118,   116,    -1,   118,    -1,
      -1,    -1,   122,    13,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    -1,    13,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    15,    16,    17,    18,    19,    20,    -1,
      50,    -1,    -1,    -1,    -1,   105,   106,    29,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
      -1,    71,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   105,   106,    -1,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
      -1,   101,    -1,   123,   104,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
       8,     9,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   106,    -1,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,   118,   119,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    47,
      48,    49,    -1,    51,    -1,    -1,    -1,    55,    56,    57,
      -1,    -1,    60,    -1,     8,     9,    -1,    65,    66,    67,
      68,    69,    -1,    -1,    72,    -1,    -1,    -1,    76,    -1,
      78,    79,    -1,    81,    -1,    83,    -1,    -1,    -1,    -1,
      -1,    89,    90,    91,    -1,    93,    94,    95,    -1,    -1,
      -1,    45,   100,    47,    48,    49,    -1,    51,    -1,    -1,
      -1,    55,    56,    57,    -1,    -1,    60,    -1,   116,     8,
       9,    65,    66,    67,    68,    69,    -1,    -1,    72,    -1,
      -1,    -1,    76,    -1,    78,    79,    -1,    81,    -1,    83,
      -1,    -1,    -1,    -1,    -1,    89,    90,    91,    -1,    93,
      94,    95,    -1,    -1,    -1,    -1,    45,    -1,    47,    48,
      49,    -1,    51,    -1,    -1,    -1,    55,    56,    57,    -1,
      -1,    60,   116,    -1,    -1,    -1,    65,    66,    67,    68,
      69,    -1,    -1,    72,    -1,    -1,    -1,    76,    -1,    78,
      79,    -1,    81,    -1,    83,    -1,    -1,    -1,    -1,    -1,
      89,    90,    91,    -1,    93,    94,    95,    13,    14,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    29,    -1,    -1,    -1,   116,    13,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    29,    13,    14,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    29,    13,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,    13,
      14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    -1,   103,    -1,   105,
     106,    -1,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,   118,   119,    -1,    -1,    -1,   102,    -1,    -1,
     105,   106,    -1,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,   118,   119,   103,    -1,   105,   106,    -1,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
     118,   119,    -1,    -1,   105,   106,    -1,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,   118,   119,    -1,
      -1,   105,   106,    -1,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,   118,   119,    13,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    29,    13,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
      14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      29,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,   103,    -1,   105,   106,
      29,   108,    -1,    -1,   111,   112,   113,   114,   115,    -1,
     117,   118,   119,    -1,    -1,   105,   106,    -1,   108,    -1,
      -1,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
      -1,    -1,   106,     0,   108,    -1,    -1,   111,   112,   113,
     114,   115,    -1,   117,   118,   119,    -1,   106,    -1,   108,
      -1,    -1,   111,   112,   113,   114,   115,    -1,   117,   118,
     119,    -1,    -1,    -1,   108,    -1,    -1,   111,   112,   113,
     114,   115,    -1,   117,   118,   119,    -1,    44,    -1,    -1,
     109,   110,   111,   112,   113,   114,   115,    54,   117,   118,
     119,    58,    -1,    -1,    61,    -1,    -1,    17,    18,    19,
      20,     8,     9,    70,    -1,    -1,    73,    74,    75,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,
      -1,    88,    -1,    -1,    -1,    92,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    45,    -1,
      47,    48,    49,    -1,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    66,
      67,    68,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    78,    79,    -1,    -1,    -1,    -1,    -1,     9,    -1,
      -1,    -1,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,
      -1,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
      45,    -1,    47,    -1,    -1,    -1,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    60,    47,    48,    49,    -1,
      51,    66,    67,    68,    55,    -1,     9,    -1,    -1,    60,
      -1,    -1,    -1,    78,    79,    66,    67,    68,    -1,    -1,
       9,    -1,    -1,    -1,    89,    -1,    91,    78,    79,    94,
      -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,    89,    90,
      91,    -1,    45,    94,    47,    48,    49,    -1,    51,    -1,
      -1,    -1,    55,    -1,    -1,    -1,    45,    60,    47,    48,
      -1,    -1,    51,    66,    67,    68,    55,    -1,     9,    -1,
      -1,    60,    -1,    -1,    -1,    78,    79,    66,    67,    68,
      83,    -1,    -1,    -1,    -1,    -1,    89,    90,    91,    78,
      79,    94,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,
      89,    90,    91,    -1,    45,    94,    47,    48,    -1,    -1,
      51,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    60,
      -1,    -1,    -1,    -1,    -1,    66,    67,    68,    -1,    44,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    54,
      -1,    -1,    83,    58,    -1,    -1,    61,    -1,    89,    90,
      91,    -1,    -1,    94,    44,    70,    -1,    -1,    73,    74,
      75,    -1,    -1,    -1,    54,    -1,    -1,    -1,    58,    84,
      -1,    61,    -1,    88,    -1,    -1,    -1,    92,    44,    -1,
      70,    -1,    -1,    73,    74,    75,    -1,   102,    54,    -1,
      -1,    -1,    58,    -1,    84,    61,    -1,    -1,    88,    -1,
      -1,    -1,    92,    44,    70,    -1,   121,    73,    74,    75,
      -1,    -1,   102,    54,    -1,    -1,    -1,    58,    84,    -1,
      61,    -1,    88,    -1,    -1,    -1,    92,    44,    -1,    70,
      -1,   121,    73,    74,    75,    -1,   102,    54,    -1,    -1,
      -1,    58,    -1,    84,    61,    -1,    -1,    88,    -1,    -1,
      -1,    92,    -1,    70,    -1,   121,    73,    74,    75,    -1,
      -1,   102,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,
      -1,    88,    -1,    -1,    -1,    92,    -1,    -1,    -1,    -1,
     121,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   121
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 2:
#line 379 "cppBison.yxx"
{
  current_expr = yyvsp[0].u.expr;
}
    break;
case 3:
#line 383 "cppBison.yxx"
{
  current_type = yyvsp[0].u.type;
}
    break;
case 9:
#line 401 "cppBison.yxx"
{
  delete yyvsp[-1].u.expr;
}
    break;
case 10:
#line 413 "cppBison.yxx"
{
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) | 
                     (yyvsp[-1].u.integer & CPPInstance::SC_c_binding));
}
    break;
case 11:
#line 418 "cppBison.yxx"
{
  pop_storage_class();
}
    break;
case 19:
#line 432 "cppBison.yxx"
{
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = yylsp[0];
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
    break;
case 20:
#line 445 "cppBison.yxx"
{
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", yylsp[0]);
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
    break;
case 21:
#line 454 "cppBison.yxx"
{
  current_scope->set_current_vis(V_published);
}
    break;
case 22:
#line 458 "cppBison.yxx"
{
  current_scope->set_current_vis(V_public);
}
    break;
case 23:
#line 462 "cppBison.yxx"
{
  current_scope->set_current_vis(V_protected);
}
    break;
case 24:
#line 466 "cppBison.yxx"
{
  current_scope->set_current_vis(V_private);
}
    break;
case 25:
#line 473 "cppBison.yxx"
{
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
    break;
case 26:
#line 479 "cppBison.yxx"
{
  delete current_scope;
  pop_scope();
}
    break;
case 27:
#line 488 "cppBison.yxx"
{
  yyval.u.integer = 0;
}
    break;
case 28:
#line 492 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_extern;
}
    break;
case 29:
#line 496 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-2].u.integer | (int)CPPInstance::SC_extern;
  if (yyvsp[0].str == "C") {
    yyval.u.integer |= (int)CPPInstance::SC_c_binding;
  } else if (yyvsp[0].str == "C++") {
    yyval.u.integer &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + yyvsp[0].str + "\"", yylsp[0]);
  }
}
    break;
case 30:
#line 507 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_static;
}
    break;
case 31:
#line 511 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_inline;
}
    break;
case 32:
#line 515 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_virtual;
}
    break;
case 33:
#line 519 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_explicit;
}
    break;
case 34:
#line 523 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_volatile;
}
    break;
case 35:
#line 527 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_mutable;
}
    break;
case 36:
#line 531 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_register;
}
    break;
case 37:
#line 538 "cppBison.yxx"
{
  /* multiple_var_declaration adds itself to the scope. */
}
    break;
case 38:
#line 542 "cppBison.yxx"
{
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration(yyvsp[-1].u.decl, global_scope, current_lexer, yylsp[-1]);
}
    break;
case 39:
#line 551 "cppBison.yxx"
{
  if (yyvsp[-1].u.instance != (CPPInstance *)NULL) {
    yyvsp[-1].u.instance->_storage_class |= (current_storage_class | yyvsp[-2].u.integer);
    current_scope->add_declaration(yyvsp[-1].u.instance, global_scope, current_lexer, yylsp[-1]);
    yyvsp[-1].u.instance->set_initializer(yyvsp[0].u.expr);
  }
}
    break;
case 40:
#line 562 "cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if (yyvsp[0].u.decl->as_type_declaration()) {
    current_type = yyvsp[0].u.decl->as_type_declaration()->_type;
  } else {
    current_type = yyvsp[0].u.decl->as_type();
  }
  push_storage_class(yyvsp[-1].u.integer);
}
    break;
case 41:
#line 573 "cppBison.yxx"
{
  pop_storage_class();
}
    break;
case 42:
#line 577 "cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  current_type = yyvsp[0].u.type;
  push_storage_class(yyvsp[-2].u.integer);
}
    break;
case 43:
#line 584 "cppBison.yxx"
{
  pop_storage_class();
}
    break;
case 44:
#line 595 "cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-1].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-1].file);
  inst->set_initializer(yyvsp[0].u.expr);
  current_scope->add_declaration(inst, global_scope, current_lexer, yylsp[-1]);
}
    break;
case 45:
#line 603 "cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-3].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-3].file);
  inst->set_initializer(yyvsp[-2].u.expr);
  current_scope->add_declaration(inst, global_scope, current_lexer, yylsp[-3]);
}
    break;
case 46:
#line 614 "cppBison.yxx"
{
  yyvsp[-1].u.inst_ident->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-1].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-1].file);
  inst->set_initializer(yyvsp[0].u.expr);
  current_scope->add_declaration(inst, global_scope, current_lexer, yylsp[-1]);
}
    break;
case 47:
#line 623 "cppBison.yxx"
{
  yyvsp[-3].u.inst_ident->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-3].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-3].file);
  inst->set_initializer(yyvsp[-2].u.expr);
  current_scope->add_declaration(inst, global_scope, current_lexer, yylsp[-3]);
}
    break;
case 48:
#line 636 "cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if (yyvsp[0].u.decl->as_type_declaration()) {
    current_type = yyvsp[0].u.decl->as_type_declaration()->_type;
  } else {
    current_type = yyvsp[0].u.decl->as_type();
  }
  push_storage_class(yyvsp[-1].u.integer);
}
    break;
case 49:
#line 647 "cppBison.yxx"
{
  pop_storage_class();
}
    break;
case 50:
#line 651 "cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  current_type = yyvsp[0].u.type;
  push_storage_class(yyvsp[-2].u.integer);
}
    break;
case 51:
#line 658 "cppBison.yxx"
{
  pop_storage_class();
}
    break;
case 52:
#line 662 "cppBison.yxx"
{
  if (yyvsp[-1].u.instance != (CPPDeclaration *)NULL) {
    CPPInstance *inst = yyvsp[-1].u.instance->as_instance();
    if (inst != (CPPInstance *)NULL) {
      inst->_storage_class |= (current_storage_class | yyvsp[-2].u.integer);
      current_scope->add_declaration(inst, global_scope, current_lexer, yylsp[-1]);
      current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, yylsp[-1]);
    }
  }
}
    break;
case 53:
#line 676 "cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-1].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-1].file);
  inst->set_initializer(yyvsp[0].u.expr);
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, yylsp[-1]);
}
    break;
case 54:
#line 684 "cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-3].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-3].file);
  inst->set_initializer(yyvsp[-2].u.expr);
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, yylsp[-3]);
}
    break;
case 55:
#line 695 "cppBison.yxx"
{
  yyvsp[-1].u.inst_ident->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-1].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-1].file);
  inst->set_initializer(yyvsp[0].u.expr);
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, yylsp[-1]);
}
    break;
case 56:
#line 704 "cppBison.yxx"
{
  yyvsp[-3].u.inst_ident->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-3].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-3].file);
  inst->set_initializer(yyvsp[-2].u.expr);
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, yylsp[-3]);
}
    break;
case 57:
#line 718 "cppBison.yxx"
{
  push_scope(yyvsp[-1].u.identifier->get_scope(current_scope, global_scope));
}
    break;
case 58:
#line 722 "cppBison.yxx"
{
  pop_scope();
  CPPType *type;
  if (yyvsp[-5].u.identifier->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(yyvsp[-5].u.identifier);
  ii->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);

  yyval.u.instance = new CPPInstance(type, ii, 0, yylsp[-5].file);
}
    break;
case 59:
#line 740 "cppBison.yxx"
{
  push_scope(yyvsp[-1].u.identifier->get_scope(current_scope, global_scope));
}
    break;
case 60:
#line 744 "cppBison.yxx"
{
  pop_scope();
  CPPType *type;
  if (yyvsp[-5].u.identifier->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(yyvsp[-5].u.identifier);
  ii->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);

  yyval.u.instance = new CPPInstance(type, ii, 0, yylsp[-5].file);
}
    break;
case 61:
#line 764 "cppBison.yxx"
{
  push_scope(yyvsp[-1].u.identifier->get_scope(current_scope, global_scope));
}
    break;
case 62:
#line 768 "cppBison.yxx"
{
  pop_scope();
  if (yyvsp[-5].u.identifier->is_scoped()) {
    yyerror("Invalid destructor name: ~" + yyvsp[-5].u.identifier->get_fully_scoped_name(), yylsp[-5]);
  } else {
    CPPIdentifier *ident = 
      new CPPIdentifier("~" + yyvsp[-5].u.identifier->get_simple_name(), yylsp[-5].file);
    delete yyvsp[-5].u.identifier;

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);
    
    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);

    yyval.u.instance = new CPPInstance(type, ii, 0, yylsp[-5].file);
  }
}
    break;
case 63:
#line 794 "cppBison.yxx"
{
  push_scope(yyvsp[-2].u.inst_ident->get_scope(current_scope, global_scope));
}
    break;
case 64:
#line 798 "cppBison.yxx"
{
  pop_scope();
  CPPType *type = yyvsp[-9].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(type != NULL);

  CPPInstanceIdentifier *ii = yyvsp[-6].u.inst_ident;
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);
  yyval.u.instance = new CPPInstance(type, ii, 0, yylsp[-9].file);
}
    break;
case 65:
#line 809 "cppBison.yxx"
{
  push_scope(yyvsp[-2].u.inst_ident->get_scope(current_scope, global_scope));
}
    break;
case 66:
#line 813 "cppBison.yxx"
{
  pop_scope();
  CPPType *type = yyvsp[-10].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(type != NULL);

  CPPInstanceIdentifier *ii = yyvsp[-6].u.inst_ident;
  ii->add_scoped_pointer_modifier(yyvsp[-8].u.identifier);
  ii->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);
  yyval.u.instance = new CPPInstance(type, ii, 0, yylsp[-10].file);
}
    break;
case 67:
#line 826 "cppBison.yxx"
{
  if (yyvsp[-3].u.identifier != NULL) {
    push_scope(yyvsp[-3].u.identifier->get_scope(current_scope, global_scope));
  }
}
    break;
case 68:
#line 832 "cppBison.yxx"
{
  if (yyvsp[-7].u.identifier != NULL) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give all typecast operators the name "operator typecast".
  // Only their return type will differentiate them.  (Naturally, this
  // violates actual C++ rules, but we're not an actual C++ compiler
  // so we don't care.  And this is the easiest way to do it.)
  CPPIdentifier *ident = yyvsp[-7].u.identifier;
  if (ident == NULL) {
    ident = new CPPIdentifier("operator typecast", yylsp[-7].file);
  } else {
    ident->add_name("operator typecast");
  }
  yyval.u.instance = CPPInstance::make_typecast_function
    (new CPPInstance(yyvsp[-6].u.type, yyvsp[-5].u.inst_ident, 0, yylsp[-5].file), ident, yyvsp[-2].u.param_list, yyvsp[0].u.integer);
}
    break;
case 69:
#line 857 "cppBison.yxx"
{
  if (yyvsp[-4].u.identifier != NULL) {
    push_scope(yyvsp[-4].u.identifier->get_scope(current_scope, global_scope));
  }
}
    break;
case 70:
#line 863 "cppBison.yxx"
{
  if (yyvsp[-8].u.identifier != NULL) {
    pop_scope();
  }

  CPPIdentifier *ident = yyvsp[-8].u.identifier;
  if (ident == NULL) {
    ident = new CPPIdentifier("operator typecast", yylsp[-8].file);
  } else {
    ident->add_name("operator typecast");
  }
  yyvsp[-5].u.inst_ident->add_modifier(IIT_const);
  yyval.u.instance = CPPInstance::make_typecast_function
    (new CPPInstance(yyvsp[-6].u.type, yyvsp[-5].u.inst_ident, 0, yylsp[-5].file), ident, yyvsp[-2].u.param_list, yyvsp[0].u.integer);
}
    break;
case 71:
#line 883 "cppBison.yxx"
{
  CPPDeclaration *decl = 
    yyvsp[0].u.identifier->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != (CPPDeclaration *)NULL) {
    yyval.u.instance = decl->as_instance();
  } else {
    yyval.u.instance = (CPPInstance *)NULL;
  }
}
    break;
case 72:
#line 896 "cppBison.yxx"
{
  yyval.u.integer = 0;
}
    break;
case 73:
#line 900 "cppBison.yxx"
{
  yyval.u.integer = (int)CPPFunctionType::F_const_method;
}
    break;
case 74:
#line 904 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-3].u.integer;
}
    break;
case 75:
#line 908 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-4].u.integer;
}
    break;
case 76:
#line 915 "cppBison.yxx"
{
  yyval.str = "!";
}
    break;
case 77:
#line 919 "cppBison.yxx"
{
  yyval.str = "~";
}
    break;
case 78:
#line 923 "cppBison.yxx"
{
  yyval.str = "*";
}
    break;
case 79:
#line 927 "cppBison.yxx"
{
  yyval.str = "/";
}
    break;
case 80:
#line 931 "cppBison.yxx"
{
  yyval.str = "%";
}
    break;
case 81:
#line 935 "cppBison.yxx"
{
  yyval.str = "+";
}
    break;
case 82:
#line 939 "cppBison.yxx"
{
  yyval.str = "-";
}
    break;
case 83:
#line 943 "cppBison.yxx"
{
  yyval.str = "|";
}
    break;
case 84:
#line 947 "cppBison.yxx"
{
  yyval.str = "&";
}
    break;
case 85:
#line 951 "cppBison.yxx"
{
  yyval.str = "^";
}
    break;
case 86:
#line 955 "cppBison.yxx"
{
  yyval.str = "||";
}
    break;
case 87:
#line 959 "cppBison.yxx"
{
  yyval.str = "&&";
}
    break;
case 88:
#line 963 "cppBison.yxx"
{
  yyval.str = "==";
}
    break;
case 89:
#line 967 "cppBison.yxx"
{
  yyval.str = "!=";
}
    break;
case 90:
#line 971 "cppBison.yxx"
{
  yyval.str = "<=";
}
    break;
case 91:
#line 975 "cppBison.yxx"
{
  yyval.str = ">=";
}
    break;
case 92:
#line 979 "cppBison.yxx"
{
  yyval.str = "<";
}
    break;
case 93:
#line 983 "cppBison.yxx"
{
  yyval.str = ">";
}
    break;
case 94:
#line 987 "cppBison.yxx"
{
  yyval.str = "<<";
}
    break;
case 95:
#line 991 "cppBison.yxx"
{
  yyval.str = ">>";
}
    break;
case 96:
#line 995 "cppBison.yxx"
{
  yyval.str = "=";
}
    break;
case 97:
#line 999 "cppBison.yxx"
{
  yyval.str = ",";
}
    break;
case 98:
#line 1003 "cppBison.yxx"
{
  yyval.str = "++";
}
    break;
case 99:
#line 1007 "cppBison.yxx"
{
  yyval.str = "--";
}
    break;
case 100:
#line 1011 "cppBison.yxx"
{
  yyval.str = "*=";
}
    break;
case 101:
#line 1015 "cppBison.yxx"
{
  yyval.str = "/=";
}
    break;
case 102:
#line 1019 "cppBison.yxx"
{
  yyval.str = "%=";
}
    break;
case 103:
#line 1023 "cppBison.yxx"
{
  yyval.str = "+=";
}
    break;
case 104:
#line 1027 "cppBison.yxx"
{
  yyval.str = "-=";
}
    break;
case 105:
#line 1031 "cppBison.yxx"
{
  yyval.str = "|=";
}
    break;
case 106:
#line 1035 "cppBison.yxx"
{
  yyval.str = "&=";
}
    break;
case 107:
#line 1039 "cppBison.yxx"
{
  yyval.str = "^=";
}
    break;
case 108:
#line 1043 "cppBison.yxx"
{
  yyval.str = "<<=";
}
    break;
case 109:
#line 1047 "cppBison.yxx"
{
  yyval.str = ">>=";
}
    break;
case 110:
#line 1051 "cppBison.yxx"
{
  yyval.str = "->";
}
    break;
case 111:
#line 1055 "cppBison.yxx"
{
  yyval.str = "[]";
}
    break;
case 112:
#line 1059 "cppBison.yxx"
{
  yyval.str = "()";
}
    break;
case 113:
#line 1063 "cppBison.yxx"
{
  yyval.str = "new";
}
    break;
case 114:
#line 1067 "cppBison.yxx"
{
  yyval.str = "delete";
}
    break;
case 117:
#line 1079 "cppBison.yxx"
{
  push_scope(new CPPTemplateScope(current_scope));
}
    break;
case 118:
#line 1083 "cppBison.yxx"
{
  pop_scope();
}
    break;
case 121:
#line 1095 "cppBison.yxx"
{
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter(yyvsp[0].u.decl);
}
    break;
case 122:
#line 1101 "cppBison.yxx"
{
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter(yyvsp[0].u.decl);
}
    break;
case 123:
#line 1110 "cppBison.yxx"
{
  yyval.u.decl = CPPType::new_type(new CPPClassTemplateParameter(yyvsp[0].u.identifier));
}
    break;
case 124:
#line 1114 "cppBison.yxx"
{
  yyval.u.decl = CPPType::new_type(new CPPClassTemplateParameter(yyvsp[-2].u.identifier, yyvsp[0].u.type));
}
    break;
case 125:
#line 1118 "cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance(yyvsp[-2].u.type, yyvsp[-1].u.inst_ident, 0, yylsp[-1].file);
  inst->set_initializer(yyvsp[0].u.expr);
  yyval.u.decl = inst;
}
    break;
case 126:
#line 1124 "cppBison.yxx"
{
  yyvsp[-1].u.inst_ident->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(yyvsp[-2].u.type, yyvsp[-1].u.inst_ident, 0, yylsp[-1].file);
  inst->set_initializer(yyvsp[0].u.expr);
  yyval.u.decl = inst;
}
    break;
case 127:
#line 1134 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.simple_type);
}
    break;
case 128:
#line 1138 "cppBison.yxx"
{
  yywarning("Not a type: " + yyvsp[0].u.identifier->get_fully_scoped_name(), yylsp[0]);
  yyval.u.type = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
    break;
case 129:
#line 1143 "cppBison.yxx"
{
  yyval.u.type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(yyval.u.type != NULL);
}
    break;
case 130:
#line 1148 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
}
    break;
case 131:
#line 1156 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier(yyvsp[0].u.identifier);
}
    break;
case 132:
#line 1160 "cppBison.yxx"
{
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = yyvsp[-1].u.identifier;
  if (ident == NULL) {
    ident = new CPPIdentifier("operator "+yyvsp[0].str, yylsp[0].file);
  } else {
    ident->_names.push_back("operator "+yyvsp[0].str);
  }

  yyval.u.inst_ident = new CPPInstanceIdentifier(ident);
}
    break;
case 133:
#line 1174 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_const);
}
    break;
case 134:
#line 1179 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_pointer);
}
    break;
case 135:
#line 1184 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_reference);
}
    break;
case 136:
#line 1189 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_scoped_pointer_modifier(yyvsp[-2].u.identifier);
}
    break;
case 137:
#line 1194 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-3].u.inst_ident;
  yyval.u.inst_ident->add_array_modifier(yyvsp[-1].u.expr);
}
    break;
case 138:
#line 1199 "cppBison.yxx"
{
  // bitfield definition.  We ignore the bitfield for now.
  yyval.u.inst_ident = yyvsp[-2].u.inst_ident;
}
    break;
case 139:
#line 1204 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-1].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_paren);
}
    break;
case 140:
#line 1209 "cppBison.yxx"
{
  push_scope(yyvsp[-1].u.inst_ident->get_scope(current_scope, global_scope));
}
    break;
case 141:
#line 1213 "cppBison.yxx"
{
  pop_scope();
  yyval.u.inst_ident = yyvsp[-5].u.inst_ident;
  if (yyvsp[-2].u.param_list->is_parameter_expr() && yyvsp[0].u.integer == 0) {
    // Oops, this must have been an instance declaration with a
    // parameter list, not a function prototype.
    yyval.u.inst_ident->add_initializer_modifier(yyvsp[-2].u.param_list);

  } else {
    // This was (probably) a function prototype.
    yyval.u.inst_ident->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);
  }
}
    break;
case 142:
#line 1231 "cppBison.yxx"
{
  yyval.u.param_list = new CPPParameterList;
}
    break;
case 143:
#line 1235 "cppBison.yxx"
{
  yyval.u.param_list = new CPPParameterList;
  yyval.u.param_list->_includes_ellipsis = true;
}
    break;
case 144:
#line 1240 "cppBison.yxx"
{
  yyval.u.param_list = yyvsp[0].u.param_list;
}
    break;
case 145:
#line 1244 "cppBison.yxx"
{
  yyval.u.param_list = yyvsp[-2].u.param_list;
  yyval.u.param_list->_includes_ellipsis = true;
}
    break;
case 146:
#line 1249 "cppBison.yxx"
{
  yyval.u.param_list = yyvsp[-1].u.param_list;
  yyval.u.param_list->_includes_ellipsis = true;
}
    break;
case 147:
#line 1257 "cppBison.yxx"
{
  yyval.u.param_list = new CPPParameterList;
  yyval.u.param_list->_parameters.push_back(yyvsp[0].u.instance);
}
    break;
case 148:
#line 1262 "cppBison.yxx"
{
  yyval.u.param_list = yyvsp[-2].u.param_list;
  yyval.u.param_list->_parameters.push_back(yyvsp[0].u.instance);
}
    break;
case 149:
#line 1270 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 150:
#line 1274 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 151:
#line 1281 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 152:
#line 1285 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 153:
#line 1292 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 154:
#line 1296 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 155:
#line 1300 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 156:
#line 1304 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[-1].u.expr;
}
    break;
case 157:
#line 1308 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 161:
#line 1321 "cppBison.yxx"
{
}
    break;
case 165:
#line 1330 "cppBison.yxx"
{
  yyval.u.instance = new CPPInstance(yyvsp[-2].u.type, yyvsp[-1].u.inst_ident, 0, yylsp[-1].file);
  yyval.u.instance->set_initializer(yyvsp[0].u.expr);
}
    break;
case 166:
#line 1335 "cppBison.yxx"
{
  yywarning("Not a type: " + yyvsp[-2].u.identifier->get_fully_scoped_name(), yylsp[-2]);
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
  yyval.u.instance = new CPPInstance(type, yyvsp[-1].u.inst_ident, 0, yylsp[-1].file);
  yyval.u.instance->set_initializer(yyvsp[0].u.expr);
}
    break;
case 167:
#line 1343 "cppBison.yxx"
{
  yyvsp[-1].u.inst_ident->add_modifier(IIT_const);
  yyval.u.instance = new CPPInstance(yyvsp[-2].u.type, yyvsp[-1].u.inst_ident, 0, yylsp[-1].file);
  yyval.u.instance->set_initializer(yyvsp[0].u.expr);
}
    break;
case 168:
#line 1349 "cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_parameter));
  yyval.u.instance = new CPPInstance(type, "expr");
  yyval.u.instance->set_initializer(yyvsp[0].u.expr);
}
    break;
case 169:
#line 1359 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;
case 170:
#line 1363 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier(yyvsp[0].u.identifier);
}
    break;
case 171:
#line 1367 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier(yyvsp[0].u.identifier);
}
    break;
case 172:
#line 1371 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_const);
}
    break;
case 173:
#line 1376 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_pointer);
}
    break;
case 174:
#line 1381 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_reference);
}
    break;
case 175:
#line 1386 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_scoped_pointer_modifier(yyvsp[-2].u.identifier);
}
    break;
case 176:
#line 1391 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-3].u.inst_ident;
  yyval.u.inst_ident->add_array_modifier(yyvsp[-1].u.expr);
}
    break;
case 177:
#line 1399 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;
case 178:
#line 1403 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier(yyvsp[0].u.identifier);
}
    break;
case 179:
#line 1407 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier(yyvsp[0].u.identifier);
}
    break;
case 180:
#line 1411 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_const);
}
    break;
case 181:
#line 1416 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_pointer);
}
    break;
case 182:
#line 1421 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_reference);
}
    break;
case 183:
#line 1426 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_scoped_pointer_modifier(yyvsp[-2].u.identifier);
}
    break;
case 184:
#line 1431 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-3].u.inst_ident;
  yyval.u.inst_ident->add_array_modifier(yyvsp[-1].u.expr);
}
    break;
case 185:
#line 1436 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-5].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_paren);
  yyval.u.inst_ident->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);
}
    break;
case 186:
#line 1442 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-1].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_paren);
}
    break;
case 187:
#line 1450 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;
case 188:
#line 1454 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_const);
}
    break;
case 189:
#line 1459 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_pointer);
}
    break;
case 190:
#line 1464 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_reference);
}
    break;
case 191:
#line 1469 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_scoped_pointer_modifier(yyvsp[-2].u.identifier);
}
    break;
case 192:
#line 1474 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-3].u.inst_ident;
  yyval.u.inst_ident->add_array_modifier(yyvsp[-1].u.expr);
}
    break;
case 193:
#line 1479 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-5].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_paren);
  yyval.u.inst_ident->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);
}
    break;
case 194:
#line 1488 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.simple_type);
}
    break;
case 195:
#line 1492 "cppBison.yxx"
{
  yyval.u.type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(yyval.u.type != NULL);
}
    break;
case 196:
#line 1497 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
}
    break;
case 197:
#line 1501 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.struct_type);
}
    break;
case 198:
#line 1505 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.struct_type);
}
    break;
case 199:
#line 1509 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.enum_type);
}
    break;
case 200:
#line 1513 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.enum_type);
}
    break;
case 201:
#line 1517 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    yyval.u.type = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope, yylsp[-1].file))
      ->as_extension_type();
    CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    yyval.u.type = et;
  }
}
    break;
case 202:
#line 1533 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    yyval.u.type = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope, yylsp[-1].file))
      ->as_extension_type();
    CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    yyval.u.type = et;
  }
}
    break;
case 203:
#line 1552 "cppBison.yxx"
{
  yyval.u.decl = CPPType::new_type(yyvsp[0].u.simple_type);
}
    break;
case 204:
#line 1556 "cppBison.yxx"
{
  yyval.u.decl = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(yyval.u.decl != NULL);
}
    break;
case 205:
#line 1561 "cppBison.yxx"
{
  yyval.u.decl = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
}
    break;
case 206:
#line 1565 "cppBison.yxx"
{
  yyval.u.decl = CPPType::new_type(yyvsp[0].u.struct_type);
}
    break;
case 207:
#line 1569 "cppBison.yxx"
{
  yyval.u.decl = new CPPTypeDeclaration(CPPType::new_type(yyvsp[0].u.struct_type));
}
    break;
case 208:
#line 1573 "cppBison.yxx"
{
  yyval.u.decl = CPPType::new_type(yyvsp[0].u.enum_type);
}
    break;
case 209:
#line 1577 "cppBison.yxx"
{
  yyval.u.decl = new CPPTypeDeclaration(CPPType::new_type(yyvsp[0].u.enum_type));
}
    break;
case 210:
#line 1581 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    yyval.u.decl = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope, yylsp[-1].file))
      ->as_extension_type();
    CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    yyval.u.decl = et;
  }
}
    break;
case 211:
#line 1597 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    yyval.u.decl = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope, yylsp[-1].file))
      ->as_extension_type();
    CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    yyval.u.decl = et;
  }
}
    break;
case 212:
#line 1616 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.simple_type);
}
    break;
case 213:
#line 1620 "cppBison.yxx"
{
  yyval.u.type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(yyval.u.type != NULL);
}
    break;
case 214:
#line 1625 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
}
    break;
case 215:
#line 1629 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    yyval.u.type = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope, yylsp[-1].file))
      ->as_extension_type();
    CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    yyval.u.type = et;
  }
}
    break;
case 216:
#line 1645 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    yyval.u.type = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope, yylsp[-1].file))
      ->as_extension_type();
    CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    yyval.u.type = et;
  }
}
    break;
case 217:
#line 1664 "cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance(yyvsp[-1].u.type, yyvsp[0].u.inst_ident, 0, yylsp[-1].file);
  yyval.u.type = inst->_type;
  delete inst;
}
    break;
case 218:
#line 1670 "cppBison.yxx"
{
  yyvsp[0].u.inst_ident->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(yyvsp[-1].u.type, yyvsp[0].u.inst_ident, 0, yylsp[-2].file);
  yyval.u.type = inst->_type;
  delete inst;
}
    break;
case 219:
#line 1680 "cppBison.yxx"
{
  CPPVisibility starting_vis = 
  (yyvsp[-1].u.extension_enum == CPPExtensionType::T_class) ? V_private : V_public;
  
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType(yyvsp[-1].u.extension_enum, NULL, current_scope,
                                        new_scope, yylsp[-1].file);
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
    break;
case 220:
#line 1694 "cppBison.yxx"
{
  yyval.u.struct_type = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
    break;
case 221:
#line 1704 "cppBison.yxx"
{
  CPPVisibility starting_vis = 
  (yyvsp[-1].u.extension_enum == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, yyvsp[0].u.identifier->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope,
                                        new_scope, yylsp[-1].file);
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);
  
  push_scope(new_scope);
  push_struct(st);
}
    break;
case 222:
#line 1724 "cppBison.yxx"
{
  yyval.u.struct_type = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
    break;
case 227:
#line 1744 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_public, false);
}
    break;
case 228:
#line 1748 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_protected, false);
}
    break;
case 229:
#line 1752 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_private, false);
}
    break;
case 230:
#line 1756 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_public, true);
}
    break;
case 231:
#line 1760 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_protected, true);
}
    break;
case 232:
#line 1764 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_private, true);
}
    break;
case 233:
#line 1768 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_public, true);
}
    break;
case 234:
#line 1772 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_protected, true);
}
    break;
case 235:
#line 1776 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_private, true);
}
    break;
case 236:
#line 1783 "cppBison.yxx"
{
  current_enum = new CPPEnumType(NULL, current_scope, yylsp[-1].file);
}
    break;
case 237:
#line 1787 "cppBison.yxx"
{
  yyval.u.enum_type = current_enum;
  current_enum = NULL;
}
    break;
case 238:
#line 1795 "cppBison.yxx"
{
  current_enum = new CPPEnumType(yyvsp[-1].u.identifier, current_scope, yylsp[-2].file);
}
    break;
case 239:
#line 1799 "cppBison.yxx"
{
  yyval.u.enum_type = current_enum;
  current_enum = NULL;
}
    break;
case 243:
#line 1813 "cppBison.yxx"
{
  assert(current_enum != NULL);
  current_enum->add_element(yyvsp[0].u.identifier->get_simple_name(), current_scope);
}
    break;
case 244:
#line 1818 "cppBison.yxx"
{
  assert(current_enum != NULL);
  current_enum->add_element(yyvsp[-2].u.identifier->get_simple_name(), current_scope, yyvsp[0].u.expr);
}
    break;
case 245:
#line 1823 "cppBison.yxx"
{
  assert(current_enum != NULL);
  current_enum->add_element(yyvsp[0].u.identifier->get_simple_name(), current_scope);
}
    break;
case 246:
#line 1828 "cppBison.yxx"
{
  assert(current_enum != NULL);
  current_enum->add_element(yyvsp[-2].u.identifier->get_simple_name(), current_scope, yyvsp[0].u.expr);
}
    break;
case 247:
#line 1836 "cppBison.yxx"
{
  yyval.u.extension_enum = CPPExtensionType::T_enum;
}
    break;
case 248:
#line 1843 "cppBison.yxx"
{
  yyval.u.extension_enum = CPPExtensionType::T_class;
}
    break;
case 249:
#line 1847 "cppBison.yxx"
{
  yyval.u.extension_enum = CPPExtensionType::T_struct;
}
    break;
case 250:
#line 1851 "cppBison.yxx"
{
  yyval.u.extension_enum = CPPExtensionType::T_union;
}
    break;
case 251:
#line 1858 "cppBison.yxx"
{
  CPPScope *scope = yyvsp[-1].u.identifier->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope = 
      yyvsp[-1].u.identifier->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, yyvsp[-1].u.identifier->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace(yyvsp[-1].u.identifier, scope, yylsp[-2].file);
  current_scope->add_declaration(nspace, global_scope, current_lexer, yylsp[-2]);
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
    break;
case 252:
#line 1876 "cppBison.yxx"
{
  pop_scope();
}
    break;
case 254:
#line 1884 "cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing(yyvsp[0].u.identifier, false, yylsp[-1].file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, yylsp[-1]);
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
    break;
case 255:
#line 1890 "cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing(yyvsp[0].u.identifier, true, yylsp[-2].file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, yylsp[-2]);
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
    break;
case 259:
#line 1905 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_bool);
}
    break;
case 260:
#line 1909 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_char);
}
    break;
case 261:
#line 1913 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
    break;
case 262:
#line 1918 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
    break;
case 263:
#line 1923 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_longlong);
}
    break;
case 264:
#line 1928 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
    break;
case 265:
#line 1933 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
    break;
case 266:
#line 1938 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_int);
}
    break;
case 267:
#line 1942 "cppBison.yxx"
{
  yyval.u.simple_type = yyvsp[0].u.simple_type;
  yyval.u.simple_type->_flags |= CPPSimpleType::F_short;
}
    break;
case 268:
#line 1947 "cppBison.yxx"
{
  yyval.u.simple_type = yyvsp[0].u.simple_type;
  if (yyval.u.simple_type->_flags & CPPSimpleType::F_long) {
    yyval.u.simple_type->_flags |= CPPSimpleType::F_longlong;
  } else {
    yyval.u.simple_type->_flags |= CPPSimpleType::F_long;
  }
}
    break;
case 269:
#line 1956 "cppBison.yxx"
{
  yyval.u.simple_type = yyvsp[0].u.simple_type;
  yyval.u.simple_type->_flags |= CPPSimpleType::F_unsigned;
}
    break;
case 270:
#line 1961 "cppBison.yxx"
{
  yyval.u.simple_type = yyvsp[0].u.simple_type;
  yyval.u.simple_type->_flags |= CPPSimpleType::F_signed;
}
    break;
case 271:
#line 1969 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_float);
}
    break;
case 272:
#line 1973 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_float,
                         CPPSimpleType::F_long);
}
    break;
case 273:
#line 1978 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_double);
}
    break;
case 274:
#line 1982 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_float,
                         CPPSimpleType::F_longlong);
}
    break;
case 275:
#line 1987 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
    break;
case 276:
#line 1995 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_void);
}
    break;
case 277:
#line 2004 "cppBison.yxx"
{
  current_lexer->_resolve_identifiers = false;
}
    break;
case 278:
#line 2008 "cppBison.yxx"
{
  current_lexer->_resolve_identifiers = true;
}
    break;
case 281:
#line 2020 "cppBison.yxx"
{
}
    break;
case 282:
#line 2023 "cppBison.yxx"
{
}
    break;
case 283:
#line 2026 "cppBison.yxx"
{
}
    break;
case 284:
#line 2029 "cppBison.yxx"
{
}
    break;
case 285:
#line 2032 "cppBison.yxx"
{
}
    break;
case 286:
#line 2035 "cppBison.yxx"
{
}
    break;
case 287:
#line 2038 "cppBison.yxx"
{
}
    break;
case 288:
#line 2041 "cppBison.yxx"
{
}
    break;
case 361:
#line 2061 "cppBison.yxx"
{
}
    break;
case 385:
#line 2070 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 386:
#line 2074 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 387:
#line 2081 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 388:
#line 2085 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 389:
#line 2092 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 390:
#line 2096 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(',', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 391:
#line 2103 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 392:
#line 2107 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-2].u.type, yyvsp[0].u.expr));
}
    break;
case 393:
#line 2111 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-4].u.type, yyvsp[-1].u.expr));
}
    break;
case 394:
#line 2115 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-4].u.type, yyvsp[-1].u.expr));
}
    break;
case 395:
#line 2119 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::sizeof_func(yyvsp[-1].u.type));
}
    break;
case 396:
#line 2123 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_NOT, yyvsp[0].u.expr);
}
    break;
case 397:
#line 2127 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_NEGATE, yyvsp[0].u.expr);
}
    break;
case 398:
#line 2131 "cppBison.yxx"
{
  if (yyvsp[0].u.expr->_type == CPPExpression::T_integer) {
    yyval.u.expr = yyvsp[0].u.expr;
    yyval.u.expr->_u._integer = -yyval.u.expr->_u._integer;
  } else if (yyvsp[0].u.expr->_type == CPPExpression::T_real) {
    yyval.u.expr = yyvsp[0].u.expr;
    yyval.u.expr->_u._real = -yyval.u.expr->_u._real;
  } else {
    yyval.u.expr = new CPPExpression(UNARY_MINUS, yyvsp[0].u.expr);
  }
}
    break;
case 399:
#line 2143 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_STAR, yyvsp[0].u.expr);
}
    break;
case 400:
#line 2147 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_REF, yyvsp[0].u.expr);
}
    break;
case 401:
#line 2151 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('*', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 402:
#line 2155 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('/', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 403:
#line 2159 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('%', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 404:
#line 2163 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('+', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 405:
#line 2167 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('-', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 406:
#line 2171 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('|', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 407:
#line 2175 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('&', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 408:
#line 2179 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(OROR, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 409:
#line 2183 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(ANDAND, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 410:
#line 2187 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(EQCOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 411:
#line 2191 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(NECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 412:
#line 2195 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(LECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 413:
#line 2199 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(GECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 414:
#line 2203 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(LSHIFT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 415:
#line 2207 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(RSHIFT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 416:
#line 2211 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('?', yyvsp[-4].u.expr, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 417:
#line 2215 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('[', yyvsp[-3].u.expr, yyvsp[-1].u.expr);
}
    break;
case 418:
#line 2219 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('f', yyvsp[-3].u.expr, yyvsp[-1].u.expr);
}
    break;
case 419:
#line 2223 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('f', yyvsp[-2].u.expr);
}
    break;
case 420:
#line 2227 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('.', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 421:
#line 2231 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(POINTSAT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 422:
#line 2235 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[-1].u.expr;
}
    break;
case 423:
#line 2243 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 424:
#line 2247 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-2].u.type, yyvsp[0].u.expr));
}
    break;
case 425:
#line 2251 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-4].u.type, yyvsp[-1].u.expr));
}
    break;
case 426:
#line 2255 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-4].u.type, yyvsp[-1].u.expr));
}
    break;
case 427:
#line 2259 "cppBison.yxx"
{
  // A constructor call.
  CPPType *type = yyvsp[-3].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(type != NULL);
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 428:
#line 2266 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 429:
#line 2272 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 430:
#line 2278 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 431:
#line 2284 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 432:
#line 2291 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 433:
#line 2298 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 434:
#line 2305 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 435:
#line 2312 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 436:
#line 2318 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 437:
#line 2324 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::sizeof_func(yyvsp[-1].u.type));
}
    break;
case 438:
#line 2328 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::new_op(yyvsp[0].u.type));
}
    break;
case 439:
#line 2332 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::new_op(yyvsp[-3].u.type, yyvsp[-1].u.expr));
}
    break;
case 440:
#line 2336 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_NOT, yyvsp[0].u.expr);
}
    break;
case 441:
#line 2340 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_NEGATE, yyvsp[0].u.expr);
}
    break;
case 442:
#line 2344 "cppBison.yxx"
{
  if (yyvsp[0].u.expr->_type == CPPExpression::T_integer) {
    yyval.u.expr = yyvsp[0].u.expr;
    yyval.u.expr->_u._integer = -yyval.u.expr->_u._integer;
  } else if (yyvsp[0].u.expr->_type == CPPExpression::T_real) {
    yyval.u.expr = yyvsp[0].u.expr;
    yyval.u.expr->_u._real = -yyval.u.expr->_u._real;
  } else {
    yyval.u.expr = new CPPExpression(UNARY_MINUS, yyvsp[0].u.expr);
  }
}
    break;
case 443:
#line 2356 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_STAR, yyvsp[0].u.expr);
}
    break;
case 444:
#line 2360 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_REF, yyvsp[0].u.expr);
}
    break;
case 445:
#line 2364 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('*', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 446:
#line 2368 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('/', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 447:
#line 2372 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('%', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 448:
#line 2376 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('+', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 449:
#line 2380 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('-', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 450:
#line 2384 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('|', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 451:
#line 2388 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('&', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 452:
#line 2392 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(OROR, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 453:
#line 2396 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(ANDAND, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 454:
#line 2400 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(EQCOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 455:
#line 2404 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(NECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 456:
#line 2408 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(LECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 457:
#line 2412 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(GECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 458:
#line 2416 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('<', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 459:
#line 2420 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('>', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 460:
#line 2424 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(LSHIFT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 461:
#line 2428 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(RSHIFT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 462:
#line 2432 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('?', yyvsp[-4].u.expr, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 463:
#line 2436 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('[', yyvsp[-3].u.expr, yyvsp[-1].u.expr);
}
    break;
case 464:
#line 2440 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('f', yyvsp[-3].u.expr, yyvsp[-1].u.expr);
}
    break;
case 465:
#line 2444 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('f', yyvsp[-2].u.expr);
}
    break;
case 466:
#line 2448 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('.', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 467:
#line 2452 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(POINTSAT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 468:
#line 2456 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[-1].u.expr;
}
    break;
case 469:
#line 2463 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].u.integer);
}
    break;
case 470:
#line 2467 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(true);
}
    break;
case 471:
#line 2471 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(false);
}
    break;
case 472:
#line 2475 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].u.integer);
}
    break;
case 473:
#line 2479 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].u.real);
}
    break;
case 474:
#line 2483 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].str);
}
    break;
case 475:
#line 2487 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].u.identifier, current_scope, global_scope, current_lexer);
}
    break;
case 476:
#line 2501 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 477:
#line 2505 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-2].u.type, yyvsp[0].u.expr));
}
    break;
case 478:
#line 2509 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-4].u.type, yyvsp[-1].u.expr));
}
    break;
case 479:
#line 2513 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-4].u.type, yyvsp[-1].u.expr));
}
    break;
case 480:
#line 2517 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::sizeof_func(yyvsp[-1].u.type));
}
    break;
case 481:
#line 2521 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::new_op(yyvsp[0].u.type));
}
    break;
case 482:
#line 2525 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::new_op(yyvsp[-3].u.type, yyvsp[-1].u.expr));
}
    break;
case 483:
#line 2529 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_NOT, yyvsp[0].u.expr);
}
    break;
case 484:
#line 2533 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_NEGATE, yyvsp[0].u.expr);
}
    break;
case 485:
#line 2537 "cppBison.yxx"
{
  if (yyvsp[0].u.expr->_type == CPPExpression::T_integer) {
    yyval.u.expr = yyvsp[0].u.expr;
    yyval.u.expr->_u._integer = -yyval.u.expr->_u._integer;
  } else if (yyvsp[0].u.expr->_type == CPPExpression::T_real) {
    yyval.u.expr = yyvsp[0].u.expr;
    yyval.u.expr->_u._real = -yyval.u.expr->_u._real;
  } else {
    yyval.u.expr = new CPPExpression(UNARY_MINUS, yyvsp[0].u.expr);
  }
}
    break;
case 486:
#line 2549 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_REF, yyvsp[0].u.expr);
}
    break;
case 487:
#line 2553 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('*', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 488:
#line 2557 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('/', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 489:
#line 2561 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('%', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 490:
#line 2565 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('+', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 491:
#line 2569 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('-', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 492:
#line 2573 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('|', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 493:
#line 2577 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('&', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 494:
#line 2581 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(OROR, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 495:
#line 2585 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(ANDAND, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 496:
#line 2589 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(EQCOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 497:
#line 2593 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(NECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 498:
#line 2597 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(LECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 499:
#line 2601 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(GECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 500:
#line 2605 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('<', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 501:
#line 2609 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('>', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 502:
#line 2613 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(LSHIFT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 503:
#line 2617 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(RSHIFT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 504:
#line 2621 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('?', yyvsp[-4].u.expr, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 505:
#line 2625 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('[', yyvsp[-3].u.expr, yyvsp[-1].u.expr);
}
    break;
case 506:
#line 2629 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('f', yyvsp[-3].u.expr, yyvsp[-1].u.expr);
}
    break;
case 507:
#line 2633 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('f', yyvsp[-2].u.expr);
}
    break;
case 508:
#line 2637 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('.', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 509:
#line 2641 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(POINTSAT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 510:
#line 2645 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[-1].u.expr;
}
    break;
case 511:
#line 2652 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].u.integer);
}
    break;
case 512:
#line 2656 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(true);
}
    break;
case 513:
#line 2660 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(false);
}
    break;
case 514:
#line 2664 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].u.integer);
}
    break;
case 515:
#line 2668 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].u.real);
}
    break;
case 516:
#line 2672 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].str);
}
    break;
case 517:
#line 2679 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, true);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
  }
  yyval.u.type = type;
}
    break;
case 518:
#line 2687 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, true, current_lexer);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
  }
  yyval.u.type = type;
}
    break;
case 519:
#line 2695 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
}
    break;
case 520:
#line 2718 "cppBison.yxx"
{
  yyval.u.identifier = yyvsp[0].u.identifier;
}
    break;
case 521:
#line 2722 "cppBison.yxx"
{
  yyval.u.identifier = yyvsp[0].u.identifier;
}
    break;
case 522:
#line 2729 "cppBison.yxx"
{
  yyval.str = yyvsp[0].str;
}
    break;
case 523:
#line 2733 "cppBison.yxx"
{
  yyval.str = yyvsp[-1].str + yyvsp[0].str;
}
    break;
}

#line 705 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 2740 "cppBison.yxx"
