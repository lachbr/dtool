/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         cppyyparse
#define yylex           cppyylex
#define yyerror         cppyyerror
#define yydebug         cppyydebug
#define yynerrs         cppyynerrs


/* Copy the first part of user declarations.  */
#line 6 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:339  */


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppMakeProperty.h"
#include "cppMakeSeq.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedefType.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = NULL;
CPPScope *global_scope = NULL;
CPPPreprocessor *current_lexer = NULL;

static CPPStructType *current_struct = NULL;
static CPPEnumType *current_enum = NULL;
static int current_storage_class = 0;
static CPPType *current_type = NULL;
static CPPExpression *current_expr = NULL;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static vector<CPPScope *> last_scopes;
static vector<int> last_storage_classes;
static vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc.first_line, loc.first_column);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc.first_line, loc.first_column);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;

}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = (CPPExpression *)NULL;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = (CPPType *)NULL;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != NULL) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}


#line 261 "built/tmp/cppBison.yxx.c" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "cppBison.yxx.h".  */
#ifndef YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
# define YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int cppyydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    REAL = 258,
    INTEGER = 259,
    CHAR_TOK = 260,
    STRING = 261,
    SIMPLE_IDENTIFIER = 262,
    IDENTIFIER = 263,
    TYPENAME_IDENTIFIER = 264,
    SCOPING = 265,
    TYPEDEFNAME = 266,
    ELLIPSIS = 267,
    OROR = 268,
    ANDAND = 269,
    EQCOMPARE = 270,
    NECOMPARE = 271,
    LECOMPARE = 272,
    GECOMPARE = 273,
    LSHIFT = 274,
    RSHIFT = 275,
    POINTSAT_STAR = 276,
    DOT_STAR = 277,
    UNARY = 278,
    UNARY_NOT = 279,
    UNARY_NEGATE = 280,
    UNARY_MINUS = 281,
    UNARY_STAR = 282,
    UNARY_REF = 283,
    POINTSAT = 284,
    SCOPE = 285,
    PLUSPLUS = 286,
    MINUSMINUS = 287,
    TIMESEQUAL = 288,
    DIVIDEEQUAL = 289,
    MODEQUAL = 290,
    PLUSEQUAL = 291,
    MINUSEQUAL = 292,
    OREQUAL = 293,
    ANDEQUAL = 294,
    XOREQUAL = 295,
    LSHIFTEQUAL = 296,
    RSHIFTEQUAL = 297,
    KW_BEGIN_PUBLISH = 298,
    KW_BLOCKING = 299,
    KW_BOOL = 300,
    KW_CATCH = 301,
    KW_CHAR = 302,
    KW_CHAR16_T = 303,
    KW_CHAR32_T = 304,
    KW_CLASS = 305,
    KW_CONST = 306,
    KW_DELETE = 307,
    KW_DOUBLE = 308,
    KW_DYNAMIC_CAST = 309,
    KW_ELSE = 310,
    KW_END_PUBLISH = 311,
    KW_ENUM = 312,
    KW_EXTENSION = 313,
    KW_EXTERN = 314,
    KW_EXPLICIT = 315,
    KW_PUBLISHED = 316,
    KW_FALSE = 317,
    KW_FLOAT = 318,
    KW_FRIEND = 319,
    KW_FOR = 320,
    KW_GOTO = 321,
    KW_IF = 322,
    KW_INLINE = 323,
    KW_INT = 324,
    KW_LONG = 325,
    KW_LONGLONG = 326,
    KW_MAKE_PROPERTY = 327,
    KW_MAKE_SEQ = 328,
    KW_MUTABLE = 329,
    KW_NAMESPACE = 330,
    KW_NEW = 331,
    KW_NOEXCEPT = 332,
    KW_OPERATOR = 333,
    KW_PRIVATE = 334,
    KW_PROTECTED = 335,
    KW_PUBLIC = 336,
    KW_REGISTER = 337,
    KW_RETURN = 338,
    KW_SHORT = 339,
    KW_SIGNED = 340,
    KW_SIZEOF = 341,
    KW_STATIC = 342,
    KW_STATIC_CAST = 343,
    KW_STRUCT = 344,
    KW_TEMPLATE = 345,
    KW_THROW = 346,
    KW_TRUE = 347,
    KW_TRY = 348,
    KW_TYPEDEF = 349,
    KW_TYPENAME = 350,
    KW_UNION = 351,
    KW_UNSIGNED = 352,
    KW_USING = 353,
    KW_VIRTUAL = 354,
    KW_VOID = 355,
    KW_VOLATILE = 356,
    KW_WCHAR_T = 357,
    KW_WHILE = 358,
    START_CPP = 359,
    START_CONST_EXPR = 360,
    START_TYPE = 361
  };
#endif
/* Tokens.  */
#define REAL 258
#define INTEGER 259
#define CHAR_TOK 260
#define STRING 261
#define SIMPLE_IDENTIFIER 262
#define IDENTIFIER 263
#define TYPENAME_IDENTIFIER 264
#define SCOPING 265
#define TYPEDEFNAME 266
#define ELLIPSIS 267
#define OROR 268
#define ANDAND 269
#define EQCOMPARE 270
#define NECOMPARE 271
#define LECOMPARE 272
#define GECOMPARE 273
#define LSHIFT 274
#define RSHIFT 275
#define POINTSAT_STAR 276
#define DOT_STAR 277
#define UNARY 278
#define UNARY_NOT 279
#define UNARY_NEGATE 280
#define UNARY_MINUS 281
#define UNARY_STAR 282
#define UNARY_REF 283
#define POINTSAT 284
#define SCOPE 285
#define PLUSPLUS 286
#define MINUSMINUS 287
#define TIMESEQUAL 288
#define DIVIDEEQUAL 289
#define MODEQUAL 290
#define PLUSEQUAL 291
#define MINUSEQUAL 292
#define OREQUAL 293
#define ANDEQUAL 294
#define XOREQUAL 295
#define LSHIFTEQUAL 296
#define RSHIFTEQUAL 297
#define KW_BEGIN_PUBLISH 298
#define KW_BLOCKING 299
#define KW_BOOL 300
#define KW_CATCH 301
#define KW_CHAR 302
#define KW_CHAR16_T 303
#define KW_CHAR32_T 304
#define KW_CLASS 305
#define KW_CONST 306
#define KW_DELETE 307
#define KW_DOUBLE 308
#define KW_DYNAMIC_CAST 309
#define KW_ELSE 310
#define KW_END_PUBLISH 311
#define KW_ENUM 312
#define KW_EXTENSION 313
#define KW_EXTERN 314
#define KW_EXPLICIT 315
#define KW_PUBLISHED 316
#define KW_FALSE 317
#define KW_FLOAT 318
#define KW_FRIEND 319
#define KW_FOR 320
#define KW_GOTO 321
#define KW_IF 322
#define KW_INLINE 323
#define KW_INT 324
#define KW_LONG 325
#define KW_LONGLONG 326
#define KW_MAKE_PROPERTY 327
#define KW_MAKE_SEQ 328
#define KW_MUTABLE 329
#define KW_NAMESPACE 330
#define KW_NEW 331
#define KW_NOEXCEPT 332
#define KW_OPERATOR 333
#define KW_PRIVATE 334
#define KW_PROTECTED 335
#define KW_PUBLIC 336
#define KW_REGISTER 337
#define KW_RETURN 338
#define KW_SHORT 339
#define KW_SIGNED 340
#define KW_SIZEOF 341
#define KW_STATIC 342
#define KW_STATIC_CAST 343
#define KW_STRUCT 344
#define KW_TEMPLATE 345
#define KW_THROW 346
#define KW_TRUE 347
#define KW_TRY 348
#define KW_TYPEDEF 349
#define KW_TYPENAME 350
#define KW_UNION 351
#define KW_UNSIGNED 352
#define KW_USING 353
#define KW_VIRTUAL 354
#define KW_VOID 355
#define KW_VOLATILE 356
#define KW_WCHAR_T 357
#define KW_WHILE 358
#define START_CPP 359
#define START_CONST_EXPR 360
#define START_TYPE 361

/* Value type.  */

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int cppyyparse (void);

#endif /* !YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 532 "built/tmp/cppBison.yxx.c" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  73
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   3624

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  131
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  88
/* YYNRULES -- Number of rules.  */
#define YYNRULES  542
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  977

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   361

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   129,     2,     2,     2,   122,   115,     2,
     125,   127,   120,   118,   108,   119,   124,   121,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   110,   109,
     116,   111,   117,   112,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   126,     2,   130,   114,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   107,   113,   128,   123,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   386,   386,   387,   391,   398,   399,   400,   404,   405,
     409,   422,   421,   433,   434,   435,   436,   437,   438,   439,
     440,   453,   462,   466,   474,   478,   482,   493,   514,   523,
     522,   537,   541,   546,   550,   561,   565,   569,   573,   577,
     581,   585,   589,   593,   601,   600,   615,   624,   638,   649,
     664,   663,   678,   693,   702,   717,   716,   739,   738,   763,
     762,   793,   792,   808,   807,   825,   824,   856,   855,   881,
     894,   898,   902,   906,   910,   917,   921,   925,   929,   933,
     937,   941,   945,   949,   953,   957,   961,   965,   969,   973,
     977,   981,   985,   989,   993,   997,  1001,  1005,  1009,  1013,
    1017,  1021,  1025,  1029,  1033,  1037,  1041,  1045,  1049,  1053,
    1057,  1061,  1065,  1069,  1076,  1077,  1082,  1081,  1092,  1093,
    1097,  1103,  1112,  1116,  1120,  1124,  1128,  1134,  1144,  1148,
    1153,  1162,  1166,  1180,  1185,  1190,  1195,  1200,  1205,  1210,
    1215,  1221,  1220,  1242,  1246,  1251,  1255,  1260,  1268,  1273,
    1281,  1285,  1292,  1296,  1303,  1307,  1311,  1315,  1319,  1326,
    1327,  1328,  1332,  1335,  1336,  1337,  1341,  1346,  1354,  1360,
    1370,  1374,  1378,  1382,  1387,  1392,  1397,  1402,  1407,  1415,
    1419,  1423,  1427,  1432,  1437,  1442,  1447,  1452,  1457,  1463,
    1471,  1475,  1480,  1485,  1490,  1495,  1500,  1505,  1514,  1518,
    1523,  1527,  1531,  1535,  1539,  1555,  1574,  1578,  1583,  1587,
    1591,  1595,  1599,  1615,  1631,  1652,  1656,  1661,  1665,  1681,
    1700,  1706,  1717,  1716,  1741,  1740,  1770,  1771,  1775,  1776,
    1780,  1784,  1788,  1792,  1796,  1800,  1804,  1808,  1812,  1819,
    1827,  1831,  1835,  1839,  1846,  1850,  1857,  1858,  1864,  1872,
    1873,  1879,  1888,  1895,  1899,  1903,  1911,  1910,  1932,  1936,
    1942,  1951,  1952,  1953,  1957,  1961,  1965,  1969,  1973,  1977,
    1982,  1987,  1992,  1997,  2002,  2006,  2011,  2020,  2025,  2033,
    2037,  2042,  2046,  2051,  2059,  2069,  2069,  2079,  2080,  2084,
    2085,  2086,  2087,  2088,  2089,  2090,  2091,  2092,  2092,  2092,
    2093,  2093,  2093,  2093,  2094,  2094,  2094,  2094,  2094,  2095,
    2095,  2095,  2096,  2096,  2096,  2096,  2096,  2097,  2097,  2097,
    2097,  2097,  2098,  2098,  2099,  2099,  2099,  2100,  2100,  2101,
    2101,  2101,  2101,  2101,  2102,  2102,  2102,  2103,  2103,  2103,
    2103,  2103,  2103,  2104,  2104,  2104,  2104,  2105,  2105,  2105,
    2105,  2106,  2106,  2106,  2106,  2107,  2107,  2107,  2107,  2108,
    2108,  2108,  2108,  2108,  2109,  2109,  2109,  2109,  2109,  2110,
    2110,  2110,  2110,  2110,  2113,  2113,  2113,  2113,  2113,  2113,
    2113,  2113,  2113,  2113,  2113,  2114,  2114,  2114,  2114,  2114,
    2114,  2114,  2114,  2114,  2114,  2115,  2115,  2119,  2123,  2130,
    2134,  2141,  2145,  2152,  2156,  2160,  2164,  2168,  2172,  2176,
    2180,  2192,  2196,  2200,  2204,  2208,  2212,  2216,  2220,  2224,
    2228,  2232,  2236,  2240,  2244,  2248,  2252,  2256,  2260,  2264,
    2268,  2272,  2276,  2280,  2284,  2288,  2296,  2300,  2304,  2308,
    2312,  2319,  2325,  2331,  2337,  2343,  2349,  2355,  2362,  2369,
    2376,  2383,  2389,  2395,  2399,  2403,  2407,  2411,  2415,  2427,
    2431,  2435,  2439,  2443,  2447,  2451,  2455,  2459,  2463,  2467,
    2471,  2475,  2479,  2483,  2487,  2491,  2495,  2499,  2503,  2507,
    2511,  2515,  2519,  2523,  2527,  2531,  2538,  2542,  2546,  2550,
    2554,  2558,  2562,  2576,  2580,  2584,  2588,  2592,  2596,  2600,
    2604,  2608,  2612,  2624,  2628,  2632,  2636,  2640,  2644,  2648,
    2652,  2656,  2660,  2664,  2668,  2672,  2676,  2680,  2684,  2688,
    2692,  2696,  2700,  2704,  2708,  2712,  2716,  2720,  2724,  2731,
    2735,  2739,  2743,  2747,  2751,  2758,  2766,  2774,  2797,  2801,
    2808,  2812,  2818
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "REAL", "INTEGER", "CHAR_TOK", "STRING",
  "SIMPLE_IDENTIFIER", "IDENTIFIER", "TYPENAME_IDENTIFIER", "SCOPING",
  "TYPEDEFNAME", "ELLIPSIS", "OROR", "ANDAND", "EQCOMPARE", "NECOMPARE",
  "LECOMPARE", "GECOMPARE", "LSHIFT", "RSHIFT", "POINTSAT_STAR",
  "DOT_STAR", "UNARY", "UNARY_NOT", "UNARY_NEGATE", "UNARY_MINUS",
  "UNARY_STAR", "UNARY_REF", "POINTSAT", "SCOPE", "PLUSPLUS", "MINUSMINUS",
  "TIMESEQUAL", "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL", "MINUSEQUAL",
  "OREQUAL", "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL", "RSHIFTEQUAL",
  "KW_BEGIN_PUBLISH", "KW_BLOCKING", "KW_BOOL", "KW_CATCH", "KW_CHAR",
  "KW_CHAR16_T", "KW_CHAR32_T", "KW_CLASS", "KW_CONST", "KW_DELETE",
  "KW_DOUBLE", "KW_DYNAMIC_CAST", "KW_ELSE", "KW_END_PUBLISH", "KW_ENUM",
  "KW_EXTENSION", "KW_EXTERN", "KW_EXPLICIT", "KW_PUBLISHED", "KW_FALSE",
  "KW_FLOAT", "KW_FRIEND", "KW_FOR", "KW_GOTO", "KW_IF", "KW_INLINE",
  "KW_INT", "KW_LONG", "KW_LONGLONG", "KW_MAKE_PROPERTY", "KW_MAKE_SEQ",
  "KW_MUTABLE", "KW_NAMESPACE", "KW_NEW", "KW_NOEXCEPT", "KW_OPERATOR",
  "KW_PRIVATE", "KW_PROTECTED", "KW_PUBLIC", "KW_REGISTER", "KW_RETURN",
  "KW_SHORT", "KW_SIGNED", "KW_SIZEOF", "KW_STATIC", "KW_STATIC_CAST",
  "KW_STRUCT", "KW_TEMPLATE", "KW_THROW", "KW_TRUE", "KW_TRY",
  "KW_TYPEDEF", "KW_TYPENAME", "KW_UNION", "KW_UNSIGNED", "KW_USING",
  "KW_VIRTUAL", "KW_VOID", "KW_VOLATILE", "KW_WCHAR_T", "KW_WHILE",
  "START_CPP", "START_CONST_EXPR", "START_TYPE", "'{'", "','", "';'",
  "':'", "'='", "'?'", "'|'", "'^'", "'&'", "'<'", "'>'", "'+'", "'-'",
  "'*'", "'/'", "'%'", "'~'", "'.'", "'('", "'['", "')'", "'}'", "'!'",
  "']'", "$accept", "grammar", "cpp", "constructor_inits",
  "constructor_init", "extern_c", "$@1", "declaration",
  "friend_declaration", "$@2", "storage_class", "type_like_declaration",
  "$@3", "multiple_instance_identifiers", "typedef_declaration", "$@4",
  "typedef_instance_identifiers", "function_prototype", "$@5", "$@6",
  "$@7", "$@8", "$@9", "$@10", "$@11", "function_post",
  "function_operator", "more_template_declaration", "template_declaration",
  "$@12", "template_formal_parameters",
  "template_nonempty_formal_parameters", "template_formal_parameter",
  "template_formal_parameter_type", "instance_identifier", "$@13",
  "formal_parameter_list", "formal_parameters",
  "template_parameter_maybe_initialize", "maybe_initialize",
  "maybe_initialize_or_function_body", "structure_init",
  "structure_init_body", "formal_parameter",
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier",
  "empty_instance_identifier", "type", "type_decl", "predefined_type",
  "full_type", "anonymous_struct", "$@14", "named_struct", "$@15",
  "maybe_class_derivation", "class_derivation", "base_specification",
  "enum", "enum_decl", "enum_element_type", "enum_body_trailing_comma",
  "enum_body", "enum_keyword", "struct_keyword", "namespace_declaration",
  "$@16", "using_declaration", "simple_type", "simple_int_type",
  "simple_float_type", "simple_void_type", "code", "$@17", "code_block",
  "element", "optional_const_expr", "optional_const_expr_comma",
  "const_expr_comma", "no_angle_bracket_const_expr", "const_expr",
  "const_operand", "formal_const_expr", "formal_const_operand",
  "class_derivation_name", "name", "string", "empty", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   123,    44,    59,
      58,    61,    63,   124,    94,    38,    60,    62,    43,    45,
      42,    47,    37,   126,    46,    40,    91,    41,   125,    33,
      93
};
# endif

#define YYPACT_NINF -603

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-603)))

#define YYTABLE_NINF -242

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
     225,  -603,  2053,  3183,    23,  3073,  -603,  -603,  -603,  -603,
    -603,  -603,   -97,   -74,   -61,   -33,   -22,   -20,    -2,  -603,
       7,    14,    48,  3295,    56,    63,    66,    78,  -603,    91,
      94,  2053,  2053,  2053,  2053,   908,  2053,  2621,  -603,   219,
    -603,  -603,  -603,  -603,  -603,  -603,  3351,  -603,  -603,  -603,
    -603,  1574,  -603,  1284,  1284,  -603,   326,  -603,  1284,  -603,
    -603,   124,  -603,  -603,  -603,  -603,   123,    60,     1,  -603,
    -603,  -603,  -603,  -603,  -603,  -603,   122,  -603,   125,   127,
      64,   160,   162,   167,  -603,  -603,    27,  -603,  -603,  -603,
    -603,  2390,  -603,  -603,  -603,  -603,  -603,  2053,  2053,  2053,
    2053,  2053,  2053,  3183,  2053,  2053,  2053,  -603,   326,   149,
     326,   326,  -603,  2053,  2053,  3183,  3183,  2053,  2053,   164,
     164,   164,   164,   -97,   -74,   -61,   -33,   -22,   -20,     7,
      14,  2024,  2317,  3054,  3228,    94,   153,   -83,  2621,   164,
    2053,  2053,  2053,  2053,  2053,  2053,  2053,  2053,  2053,  2053,
    2053,  2053,  2053,  2053,  2053,  2053,  2053,  2053,  2053,  2053,
    2053,  1513,  2053,  -603,   124,  -603,  -603,  1664,  -603,  1284,
    -603,  -603,  -603,  -603,  -603,  -603,   165,   124,   124,   124,
     124,   124,   170,  -603,  -603,  3117,   181,  -603,   -14,  -603,
    3523,   286,   326,  -603,   191,  -603,  -603,  -603,   192,  2457,
    -603,   326,  -603,   198,   207,  -603,  -603,  -603,   310,  -603,
    -603,  -603,  3239,  -603,  -603,   326,  -603,  -603,  -603,   326,
     312,   228,  -603,  -603,  -603,    60,     1,  -603,   214,   240,
    -603,   224,   226,   242,   260,   269,   249,   273,   275,   282,
    -603,  2053,  -603,  -603,   291,   298,   300,   313,   302,   304,
    2053,  2053,  -603,  1330,  2115,   812,   812,   378,   378,   193,
     193,  -603,  2547,  2800,  2815,  2942,   378,   378,   139,   139,
     164,   164,   164,  -603,  -603,   -37,  2145,   170,  -603,   124,
     170,   170,   170,   170,   235,  2053,   326,   315,  -603,  -603,
    -603,  -603,  3117,  -603,   322,  -603,   336,   338,  3388,  -603,
    3127,   312,  -603,  -603,  -603,    24,   219,  3351,    44,  -603,
    -603,   323,  -603,  -603,   326,  1603,  -603,  -603,   232,    80,
     -14,  -603,  -603,  -603,  -603,  -603,  -603,   327,  -603,  -603,
    -603,   320,  -603,  -603,  -603,   328,  -603,  -603,   164,  2621,
    2053,  -603,  -603,   170,   330,   321,  2621,  -603,    37,  -603,
     349,  3415,     2,   350,   352,  -603,   450,   326,  -603,  -603,
    -603,  -603,   326,  2308,   326,   344,   355,  -603,   403,  -603,
    -603,  -603,   232,  1313,   345,   232,  1313,    44,  -603,  -603,
     346,    44,    44,    44,    44,   248,  -603,  3442,  -603,   339,
    -603,   271,  -603,   353,  1693,  2568,   360,   232,   232,  2307,
     232,   232,   232,  -603,   365,  -603,  3117,  2053,  -603,  2053,
    2621,  1313,  -603,  -603,  2053,  -603,   132,   530,   767,   335,
    -603,  -603,     2,   -30,   356,  3469,   372,   403,   376,   405,
    3127,  -603,  -603,   385,   403,   403,   403,   403,   403,   -70,
    -603,  -603,   365,  -603,  -603,  -603,   403,  -603,  3351,   390,
    -603,  3295,   382,   393,  -603,  2053,  2053,  2053,   908,  2053,
     386,     9,  -603,   403,  2735,  -603,   219,  -603,   232,   176,
     392,   259,    44,   391,   391,   391,   391,  -603,  2053,  -603,
    1313,  -603,  1184,  -603,  -603,   326,  2053,  1693,   394,   412,
    2621,  -603,  -603,   232,   266,   266,  -603,  -603,  -603,  -603,
    -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,
    -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,
    -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,
    -603,  -603,   397,   396,  -603,  -603,   266,   266,   218,   142,
    1603,  -603,  2053,   413,  -603,  -603,   349,   -29,   -23,   402,
    2587,   326,   546,   326,  -603,  -603,   546,  -603,   546,  -603,
     546,   546,   546,  3496,  -603,   522,   422,   326,  -603,  3183,
     -70,  3183,  2457,  -603,  -603,  -603,  -603,   403,   406,   406,
     406,   406,   278,   699,  2053,  -603,  -603,   426,  -603,    -5,
     403,  3183,   410,  3183,  3183,   164,   164,   164,   409,    -8,
     164,   486,  -603,  1413,    -5,  2053,  2053,  2053,  2053,  2053,
    2053,  2053,  2053,  2053,  2053,  2053,  2053,  2053,  2053,  2053,
    2053,  2053,  2053,  2053,  2053,  2053,  1783,  2053,   229,   536,
     418,   486,  -603,   391,  1313,   414,   419,  -603,  -603,  -603,
    -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,
    -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,
    -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,
    -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,
    -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,
    -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,
    -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,
    -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,
    -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,
    -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,
    -603,  -603,  -603,  -603,  -603,  -603,   417,  -603,   429,   425,
    -603,  1873,   266,  -603,  -603,  -603,  -603,  2568,  1313,   427,
     232,  -603,  -603,   486,  -603,  -603,  -603,  -603,  -603,  -603,
    -603,  -603,  -603,  -603,   433,  -603,   437,  -603,  -603,  -603,
     406,   440,   451,   441,   452,   699,   699,   699,   699,   908,
     699,  2769,  -603,   442,   232,  2053,  -603,    -5,   453,  2053,
     446,   457,  2053,  -603,  -603,     3,  -603,  -603,  -603,  -603,
    1330,  2115,   812,   812,   378,   378,   193,   193,  -603,  2604,
    2800,  2815,  2942,   378,   378,   139,   139,   164,   164,   164,
    -603,  -603,    35,  2170,   454,  -603,     3,  1313,   448,  -603,
     486,  1056,  -603,  -603,  -603,  1693,  2621,   455,  -603,  -603,
       3,   469,   472,  1313,  3183,  3183,  3183,   239,   239,   239,
     239,   458,    58,   239,   699,   699,   699,   699,   699,   699,
     699,   699,   699,   699,   699,   699,   699,   699,   699,   699,
     699,   699,   699,  1963,  2053,  -603,  -603,  2621,  -603,   462,
     465,  -603,   468,   164,  -603,   479,  2053,  -603,  -603,  -603,
    1313,   484,   486,     3,  -603,   485,   486,  -603,  -603,   497,
     495,   500,   506,   699,  -603,  2785,  2927,   532,   532,   496,
     496,   569,   569,  -603,  2752,  2957,  2972,  2987,   200,   200,
     239,   239,   239,  -603,  -603,   116,  2189,  2053,  -603,  2053,
      30,  2621,  1313,   504,   486,     3,  -603,     3,   486,   515,
    -603,   518,   239,   699,  -603,  -603,   118,   146,  -603,   528,
     554,   486,     3,     3,  2053,  2053,  2769,  -603,  -603,  -603,
     486,     3,   154,   168,     3,  -603,  -603
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   542,     0,     0,     0,   542,     5,   490,   486,   489,
     540,   492,     0,     0,     0,     0,     0,     0,     0,   488,
       0,     0,     0,     0,     0,     0,     0,     0,   487,     0,
       0,     0,     0,     0,     0,     0,     0,     3,   436,   491,
     199,   264,   265,   267,   268,   253,     0,   281,   252,   279,
     274,   270,   271,   269,   273,   254,     0,   255,   272,   284,
     266,   542,     4,   201,   202,   203,     0,   243,     0,   198,
     261,   262,   263,     1,    20,    21,     0,    29,     0,     0,
       0,     0,     0,     0,   116,   542,     0,     6,    15,     7,
      18,     0,    13,    14,    16,    17,    31,   542,   542,   542,
     542,   542,   542,     0,   542,   542,   542,   216,     0,   454,
       0,     0,   215,   542,   542,     0,     0,   542,   542,   460,
     458,   459,   457,   199,   264,   265,   267,   268,   281,   279,
     274,   270,   269,   273,   272,   266,     0,     0,   401,   456,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   541,   542,   283,   280,   270,   276,   270,
     275,   278,   538,   539,   200,   277,     0,   542,   542,   542,
     542,   542,   220,   190,   542,     0,   241,   222,   204,    22,
     542,     0,     0,   542,     0,    25,    24,    23,     0,     0,
      19,     0,   259,    69,   207,    42,    32,    43,    33,    38,
      36,    40,     0,    41,    35,     0,    37,    39,    11,     0,
       0,    44,   209,   210,   211,   243,     0,   206,     0,   400,
     399,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     217,   542,   219,   218,     0,     0,     0,     0,     0,     0,
       0,     0,   485,   469,   470,   471,   472,   473,   474,   477,
     478,   484,     0,   466,   467,   468,   475,   476,   464,   465,
     461,   462,   463,   483,   482,     0,     0,   221,   282,   542,
     194,   191,   193,   192,     0,   542,   249,     0,   246,   245,
     242,   244,     0,   542,   542,    30,     0,     0,   542,   256,
     542,     0,    50,   260,    55,    57,    34,     0,   542,   208,
     542,     0,   285,   154,     0,     0,    47,    46,     0,   214,
     212,   440,   446,   442,   444,   445,   452,     0,   451,   441,
     448,     0,   447,   450,   453,     0,   449,   443,   437,   402,
       0,   481,   480,   195,     0,     0,   398,   397,   250,   239,
     205,   542,     0,     0,   227,   226,     0,     0,   258,   542,
     129,   130,     0,     0,     0,     0,   119,   120,   542,   128,
     118,    52,     0,   542,     0,     0,   542,   542,   171,   172,
       0,   542,   542,   542,   542,     0,   170,   542,    59,     0,
     542,     0,     8,     0,   542,     0,     0,     0,     0,     0,
       0,     0,     0,    45,   542,   131,     0,     0,   455,     0,
     479,   542,   196,   247,     0,   223,     0,     0,     0,     0,
     228,   542,     0,     0,     0,   542,   122,   542,   124,   542,
       0,   180,   181,     0,   542,   542,   542,   542,   542,   542,
     179,    51,   542,   533,   529,   532,   542,   144,     0,     0,
     531,     0,     0,     0,   530,     0,     0,     0,     0,     0,
       0,   145,   148,   542,   169,   493,   534,   143,     0,     0,
       0,     0,   542,   176,   173,   175,   174,    65,   542,    12,
     542,   155,   286,   287,   285,     0,   542,   542,     0,   160,
     162,   159,   157,     0,   136,   133,    85,    86,    87,    88,
      89,    90,    93,    94,   109,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   113,   112,    96,
      95,    82,    84,    83,    91,    92,    80,    81,    77,    78,
      79,    76,     0,     0,    75,   132,   135,   134,     0,     0,
       0,   141,   542,     0,    48,   152,   213,     0,     0,     0,
     251,     0,     0,     0,   232,   535,     0,   231,     0,   230,
       0,     0,     0,   542,   229,     0,     0,     0,   257,     0,
     542,     0,     0,   114,   117,   115,   121,   542,   185,   182,
     184,   183,     0,     0,   542,   126,   150,     0,    53,   542,
     542,     0,   498,     0,     0,   503,   502,   501,     0,     0,
     500,   542,   147,     0,   542,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   542,    67,   177,   542,     0,     0,   289,   290,   292,
     291,   296,   293,   294,   295,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   352,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   542,   390,   391,   392,   383,   395,   379,   380,
     378,   385,   386,   374,   375,   376,   377,   384,   382,   389,
     387,   393,   388,   381,   394,   288,     0,     9,     0,     0,
     158,   161,   137,   111,   110,   140,   139,   153,   542,     0,
       0,   439,   438,   542,   248,   537,   238,   536,   237,   236,
     235,   234,   233,   225,     0,    26,     0,   123,   127,   125,
     186,   189,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   151,   403,     0,     0,     0,   167,   542,     0,   542,
       0,     0,     0,   528,    71,    56,    70,   146,   149,   166,
     512,   513,   514,   515,   516,   517,   520,   521,   527,     0,
     509,   510,   511,   518,   519,   507,   508,   504,   505,   506,
     526,   525,     0,     0,     0,    61,    58,   542,     0,   178,
     542,     0,   156,    10,   163,   542,   164,     0,   138,    49,
     197,     0,     0,   542,     0,     0,     0,   412,   410,   411,
     409,     0,     0,   408,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   187,    54,   153,   168,     0,
       0,   497,     0,   494,    72,     0,     0,   524,   523,    63,
     542,     0,   542,    60,   396,     0,   542,    27,    28,     0,
       0,     0,     0,     0,   435,   421,   422,   423,   424,   425,
     426,   427,   428,   434,     0,   418,   419,   420,   416,   417,
     413,   414,   415,   433,   432,     0,     0,     0,   499,     0,
       0,   522,   542,     0,   542,    66,   165,   142,   542,     0,
     407,     0,   404,     0,   431,   430,     0,     0,    73,     0,
       0,   542,    68,   188,     0,     0,   429,   496,   495,    74,
     542,    62,     0,     0,    64,   406,   405
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -603,  -603,  -173,  -603,   174,  -603,  -603,   507,  -603,  -603,
     -80,   256,  -603,   -64,  -603,  -603,  -108,   499,  -603,  -603,
    -603,  -603,  -603,  -603,  -603,  -602,  -603,  -603,   270,  -603,
    -603,  -603,   279,   348,  -335,  -603,  -352,  -603,   131,  -420,
    -268,  -485,  -603,   105,  -307,  -311,  -132,   -40,   514,   263,
      15,   -90,  -603,   -88,  -603,  -603,  -603,   293,   -84,  -603,
    -284,  -603,  -603,    19,    76,  -603,  -603,  -603,    38,   102,
    -603,  -603,   236,  -603,    -3,  -603,  -435,   -87,   -19,    13,
      55,  -141,  -603,  -603,  -305,   491,  -153,    -1
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     4,     5,   391,   392,    88,   310,    89,    90,   190,
      91,    92,   318,   403,   200,   372,   441,   220,   373,   376,
     480,   900,   942,   634,   837,   805,   535,   574,    93,   198,
     365,   366,   367,   368,   404,   758,   460,   461,   585,   543,
     316,   488,   489,   462,   385,   439,   182,    61,   221,   109,
      62,    63,   293,    64,   294,   353,   354,   420,    65,    66,
     290,   286,   287,    67,    68,    94,   359,    95,    69,    70,
      71,    72,   389,   390,   482,   745,   345,   228,   229,   791,
     138,    38,   464,   465,   554,   405,    39,   230
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
       6,   222,   749,   223,    96,   199,   164,   224,   350,   172,
     173,   231,   232,   233,   234,   235,   137,   237,   238,   239,
     298,   602,   587,    73,   470,   251,   244,   245,    97,   836,
     248,   249,   277,   371,   374,   172,   173,   442,   172,   173,
     469,   583,   110,   635,   252,   280,   281,   282,   283,   284,
     136,    98,   378,   379,   380,   306,   584,    37,   381,   549,
     183,   112,   494,   495,    99,   536,   537,   538,   172,   173,
     471,   251,   172,   173,   473,   474,   475,   476,   565,   251,
     894,   416,   417,   418,    96,   251,   119,   120,   121,   122,
     341,   139,   100,  -224,   895,   382,  -224,   566,   761,   111,
     251,   419,   201,   101,   762,   102,   795,   759,   187,   222,
     225,   223,   557,   559,   103,   224,   570,   603,   236,   803,
     351,   584,   546,   578,   579,   580,   581,   582,   636,   227,
     246,   247,   104,   628,   176,   589,   544,   387,   177,   105,
     172,   173,   275,   251,   375,   413,   756,   343,   414,   793,
     172,   173,   604,   168,   331,   170,   171,   958,   752,   383,
     175,   850,   897,   183,   384,   633,   251,   226,   148,   796,
     185,   193,   308,   106,   588,   178,   183,   183,   183,   183,
     183,   113,    45,   288,   809,   914,   425,  -241,   114,    96,
     406,   115,     6,   148,   116,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   117,   276,   225,   118,
     466,    55,   148,   466,   251,   163,   251,   551,    57,   872,
     184,   552,   189,   168,   170,   171,   175,   227,   903,   179,
     172,   173,   396,   954,   180,   967,   397,   766,   563,   181,
     191,   768,   192,   769,   251,   770,   771,   772,   466,   157,
     158,   159,   251,   160,   161,   162,   780,   377,   872,   168,
     195,   168,   196,   968,   241,   226,   251,   197,   183,   797,
     250,   975,   838,   398,   347,   279,   629,   291,   160,   161,
     162,   292,     6,   355,   296,   976,   285,    96,   299,   370,
     945,   541,   542,   630,   947,   338,   339,   386,   300,     6,
     399,   155,   156,   157,   158,   159,    10,   160,   161,   162,
     879,   880,   881,   304,   882,   883,   884,   466,   629,     1,
       2,     3,   305,   463,   172,   173,   463,   317,   369,   629,
     346,   321,   962,   541,   542,   755,   963,   400,   251,   572,
      96,   322,   401,   323,   541,   542,   834,   402,     6,   971,
     905,   285,   344,   882,   883,   884,   327,   440,   974,   324,
     395,   463,   467,   477,   478,   467,   386,   888,   484,   485,
     386,   386,   386,   386,   632,   478,    96,   325,   547,   483,
     548,   541,   542,   491,   291,   410,   326,   146,   147,   748,
     328,   369,   329,   545,   584,   781,   847,   148,   590,   330,
     467,   431,   432,   433,   560,   561,   562,   434,   332,   312,
       6,   313,   314,   315,    96,   333,   440,   334,    96,   336,
     335,   337,   352,   440,   440,   440,   440,   440,   586,   599,
     463,   545,   792,   349,   356,   440,   357,   408,   388,   490,
     466,   412,   407,   409,   435,   411,  -240,   421,   423,   442,
     422,   429,   440,   430,   567,   468,   472,   481,   369,   550,
     110,   386,   312,   598,   313,   539,   540,   347,   486,   467,
     493,   466,   222,   569,   223,   901,   491,   571,   224,   112,
     541,   542,   553,   553,   553,    84,   155,   156,   157,   158,
     159,   909,   160,   161,   162,   577,   591,   593,   291,   594,
     595,   596,   597,   601,   600,   870,   871,   478,   436,   631,
     751,   760,   750,   437,   753,   872,   754,   111,   438,   763,
     774,   775,   584,   346,   794,   799,   802,   804,   172,   173,
     756,   347,   490,   835,   839,   842,   840,   174,   943,   868,
     869,   870,   871,   844,   172,   173,   843,   848,   186,   188,
     851,   872,    96,   463,   852,   853,   855,   854,   856,   586,
     889,   194,   885,   891,   892,   902,   440,   202,   907,   899,
      45,   908,   906,   347,   777,   913,   779,   937,   545,   440,
     960,   225,   938,   939,   463,   757,    45,   346,   872,   240,
     806,   242,   243,   545,   940,   466,   798,   832,   800,   801,
     227,   944,   949,   946,   877,   878,   879,   880,   881,    55,
     882,   883,   884,   951,   948,   551,    57,   950,   553,   556,
     806,   961,   553,   467,   553,    55,   553,   553,   553,   346,
     964,   551,    57,   965,   792,   792,   792,   792,   226,   792,
     877,   878,   879,   880,   881,   969,   882,   883,   884,   747,
     810,   811,   812,   813,   814,   815,   816,   817,   818,   819,
     820,   821,   822,   823,   824,   825,   826,   827,   828,   829,
     830,   970,   833,   297,   466,   573,   886,   877,   878,   879,
     880,   881,   303,   882,   883,   884,   849,   295,   301,   575,
     466,   778,     7,     8,     9,    10,   309,    11,   808,   576,
     311,   427,   890,   302,   592,   564,   319,   320,   463,   841,
     746,   483,     0,   792,   792,   792,   792,   792,   792,   792,
     792,   792,   792,   792,   792,   792,   792,   792,   792,   792,
     792,   792,     0,     0,     0,     0,     0,   466,     0,     0,
       0,     0,     0,   782,     0,     0,     0,   467,     0,     0,
       0,    19,   806,     0,     0,     0,     0,     0,     0,     0,
     862,     0,   792,     0,     0,   172,   173,   348,     0,     0,
       0,     0,     0,     0,     0,   783,     0,   784,     0,   466,
       0,    28,     0,     0,     0,     0,   545,   463,   857,   858,
     859,   860,     0,   863,   861,   393,   846,     0,     0,     0,
       0,     0,   792,   463,   785,     0,     0,    45,   786,   787,
       0,     0,   788,     0,   789,     0,     0,     0,   790,   144,
     145,   146,   147,     0,     0,     0,   467,     0,     0,   806,
       0,   148,     0,     0,   491,     0,     0,     0,   424,     0,
     887,     0,   467,   426,     0,   428,    55,   893,     0,     0,
     463,     0,   551,    57,   935,     0,   558,     0,     0,   910,
     911,   912,     0,     0,     0,     0,     0,   915,   916,   917,
     918,   919,   920,   921,   922,   923,   924,   925,   926,   927,
     928,   929,   930,   931,   932,   933,     0,     0,     0,   467,
     490,   806,   463,     0,     0,   806,     0,   555,   555,   555,
       0,     7,     8,     9,    10,     0,    11,   123,   956,     0,
     957,     0,     0,     0,     0,     0,   952,     0,   153,   154,
     155,   156,   157,   158,   159,     0,   160,   161,   162,   936,
       0,   467,     0,   806,     0,   972,   973,   806,     0,     0,
       0,   941,     0,   124,     0,   125,   126,   127,    45,    46,
     806,   128,    18,     0,     0,    48,   966,     0,     0,   806,
      19,   129,     0,     0,     0,     0,   393,   130,   131,    52,
       0,     0,     0,     0,    23,     0,     0,     0,     0,     0,
       0,     0,   132,   133,    26,     0,    27,    55,     0,     0,
      28,     0,     0,    56,    57,   134,     0,     0,    59,     0,
     135,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    31,     0,     0,     0,    32,    33,     0,
     393,    34,     0,    35,     0,     0,     0,    36,     0,     0,
       0,     0,   765,   555,   767,     0,     0,   555,     0,   555,
       0,   555,   555,   555,     0,     0,     0,     0,   776,   637,
     638,   639,   640,   641,   642,   643,   644,     0,   645,   646,
     647,   648,   649,   650,   651,   652,   653,   654,   655,     0,
       0,     0,     0,     0,     0,   656,   657,   658,   659,   660,
     661,   662,   663,   664,   665,   666,   667,   668,   669,     0,
       0,   670,   671,   672,   673,   674,   675,   676,   677,   678,
     679,   680,     0,   681,     0,   682,   683,   684,   685,   686,
     687,   688,   689,   690,   691,   692,   693,     0,     0,     0,
     694,   695,   696,     0,   697,   698,   699,   700,   701,   702,
     703,   704,   705,   706,   707,   708,     0,   709,   710,   711,
     712,   713,   714,   715,   716,   717,   718,   719,   720,   721,
       0,     0,     0,   722,   723,   724,   725,   726,   727,   728,
     729,   730,   731,   732,   733,   734,   735,   736,   737,   738,
     739,   740,   741,   742,   904,   743,   744,   637,   638,   639,
     640,   641,   642,   643,   644,     0,   645,   646,   647,   648,
     649,   650,   651,   652,   653,   654,   655,     0,     0,     0,
       0,     0,     0,   656,   657,   658,   659,   660,   661,   662,
     663,   664,   665,   666,   667,   668,   669,     0,     0,   670,
     671,   672,   673,   674,   675,   676,   677,   678,   679,   680,
       0,   681,     0,   682,   683,   684,   685,   686,   687,   688,
     689,   690,   691,   692,   693,     0,     0,     0,   694,   695,
     696,     0,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,     0,   709,   710,   711,   712,   713,
     714,   715,   716,   717,   718,   719,   720,   721,     0,     0,
       0,   722,   723,   724,   725,   726,   727,   728,   729,   730,
     731,   732,   733,   734,   735,   736,   737,   738,   739,   740,
     741,   742,     0,   743,   744,     0,   443,   444,   445,    10,
       0,   446,    40,     0,     0,   447,     0,     0,     0,    41,
       0,    42,    43,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   141,   142,   143,   144,   145,   146,
     147,     0,     0,    50,   169,    52,     0,     0,    41,   148,
      42,    43,    44,    45,   448,     0,    47,   449,    53,    54,
      48,     0,     0,     0,     0,   450,    49,     0,     0,     0,
       0,    58,    50,    51,    52,     0,    60,     0,     0,   451,
       0,     0,     0,     0,     0,     0,     0,    53,    54,   452,
       0,   453,    55,     0,     0,   454,     0,     0,    56,    57,
      58,     0,     0,    59,     0,    60,   443,   444,   445,    10,
       0,   446,    40,     0,     0,   807,     0,     0,   455,     0,
       0,   959,   456,     0,     0,     0,   457,     0,   458,     0,
       0,     0,   459,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,   161,   162,     0,    41,     0,
      42,    43,    44,    45,   448,     0,    47,   449,     0,     0,
      48,     0,     0,     0,     0,   450,    49,     0,     0,     0,
       0,     0,    50,    51,    52,     0,     0,     0,     0,   451,
       0,     0,     0,     0,     0,     0,     0,    53,    54,   452,
       0,   453,    55,     0,     0,   454,     0,     0,    56,    57,
      58,     0,     0,    59,     0,    60,     7,     8,     9,    10,
       0,    11,    12,     0,     0,     0,     0,     0,   455,     0,
       0,     0,   456,     0,     0,     0,   457,     0,   458,     0,
       0,     0,   459,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    13,     0,
      14,    15,    16,     0,     0,     0,    17,    18,     0,     0,
       0,     0,     0,     0,     0,    19,    20,     0,     0,     0,
       0,     0,    21,    22,     0,     0,     0,     0,     0,    23,
       0,     0,     0,     0,     0,     0,     0,    24,    25,    26,
       0,    27,     0,     0,     0,    28,     7,     8,     9,    10,
      29,    11,    12,     0,     0,    30,     0,     0,     0,    41,
       0,    42,    43,    44,     0,     0,     0,   165,    31,     0,
       0,     0,    32,    33,     0,     0,    34,   166,    35,     0,
     274,     0,    36,    50,   167,    52,     0,     0,    13,     0,
      14,    15,    16,     0,     0,     0,    17,    18,    53,    54,
       0,     0,     0,     0,     0,    19,    20,     0,     0,     0,
       0,    58,    21,    22,     0,     0,    60,     0,     0,    23,
       0,     0,     0,     0,     0,     0,     0,    24,    25,    26,
       0,    27,     0,     0,     0,    28,     7,     8,     9,    10,
      29,    11,    12,     0,     0,    30,     0,     0,     0,    41,
     394,    42,    43,    44,     0,     0,     0,     0,    31,     0,
       0,     0,    32,    33,     0,     0,    34,   278,    35,     0,
       0,     0,    36,    50,   169,    52,     0,     0,    13,     0,
      14,    15,    16,     0,     0,     0,    17,    18,    53,    54,
       0,     0,     0,     0,     0,    19,    20,     0,     0,     0,
       0,    58,    21,    22,     0,     0,    60,     0,     0,    23,
       0,     0,     0,     0,     0,     0,     0,    24,    25,    26,
       0,    27,     0,     0,     0,    28,     7,     8,     9,    10,
      29,    11,    12,     0,     0,    30,     0,     0,     0,     0,
     487,     0,     0,     0,     0,     0,     0,     0,    31,     0,
       0,     0,    32,    33,     0,     0,    34,     0,    35,     0,
       0,     0,    36,     0,     0,     0,     0,     0,    13,     0,
      14,    15,    16,     0,     0,     0,    17,    18,     0,     0,
       0,     0,     0,     0,     0,    19,    20,     0,     0,     0,
       0,     0,    21,    22,     0,     0,     0,     0,     0,    23,
       0,     0,     0,     0,     0,     0,     0,    24,    25,    26,
       0,    27,     0,     0,     0,    28,     7,     8,     9,    10,
      29,    11,    12,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    31,     0,
       0,     0,    32,    33,     0,     0,    34,     0,    35,     0,
     831,     0,    36,     0,     0,     0,     0,     0,    13,     0,
      14,    15,    16,     0,     0,     0,    17,    18,     0,     0,
       0,     0,     0,     0,     0,    19,    20,     0,     0,     0,
       0,     0,    21,    22,     0,     0,     0,     0,     0,    23,
       0,     0,     0,     0,     0,     0,     0,    24,    25,    26,
       0,    27,     0,     0,     0,    28,     7,     8,     9,    10,
      29,    11,    12,     0,     0,    30,     0,     0,     0,     0,
     845,     0,     0,     0,     0,     0,     0,     0,    31,     0,
       0,     0,    32,    33,     0,     0,    34,     0,    35,     0,
       0,     0,    36,     0,     0,     0,     0,     0,    13,     0,
      14,    15,    16,     0,     0,     0,    17,    18,     0,     0,
       0,     0,     0,     0,     0,    19,    20,     0,     0,     0,
       0,     0,    21,    22,     0,     0,     0,     0,     0,    23,
       0,     0,     0,     0,     0,     0,     0,    24,    25,    26,
       0,    27,     0,     0,     0,    28,     7,     8,     9,    10,
      29,    11,    12,     0,     0,    30,     0,     0,     0,    41,
       0,    42,    43,    44,     0,     0,     0,   165,    31,     0,
       0,     0,    32,    33,     0,     0,    34,   166,    35,     0,
     934,     0,    36,    50,   167,    52,     0,     0,    13,     0,
      14,    15,    16,     0,     0,     0,    17,    18,    53,    54,
       0,     0,     0,     0,     0,    19,    20,     0,     0,     0,
       0,    58,    21,    22,     0,     0,    60,     0,     0,    23,
     142,   143,   144,   145,   146,   147,     0,    24,    25,    26,
       0,    27,     0,     0,   148,    28,     0,     0,     0,   106,
      29,     0,     0,     0,     0,    30,     0,     0,   140,   141,
     142,   143,   144,   145,   146,   147,     0,     0,    31,     0,
       0,     0,    32,    33,   148,     0,    34,     0,    35,     0,
       0,     0,    36,   140,   141,   142,   143,   144,   145,   146,
     147,     0,     0,     0,     0,     0,     0,     0,     0,   148,
       0,     0,   140,   141,   142,   143,   144,   145,   146,   147,
       0,     0,     0,     0,     0,     0,     0,     0,   148,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
     161,   162,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
     161,   162,     0,     0,     0,   342,     0,     0,     0,     0,
       0,     0,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,   161,   162,     0,     0,     0,
     898,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,   161,   162,   360,   361,     0,   955,
     496,   497,   498,   499,   500,   501,   502,   503,     0,     0,
       0,     0,     0,     0,     0,     0,   504,     0,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
       0,     0,     0,    41,     0,    42,    43,    44,     0,   517,
       0,    47,    41,     0,    42,    43,    44,     0,     0,     0,
       0,    49,     0,     0,     0,     0,     0,    50,    51,    52,
       0,     0,     0,   518,     0,     0,    50,   169,    52,     0,
       0,     0,    53,    54,     0,     0,     0,     0,   203,   204,
       0,    53,    54,     0,     0,    58,     0,     0,    59,     0,
      60,     0,     0,     0,    58,   519,     0,     0,   520,    60,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,     0,   532,   533,   205,    41,   534,    42,    43,    44,
      45,   206,   113,    47,     0,     0,     0,    48,   207,   208,
     209,     0,     0,    49,     0,     0,     0,     0,   210,    50,
      51,    52,     0,     0,   211,   203,   204,     0,   212,     0,
       0,     0,   213,     0,    53,    54,     0,   214,     0,    55,
       0,     0,     0,     0,     0,   215,    57,    58,     0,   216,
      59,   217,    60,     0,     0,     0,     0,   218,     0,     0,
       0,   205,    41,     0,    42,    43,    44,    45,   206,     0,
      47,     0,     0,   219,    48,   207,   208,   209,     0,     0,
      49,     0,     0,     0,     0,   210,    50,    51,    52,     0,
       0,   211,     0,     0,     0,   212,     0,     0,     0,   213,
       0,    53,    54,     0,   214,     0,    55,     0,     0,     0,
       0,     0,   215,    57,    58,     0,   216,    59,   217,    60,
     140,   141,   142,   143,   144,   145,   146,   147,     0,     0,
       0,     0,     0,     0,     0,     0,   148,     0,     0,     0,
     219,   140,   141,   142,   143,   144,   145,   146,   147,     0,
       0,     0,     0,     0,     0,     0,     0,   148,     0,     0,
     140,   141,   142,   143,   144,   145,   146,   147,     0,     0,
       0,     0,     0,     0,     0,     0,   148,   140,   141,   142,
     143,   144,   145,   146,   147,     0,     0,     0,     0,     0,
       0,     0,     0,   148,   140,   141,   142,   143,   144,   145,
     146,   147,     0,     0,     0,     0,     0,     0,     0,     0,
     148,     0,     0,     0,     0,     0,     0,   340,     0,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,   161,   162,     0,     0,     0,   492,     0,     0,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,   161,   162,   764,     0,     0,     0,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,   161,   162,   896,     0,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,   161,
     162,     0,     0,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,   161,   162,   605,   606,
     607,   608,   609,   610,   611,   612,     0,     0,     0,     0,
       0,     0,     0,     0,   613,   864,   865,   866,   867,   868,
     869,   870,   871,     0,     0,     0,     0,     0,     0,     0,
       0,   872,   864,   865,   866,   867,   868,   869,   870,   871,
       0,     0,     0,     0,     0,     0,     0,     0,   872,   865,
     866,   867,   868,   869,   870,   871,     0,     0,     0,     0,
       0,     0,     0,     0,   872,   142,   143,   144,   145,   146,
     147,     0,     0,     0,     0,     0,     0,     0,     0,   148,
     142,   143,   144,   145,   146,   147,     0,     0,     0,     0,
       0,     0,     0,     0,   148,     0,     0,   614,   615,   616,
     617,   618,   619,   620,   621,   622,   623,   624,     0,   625,
     626,   627,   953,     0,   873,   874,   875,   876,     0,     0,
     877,   878,   879,   880,   881,     0,   882,   883,   884,     0,
       0,   873,   874,   875,   876,     0,     0,   877,   878,   879,
     880,   881,     0,   882,   883,   884,     0,     0,   874,   875,
     876,     0,     0,   877,   878,   879,   880,   881,     0,   882,
     883,   884,     0,     0,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,   161,   162,     0,     0,     0,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
     161,   162,   866,   867,   868,   869,   870,   871,     0,     0,
       0,     0,     0,     0,     0,     0,   872,   142,   143,   144,
     145,   146,   147,     0,     0,     0,     0,     0,     0,     0,
       0,   148,   866,   867,   868,   869,   870,   871,     0,     0,
       0,     0,     0,     0,     0,     0,   872,   866,   867,   868,
     869,   870,   871,     0,     0,     0,     0,     0,     0,     0,
       0,   872,   866,   867,   868,   869,   870,   871,     0,     0,
       0,     0,     0,     0,     0,     0,   872,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     874,   875,   876,     0,     0,   877,   878,   879,   880,   881,
       0,   882,   883,   884,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,     0,   160,   161,   162,     0,
       0,   875,   876,    -2,     0,   877,   878,   879,   880,   881,
       0,   882,   883,   884,     0,     0,     0,   876,     0,     0,
     877,   878,   879,   880,   881,     0,   882,   883,   884,    41,
       0,    42,    43,    44,     0,   877,   878,   879,   880,   881,
       0,   882,   883,   884,     0,     0,    74,     0,     0,     0,
       0,     0,     0,    50,   169,    52,   289,     0,     0,    75,
       0,     0,     0,     0,    76,   360,   361,    77,    53,    54,
       0,     0,     0,     0,     0,    78,    79,     0,    80,     0,
       0,    58,    81,    82,    83,     0,    60,     0,     0,     0,
       0,     0,    41,    84,    42,    43,    44,    85,     0,     0,
       0,    86,    41,     0,    42,    43,    44,   362,   363,   114,
      47,     0,    87,     0,     0,     0,    50,   169,    52,     0,
      49,     0,    40,     0,     0,     0,    50,    51,    52,     0,
       0,    53,    54,     0,     0,     0,     0,     0,     0,     0,
       0,    53,    54,     0,    58,     0,     0,     0,     0,    60,
       0,     0,   364,     0,    58,     0,     0,    59,    41,    60,
      42,    43,    44,    45,    46,     0,    47,     0,     0,     0,
      48,     0,     0,     0,     0,     0,    49,     0,    40,     0,
       0,     0,    50,    51,    52,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    53,    54,     0,
       0,     0,    55,    41,     0,    42,    43,    44,    56,    57,
      58,     0,     0,    59,    41,    60,    42,    43,    44,    45,
     307,     0,    47,     0,     0,     0,    48,    50,   169,    52,
       0,     0,    49,     0,   107,     0,     0,     0,    50,    51,
      52,     0,    53,    54,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    53,    54,    58,     0,     0,    55,     0,
      60,     0,     0,     0,    56,    57,    58,     0,     0,    59,
      41,    60,    42,    43,    44,    45,     0,     0,    47,     0,
       0,     0,    48,   117,     0,     0,     0,     0,    49,     0,
      40,     0,     0,     0,    50,    51,    52,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    53,
      54,     0,     0,     0,    55,     0,     0,     0,     0,     0,
     108,    57,    58,     0,     0,    59,    41,    60,    42,    43,
      44,    45,     0,     0,    47,     0,     0,     0,    48,     0,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
      50,    51,    52,     0,     0,     0,     0,     0,     0,     0,
       0,    74,     0,     0,     0,    53,    54,     0,     0,     0,
      55,     0,     0,     0,    75,     0,    56,    57,    58,    76,
       0,    59,    77,    60,     0,     0,     0,     0,    74,     0,
      78,    79,     0,    80,     0,     0,     0,    81,    82,    83,
       0,    75,     0,     0,     0,     0,    76,     0,    84,    77,
       0,     0,    85,     0,     0,    74,    86,    78,    79,     0,
      80,     0,     0,     0,    81,    82,    83,    87,    75,     0,
       0,     0,     0,    76,     0,    84,    77,     0,     0,    85,
       0,     0,    74,    86,    78,    79,   358,    80,     0,     0,
       0,    81,    82,    83,    87,    75,     0,     0,     0,     0,
      76,     0,    84,    77,     0,     0,    85,     0,     0,    74,
      86,    78,    79,   415,    80,     0,     0,     0,    81,    82,
      83,    87,    75,     0,     0,     0,     0,    76,     0,    84,
      77,     0,     0,    85,     0,     0,    74,    86,    78,    79,
     479,    80,     0,     0,     0,    81,    82,    83,    87,    75,
       0,     0,     0,     0,    76,     0,    84,    77,     0,     0,
      85,     0,     0,     0,    86,    78,    79,   568,    80,     0,
       0,     0,    81,    82,    83,    87,     0,     0,     0,     0,
       0,     0,     0,    84,     0,     0,     0,    85,     0,     0,
       0,    86,     0,     0,   773
};

static const yytype_int16 yycheck[] =
{
       1,    91,   487,    91,     5,    85,    46,    91,   292,     8,
       9,    98,    99,   100,   101,   102,    35,   104,   105,   106,
     193,    12,   442,     0,   376,   108,   113,   114,   125,   631,
     117,   118,   164,   301,    10,     8,     9,   372,     8,     9,
     375,   111,    23,   478,   127,   177,   178,   179,   180,   181,
      35,   125,     8,     9,    10,   208,   126,     2,    14,   411,
      61,    23,   397,   398,   125,   400,   401,   402,     8,     9,
     377,   108,     8,     9,   381,   382,   383,   384,   108,   108,
      77,    79,    80,    81,    85,   108,    31,    32,    33,    34,
     127,    36,   125,   107,    91,    51,   110,   127,   127,    23,
     108,    99,    75,   125,   127,   125,   111,   542,   107,   199,
      91,   199,   417,   418,   116,   199,   427,   108,   103,   127,
     293,   126,   406,   434,   435,   436,   437,   438,   480,    91,
     115,   116,   125,   468,    10,   446,   404,   310,    14,   125,
       8,     9,   161,   108,   120,   108,     4,   279,   111,   584,
       8,     9,   463,    51,   241,    53,    54,   127,   493,   115,
      58,   763,   127,   164,   120,   472,   108,    91,    29,   589,
     110,   107,   212,   125,   442,    51,   177,   178,   179,   180,
     181,   125,    50,   184,   604,   127,   359,   107,   125,   190,
     110,   125,   193,    29,   116,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   125,   162,   199,   125,
     373,    89,    29,   376,   108,     6,   108,    95,    96,    29,
     107,    99,   110,   131,   132,   133,   134,   199,   840,   115,
       8,     9,    10,   127,   120,   127,    14,   552,   421,   125,
     125,   556,   125,   558,   108,   560,   561,   562,   411,   120,
     121,   122,   108,   124,   125,   126,   577,   307,    29,   167,
     110,   169,   110,   127,   125,   199,   108,   110,   279,   590,
     127,   127,   634,    51,   285,   120,   110,   185,   124,   125,
     126,   110,   293,   294,     8,   127,   126,   298,   107,   300,
     902,   125,   126,   127,   906,   250,   251,   308,   116,   310,
      78,   118,   119,   120,   121,   122,     6,   124,   125,   126,
     120,   121,   122,   125,   124,   125,   126,   480,   110,   104,
     105,   106,   125,   373,     8,     9,   376,   109,   300,   110,
     285,   127,   944,   125,   126,   127,   948,   115,   108,   429,
     351,   127,   120,   127,   125,   126,   127,   125,   359,   961,
     845,   126,   127,   124,   125,   126,   117,   368,   970,   127,
     315,   411,   373,   125,   126,   376,   377,   797,   107,   108,
     381,   382,   383,   384,   125,   126,   387,   127,   407,   390,
     409,   125,   126,   394,   292,   340,   127,    19,    20,   486,
     127,   363,   127,   404,   126,   127,   758,    29,   448,   127,
     411,     8,     9,    10,    79,    80,    81,    14,   127,   107,
     421,   109,   110,   111,   425,   127,   427,   127,   429,   127,
     117,   127,   110,   434,   435,   436,   437,   438,   439,   458,
     480,   442,   583,   128,   108,   446,   108,   127,   125,   394,
     603,   130,   125,   125,    51,   125,   107,   107,     8,   794,
     108,   117,   463,   108,   108,   120,   120,   128,   430,   414,
     451,   472,   107,   458,   109,   110,   111,   478,   125,   480,
     120,   634,   572,   111,   572,   837,   487,   111,   572,   451,
     125,   126,   416,   417,   418,    90,   118,   119,   120,   121,
     122,   853,   124,   125,   126,   120,   116,   125,   406,   116,
     455,   456,   457,   127,   459,    19,    20,   126,   115,   127,
     108,   108,   128,   120,   127,    29,   130,   451,   125,   127,
       8,   109,   126,   478,   108,   125,   127,    51,     8,     9,
       4,   542,   487,   125,   130,   128,   127,    56,   900,    17,
      18,    19,    20,   128,     8,     9,   127,   130,    67,    68,
     127,    29,   563,   603,   127,   125,   125,   116,   116,   570,
     117,    80,   130,   127,   117,   127,   577,    86,   109,   125,
      50,   109,   127,   584,   569,   127,   571,   125,   589,   590,
     942,   572,   127,   125,   634,   540,    50,   542,    29,   108,
     601,   110,   111,   604,   125,   758,   591,   626,   593,   594,
     572,   127,   117,   128,   118,   119,   120,   121,   122,    89,
     124,   125,   126,   117,   127,    95,    96,   127,   552,    99,
     631,   127,   556,   634,   558,    89,   560,   561,   562,   584,
     125,    95,    96,   125,   785,   786,   787,   788,   572,   790,
     118,   119,   120,   121,   122,   127,   124,   125,   126,   485,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   127,   627,   192,   837,   429,   794,   118,   119,   120,
     121,   122,   201,   124,   125,   126,   760,   190,   199,   429,
     853,   570,     3,     4,     5,     6,   215,     8,   603,   430,
     219,   363,   799,   199,   451,   422,   225,   226,   758,   722,
     484,   722,    -1,   864,   865,   866,   867,   868,   869,   870,
     871,   872,   873,   874,   875,   876,   877,   878,   879,   880,
     881,   882,    -1,    -1,    -1,    -1,    -1,   900,    -1,    -1,
      -1,    -1,    -1,    54,    -1,    -1,    -1,   758,    -1,    -1,
      -1,    62,   763,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     789,    -1,   913,    -1,    -1,     8,     9,   286,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    -1,    88,    -1,   942,
      -1,    92,    -1,    -1,    -1,    -1,   797,   837,   785,   786,
     787,   788,    -1,   790,   789,   314,   751,    -1,    -1,    -1,
      -1,    -1,   953,   853,   115,    -1,    -1,    50,   119,   120,
      -1,    -1,   123,    -1,   125,    -1,    -1,    -1,   129,    17,
      18,    19,    20,    -1,    -1,    -1,   837,    -1,    -1,   840,
      -1,    29,    -1,    -1,   845,    -1,    -1,    -1,   357,    -1,
     795,    -1,   853,   362,    -1,   364,    89,   802,    -1,    -1,
     900,    -1,    95,    96,   883,    -1,    99,    -1,    -1,   854,
     855,   856,    -1,    -1,    -1,    -1,    -1,   864,   865,   866,
     867,   868,   869,   870,   871,   872,   873,   874,   875,   876,
     877,   878,   879,   880,   881,   882,    -1,    -1,    -1,   900,
     845,   902,   942,    -1,    -1,   906,    -1,   416,   417,   418,
      -1,     3,     4,     5,     6,    -1,     8,     9,   937,    -1,
     939,    -1,    -1,    -1,    -1,    -1,   913,    -1,   116,   117,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,   884,
      -1,   942,    -1,   944,    -1,   964,   965,   948,    -1,    -1,
      -1,   896,    -1,    45,    -1,    47,    48,    49,    50,    51,
     961,    53,    54,    -1,    -1,    57,   953,    -1,    -1,   970,
      62,    63,    -1,    -1,    -1,    -1,   485,    69,    70,    71,
      -1,    -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,    86,    -1,    88,    89,    -1,    -1,
      92,    -1,    -1,    95,    96,    97,    -1,    -1,   100,    -1,
     102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   115,    -1,    -1,    -1,   119,   120,    -1,
     539,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,   556,    -1,   558,
      -1,   560,   561,   562,    -1,    -1,    -1,    -1,   567,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    -1,
      -1,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    -1,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    -1,    -1,    -1,
      74,    75,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,
      -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    -1,    -1,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    -1,    -1,    -1,    74,    75,
      76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,    -1,    -1,
      -1,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,    -1,   129,   130,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    12,    -1,    -1,    -1,    45,
      -1,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    69,    70,    71,    -1,    -1,    45,    29,
      47,    48,    49,    50,    51,    -1,    53,    54,    84,    85,
      57,    -1,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,
      -1,    97,    69,    70,    71,    -1,   102,    -1,    -1,    76,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,
      -1,    88,    89,    -1,    -1,    92,    -1,    -1,    95,    96,
      97,    -1,    -1,   100,    -1,   102,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    12,    -1,    -1,   115,    -1,
      -1,   940,   119,    -1,    -1,    -1,   123,    -1,   125,    -1,
      -1,    -1,   129,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,    -1,    45,    -1,
      47,    48,    49,    50,    51,    -1,    53,    54,    -1,    -1,
      57,    -1,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,
      -1,    -1,    69,    70,    71,    -1,    -1,    -1,    -1,    76,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,
      -1,    88,    89,    -1,    -1,    92,    -1,    -1,    95,    96,
      97,    -1,    -1,   100,    -1,   102,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,   115,    -1,
      -1,    -1,   119,    -1,    -1,    -1,   123,    -1,   125,    -1,
      -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
      47,    48,    49,    -1,    -1,    -1,    53,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,
      -1,    -1,    69,    70,    -1,    -1,    -1,    -1,    -1,    76,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,
      -1,    88,    -1,    -1,    -1,    92,     3,     4,     5,     6,
      97,     8,     9,    -1,    -1,   102,    -1,    -1,    -1,    45,
      -1,    47,    48,    49,    -1,    -1,    -1,    53,   115,    -1,
      -1,    -1,   119,   120,    -1,    -1,   123,    63,   125,    -1,
     127,    -1,   129,    69,    70,    71,    -1,    -1,    45,    -1,
      47,    48,    49,    -1,    -1,    -1,    53,    54,    84,    85,
      -1,    -1,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,
      -1,    97,    69,    70,    -1,    -1,   102,    -1,    -1,    76,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,
      -1,    88,    -1,    -1,    -1,    92,     3,     4,     5,     6,
      97,     8,     9,    -1,    -1,   102,    -1,    -1,    -1,    45,
     107,    47,    48,    49,    -1,    -1,    -1,    -1,   115,    -1,
      -1,    -1,   119,   120,    -1,    -1,   123,    63,   125,    -1,
      -1,    -1,   129,    69,    70,    71,    -1,    -1,    45,    -1,
      47,    48,    49,    -1,    -1,    -1,    53,    54,    84,    85,
      -1,    -1,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,
      -1,    97,    69,    70,    -1,    -1,   102,    -1,    -1,    76,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,
      -1,    88,    -1,    -1,    -1,    92,     3,     4,     5,     6,
      97,     8,     9,    -1,    -1,   102,    -1,    -1,    -1,    -1,
     107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,
      -1,    -1,   119,   120,    -1,    -1,   123,    -1,   125,    -1,
      -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,    45,    -1,
      47,    48,    49,    -1,    -1,    -1,    53,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,
      -1,    -1,    69,    70,    -1,    -1,    -1,    -1,    -1,    76,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,
      -1,    88,    -1,    -1,    -1,    92,     3,     4,     5,     6,
      97,     8,     9,    -1,    -1,   102,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,
      -1,    -1,   119,   120,    -1,    -1,   123,    -1,   125,    -1,
     127,    -1,   129,    -1,    -1,    -1,    -1,    -1,    45,    -1,
      47,    48,    49,    -1,    -1,    -1,    53,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,
      -1,    -1,    69,    70,    -1,    -1,    -1,    -1,    -1,    76,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,
      -1,    88,    -1,    -1,    -1,    92,     3,     4,     5,     6,
      97,     8,     9,    -1,    -1,   102,    -1,    -1,    -1,    -1,
     107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,
      -1,    -1,   119,   120,    -1,    -1,   123,    -1,   125,    -1,
      -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,    45,    -1,
      47,    48,    49,    -1,    -1,    -1,    53,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,
      -1,    -1,    69,    70,    -1,    -1,    -1,    -1,    -1,    76,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,
      -1,    88,    -1,    -1,    -1,    92,     3,     4,     5,     6,
      97,     8,     9,    -1,    -1,   102,    -1,    -1,    -1,    45,
      -1,    47,    48,    49,    -1,    -1,    -1,    53,   115,    -1,
      -1,    -1,   119,   120,    -1,    -1,   123,    63,   125,    -1,
     127,    -1,   129,    69,    70,    71,    -1,    -1,    45,    -1,
      47,    48,    49,    -1,    -1,    -1,    53,    54,    84,    85,
      -1,    -1,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,
      -1,    97,    69,    70,    -1,    -1,   102,    -1,    -1,    76,
      15,    16,    17,    18,    19,    20,    -1,    84,    85,    86,
      -1,    88,    -1,    -1,    29,    92,    -1,    -1,    -1,   125,
      97,    -1,    -1,    -1,    -1,   102,    -1,    -1,    13,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,   115,    -1,
      -1,    -1,   119,   120,    29,    -1,   123,    -1,   125,    -1,
      -1,    -1,   129,    13,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    13,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,    -1,   124,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,    -1,   124,
     125,   126,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,    -1,    -1,    -1,
     130,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,    -1,   124,   125,   126,     8,     9,    -1,   130,
      13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      -1,    -1,    -1,    45,    -1,    47,    48,    49,    -1,    52,
      -1,    53,    45,    -1,    47,    48,    49,    -1,    -1,    -1,
      -1,    63,    -1,    -1,    -1,    -1,    -1,    69,    70,    71,
      -1,    -1,    -1,    76,    -1,    -1,    69,    70,    71,    -1,
      -1,    -1,    84,    85,    -1,    -1,    -1,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    97,    -1,    -1,   100,    -1,
     102,    -1,    -1,    -1,    97,   108,    -1,    -1,   111,   102,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,    44,    45,   129,    47,    48,    49,
      50,    51,   125,    53,    -1,    -1,    -1,    57,    58,    59,
      60,    -1,    -1,    63,    -1,    -1,    -1,    -1,    68,    69,
      70,    71,    -1,    -1,    74,     8,     9,    -1,    78,    -1,
      -1,    -1,    82,    -1,    84,    85,    -1,    87,    -1,    89,
      -1,    -1,    -1,    -1,    -1,    95,    96,    97,    -1,    99,
     100,   101,   102,    -1,    -1,    -1,    -1,   107,    -1,    -1,
      -1,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    -1,    -1,   123,    57,    58,    59,    60,    -1,    -1,
      63,    -1,    -1,    -1,    -1,    68,    69,    70,    71,    -1,
      -1,    74,    -1,    -1,    -1,    78,    -1,    -1,    -1,    82,
      -1,    84,    85,    -1,    87,    -1,    89,    -1,    -1,    -1,
      -1,    -1,    95,    96,    97,    -1,    99,   100,   101,   102,
      13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,
     123,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,
      13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    29,    13,    14,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    29,    13,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      29,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,    -1,    -1,    -1,   109,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   108,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,   110,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
     126,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,    -1,   124,   125,   126,    13,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    29,    13,    14,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    29,    13,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    29,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,    -1,   124,
     125,   126,   110,    -1,   112,   113,   114,   115,    -1,    -1,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,    -1,
      -1,   112,   113,   114,   115,    -1,    -1,   118,   119,   120,
     121,   122,    -1,   124,   125,   126,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,   119,   120,   121,   122,    -1,   124,
     125,   126,    -1,    -1,   114,   115,   116,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,    -1,    -1,    -1,
     115,   116,   117,   118,   119,   120,   121,   122,    -1,   124,
     125,   126,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    29,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    29,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    29,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    29,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,    -1,    -1,    -1,    -1,   116,   117,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,    -1,
      -1,   114,   115,     0,    -1,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,    -1,    -1,    -1,   115,    -1,    -1,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,    45,
      -1,    47,    48,    49,    -1,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,    -1,    -1,    43,    -1,    -1,    -1,
      -1,    -1,    -1,    69,    70,    71,     9,    -1,    -1,    56,
      -1,    -1,    -1,    -1,    61,     8,     9,    64,    84,    85,
      -1,    -1,    -1,    -1,    -1,    72,    73,    -1,    75,    -1,
      -1,    97,    79,    80,    81,    -1,   102,    -1,    -1,    -1,
      -1,    -1,    45,    90,    47,    48,    49,    94,    -1,    -1,
      -1,    98,    45,    -1,    47,    48,    49,    50,    51,   125,
      53,    -1,   109,    -1,    -1,    -1,    69,    70,    71,    -1,
      63,    -1,     9,    -1,    -1,    -1,    69,    70,    71,    -1,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    84,    85,    -1,    97,    -1,    -1,    -1,    -1,   102,
      -1,    -1,    95,    -1,    97,    -1,    -1,   100,    45,   102,
      47,    48,    49,    50,    51,    -1,    53,    -1,    -1,    -1,
      57,    -1,    -1,    -1,    -1,    -1,    63,    -1,     9,    -1,
      -1,    -1,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    -1,
      -1,    -1,    89,    45,    -1,    47,    48,    49,    95,    96,
      97,    -1,    -1,   100,    45,   102,    47,    48,    49,    50,
      51,    -1,    53,    -1,    -1,    -1,    57,    69,    70,    71,
      -1,    -1,    63,    -1,     9,    -1,    -1,    -1,    69,    70,
      71,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    84,    85,    97,    -1,    -1,    89,    -1,
     102,    -1,    -1,    -1,    95,    96,    97,    -1,    -1,   100,
      45,   102,    47,    48,    49,    50,    -1,    -1,    53,    -1,
      -1,    -1,    57,   125,    -1,    -1,    -1,    -1,    63,    -1,
       9,    -1,    -1,    -1,    69,    70,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
      85,    -1,    -1,    -1,    89,    -1,    -1,    -1,    -1,    -1,
      95,    96,    97,    -1,    -1,   100,    45,   102,    47,    48,
      49,    50,    -1,    -1,    53,    -1,    -1,    -1,    57,    -1,
      -1,    -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,
      69,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    -1,    -1,    -1,    84,    85,    -1,    -1,    -1,
      89,    -1,    -1,    -1,    56,    -1,    95,    96,    97,    61,
      -1,   100,    64,   102,    -1,    -1,    -1,    -1,    43,    -1,
      72,    73,    -1,    75,    -1,    -1,    -1,    79,    80,    81,
      -1,    56,    -1,    -1,    -1,    -1,    61,    -1,    90,    64,
      -1,    -1,    94,    -1,    -1,    43,    98,    72,    73,    -1,
      75,    -1,    -1,    -1,    79,    80,    81,   109,    56,    -1,
      -1,    -1,    -1,    61,    -1,    90,    64,    -1,    -1,    94,
      -1,    -1,    43,    98,    72,    73,   128,    75,    -1,    -1,
      -1,    79,    80,    81,   109,    56,    -1,    -1,    -1,    -1,
      61,    -1,    90,    64,    -1,    -1,    94,    -1,    -1,    43,
      98,    72,    73,   128,    75,    -1,    -1,    -1,    79,    80,
      81,   109,    56,    -1,    -1,    -1,    -1,    61,    -1,    90,
      64,    -1,    -1,    94,    -1,    -1,    43,    98,    72,    73,
     128,    75,    -1,    -1,    -1,    79,    80,    81,   109,    56,
      -1,    -1,    -1,    -1,    61,    -1,    90,    64,    -1,    -1,
      94,    -1,    -1,    -1,    98,    72,    73,   128,    75,    -1,
      -1,    -1,    79,    80,    81,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    90,    -1,    -1,    -1,    94,    -1,    -1,
      -1,    98,    -1,    -1,   128
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,   104,   105,   106,   132,   133,   218,     3,     4,     5,
       6,     8,     9,    45,    47,    48,    49,    53,    54,    62,
      63,    69,    70,    76,    84,    85,    86,    88,    92,    97,
     102,   115,   119,   120,   123,   125,   129,   211,   212,   217,
       9,    45,    47,    48,    49,    50,    51,    53,    57,    63,
      69,    70,    71,    84,    85,    89,    95,    96,    97,   100,
     102,   178,   181,   182,   184,   189,   190,   194,   195,   199,
     200,   201,   202,     0,    43,    56,    61,    64,    72,    73,
      75,    79,    80,    81,    90,    94,    98,   109,   136,   138,
     139,   141,   142,   159,   196,   198,   218,   125,   125,   125,
     125,   125,   125,   116,   125,   125,   125,     9,    95,   180,
     194,   195,   199,   125,   125,   125,   116,   125,   125,   211,
     211,   211,   211,     9,    45,    47,    48,    49,    53,    63,
      69,    70,    84,    85,    97,   102,   181,   209,   211,   211,
      13,    14,    15,    16,    17,    18,    19,    20,    29,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     124,   125,   126,     6,   178,    53,    63,    70,   200,    70,
     200,   200,     8,     9,   216,   200,    10,    14,    51,   115,
     120,   125,   177,   218,   107,   110,   216,   107,   216,   110,
     140,   125,   125,   107,   216,   110,   110,   110,   160,   141,
     145,    75,   216,     8,     9,    44,    51,    58,    59,    60,
      68,    74,    78,    82,    87,    95,    99,   101,   107,   123,
     148,   179,   182,   184,   189,   194,   195,   199,   208,   209,
     218,   208,   208,   208,   208,   208,   181,   208,   208,   208,
     216,   125,   216,   216,   208,   208,   181,   181,   208,   208,
     127,   108,   127,   211,   211,   211,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
     211,   211,   211,   211,   127,   209,   211,   177,    63,   120,
     177,   177,   177,   177,   177,   126,   192,   193,   218,     9,
     191,   200,   110,   183,   185,   138,     8,   216,   133,   107,
     116,   148,   179,   216,   125,   125,   217,    51,   178,   216,
     137,   216,   107,   109,   110,   111,   171,   109,   143,   216,
     216,   127,   127,   127,   127,   127,   127,   117,   127,   127,
     127,   208,   127,   127,   127,   117,   127,   127,   211,   211,
     110,   127,   130,   177,   127,   207,   211,   218,   216,   128,
     191,   133,   110,   186,   187,   218,   108,   108,   128,   197,
       8,     9,    50,    51,    95,   161,   162,   163,   164,   199,
     218,   171,   146,   149,    10,   120,   150,   178,     8,     9,
      10,    14,    51,   115,   120,   175,   218,   133,   125,   203,
     204,   134,   135,   216,   107,   211,    10,    14,    51,    78,
     115,   120,   125,   144,   165,   216,   110,   125,   127,   125,
     211,   125,   130,   108,   111,   128,    79,    80,    81,    99,
     188,   107,   108,     8,   216,   133,   216,   164,   216,   117,
     108,     8,     9,    10,    14,    51,   115,   120,   125,   176,
     218,   147,   165,     3,     4,     5,     8,    12,    51,    54,
      62,    76,    86,    88,    92,   115,   119,   123,   125,   129,
     167,   168,   174,   178,   213,   214,   217,   218,   120,   165,
     167,   175,   120,   175,   175,   175,   175,   125,   126,   128,
     151,   128,   205,   218,   107,   108,   125,   107,   172,   173,
     211,   218,   109,   120,   165,   165,    13,    14,    15,    16,
      17,    18,    19,    20,    29,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    52,    76,   108,
     111,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   125,   126,   129,   157,   165,   165,   165,   110,
     111,   125,   126,   170,   171,   218,   191,   209,   209,   167,
     211,    95,    99,   195,   215,   216,    99,   215,    99,   215,
      79,    80,    81,   133,   188,   108,   127,   108,   128,   111,
     176,   111,   141,   142,   158,   159,   163,   120,   176,   176,
     176,   176,   176,   111,   126,   169,   218,   170,   171,   176,
     178,   116,   180,   125,   116,   211,   211,   211,   181,   209,
     211,   127,    12,   108,   176,    13,    14,    15,    16,    17,
      18,    19,    20,    29,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   124,   125,   126,   165,   110,
     127,   127,   125,   175,   154,   207,   167,     3,     4,     5,
       6,     7,     8,     9,    10,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    57,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    74,    75,    76,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   129,   130,   206,   203,   135,   208,   172,
     128,   108,   165,   127,   130,   127,     4,   211,   166,   207,
     108,   127,   127,   127,   108,   216,   215,   216,   215,   215,
     215,   215,   215,   128,     8,   109,   216,   181,   169,   181,
     176,   127,    54,    86,    88,   115,   119,   120,   123,   125,
     129,   210,   212,   207,   108,   111,   170,   176,   181,   125,
     181,   181,   127,   127,    51,   156,   218,    12,   174,   170,
     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
     211,   127,   209,   211,   127,   125,   156,   155,   167,   130,
     127,   205,   128,   127,   128,   107,   211,   167,   130,   144,
     156,   127,   127,   125,   116,   125,   116,   210,   210,   210,
     210,   181,   209,   210,    13,    14,    15,    16,    17,    18,
      19,    20,    29,   112,   113,   114,   115,   118,   119,   120,
     121,   122,   124,   125,   126,   130,   147,   211,   170,   117,
     208,   127,   117,   211,    77,    91,   110,   127,   130,   125,
     152,   167,   127,   156,   128,   172,   127,   109,   109,   167,
     181,   181,   181,   127,   127,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   127,   209,   211,   125,   127,   125,
     125,   211,   153,   167,   127,   156,   128,   156,   127,   117,
     127,   117,   210,   110,   127,   130,   209,   209,   127,   216,
     167,   127,   156,   156,   125,   125,   210,   127,   127,   127,
     127,   156,   209,   209,   156,   127,   127
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,   131,   132,   132,   132,   133,   133,   133,   134,   134,
     135,   137,   136,   138,   138,   138,   138,   138,   138,   138,
     138,   138,   138,   138,   138,   138,   138,   138,   138,   140,
     139,   141,   141,   141,   141,   141,   141,   141,   141,   141,
     141,   141,   141,   141,   143,   142,   142,   142,   144,   144,
     146,   145,   145,   147,   147,   149,   148,   150,   148,   151,
     148,   152,   148,   153,   148,   154,   148,   155,   148,   148,
     156,   156,   156,   156,   156,   157,   157,   157,   157,   157,
     157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
     157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
     157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
     157,   157,   157,   157,   158,   158,   160,   159,   161,   161,
     162,   162,   163,   163,   163,   163,   163,   163,   164,   164,
     164,   165,   165,   165,   165,   165,   165,   165,   165,   165,
     165,   166,   165,   167,   167,   167,   167,   167,   168,   168,
     169,   169,   170,   170,   171,   171,   171,   171,   171,   172,
     172,   172,   173,   173,   173,   173,   174,   174,   174,   174,
     175,   175,   175,   175,   175,   175,   175,   175,   175,   176,
     176,   176,   176,   176,   176,   176,   176,   176,   176,   176,
     177,   177,   177,   177,   177,   177,   177,   177,   178,   178,
     178,   178,   178,   178,   178,   178,   179,   179,   179,   179,
     179,   179,   179,   179,   179,   180,   180,   180,   180,   180,
     181,   181,   183,   182,   185,   184,   186,   186,   187,   187,
     188,   188,   188,   188,   188,   188,   188,   188,   188,   189,
     190,   190,   190,   190,   191,   191,   192,   192,   192,   193,
     193,   193,   194,   195,   195,   195,   197,   196,   196,   198,
     198,   199,   199,   199,   200,   200,   200,   200,   200,   200,
     200,   200,   200,   200,   200,   200,   200,   200,   200,   201,
     201,   201,   201,   201,   202,   204,   203,   205,   205,   206,
     206,   206,   206,   206,   206,   206,   206,   206,   206,   206,
     206,   206,   206,   206,   206,   206,   206,   206,   206,   206,
     206,   206,   206,   206,   206,   206,   206,   206,   206,   206,
     206,   206,   206,   206,   206,   206,   206,   206,   206,   206,
     206,   206,   206,   206,   206,   206,   206,   206,   206,   206,
     206,   206,   206,   206,   206,   206,   206,   206,   206,   206,
     206,   206,   206,   206,   206,   206,   206,   206,   206,   206,
     206,   206,   206,   206,   206,   206,   206,   206,   206,   206,
     206,   206,   206,   206,   206,   206,   206,   206,   206,   206,
     206,   206,   206,   206,   206,   206,   206,   206,   206,   206,
     206,   206,   206,   206,   206,   206,   206,   207,   207,   208,
     208,   209,   209,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   212,   212,   212,   212,
     212,   212,   212,   213,   213,   213,   213,   213,   213,   213,
     213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
     213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
     213,   213,   213,   213,   213,   213,   213,   213,   213,   214,
     214,   214,   214,   214,   214,   215,   215,   215,   216,   216,
     217,   217,   218
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     2,     1,     2,     2,     1,     3,
       4,     0,     5,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     2,     2,     2,     2,     7,     9,     9,     0,
       3,     1,     2,     2,     3,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     0,     4,     3,     3,     2,     4,
       0,     4,     3,     2,     4,     0,     6,     0,     6,     0,
       7,     0,    10,     0,    11,     0,     8,     0,     9,     1,
       1,     1,     2,     4,     5,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     1,     1,     1,     0,     6,     1,     1,
       1,     3,     2,     4,     2,     4,     3,     4,     1,     1,
       1,     1,     2,     2,     2,     2,     2,     3,     4,     3,
       3,     0,     6,     1,     1,     1,     3,     2,     1,     3,
       1,     2,     1,     2,     1,     3,     5,     3,     4,     1,
       1,     2,     1,     3,     3,     5,     3,     3,     4,     1,
       1,     1,     1,     2,     2,     2,     2,     3,     4,     1,
       1,     1,     2,     2,     2,     2,     3,     4,     7,     3,
       1,     2,     2,     2,     2,     3,     4,     7,     1,     1,
       2,     1,     1,     1,     2,     4,     1,     1,     2,     1,
       1,     1,     2,     4,     2,     1,     1,     2,     2,     2,
       2,     3,     0,     5,     0,     7,     1,     1,     2,     3,
       2,     2,     2,     3,     3,     3,     3,     3,     3,     4,
       4,     2,     3,     1,     1,     1,     1,     3,     5,     1,
       2,     4,     1,     1,     1,     1,     0,     6,     4,     2,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     1,
       2,     1,     3,     2,     1,     0,     2,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       1,     1,     3,     1,     4,     7,     7,     4,     2,     2,
       2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       4,     4,     3,     3,     3,     3,     1,     4,     7,     7,
       4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     2,     5,     2,     2,     2,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       4,     4,     3,     3,     3,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     7,     7,     4,     2,     5,
       2,     2,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     5,     4,     4,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     1,
       1,     2,     0
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (yylocationp);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 3:
#line 388 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_expr = (yyvsp[0].u.expr);
}
#line 2964 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 4:
#line 392 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_type = (yyvsp[0].u.type);
}
#line 2972 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 10:
#line 410 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  delete (yyvsp[-1].u.expr);
}
#line 2980 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 11:
#line 422 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) |
                     ((yyvsp[-1].u.integer) & CPPInstance::SC_c_binding));
}
#line 2989 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 12:
#line 427 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_storage_class();
}
#line 2997 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 20:
#line 441 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = (yylsp[0]);
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
#line 3014 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 21:
#line 454 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", (yylsp[0]));
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
#line 3027 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 22:
#line 463 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_scope->set_current_vis(V_published);
}
#line 3035 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 23:
#line 467 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (publish_nest_level > 0) {
    current_scope->set_current_vis(V_published);
  } else {
    current_scope->set_current_vis(V_public);
  }
}
#line 3047 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 24:
#line 475 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_scope->set_current_vis(V_protected);
}
#line 3055 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 25:
#line 479 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_scope->set_current_vis(V_private);
}
#line 3063 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 26:
#line 483 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
  }

  CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-4].u.identifier), getter->as_function_group(), NULL, current_scope, (yylsp[-6]).file);
  current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-6]));
}
#line 3078 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 27:
#line 494 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));

  } else {
    CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    CPPFunctionGroup *setter_func = NULL;

    if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    } else {
      setter_func = setter->as_function_group();
    }

    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), getter->as_function_group(),
                                                         setter_func, current_scope, (yylsp[-8]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 3103 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 28:
#line 515 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPMakeSeq *make_seq = new CPPMakeSeq((yyvsp[-6].u.identifier)->get_simple_name(), (yyvsp[-4].u.identifier)->get_simple_name(), (yyvsp[-2].u.identifier)->get_simple_name(), (yylsp[-8]).file);
  current_scope->add_declaration(make_seq, global_scope, current_lexer, (yylsp[-8]));
}
#line 3112 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 29:
#line 523 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
#line 3122 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 30:
#line 529 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  delete current_scope;
  pop_scope();
}
#line 3131 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 31:
#line 538 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = 0;
}
#line 3139 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 32:
#line 542 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This isn't really a storage class, but it helps with parsing.
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_const;
}
#line 3148 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 33:
#line 547 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_extern;
}
#line 3156 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 34:
#line 551 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-2].u.integer) | (int)CPPInstance::SC_extern;
  if ((yyvsp[0].str) == "C") {
    (yyval.u.integer) |= (int)CPPInstance::SC_c_binding;
  } else if ((yyvsp[0].str) == "C++") {
    (yyval.u.integer) &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + (yyvsp[0].str) + "\"", (yylsp[0]));
  }
}
#line 3171 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 35:
#line 562 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_static;
}
#line 3179 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 36:
#line 566 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_inline;
}
#line 3187 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 37:
#line 570 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_virtual;
}
#line 3195 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 38:
#line 574 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_explicit;
}
#line 3203 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 39:
#line 578 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_volatile;
}
#line 3211 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 40:
#line 582 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_mutable;
}
#line 3219 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 41:
#line 586 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_register;
}
#line 3227 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 42:
#line 590 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_blocking;
}
#line 3235 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 43:
#line 594 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_extension;
}
#line 3243 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 44:
#line 601 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 3258 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 45:
#line 612 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_storage_class();
}
#line 3266 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 46:
#line 616 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration((yyvsp[-1].u.decl), global_scope, current_lexer, (yylsp[-1]));
}
#line 3279 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 47:
#line 625 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-1].u.instance) != (CPPInstance *)NULL) {
    (yyvsp[-1].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
    current_scope->add_declaration((yyvsp[-1].u.instance), global_scope, current_lexer, (yylsp[-1]));
    (yyvsp[-1].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 3291 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 48:
#line 639 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-1].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
}
#line 3306 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 49:
#line 650 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-3].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-3]).file);
  inst->set_initializer((yyvsp[-2].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-3]));
}
#line 3321 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 50:
#line 664 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 3336 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 51:
#line 675 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_storage_class();
}
#line 3344 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 52:
#line 679 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-1].u.instance) != (CPPDeclaration *)NULL) {
    CPPInstance *inst = (yyvsp[-1].u.instance)->as_instance();
    if (inst != (CPPInstance *)NULL) {
      inst->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
      current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
      CPPTypedefType *typedef_type = new CPPTypedefType(inst->_type, inst->_ident, current_scope);
      current_scope->add_declaration(typedef_type, global_scope, current_lexer, (yylsp[-1]));
    }
  }
}
#line 3360 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 53:
#line 694 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-1].u.inst_ident), current_scope, (yylsp[-1]).file);
  current_scope->add_declaration(typedef_type, global_scope, current_lexer, (yylsp[-1]));
}
#line 3373 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 54:
#line 703 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-3].u.inst_ident), current_scope, (yylsp[-3]).file);
  current_scope->add_declaration(typedef_type, global_scope, current_lexer, (yylsp[-3]));
}
#line 3386 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 55:
#line 717 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 3394 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 56:
#line 721 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  CPPType *type;
  if ((yyvsp[-5].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-5].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
}
#line 3416 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 57:
#line 739 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 3424 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 58:
#line 743 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  CPPType *type;
  if ((yyvsp[-5].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-5].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
}
#line 3446 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 59:
#line 763 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 3454 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 60:
#line 767 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  if ((yyvsp[-5].u.identifier)->is_scoped()) {
    yyerror("Invalid destructor name: ~" + (yyvsp[-5].u.identifier)->get_fully_scoped_name(), (yylsp[-5]));
  } else {
    CPPIdentifier *ident =
      new CPPIdentifier("~" + (yyvsp[-5].u.identifier)->get_simple_name(), (yylsp[-5]).file);
    delete (yyvsp[-5].u.identifier);

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);

    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

    (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
  }
}
#line 3477 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 61:
#line 793 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 3485 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 62:
#line 797 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  CPPType *type = (yyvsp[-9].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[-6].u.inst_ident);
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-9]).file);
}
#line 3500 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 63:
#line 808 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 3508 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 64:
#line 812 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  CPPType *type = (yyvsp[-10].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[-6].u.inst_ident);
  ii->add_scoped_pointer_modifier((yyvsp[-8].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-10]).file);
}
#line 3523 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 65:
#line 825 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-3].u.identifier) != NULL) {
    push_scope((yyvsp[-3].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 3533 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 66:
#line 831 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-7].u.identifier) != NULL) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give typecast operators the name "operator typecast <name>",
  // where <name> is a simple name of the type to be typecast.  Use
  // the method's return type to determine the full type description.
  string name = "operator typecast " + (yyvsp[-6].u.type)->get_simple_name();
  CPPIdentifier *ident = (yyvsp[-7].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier(name, (yylsp[-7]).file);
  } else {
    ident->add_name(name);
  }
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 3562 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 67:
#line 856 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-4].u.identifier) != NULL) {
    push_scope((yyvsp[-4].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 3572 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 68:
#line 862 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-8].u.identifier) != NULL) {
    pop_scope();
  }

  CPPIdentifier *ident = (yyvsp[-8].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator typecast", (yylsp[-8]).file);
  } else {
    ident->add_name("operator typecast");
  }
  (yyvsp[-5].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 3592 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 69:
#line 882 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *decl =
    (yyvsp[0].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != (CPPDeclaration *)NULL) {
    (yyval.u.instance) = decl->as_instance();
  } else {
    (yyval.u.instance) = (CPPInstance *)NULL;
  }
}
#line 3606 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 70:
#line 895 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = 0;
}
#line 3614 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 71:
#line 899 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (int)CPPFunctionType::F_const_method;
}
#line 3622 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 72:
#line 903 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (int)CPPFunctionType::F_noexcept;
}
#line 3630 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 73:
#line 907 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-3].u.integer);
}
#line 3638 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 74:
#line 911 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-4].u.integer);
}
#line 3646 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 75:
#line 918 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "!";
}
#line 3654 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 76:
#line 922 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "~";
}
#line 3662 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 77:
#line 926 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "*";
}
#line 3670 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 78:
#line 930 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "/";
}
#line 3678 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 79:
#line 934 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "%";
}
#line 3686 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 80:
#line 938 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "+";
}
#line 3694 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 81:
#line 942 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "-";
}
#line 3702 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 82:
#line 946 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "|";
}
#line 3710 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 83:
#line 950 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "&";
}
#line 3718 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 84:
#line 954 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "^";
}
#line 3726 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 85:
#line 958 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "||";
}
#line 3734 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 86:
#line 962 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "&&";
}
#line 3742 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 87:
#line 966 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "==";
}
#line 3750 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 88:
#line 970 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "!=";
}
#line 3758 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 89:
#line 974 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<=";
}
#line 3766 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 90:
#line 978 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">=";
}
#line 3774 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 91:
#line 982 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<";
}
#line 3782 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 92:
#line 986 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">";
}
#line 3790 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 93:
#line 990 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<<";
}
#line 3798 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 94:
#line 994 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">>";
}
#line 3806 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 95:
#line 998 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "=";
}
#line 3814 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 96:
#line 1002 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ",";
}
#line 3822 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 97:
#line 1006 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "++";
}
#line 3830 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 98:
#line 1010 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "--";
}
#line 3838 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 99:
#line 1014 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "*=";
}
#line 3846 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 100:
#line 1018 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "/=";
}
#line 3854 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 101:
#line 1022 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "%=";
}
#line 3862 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 102:
#line 1026 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "+=";
}
#line 3870 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 103:
#line 1030 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "-=";
}
#line 3878 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 104:
#line 1034 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "|=";
}
#line 3886 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 105:
#line 1038 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "&=";
}
#line 3894 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 106:
#line 1042 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "^=";
}
#line 3902 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 107:
#line 1046 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<<=";
}
#line 3910 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 108:
#line 1050 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">>=";
}
#line 3918 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 109:
#line 1054 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "->";
}
#line 3926 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 110:
#line 1058 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "[]";
}
#line 3934 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 111:
#line 1062 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "()";
}
#line 3942 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 112:
#line 1066 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "new";
}
#line 3950 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 113:
#line 1070 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "delete";
}
#line 3958 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 116:
#line 1082 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope(new CPPTemplateScope(current_scope));
}
#line 3966 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 117:
#line 1086 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
}
#line 3974 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 120:
#line 1098 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 3984 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 121:
#line 1104 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 3994 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 122:
#line 1113 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[0].u.identifier)));
}
#line 4002 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 123:
#line 1117 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[-2].u.identifier), (yyvsp[0].u.type)));
}
#line 4010 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 124:
#line 1121 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[0].u.identifier)));
}
#line 4018 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 125:
#line 1125 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[-2].u.identifier), (yyvsp[0].u.type)));
}
#line 4026 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 126:
#line 1129 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 4036 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 127:
#line 1135 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 4047 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 128:
#line 1145 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 4055 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 129:
#line 1149 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  yywarning("Not a type: " + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 4064 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 130:
#line 1154 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert((yyval.u.type) != NULL);
}
#line 4073 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 131:
#line 1163 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 4081 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 132:
#line 1167 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = (yyvsp[-1].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator "+(yyvsp[0].str), (yylsp[0]).file);
  } else {
    ident->_names.push_back("operator "+(yyvsp[0].str));
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
#line 4099 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 133:
#line 1181 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 4108 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 134:
#line 1186 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 4117 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 135:
#line 1191 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 4126 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 136:
#line 1196 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 4135 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 137:
#line 1201 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 4144 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 138:
#line 1206 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 4153 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 139:
#line 1211 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // bitfield definition.  We ignore the bitfield for now.
  (yyval.u.inst_ident) = (yyvsp[-2].u.inst_ident);
}
#line 4162 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 140:
#line 1216 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 4171 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 141:
#line 1221 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-1].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 4179 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 142:
#line 1225 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  if ((yyvsp[-2].u.param_list)->is_parameter_expr() && (yyvsp[0].u.integer) == 0) {
    // Oops, this must have been an instance declaration with a
    // parameter list, not a function prototype.
    (yyval.u.inst_ident)->add_initializer_modifier((yyvsp[-2].u.param_list));

  } else {
    // This was (probably) a function prototype.
    (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
  }
}
#line 4197 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 143:
#line 1243 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
}
#line 4205 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 144:
#line 1247 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 4214 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 145:
#line 1252 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 4222 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 146:
#line 1256 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 4231 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 147:
#line 1261 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 4240 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 148:
#line 1269 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 4249 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 149:
#line 1274 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 4258 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 150:
#line 1282 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 4266 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 151:
#line 1286 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 4274 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 152:
#line 1293 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 4282 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 153:
#line 1297 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 4290 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 154:
#line 1304 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 4298 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 155:
#line 1308 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 4306 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 156:
#line 1312 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 4314 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 157:
#line 1316 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 4322 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 158:
#line 1320 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 4330 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 162:
#line 1333 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
}
#line 4337 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 166:
#line 1342 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 4346 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 167:
#line 1347 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  yywarning("Not a type: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
  (yyval.u.instance) = new CPPInstance(type, (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 4358 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 168:
#line 1355 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 4368 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 169:
#line 1361 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_parameter));
  (yyval.u.instance) = new CPPInstance(type, "expr");
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 4379 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 170:
#line 1371 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
#line 4387 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 171:
#line 1375 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 4395 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 172:
#line 1379 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 4403 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 173:
#line 1383 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 4412 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 174:
#line 1388 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 4421 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 175:
#line 1393 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 4430 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 176:
#line 1398 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 4439 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 177:
#line 1403 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 4448 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 178:
#line 1408 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 4457 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 179:
#line 1416 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
#line 4465 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 180:
#line 1420 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 4473 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 181:
#line 1424 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 4481 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 182:
#line 1428 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 4490 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 183:
#line 1433 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 4499 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 184:
#line 1438 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 4508 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 185:
#line 1443 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 4517 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 186:
#line 1448 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 4526 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 187:
#line 1453 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 4535 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 188:
#line 1458 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 4545 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 189:
#line 1464 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 4554 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 190:
#line 1472 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
#line 4562 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 191:
#line 1476 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 4571 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 192:
#line 1481 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 4580 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 193:
#line 1486 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 4589 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 194:
#line 1491 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 4598 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 195:
#line 1496 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 4607 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 196:
#line 1501 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 4616 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 197:
#line 1506 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 4626 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 198:
#line 1515 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 4634 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 199:
#line 1519 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert((yyval.u.type) != NULL);
}
#line 4643 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 200:
#line 1524 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 4651 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 201:
#line 1528 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 4659 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 202:
#line 1532 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 4667 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 203:
#line 1536 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.enum_type));
}
#line 4675 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 204:
#line 1540 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 4695 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 205:
#line 1556 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-3]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 4715 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 206:
#line 1575 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 4723 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 207:
#line 1579 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert((yyval.u.decl) != NULL);
}
#line 4732 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 208:
#line 1584 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 4740 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 209:
#line 1588 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 4748 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 210:
#line 1592 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.struct_type)));
}
#line 4756 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 211:
#line 1596 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.enum_type)));
}
#line 4764 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 212:
#line 1600 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 4784 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 213:
#line 1616 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-3]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 4804 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 214:
#line 1632 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  yywarning(string("C++ does not permit forward declaration of untyped enum ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));

  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 4826 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 215:
#line 1653 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 4834 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 216:
#line 1657 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert((yyval.u.type) != NULL);
}
#line 4843 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 217:
#line 1662 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 4851 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 218:
#line 1666 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 4871 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 219:
#line 1682 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 4891 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 220:
#line 1701 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.type) = inst->_type;
  delete inst;
}
#line 4901 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 221:
#line 1707 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.type) = inst->_type;
  delete inst;
}
#line 4912 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 222:
#line 1717 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPVisibility starting_vis =
  ((yyvsp[-1].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType((yyvsp[-1].u.extension_enum), NULL, current_scope,
                                        new_scope, (yylsp[-1]).file);
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 4930 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 223:
#line 1731 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 4941 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 224:
#line 1741 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPVisibility starting_vis =
  ((yyvsp[-1].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, (yyvsp[0].u.identifier)->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope,
                                        new_scope, (yylsp[-1]).file);
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 4965 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 225:
#line 1761 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 4976 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 230:
#line 1781 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, false);
}
#line 4984 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 231:
#line 1785 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, false);
}
#line 4992 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 232:
#line 1789 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, false);
}
#line 5000 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 233:
#line 1793 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 5008 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 234:
#line 1797 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 5016 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 235:
#line 1801 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 5024 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 236:
#line 1805 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 5032 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 237:
#line 1809 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 5040 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 238:
#line 1813 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 5048 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 239:
#line 1820 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.enum_type) = current_enum;
  current_enum = NULL;
}
#line 5057 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 240:
#line 1828 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_enum = new CPPEnumType((yyvsp[-2].u.identifier), (yyvsp[0].u.type), current_scope, (yylsp[-3]).file);
}
#line 5065 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 241:
#line 1832 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_enum = new CPPEnumType((yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file);
}
#line 5073 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 242:
#line 1836 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_enum = new CPPEnumType(NULL, (yyvsp[0].u.type), current_scope, (yylsp[-2]).file);
}
#line 5081 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 243:
#line 1840 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_enum = new CPPEnumType(NULL, current_scope, (yylsp[0]).file);
}
#line 5089 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 244:
#line 1847 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 5097 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 245:
#line 1851 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
}
#line 5105 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 247:
#line 1859 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[-1].u.identifier)->get_simple_name());
  current_scope->add_enum_value(inst, current_lexer, (yylsp[-1]));
}
#line 5115 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 248:
#line 1865 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[-3].u.identifier)->get_simple_name(), (yyvsp[-1].u.expr));
  current_scope->add_enum_value(inst, current_lexer, (yylsp[-3]));
}
#line 5125 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 250:
#line 1874 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[0].u.identifier)->get_simple_name());
  current_scope->add_enum_value(inst, current_lexer, (yylsp[0]));
}
#line 5135 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 251:
#line 1880 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[-2].u.identifier)->get_simple_name(), (yyvsp[0].u.expr));
  current_scope->add_enum_value(inst, current_lexer, (yylsp[-2]));
}
#line 5145 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 252:
#line 1889 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum;
}
#line 5153 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 253:
#line 1896 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_class;
}
#line 5161 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 254:
#line 1900 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_struct;
}
#line 5169 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 255:
#line 1904 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_union;
}
#line 5177 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 256:
#line 1911 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-2]).file);
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-2]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 5199 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 257:
#line 1929 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
}
#line 5207 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 259:
#line 1937 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[0].u.identifier), false, (yylsp[-1]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-1]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 5217 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 260:
#line 1943 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[0].u.identifier), true, (yylsp[-2]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-2]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 5227 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 264:
#line 1958 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_bool);
}
#line 5235 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 265:
#line 1962 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char);
}
#line 5243 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 266:
#line 1966 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_wchar_t);
}
#line 5251 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 267:
#line 1970 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char16_t);
}
#line 5259 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 268:
#line 1974 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char32_t);
}
#line 5267 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 269:
#line 1978 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
#line 5276 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 270:
#line 1983 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
#line 5285 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 271:
#line 1988 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_longlong);
}
#line 5294 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 272:
#line 1993 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
#line 5303 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 273:
#line 1998 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
#line 5312 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 274:
#line 2003 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int);
}
#line 5320 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 275:
#line 2007 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_short;
}
#line 5329 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 276:
#line 2012 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  if ((yyval.u.simple_type)->_flags & CPPSimpleType::F_long) {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_longlong;
  } else {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_long;
  }
}
#line 5342 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 277:
#line 2021 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_unsigned;
}
#line 5351 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 278:
#line 2026 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_signed;
}
#line 5360 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 279:
#line 2034 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float);
}
#line 5368 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 280:
#line 2038 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float,
                         CPPSimpleType::F_long);
}
#line 5377 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 281:
#line 2043 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double);
}
#line 5385 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 282:
#line 2047 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float,
                         CPPSimpleType::F_longlong);
}
#line 5394 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 283:
#line 2052 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
#line 5403 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 284:
#line 2060 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_void);
}
#line 5411 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 285:
#line 2069 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_lexer->_resolve_identifiers = false;
}
#line 5419 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 286:
#line 2073 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_lexer->_resolve_identifiers = true;
}
#line 5427 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 373:
#line 2111 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
}
#line 5434 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 397:
#line 2120 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5442 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 398:
#line 2124 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 5450 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 399:
#line 2131 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5458 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 400:
#line 2135 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 5466 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 401:
#line 2142 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 5474 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 402:
#line 2146 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(',', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5482 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 403:
#line 2153 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 5490 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 404:
#line 2157 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 5498 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 405:
#line 2161 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr)));
}
#line 5506 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 406:
#line 2165 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr)));
}
#line 5514 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 407:
#line 2169 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 5522 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 408:
#line 2173 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 5530 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 409:
#line 2177 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 5538 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 410:
#line 2181 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[0].u.expr)->_type == CPPExpression::T_integer) {
    (yyval.u.expr) = (yyvsp[0].u.expr);
    (yyval.u.expr)->_u._integer = -(yyval.u.expr)->_u._integer;
  } else if ((yyvsp[0].u.expr)->_type == CPPExpression::T_real) {
    (yyval.u.expr) = (yyvsp[0].u.expr);
    (yyval.u.expr)->_u._real = -(yyval.u.expr)->_u._real;
  } else {
    (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
  }
}
#line 5554 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 411:
#line 2193 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 5562 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 412:
#line 2197 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 5570 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 413:
#line 2201 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5578 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 414:
#line 2205 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5586 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 415:
#line 2209 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5594 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 416:
#line 2213 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5602 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 417:
#line 2217 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5610 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 418:
#line 2221 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5618 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 419:
#line 2225 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5626 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 420:
#line 2229 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5634 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 421:
#line 2233 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5642 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 422:
#line 2237 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5650 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 423:
#line 2241 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5658 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 424:
#line 2245 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5666 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 425:
#line 2249 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5674 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 426:
#line 2253 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5682 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 427:
#line 2257 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5690 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 428:
#line 2261 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5698 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 429:
#line 2265 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5706 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 430:
#line 2269 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 5714 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 431:
#line 2273 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 5722 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 432:
#line 2277 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 5730 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 433:
#line 2281 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5738 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 434:
#line 2285 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 5746 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 435:
#line 2289 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 5754 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 436:
#line 2297 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 5762 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 437:
#line 2301 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 5770 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 438:
#line 2305 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr)));
}
#line 5778 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 439:
#line 2309 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr)));
}
#line 5786 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 440:
#line 2313 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A constructor call.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert(type != NULL);
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 5797 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 441:
#line 2320 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 5807 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 442:
#line 2326 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 5817 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 443:
#line 2332 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_wchar_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 5827 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 444:
#line 2338 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char16_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 5837 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 445:
#line 2344 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char32_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 5847 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 446:
#line 2350 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 5857 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 447:
#line 2356 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 5868 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 448:
#line 2363 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 5879 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 449:
#line 2370 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 5890 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 450:
#line 2377 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 5901 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 451:
#line 2384 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 5911 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 452:
#line 2390 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 5921 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 453:
#line 2396 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 5929 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 454:
#line 2400 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 5937 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 455:
#line 2404 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 5945 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 456:
#line 2408 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 5953 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 457:
#line 2412 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 5961 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 458:
#line 2416 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[0].u.expr)->_type == CPPExpression::T_integer) {
    (yyval.u.expr) = (yyvsp[0].u.expr);
    (yyval.u.expr)->_u._integer = -(yyval.u.expr)->_u._integer;
  } else if ((yyvsp[0].u.expr)->_type == CPPExpression::T_real) {
    (yyval.u.expr) = (yyvsp[0].u.expr);
    (yyval.u.expr)->_u._real = -(yyval.u.expr)->_u._real;
  } else {
    (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
  }
}
#line 5977 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 459:
#line 2428 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 5985 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 460:
#line 2432 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 5993 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 461:
#line 2436 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6001 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 462:
#line 2440 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6009 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 463:
#line 2444 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6017 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 464:
#line 2448 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6025 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 465:
#line 2452 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6033 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 466:
#line 2456 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6041 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 467:
#line 2460 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6049 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 468:
#line 2464 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6057 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 469:
#line 2468 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6065 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 470:
#line 2472 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6073 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 471:
#line 2476 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6081 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 472:
#line 2480 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6089 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 473:
#line 2484 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6097 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 474:
#line 2488 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6105 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 475:
#line 2492 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6113 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 476:
#line 2496 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6121 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 477:
#line 2500 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6129 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 478:
#line 2504 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6137 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 479:
#line 2508 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6145 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 480:
#line 2512 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 6153 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 481:
#line 2516 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 6161 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 482:
#line 2520 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 6169 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 483:
#line 2524 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6177 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 484:
#line 2528 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6185 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 485:
#line 2532 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 6193 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 486:
#line 2539 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 6201 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 487:
#line 2543 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(true);
}
#line 6209 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 488:
#line 2547 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(false);
}
#line 6217 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 489:
#line 2551 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 6225 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 490:
#line 2555 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 6233 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 491:
#line 2559 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].str));
}
#line 6241 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 492:
#line 2563 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 6249 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 493:
#line 2577 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 6257 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 494:
#line 2581 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 6265 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 495:
#line 2585 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr)));
}
#line 6273 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 496:
#line 2589 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr)));
}
#line 6281 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 497:
#line 2593 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 6289 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 498:
#line 2597 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 6297 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 499:
#line 2601 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 6305 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 500:
#line 2605 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 6313 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 501:
#line 2609 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 6321 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 502:
#line 2613 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[0].u.expr)->_type == CPPExpression::T_integer) {
    (yyval.u.expr) = (yyvsp[0].u.expr);
    (yyval.u.expr)->_u._integer = -(yyval.u.expr)->_u._integer;
  } else if ((yyvsp[0].u.expr)->_type == CPPExpression::T_real) {
    (yyval.u.expr) = (yyvsp[0].u.expr);
    (yyval.u.expr)->_u._real = -(yyval.u.expr)->_u._real;
  } else {
    (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
  }
}
#line 6337 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 503:
#line 2625 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 6345 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 504:
#line 2629 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6353 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 505:
#line 2633 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6361 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 506:
#line 2637 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6369 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 507:
#line 2641 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6377 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 508:
#line 2645 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6385 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 509:
#line 2649 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6393 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 510:
#line 2653 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6401 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 511:
#line 2657 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6409 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 512:
#line 2661 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6417 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 513:
#line 2665 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6425 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 514:
#line 2669 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6433 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 515:
#line 2673 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6441 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 516:
#line 2677 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6449 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 517:
#line 2681 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6457 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 518:
#line 2685 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6465 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 519:
#line 2689 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6473 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 520:
#line 2693 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6481 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 521:
#line 2697 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6489 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 522:
#line 2701 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6497 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 523:
#line 2705 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 6505 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 524:
#line 2709 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 6513 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 525:
#line 2713 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 6521 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 526:
#line 2717 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6529 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 527:
#line 2721 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 6537 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 528:
#line 2725 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 6545 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 529:
#line 2732 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 6553 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 530:
#line 2736 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(true);
}
#line 6561 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 531:
#line 2740 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(false);
}
#line 6569 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 532:
#line 2744 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 6577 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 533:
#line 2748 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 6585 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 534:
#line 2752 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].str));
}
#line 6593 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 535:
#line 2759 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, true);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
  }
  (yyval.u.type) = type;
}
#line 6605 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 536:
#line 2767 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, true, current_lexer);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
  }
  (yyval.u.type) = type;
}
#line 6617 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 537:
#line 2775 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 6625 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 538:
#line 2798 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 6633 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 539:
#line 2802 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 6641 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 540:
#line 2809 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = (yyvsp[0].str);
}
#line 6649 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 541:
#line 2813 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = (yyvsp[-1].str) + (yyvsp[0].str);
}
#line 6657 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;


#line 6661 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
