/* A Bison parser, made by GNU Bison 2.7.  */

/* Bison implementation for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.7"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         cppyyparse
#define yylex           cppyylex
#define yyerror         cppyyerror
#define yylval          cppyylval
#define yychar          cppyychar
#define yydebug         cppyydebug
#define yynerrs         cppyynerrs
#define yylloc          cppyylloc

/* Copy the first part of user declarations.  */
/* Line 371 of yacc.c  */
#line 6 "dtool/src/cppparser/cppBison.yxx"


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppMakeProperty.h"
#include "cppMakeSeq.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedef.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = NULL;
CPPScope *global_scope = NULL;
CPPPreprocessor *current_lexer = NULL;

static CPPStructType *current_struct = NULL;
static CPPEnumType *current_enum = NULL;
static int current_storage_class = 0;
static CPPType *current_type = NULL;
static CPPExpression *current_expr = NULL;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static vector<CPPScope *> last_scopes;
static vector<int> last_storage_classes;
static vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc.first_line, loc.first_column);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc.first_line, loc.first_column);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;

}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = (CPPExpression *)NULL;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = (CPPType *)NULL;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != NULL) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}


/* Line 371 of yacc.c  */
#line 265 "built/tmp/cppBison.yxx.c"

# ifndef YY_NULL
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULL nullptr
#  else
#   define YY_NULL 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "cppBison.yxx.h".  */
#ifndef YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
# define YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int cppyydebug;
#endif

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     REAL = 258,
     INTEGER = 259,
     CHAR_TOK = 260,
     STRING = 261,
     SIMPLE_IDENTIFIER = 262,
     IDENTIFIER = 263,
     TYPENAME_IDENTIFIER = 264,
     SCOPING = 265,
     TYPEDEFNAME = 266,
     ELLIPSIS = 267,
     OROR = 268,
     ANDAND = 269,
     EQCOMPARE = 270,
     NECOMPARE = 271,
     LECOMPARE = 272,
     GECOMPARE = 273,
     LSHIFT = 274,
     RSHIFT = 275,
     POINTSAT_STAR = 276,
     DOT_STAR = 277,
     UNARY = 278,
     UNARY_NOT = 279,
     UNARY_NEGATE = 280,
     UNARY_MINUS = 281,
     UNARY_STAR = 282,
     UNARY_REF = 283,
     POINTSAT = 284,
     SCOPE = 285,
     PLUSPLUS = 286,
     MINUSMINUS = 287,
     TIMESEQUAL = 288,
     DIVIDEEQUAL = 289,
     MODEQUAL = 290,
     PLUSEQUAL = 291,
     MINUSEQUAL = 292,
     OREQUAL = 293,
     ANDEQUAL = 294,
     XOREQUAL = 295,
     LSHIFTEQUAL = 296,
     RSHIFTEQUAL = 297,
     KW_BEGIN_PUBLISH = 298,
     KW_BLOCKING = 299,
     KW_BOOL = 300,
     KW_CATCH = 301,
     KW_CHAR = 302,
     KW_WCHAR_T = 303,
     KW_CLASS = 304,
     KW_CONST = 305,
     KW_DELETE = 306,
     KW_DOUBLE = 307,
     KW_DYNAMIC_CAST = 308,
     KW_ELSE = 309,
     KW_END_PUBLISH = 310,
     KW_ENUM = 311,
     KW_EXTENSION = 312,
     KW_EXTERN = 313,
     KW_EXPLICIT = 314,
     KW_PUBLISHED = 315,
     KW_FALSE = 316,
     KW_FLOAT = 317,
     KW_FRIEND = 318,
     KW_FOR = 319,
     KW_GOTO = 320,
     KW_IF = 321,
     KW_INLINE = 322,
     KW_INT = 323,
     KW_LONG = 324,
     KW_LONGLONG = 325,
     KW_MAKE_PROPERTY = 326,
     KW_MAKE_SEQ = 327,
     KW_MUTABLE = 328,
     KW_NAMESPACE = 329,
     KW_NEW = 330,
     KW_NOEXCEPT = 331,
     KW_OPERATOR = 332,
     KW_PRIVATE = 333,
     KW_PROTECTED = 334,
     KW_PUBLIC = 335,
     KW_REGISTER = 336,
     KW_RETURN = 337,
     KW_SHORT = 338,
     KW_SIGNED = 339,
     KW_SIZEOF = 340,
     KW_STATIC = 341,
     KW_STATIC_CAST = 342,
     KW_STRUCT = 343,
     KW_TEMPLATE = 344,
     KW_THROW = 345,
     KW_TRUE = 346,
     KW_TRY = 347,
     KW_TYPEDEF = 348,
     KW_TYPENAME = 349,
     KW_UNION = 350,
     KW_UNSIGNED = 351,
     KW_USING = 352,
     KW_VIRTUAL = 353,
     KW_VOID = 354,
     KW_VOLATILE = 355,
     KW_WHILE = 356,
     START_CPP = 357,
     START_CONST_EXPR = 358,
     START_TYPE = 359
   };
#endif
/* Tokens.  */
#define REAL 258
#define INTEGER 259
#define CHAR_TOK 260
#define STRING 261
#define SIMPLE_IDENTIFIER 262
#define IDENTIFIER 263
#define TYPENAME_IDENTIFIER 264
#define SCOPING 265
#define TYPEDEFNAME 266
#define ELLIPSIS 267
#define OROR 268
#define ANDAND 269
#define EQCOMPARE 270
#define NECOMPARE 271
#define LECOMPARE 272
#define GECOMPARE 273
#define LSHIFT 274
#define RSHIFT 275
#define POINTSAT_STAR 276
#define DOT_STAR 277
#define UNARY 278
#define UNARY_NOT 279
#define UNARY_NEGATE 280
#define UNARY_MINUS 281
#define UNARY_STAR 282
#define UNARY_REF 283
#define POINTSAT 284
#define SCOPE 285
#define PLUSPLUS 286
#define MINUSMINUS 287
#define TIMESEQUAL 288
#define DIVIDEEQUAL 289
#define MODEQUAL 290
#define PLUSEQUAL 291
#define MINUSEQUAL 292
#define OREQUAL 293
#define ANDEQUAL 294
#define XOREQUAL 295
#define LSHIFTEQUAL 296
#define RSHIFTEQUAL 297
#define KW_BEGIN_PUBLISH 298
#define KW_BLOCKING 299
#define KW_BOOL 300
#define KW_CATCH 301
#define KW_CHAR 302
#define KW_WCHAR_T 303
#define KW_CLASS 304
#define KW_CONST 305
#define KW_DELETE 306
#define KW_DOUBLE 307
#define KW_DYNAMIC_CAST 308
#define KW_ELSE 309
#define KW_END_PUBLISH 310
#define KW_ENUM 311
#define KW_EXTENSION 312
#define KW_EXTERN 313
#define KW_EXPLICIT 314
#define KW_PUBLISHED 315
#define KW_FALSE 316
#define KW_FLOAT 317
#define KW_FRIEND 318
#define KW_FOR 319
#define KW_GOTO 320
#define KW_IF 321
#define KW_INLINE 322
#define KW_INT 323
#define KW_LONG 324
#define KW_LONGLONG 325
#define KW_MAKE_PROPERTY 326
#define KW_MAKE_SEQ 327
#define KW_MUTABLE 328
#define KW_NAMESPACE 329
#define KW_NEW 330
#define KW_NOEXCEPT 331
#define KW_OPERATOR 332
#define KW_PRIVATE 333
#define KW_PROTECTED 334
#define KW_PUBLIC 335
#define KW_REGISTER 336
#define KW_RETURN 337
#define KW_SHORT 338
#define KW_SIGNED 339
#define KW_SIZEOF 340
#define KW_STATIC 341
#define KW_STATIC_CAST 342
#define KW_STRUCT 343
#define KW_TEMPLATE 344
#define KW_THROW 345
#define KW_TRUE 346
#define KW_TRY 347
#define KW_TYPEDEF 348
#define KW_TYPENAME 349
#define KW_UNION 350
#define KW_UNSIGNED 351
#define KW_USING 352
#define KW_VIRTUAL 353
#define KW_VOID 354
#define KW_VOLATILE 355
#define KW_WHILE 356
#define START_CPP 357
#define START_CONST_EXPR 358
#define START_TYPE 359



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED

# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int cppyyparse (void *YYPARSE_PARAM);
#else
int cppyyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int cppyyparse (void);
#else
int cppyyparse ();
#endif
#endif /* ! YYPARSE_PARAM */

#endif /* !YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED  */

/* Copy the second part of user declarations.  */

/* Line 390 of yacc.c  */
#line 550 "built/tmp/cppBison.yxx.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(N) (N)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  69
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   3615

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  129
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  94
/* YYNRULES -- Number of rules.  */
#define YYNRULES  540
/* YYNRULES -- Number of states.  */
#define YYNSTATES  977

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   359

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   127,     2,     2,     2,   120,   113,     2,
     123,   125,   118,   116,   106,   117,   122,   119,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   108,   107,
     114,   109,   115,   110,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   124,     2,   128,   112,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   105,   111,   126,   121,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    14,    17,    20,    22,
      26,    31,    32,    38,    40,    42,    44,    46,    48,    50,
      53,    55,    57,    60,    63,    66,    69,    77,    87,    97,
      98,   102,   104,   107,   111,   114,   117,   120,   123,   126,
     129,   132,   135,   138,   140,   144,   148,   149,   154,   155,
     161,   164,   169,   172,   177,   178,   183,   184,   190,   194,
     197,   202,   205,   210,   211,   218,   219,   226,   227,   235,
     236,   247,   248,   260,   261,   270,   271,   281,   283,   285,
     287,   290,   295,   301,   303,   305,   307,   309,   311,   313,
     315,   317,   319,   321,   323,   325,   327,   329,   331,   333,
     335,   337,   339,   341,   343,   345,   347,   349,   351,   353,
     355,   357,   359,   361,   363,   365,   367,   369,   371,   374,
     377,   379,   381,   383,   385,   386,   393,   395,   397,   399,
     403,   406,   411,   414,   419,   423,   428,   430,   432,   434,
     436,   439,   442,   445,   448,   451,   455,   460,   464,   468,
     469,   476,   478,   480,   482,   486,   489,   491,   495,   497,
     500,   502,   505,   507,   511,   517,   521,   526,   528,   530,
     533,   535,   539,   543,   549,   553,   557,   562,   564,   566,
     568,   570,   573,   576,   579,   582,   586,   591,   593,   595,
     597,   600,   603,   606,   609,   613,   618,   626,   630,   632,
     635,   638,   641,   644,   648,   653,   661,   663,   665,   668,
     670,   672,   674,   676,   679,   682,   684,   686,   689,   691,
     693,   695,   697,   700,   703,   705,   707,   710,   713,   716,
     719,   723,   724,   730,   731,   739,   741,   743,   746,   750,
     753,   756,   759,   763,   767,   771,   775,   779,   783,   784,
     790,   791,   798,   800,   804,   810,   812,   815,   820,   822,
     824,   826,   828,   829,   836,   841,   844,   848,   850,   852,
     854,   856,   858,   860,   862,   864,   866,   868,   870,   872,
     875,   878,   881,   884,   886,   889,   891,   895,   898,   900,
     901,   904,   906,   909,   911,   913,   915,   917,   919,   921,
     923,   925,   927,   929,   931,   933,   935,   937,   939,   941,
     943,   945,   947,   949,   951,   953,   955,   957,   959,   961,
     963,   965,   967,   969,   971,   973,   975,   977,   979,   981,
     983,   985,   987,   989,   991,   993,   995,   997,   999,  1001,
    1003,  1005,  1007,  1009,  1011,  1013,  1015,  1017,  1019,  1021,
    1023,  1025,  1027,  1029,  1031,  1033,  1035,  1037,  1039,  1041,
    1043,  1045,  1047,  1049,  1051,  1053,  1055,  1057,  1059,  1061,
    1063,  1065,  1067,  1069,  1071,  1073,  1075,  1077,  1079,  1081,
    1083,  1085,  1087,  1089,  1091,  1093,  1095,  1097,  1099,  1101,
    1103,  1105,  1107,  1109,  1111,  1113,  1115,  1119,  1121,  1123,
    1125,  1127,  1129,  1133,  1135,  1140,  1148,  1156,  1161,  1164,
    1167,  1170,  1173,  1176,  1180,  1184,  1188,  1192,  1196,  1200,
    1204,  1208,  1212,  1216,  1220,  1224,  1228,  1232,  1236,  1240,
    1246,  1251,  1256,  1260,  1264,  1268,  1272,  1274,  1279,  1287,
    1295,  1300,  1305,  1310,  1315,  1320,  1325,  1330,  1335,  1340,
    1345,  1350,  1355,  1358,  1364,  1367,  1370,  1373,  1376,  1379,
    1383,  1387,  1391,  1395,  1399,  1403,  1407,  1411,  1415,  1419,
    1423,  1427,  1431,  1435,  1439,  1443,  1447,  1451,  1457,  1462,
    1467,  1471,  1475,  1479,  1483,  1485,  1487,  1489,  1491,  1493,
    1495,  1497,  1499,  1504,  1512,  1520,  1525,  1528,  1534,  1537,
    1540,  1543,  1546,  1550,  1554,  1558,  1562,  1566,  1570,  1574,
    1578,  1582,  1586,  1590,  1594,  1598,  1602,  1606,  1610,  1614,
    1618,  1624,  1629,  1634,  1638,  1642,  1646,  1650,  1652,  1654,
    1656,  1658,  1660,  1662,  1664,  1667,  1670,  1672,  1674,  1676,
    1679
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     130,     0,    -1,   102,   131,    -1,   103,   215,    -1,   104,
     184,    -1,   222,    -1,   131,   107,    -1,   131,   136,    -1,
     133,    -1,   132,   106,   133,    -1,   220,   123,   212,   125,
      -1,    -1,   139,   105,   135,   131,   126,    -1,   140,    -1,
     162,    -1,   134,    -1,   200,    -1,   202,    -1,   137,    -1,
      93,   146,    -1,    43,    -1,    55,    -1,    60,   108,    -1,
      80,   108,    -1,    79,   108,    -1,    78,   108,    -1,    71,
     123,     8,   106,     8,   125,   107,    -1,    71,   123,     8,
     106,     8,   106,     8,   125,   107,    -1,    72,   123,   220,
     106,   220,   106,   220,   125,   107,    -1,    -1,    63,   138,
     136,    -1,   222,    -1,   139,    58,    -1,   139,    58,   221,
      -1,   139,    86,    -1,   139,    67,    -1,   139,    98,    -1,
     139,    59,    -1,   139,   100,    -1,   139,    73,    -1,   139,
      81,    -1,   139,    44,    -1,   139,    57,    -1,   141,    -1,
     139,   182,   107,    -1,   139,   151,   174,    -1,    -1,   139,
     182,   142,   144,    -1,    -1,   139,    50,   181,   143,   145,
      -1,   168,   174,    -1,   168,   173,   106,   144,    -1,   168,
     174,    -1,   168,   173,   106,   145,    -1,    -1,   139,   182,
     147,   149,    -1,    -1,   139,    50,   181,   148,   150,    -1,
     139,   151,   174,    -1,   168,   174,    -1,   168,   173,   106,
     149,    -1,   168,   174,    -1,   168,   173,   106,   150,    -1,
      -1,     8,   123,   152,   170,   125,   159,    -1,    -1,     9,
     123,   153,   170,   125,   159,    -1,    -1,   121,   220,   123,
     154,   170,   125,   159,    -1,    -1,     9,   123,   118,   168,
     125,   123,   155,   170,   125,   159,    -1,    -1,     9,   123,
      10,   118,   168,   125,   123,   156,   170,   125,   159,    -1,
      -1,    77,   181,   178,   123,   157,   170,   125,   159,    -1,
      -1,    77,    50,   181,   178,   123,   158,   170,   125,   159,
      -1,     8,    -1,   222,    -1,    50,    -1,   159,    76,    -1,
     159,    90,   123,   125,    -1,   159,    90,   123,   220,   125,
      -1,   127,    -1,   121,    -1,   118,    -1,   119,    -1,   120,
      -1,   116,    -1,   117,    -1,   111,    -1,   113,    -1,   112,
      -1,    13,    -1,    14,    -1,    15,    -1,    16,    -1,    17,
      -1,    18,    -1,   114,    -1,   115,    -1,    19,    -1,    20,
      -1,   109,    -1,   106,    -1,    31,    -1,    32,    -1,    33,
      -1,    34,    -1,    35,    -1,    36,    -1,    37,    -1,    38,
      -1,    39,    -1,    40,    -1,    41,    -1,    42,    -1,    29,
      -1,   124,   128,    -1,   123,   125,    -1,    75,    -1,    51,
      -1,   140,    -1,   162,    -1,    -1,    89,   163,   114,   164,
     115,   161,    -1,   222,    -1,   165,    -1,   166,    -1,   165,
     106,   166,    -1,    49,   220,    -1,    49,   220,   109,   184,
      -1,    94,   220,    -1,    94,   220,   109,   184,    -1,   167,
     179,   172,    -1,    50,   167,   179,   172,    -1,   203,    -1,
       8,    -1,     9,    -1,   220,    -1,    77,   160,    -1,    50,
     168,    -1,   118,   168,    -1,   113,   168,    -1,    14,   168,
      -1,    10,   118,   168,    -1,   168,   124,   211,   128,    -1,
     168,   108,     4,    -1,   123,   168,   125,    -1,    -1,   168,
     123,   169,   170,   125,   159,    -1,   222,    -1,    12,    -1,
     171,    -1,   171,   106,    12,    -1,   171,    12,    -1,   177,
      -1,   171,   106,   177,    -1,   222,    -1,   109,   214,    -1,
     222,    -1,   109,   215,    -1,   107,    -1,   105,   207,   126,
      -1,   108,   132,   105,   207,   126,    -1,   109,   215,   107,
      -1,   109,   105,   175,   126,    -1,   222,    -1,   176,    -1,
     176,   106,    -1,   215,    -1,   105,   175,   126,    -1,   176,
     106,   215,    -1,   176,   106,   105,   175,   126,    -1,   181,
     179,   173,    -1,     8,   179,   173,    -1,    50,   181,   179,
     173,    -1,   217,    -1,   222,    -1,     8,    -1,     9,    -1,
      50,   178,    -1,   118,   178,    -1,   113,   178,    -1,    14,
     178,    -1,    10,   118,   178,    -1,   178,   124,   211,   128,
      -1,   222,    -1,     8,    -1,     9,    -1,    50,   179,    -1,
     118,   179,    -1,   113,   179,    -1,    14,   179,    -1,    10,
     118,   179,    -1,   179,   124,   211,   128,    -1,   123,   179,
     125,   123,   170,   125,   159,    -1,   123,   179,   125,    -1,
     222,    -1,    50,   180,    -1,   118,   180,    -1,   113,   180,
      -1,    14,   180,    -1,    10,   118,   180,    -1,   180,   124,
     211,   128,    -1,   123,   180,   125,   123,   170,   125,   159,
      -1,   203,    -1,     9,    -1,    94,   220,    -1,   185,    -1,
     187,    -1,   192,    -1,   194,    -1,   199,   220,    -1,   198,
     220,    -1,   203,    -1,     9,    -1,    94,   220,    -1,   185,
      -1,   187,    -1,   192,    -1,   194,    -1,   199,   220,    -1,
     198,   220,    -1,   203,    -1,     9,    -1,    94,   220,    -1,
     199,   220,    -1,   198,   220,    -1,   181,   180,    -1,    50,
     181,   180,    -1,    -1,   199,   105,   186,   131,   126,    -1,
      -1,   199,   220,   188,   189,   105,   131,   126,    -1,   222,
      -1,   190,    -1,   108,   191,    -1,   190,   106,   191,    -1,
      80,   219,    -1,    79,   219,    -1,    78,   219,    -1,    98,
      80,   219,    -1,    98,    79,   219,    -1,    98,    78,   219,
      -1,    80,    98,   219,    -1,    79,    98,   219,    -1,    78,
      98,   219,    -1,    -1,   198,   105,   193,   197,   126,    -1,
      -1,   198,   220,   105,   195,   197,   126,    -1,   222,    -1,
     196,   220,   106,    -1,   196,   220,   109,   215,   106,    -1,
     196,    -1,   196,   220,    -1,   196,   220,   109,   215,    -1,
      56,    -1,    49,    -1,    88,    -1,    95,    -1,    -1,    74,
     220,   105,   201,   131,   126,    -1,    74,   105,   131,   126,
      -1,    97,   220,    -1,    97,    74,   220,    -1,   204,    -1,
     205,    -1,   206,    -1,    45,    -1,    47,    -1,    48,    -1,
      83,    -1,    69,    -1,    70,    -1,    96,    -1,    84,    -1,
      68,    -1,    83,   204,    -1,    69,   204,    -1,    96,   204,
      -1,    84,   204,    -1,    62,    -1,    69,    62,    -1,    52,
      -1,    69,    69,    62,    -1,    69,    52,    -1,    99,    -1,
      -1,   208,   209,    -1,   222,    -1,   209,   210,    -1,     3,
      -1,     4,    -1,     6,    -1,     5,    -1,     8,    -1,     9,
      -1,    10,    -1,     7,    -1,    12,    -1,    13,    -1,    14,
      -1,    15,    -1,    16,    -1,    17,    -1,    18,    -1,    19,
      -1,    20,    -1,    21,    -1,    22,    -1,    29,    -1,    30,
      -1,    31,    -1,    32,    -1,    33,    -1,    34,    -1,    35,
      -1,    36,    -1,    37,    -1,    38,    -1,    39,    -1,    40,
      -1,    41,    -1,    42,    -1,    45,    -1,    46,    -1,    47,
      -1,    48,    -1,    49,    -1,    50,    -1,    51,    -1,    52,
      -1,    53,    -1,    54,    -1,    56,    -1,    58,    -1,    59,
      -1,    61,    -1,    62,    -1,    63,    -1,    64,    -1,    65,
      -1,    66,    -1,    67,    -1,    68,    -1,    69,    -1,    73,
      -1,    75,    -1,    78,    -1,    79,    -1,    80,    -1,    60,
      -1,    81,    -1,    82,    -1,    83,    -1,    84,    -1,    85,
      -1,    86,    -1,    87,    -1,    88,    -1,    90,    -1,    91,
      -1,    92,    -1,    93,    -1,    94,    -1,    95,    -1,    96,
      -1,    98,    -1,    99,    -1,   100,    -1,   101,    -1,    77,
      -1,   116,    -1,   117,    -1,   118,    -1,   119,    -1,   113,
      -1,   111,    -1,   112,    -1,   127,    -1,   121,    -1,   109,
      -1,   120,    -1,   114,    -1,   115,    -1,   123,    -1,   125,
      -1,   122,    -1,   106,    -1,   107,    -1,   108,    -1,   124,
      -1,   128,    -1,   110,    -1,   105,   209,   126,    -1,   222,
      -1,   215,    -1,   222,    -1,   213,    -1,   215,    -1,   213,
     106,   215,    -1,   216,    -1,   123,   184,   125,   214,    -1,
      87,   114,   184,   115,   123,   213,   125,    -1,    53,   114,
     184,   115,   123,   213,   125,    -1,    85,   123,   184,   125,
      -1,   127,   214,    -1,   121,   214,    -1,   117,   214,    -1,
     118,   214,    -1,   113,   214,    -1,   214,   118,   214,    -1,
     214,   119,   214,    -1,   214,   120,   214,    -1,   214,   116,
     214,    -1,   214,   117,   214,    -1,   214,   111,   214,    -1,
     214,   112,   214,    -1,   214,   113,   214,    -1,   214,    13,
     214,    -1,   214,    14,   214,    -1,   214,    15,   214,    -1,
     214,    16,   214,    -1,   214,    17,   214,    -1,   214,    18,
     214,    -1,   214,    19,   214,    -1,   214,    20,   214,    -1,
     214,   110,   214,   108,   214,    -1,   214,   124,   215,   128,
      -1,   214,   123,   213,   125,    -1,   214,   123,   125,    -1,
     214,   122,   214,    -1,   214,    29,   214,    -1,   123,   213,
     125,    -1,   216,    -1,   123,   184,   125,   215,    -1,    87,
     114,   184,   115,   123,   213,   125,    -1,    53,   114,   184,
     115,   123,   213,   125,    -1,     9,   123,   212,   125,    -1,
      68,   123,   212,   125,    -1,    47,   123,   212,   125,    -1,
      48,   123,   212,   125,    -1,    45,   123,   212,   125,    -1,
      83,   123,   212,   125,    -1,    69,   123,   212,   125,    -1,
      96,   123,   212,   125,    -1,    84,   123,   212,   125,    -1,
      62,   123,   212,   125,    -1,    52,   123,   212,   125,    -1,
      85,   123,   184,   125,    -1,    75,   183,    -1,    75,   183,
     123,   212,   125,    -1,   127,   215,    -1,   121,   215,    -1,
     117,   215,    -1,   118,   215,    -1,   113,   215,    -1,   215,
     118,   215,    -1,   215,   119,   215,    -1,   215,   120,   215,
      -1,   215,   116,   215,    -1,   215,   117,   215,    -1,   215,
     111,   215,    -1,   215,   112,   215,    -1,   215,   113,   215,
      -1,   215,    13,   215,    -1,   215,    14,   215,    -1,   215,
      15,   215,    -1,   215,    16,   215,    -1,   215,    17,   215,
      -1,   215,    18,   215,    -1,   215,   114,   215,    -1,   215,
     115,   215,    -1,   215,    19,   215,    -1,   215,    20,   215,
      -1,   215,   110,   215,   108,   215,    -1,   215,   124,   215,
     128,    -1,   215,   123,   213,   125,    -1,   215,   123,   125,
      -1,   215,   122,   215,    -1,   215,    29,   215,    -1,   123,
     213,   125,    -1,     4,    -1,    91,    -1,    61,    -1,     5,
      -1,     3,    -1,   221,    -1,     8,    -1,   218,    -1,   123,
     184,   125,   215,    -1,    87,   114,   184,   115,   123,   213,
     125,    -1,    53,   114,   184,   115,   123,   213,   125,    -1,
      85,   123,   184,   125,    -1,    75,   183,    -1,    75,   183,
     123,   212,   125,    -1,   127,   215,    -1,   121,   215,    -1,
     117,   215,    -1,   113,   215,    -1,   217,   118,   215,    -1,
     217,   119,   215,    -1,   217,   120,   215,    -1,   217,   116,
     215,    -1,   217,   117,   215,    -1,   217,   111,   215,    -1,
     217,   112,   215,    -1,   217,   113,   215,    -1,   217,    13,
     215,    -1,   217,    14,   215,    -1,   217,    15,   215,    -1,
     217,    16,   215,    -1,   217,    17,   215,    -1,   217,    18,
     215,    -1,   217,   114,   215,    -1,   217,   115,   215,    -1,
     217,    19,   215,    -1,   217,    20,   215,    -1,   217,   110,
     215,   108,   215,    -1,   217,   124,   215,   128,    -1,   217,
     123,   213,   125,    -1,   217,   123,   125,    -1,   217,   122,
     215,    -1,   217,    29,   215,    -1,   123,   213,   125,    -1,
       4,    -1,    91,    -1,    61,    -1,     5,    -1,     3,    -1,
     221,    -1,   220,    -1,   199,   220,    -1,    94,   220,    -1,
       8,    -1,     9,    -1,     6,    -1,   221,     6,    -1,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   384,   384,   385,   389,   396,   397,   398,   402,   403,
     407,   420,   419,   431,   432,   433,   434,   435,   436,   437,
     438,   451,   460,   464,   472,   476,   480,   491,   508,   517,
     516,   531,   535,   539,   550,   554,   558,   562,   566,   570,
     574,   578,   582,   589,   593,   602,   614,   613,   629,   628,
     646,   654,   665,   674,   688,   687,   703,   702,   713,   727,
     735,   746,   755,   770,   769,   792,   791,   816,   815,   846,
     845,   861,   860,   878,   877,   909,   908,   934,   947,   951,
     955,   959,   963,   970,   974,   978,   982,   986,   990,   994,
     998,  1002,  1006,  1010,  1014,  1018,  1022,  1026,  1030,  1034,
    1038,  1042,  1046,  1050,  1054,  1058,  1062,  1066,  1070,  1074,
    1078,  1082,  1086,  1090,  1094,  1098,  1102,  1106,  1110,  1114,
    1118,  1122,  1129,  1130,  1135,  1134,  1145,  1146,  1150,  1156,
    1165,  1169,  1173,  1177,  1181,  1187,  1197,  1201,  1206,  1215,
    1219,  1233,  1238,  1243,  1248,  1253,  1258,  1263,  1268,  1274,
    1273,  1295,  1299,  1304,  1308,  1313,  1321,  1326,  1334,  1338,
    1345,  1349,  1356,  1360,  1364,  1368,  1372,  1379,  1380,  1381,
    1385,  1388,  1389,  1390,  1394,  1399,  1407,  1413,  1423,  1427,
    1431,  1435,  1440,  1445,  1450,  1455,  1460,  1468,  1472,  1476,
    1480,  1485,  1490,  1495,  1500,  1505,  1510,  1516,  1524,  1528,
    1533,  1538,  1543,  1548,  1553,  1558,  1567,  1571,  1576,  1580,
    1584,  1588,  1592,  1596,  1612,  1631,  1635,  1640,  1644,  1648,
    1652,  1656,  1660,  1676,  1695,  1699,  1704,  1708,  1724,  1743,
    1749,  1760,  1759,  1784,  1783,  1813,  1814,  1818,  1819,  1823,
    1827,  1831,  1835,  1839,  1843,  1847,  1851,  1855,  1863,  1862,
    1875,  1874,  1886,  1887,  1893,  1901,  1902,  1908,  1917,  1924,
    1928,  1932,  1940,  1939,  1961,  1965,  1971,  1980,  1981,  1982,
    1986,  1990,  1994,  1998,  2003,  2008,  2013,  2018,  2023,  2027,
    2032,  2041,  2046,  2054,  2058,  2063,  2067,  2072,  2080,  2090,
    2090,  2100,  2101,  2105,  2108,  2111,  2114,  2117,  2120,  2123,
    2126,  2129,  2129,  2129,  2130,  2130,  2130,  2130,  2131,  2131,
    2131,  2131,  2131,  2132,  2132,  2132,  2133,  2133,  2133,  2133,
    2133,  2134,  2134,  2134,  2134,  2134,  2135,  2135,  2135,  2135,
    2135,  2135,  2136,  2136,  2136,  2136,  2136,  2137,  2137,  2137,
    2138,  2138,  2138,  2138,  2139,  2139,  2139,  2140,  2140,  2140,
    2140,  2140,  2141,  2141,  2141,  2141,  2142,  2142,  2142,  2142,
    2142,  2143,  2143,  2143,  2143,  2143,  2143,  2144,  2144,  2144,
    2144,  2144,  2145,  2146,  2149,  2149,  2149,  2149,  2149,  2149,
    2149,  2149,  2149,  2149,  2149,  2150,  2150,  2150,  2150,  2150,
    2150,  2150,  2150,  2150,  2150,  2151,  2151,  2155,  2159,  2166,
    2170,  2177,  2181,  2188,  2192,  2196,  2200,  2204,  2208,  2212,
    2216,  2228,  2232,  2236,  2240,  2244,  2248,  2252,  2256,  2260,
    2264,  2268,  2272,  2276,  2280,  2284,  2288,  2292,  2296,  2300,
    2304,  2308,  2312,  2316,  2320,  2324,  2332,  2336,  2340,  2344,
    2348,  2355,  2361,  2367,  2373,  2379,  2386,  2393,  2400,  2407,
    2413,  2419,  2423,  2427,  2431,  2435,  2439,  2451,  2455,  2459,
    2463,  2467,  2471,  2475,  2479,  2483,  2487,  2491,  2495,  2499,
    2503,  2507,  2511,  2515,  2519,  2523,  2527,  2531,  2535,  2539,
    2543,  2547,  2551,  2555,  2562,  2566,  2570,  2574,  2578,  2582,
    2586,  2600,  2604,  2608,  2612,  2616,  2620,  2624,  2628,  2632,
    2636,  2648,  2652,  2656,  2660,  2664,  2668,  2672,  2676,  2680,
    2684,  2688,  2692,  2696,  2700,  2704,  2708,  2712,  2716,  2720,
    2724,  2728,  2732,  2736,  2740,  2744,  2748,  2755,  2759,  2763,
    2767,  2771,  2775,  2782,  2790,  2798,  2821,  2825,  2832,  2836,
    2842
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "REAL", "INTEGER", "CHAR_TOK", "STRING",
  "SIMPLE_IDENTIFIER", "IDENTIFIER", "TYPENAME_IDENTIFIER", "SCOPING",
  "TYPEDEFNAME", "ELLIPSIS", "OROR", "ANDAND", "EQCOMPARE", "NECOMPARE",
  "LECOMPARE", "GECOMPARE", "LSHIFT", "RSHIFT", "POINTSAT_STAR",
  "DOT_STAR", "UNARY", "UNARY_NOT", "UNARY_NEGATE", "UNARY_MINUS",
  "UNARY_STAR", "UNARY_REF", "POINTSAT", "SCOPE", "PLUSPLUS", "MINUSMINUS",
  "TIMESEQUAL", "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL", "MINUSEQUAL",
  "OREQUAL", "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL", "RSHIFTEQUAL",
  "KW_BEGIN_PUBLISH", "KW_BLOCKING", "KW_BOOL", "KW_CATCH", "KW_CHAR",
  "KW_WCHAR_T", "KW_CLASS", "KW_CONST", "KW_DELETE", "KW_DOUBLE",
  "KW_DYNAMIC_CAST", "KW_ELSE", "KW_END_PUBLISH", "KW_ENUM",
  "KW_EXTENSION", "KW_EXTERN", "KW_EXPLICIT", "KW_PUBLISHED", "KW_FALSE",
  "KW_FLOAT", "KW_FRIEND", "KW_FOR", "KW_GOTO", "KW_IF", "KW_INLINE",
  "KW_INT", "KW_LONG", "KW_LONGLONG", "KW_MAKE_PROPERTY", "KW_MAKE_SEQ",
  "KW_MUTABLE", "KW_NAMESPACE", "KW_NEW", "KW_NOEXCEPT", "KW_OPERATOR",
  "KW_PRIVATE", "KW_PROTECTED", "KW_PUBLIC", "KW_REGISTER", "KW_RETURN",
  "KW_SHORT", "KW_SIGNED", "KW_SIZEOF", "KW_STATIC", "KW_STATIC_CAST",
  "KW_STRUCT", "KW_TEMPLATE", "KW_THROW", "KW_TRUE", "KW_TRY",
  "KW_TYPEDEF", "KW_TYPENAME", "KW_UNION", "KW_UNSIGNED", "KW_USING",
  "KW_VIRTUAL", "KW_VOID", "KW_VOLATILE", "KW_WHILE", "START_CPP",
  "START_CONST_EXPR", "START_TYPE", "'{'", "','", "';'", "':'", "'='",
  "'?'", "'|'", "'^'", "'&'", "'<'", "'>'", "'+'", "'-'", "'*'", "'/'",
  "'%'", "'~'", "'.'", "'('", "'['", "')'", "'}'", "'!'", "']'", "$accept",
  "grammar", "cpp", "constructor_inits", "constructor_init", "extern_c",
  "$@1", "declaration", "friend_declaration", "$@2", "storage_class",
  "type_like_declaration", "multiple_var_declaration", "$@3", "$@4",
  "multiple_instance_identifiers", "multiple_const_instance_identifiers",
  "typedef_declaration", "$@5", "$@6", "typedef_instance_identifiers",
  "typedef_const_instance_identifiers", "function_prototype", "$@7", "$@8",
  "$@9", "$@10", "$@11", "$@12", "$@13", "function_post",
  "function_operator", "more_template_declaration", "template_declaration",
  "$@14", "template_formal_parameters",
  "template_nonempty_formal_parameters", "template_formal_parameter",
  "template_formal_parameter_type", "instance_identifier", "$@15",
  "formal_parameter_list", "formal_parameters",
  "template_parameter_maybe_initialize", "maybe_initialize",
  "maybe_initialize_or_function_body", "structure_init",
  "structure_init_body", "formal_parameter",
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier",
  "empty_instance_identifier", "type", "type_decl", "predefined_type",
  "full_type", "anonymous_struct", "$@16", "named_struct", "$@17",
  "maybe_class_derivation", "class_derivation", "base_specification",
  "anonymous_enum", "$@18", "named_enum", "$@19",
  "enum_body_trailing_comma", "enum_body", "enum_keyword",
  "struct_keyword", "namespace_declaration", "$@20", "using_declaration",
  "simple_type", "simple_int_type", "simple_float_type",
  "simple_void_type", "code", "$@21", "code_block", "element",
  "optional_const_expr", "optional_const_expr_comma", "const_expr_comma",
  "no_angle_bracket_const_expr", "const_expr", "const_operand",
  "formal_const_expr", "formal_const_operand", "class_derivation_name",
  "name", "string", "empty", YY_NULL
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   123,    44,    59,    58,    61,
      63,   124,    94,    38,    60,    62,    43,    45,    42,    47,
      37,   126,    46,    40,    91,    41,   125,    33,    93
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,   129,   130,   130,   130,   131,   131,   131,   132,   132,
     133,   135,   134,   136,   136,   136,   136,   136,   136,   136,
     136,   136,   136,   136,   136,   136,   136,   136,   136,   138,
     137,   139,   139,   139,   139,   139,   139,   139,   139,   139,
     139,   139,   139,   140,   140,   140,   142,   141,   143,   141,
     144,   144,   145,   145,   147,   146,   148,   146,   146,   149,
     149,   150,   150,   152,   151,   153,   151,   154,   151,   155,
     151,   156,   151,   157,   151,   158,   151,   151,   159,   159,
     159,   159,   159,   160,   160,   160,   160,   160,   160,   160,
     160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
     160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
     160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
     160,   160,   161,   161,   163,   162,   164,   164,   165,   165,
     166,   166,   166,   166,   166,   166,   167,   167,   167,   168,
     168,   168,   168,   168,   168,   168,   168,   168,   168,   169,
     168,   170,   170,   170,   170,   170,   171,   171,   172,   172,
     173,   173,   174,   174,   174,   174,   174,   175,   175,   175,
     176,   176,   176,   176,   177,   177,   177,   177,   178,   178,
     178,   178,   178,   178,   178,   178,   178,   179,   179,   179,
     179,   179,   179,   179,   179,   179,   179,   179,   180,   180,
     180,   180,   180,   180,   180,   180,   181,   181,   181,   181,
     181,   181,   181,   181,   181,   182,   182,   182,   182,   182,
     182,   182,   182,   182,   183,   183,   183,   183,   183,   184,
     184,   186,   185,   188,   187,   189,   189,   190,   190,   191,
     191,   191,   191,   191,   191,   191,   191,   191,   193,   192,
     195,   194,   196,   196,   196,   197,   197,   197,   198,   199,
     199,   199,   201,   200,   200,   202,   202,   203,   203,   203,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   205,   205,   205,   205,   205,   206,   208,
     207,   209,   209,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   211,   211,   212,
     212,   213,   213,   214,   214,   214,   214,   214,   214,   214,
     214,   214,   214,   214,   214,   214,   214,   214,   214,   214,
     214,   214,   214,   214,   214,   214,   214,   214,   214,   214,
     214,   214,   214,   214,   214,   214,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   216,   216,   216,   216,   216,   216,
     216,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   218,   218,   218,
     218,   218,   218,   219,   219,   219,   220,   220,   221,   221,
     222
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     2,     1,     2,     2,     1,     3,
       4,     0,     5,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     2,     2,     2,     2,     7,     9,     9,     0,
       3,     1,     2,     3,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     1,     3,     3,     0,     4,     0,     5,
       2,     4,     2,     4,     0,     4,     0,     5,     3,     2,
       4,     2,     4,     0,     6,     0,     6,     0,     7,     0,
      10,     0,    11,     0,     8,     0,     9,     1,     1,     1,
       2,     4,     5,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     1,     1,     1,     0,     6,     1,     1,     1,     3,
       2,     4,     2,     4,     3,     4,     1,     1,     1,     1,
       2,     2,     2,     2,     2,     3,     4,     3,     3,     0,
       6,     1,     1,     1,     3,     2,     1,     3,     1,     2,
       1,     2,     1,     3,     5,     3,     4,     1,     1,     2,
       1,     3,     3,     5,     3,     3,     4,     1,     1,     1,
       1,     2,     2,     2,     2,     3,     4,     1,     1,     1,
       2,     2,     2,     2,     3,     4,     7,     3,     1,     2,
       2,     2,     2,     3,     4,     7,     1,     1,     2,     1,
       1,     1,     1,     2,     2,     1,     1,     2,     1,     1,
       1,     1,     2,     2,     1,     1,     2,     2,     2,     2,
       3,     0,     5,     0,     7,     1,     1,     2,     3,     2,
       2,     2,     3,     3,     3,     3,     3,     3,     0,     5,
       0,     6,     1,     3,     5,     1,     2,     4,     1,     1,
       1,     1,     0,     6,     4,     2,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     1,     2,     1,     3,     2,     1,     0,
       2,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       1,     1,     3,     1,     4,     7,     7,     4,     2,     2,
       2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       4,     4,     3,     3,     3,     3,     1,     4,     7,     7,
       4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
       4,     4,     2,     5,     2,     2,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     5,     4,     4,
       3,     3,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     7,     7,     4,     2,     5,     2,     2,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       5,     4,     4,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     1,     1,     2,
       0
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   540,     0,     0,     0,   540,     5,   488,   484,   487,
     538,   490,     0,     0,     0,     0,     0,     0,   486,     0,
       0,     0,     0,     0,     0,     0,     0,   485,     0,     0,
       0,     0,     0,     0,     0,     3,   436,   489,   207,   270,
     271,   272,   259,     0,   285,   258,   283,   278,   274,   275,
     273,   277,   260,     0,   261,   276,   288,   540,     4,   209,
     210,   211,   212,     0,     0,   206,   267,   268,   269,     1,
      20,    21,     0,    29,     0,     0,     0,     0,     0,     0,
     124,   540,     0,     6,    15,     7,    18,     0,    13,    43,
      14,    16,    17,    31,   540,   540,   540,   540,   540,     0,
     540,   540,   540,   225,     0,   452,     0,     0,   224,   540,
     540,     0,     0,   540,   458,   456,   457,   455,   207,   270,
     271,   272,   285,   283,   278,   274,   273,   277,   276,     0,
       0,   401,   454,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   539,   540,   287,   284,
     274,   280,   274,   279,   282,   536,   537,   208,   281,     0,
     540,   540,   540,   540,   540,   229,   198,   248,   214,   231,
     213,    22,   540,     0,     0,   540,     0,    25,    24,    23,
       0,     0,    19,     0,   265,    77,   216,    41,     0,    42,
      32,    37,    35,    39,     0,    40,    34,     0,    36,    38,
      11,     0,     0,    46,   218,   219,   220,   221,     0,     0,
     215,     0,   400,   399,     0,     0,     0,     0,     0,     0,
       0,     0,   226,   540,   228,   227,     0,     0,     0,     0,
       0,     0,     0,   483,   467,   468,   469,   470,   471,   472,
     475,   476,   482,     0,   464,   465,   466,   473,   474,   462,
     463,   459,   460,   461,   481,   480,     0,     0,   230,   286,
     540,   202,   199,   201,   200,     0,   540,   540,   250,   540,
     540,    30,     0,     0,   540,   262,   540,     0,     0,    54,
     266,    63,    65,    48,    33,     0,   540,   217,   540,     0,
     289,   162,     0,     0,    45,    44,     0,   223,   222,   440,
     444,   442,   443,   450,     0,   449,   441,   446,     0,   445,
     448,   451,     0,   447,   437,   402,     0,   479,   478,   203,
       0,     0,   398,   397,   255,     0,   252,   540,   540,     0,
       0,   236,   235,     0,     0,   264,   540,   137,   138,     0,
       0,     0,     0,   127,   128,   540,   136,   126,    56,    58,
       0,   540,     0,     0,   540,     0,   540,   179,   180,     0,
     540,   540,   540,   540,     0,   178,   540,    67,     0,   540,
       0,     8,     0,   540,     0,     0,     0,     0,     0,     0,
       0,     0,    47,   540,   139,     0,   453,     0,   477,   540,
     204,   256,   249,     0,   232,     0,     0,     0,     0,   237,
     540,     0,     0,     0,   540,   130,   540,   132,   540,     0,
     188,   189,     0,   540,   540,   540,   540,   540,   540,   187,
       0,    55,   540,   531,   527,   530,   540,   152,     0,     0,
     529,     0,     0,     0,   528,     0,     0,     0,     0,     0,
       0,   153,   156,   540,   177,   491,   532,   151,     0,     0,
       0,    49,   540,     0,   540,   184,   181,   183,   182,    73,
     540,    12,   540,   163,   290,   291,   289,     0,   540,   540,
       0,   168,   170,   167,   165,     0,   144,   141,    93,    94,
      95,    96,    97,    98,   101,   102,   117,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   121,
     120,   104,   103,    90,    92,    91,    99,   100,    88,    89,
      85,    86,    87,    84,     0,     0,    83,   140,   143,   142,
       0,     0,     0,   149,   540,     0,    50,   160,     0,     0,
       0,   253,     0,   251,     0,     0,     0,   241,   533,     0,
     240,     0,   239,     0,     0,     0,   540,   238,     0,     0,
       0,   263,     0,   540,     0,     0,   122,   125,   123,   129,
     540,   193,   190,   192,   191,     0,     0,   540,   134,   158,
      57,   540,     0,    59,   540,   540,     0,   496,     0,     0,
     501,   500,   499,     0,     0,   498,   540,   155,     0,   540,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   540,     0,    52,    75,
     185,   540,     0,     0,   293,   294,   296,   295,   300,   297,
     298,   299,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     353,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   373,   350,   351,   352,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   540,   390,   391,   392,   383,
     395,   379,   380,   378,   385,   386,   374,   375,   376,   377,
     384,   382,   389,   387,   393,   388,   381,   394,   292,     0,
       9,     0,     0,   166,   169,   145,   119,   118,   148,   147,
     161,   540,     0,     0,   439,   438,   540,   257,   535,   247,
     534,   246,   245,   244,   243,   242,   234,     0,    26,     0,
     131,   135,   133,   194,   197,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   159,   403,     0,     0,    61,     0,
       0,   175,   540,     0,   540,     0,     0,     0,   526,    79,
      64,    78,   154,   157,   174,   510,   511,   512,   513,   514,
     515,   518,   519,   525,     0,   507,   508,   509,   516,   517,
     505,   506,   502,   503,   504,   524,   523,     0,     0,     0,
      69,    66,     0,   540,     0,   186,   540,     0,   164,    10,
     171,   540,   172,     0,   146,    51,   205,   254,     0,     0,
     540,     0,     0,     0,   412,   410,   411,   409,     0,     0,
     408,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   195,     0,    60,   161,   176,     0,     0,   495,
       0,   492,    80,     0,     0,   522,   521,    71,   540,    53,
       0,   540,    68,   396,     0,   540,    27,    28,     0,     0,
       0,     0,     0,   435,   421,   422,   423,   424,   425,   426,
     427,   428,   434,     0,   418,   419,   420,   416,   417,   413,
     414,   415,   433,   432,     0,     0,    62,     0,   497,     0,
       0,   520,   540,     0,   540,    74,   173,   150,   540,     0,
     407,     0,   404,     0,   431,   430,     0,     0,    81,     0,
       0,   540,    76,   196,     0,     0,   429,   494,   493,    82,
     540,    70,     0,     0,    72,   406,   405
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     4,     5,   380,   381,    84,   298,    85,    86,   182,
      87,    88,    89,   306,   365,   392,   461,   192,   360,   430,
     431,   580,   212,   361,   364,   472,   898,   942,   631,   833,
     800,   527,   567,    90,   190,   352,   353,   354,   355,   393,
     751,   450,   451,   578,   535,   304,   480,   481,   452,   374,
     428,   175,    57,   213,   105,    58,    59,   279,    60,   280,
     340,   341,   409,    61,   277,    62,   337,   334,   335,    63,
      64,    91,   346,    92,    65,    66,    67,    68,   378,   379,
     474,   738,   331,   221,   222,   784,   131,    36,   454,   455,
     547,   394,    37,   223
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -547
static const yytype_int16 yypact[] =
{
     136,  -547,  2122,  3147,    45,   798,  -547,  -547,  -547,  -547,
    -547,  -547,   -56,   -40,    14,    31,    36,   -65,  -547,    41,
      56,    62,  3257,    78,   105,   118,   -20,  -547,   133,  2122,
    2122,  2122,  2122,  1297,  2122,  2640,  -547,   116,  -547,  -547,
    -547,  -547,  -547,  3312,  -547,  -547,  -547,  -547,  1915,  -547,
     887,   887,  -547,    28,  -547,   887,  -547,    79,  -547,  -547,
    -547,  -547,  -547,    44,    69,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,    34,  -547,   141,   147,   153,   145,   173,   193,
    -547,  -547,    77,  -547,  -547,  -547,  -547,  2374,  -547,  -547,
    -547,  -547,  -547,  -547,  2122,  2122,  2122,  2122,  2122,  3147,
    2122,  2122,  2122,  -547,    28,   154,    28,    28,  -547,  2122,
    2122,  3147,  3147,  2122,   123,   123,   123,   123,   -56,   -40,
      14,    31,    36,    41,    56,  2093,  1487,  1620,  1798,   182,
     -74,  2640,   123,  2122,  2122,  2122,  2122,  2122,  2122,  2122,
    2122,  2122,  2122,  2122,  2122,  2122,  2122,  2122,  2122,  2122,
    2122,  2122,  2122,  2122,  1588,  2122,  -547,    79,  -547,  -547,
    1829,  -547,   887,  -547,  -547,  -547,  -547,  -547,  -547,   190,
      79,    79,    79,    79,    79,   186,  -547,  -547,   230,  -547,
     -29,  -547,  3518,   336,    28,  -547,   246,  -547,  -547,  -547,
     239,  2440,  -547,    28,  -547,   232,   238,  -547,  3312,  -547,
     356,  -547,  -547,  -547,  3202,  -547,  -547,    28,  -547,  -547,
    -547,    28,   340,   257,  -547,  -547,  -547,  -547,    44,    69,
    -547,   242,   262,  -547,   249,   252,   258,   268,   286,   272,
     277,   283,  -547,  2122,  -547,  -547,   289,   291,   295,   314,
     315,  2122,  2122,  -547,  1314,  2801,  2999,  2999,   683,   683,
     405,   405,  -547,  2287,  2816,  2831,  2956,   683,   683,   169,
     169,   123,   123,   123,  -547,  -547,   -41,   911,   186,  -547,
      79,   186,   186,   186,   186,     6,  2122,  -547,  -547,  -547,
     322,  -547,   337,   338,  3342,  -547,  3092,  3312,   340,  -547,
    -547,  -547,    17,  -547,   116,  3312,    82,  -547,  -547,   327,
    -547,  -547,    28,  1677,  -547,  -547,   578,   230,   -29,  -547,
    -547,  -547,  -547,  -547,   328,  -547,  -547,  -547,   333,  -547,
    -547,  -547,   339,  -547,   123,  2640,  2122,  -547,  -547,   186,
     342,   332,  2640,  -547,    28,   344,  -547,  -547,  3374,   306,
     361,   366,  -547,   465,    28,  -547,  -547,  -547,  -547,    28,
    1740,    28,   359,   369,  -547,   234,  -547,  -547,  -547,  -547,
     578,  1394,   358,   578,  1394,   578,    82,  -547,  -547,   363,
      82,    82,    82,    82,    52,  -547,  3414,  -547,   357,  -547,
      83,  -547,   362,  1766,  2585,   368,   578,   578,  2257,   578,
     578,   578,  -547,   282,  -547,  2122,  -547,  2122,  2640,  1394,
    -547,   120,  -547,   364,  -547,   699,   721,  1313,   261,  -547,
    -547,   306,    -9,   381,  3446,   379,   234,   380,   402,  3092,
    -547,  -547,   378,   234,   234,   234,   234,   234,   -80,  -547,
     578,  -547,   282,  -547,  -547,  -547,   234,  -547,  3312,   384,
    -547,  3257,   382,   387,  -547,  2122,  2122,  2122,  1297,  2122,
     377,    22,  -547,   234,  2657,  -547,   116,  -547,   578,   287,
     386,  -547,   282,   150,    82,   388,   388,   388,   388,  -547,
    2122,  -547,  1394,  -547,  1170,  -547,  -547,    28,  2122,  1766,
     392,   397,  2640,  -547,  -547,   578,   175,   175,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,   389,   376,  -547,  -547,   175,   175,
     313,   305,  1677,  -547,  2122,   400,  -547,  -547,     2,     9,
     395,  -547,  2122,  -547,    28,   254,    28,  -547,  -547,   254,
    -547,   254,  -547,   254,   254,   254,  3486,  -547,   518,   423,
      28,  -547,  3147,   -80,  3147,  2497,  -547,  -547,  -547,  -547,
     234,   407,   407,   407,   407,   142,   656,  2122,  -547,  -547,
    -547,   282,   430,  -547,   -36,   234,  3147,   416,  3147,  3147,
     123,   123,   123,   417,    11,   123,   491,  -547,  1491,   -36,
    2122,  2122,  2122,  2122,  2122,  2122,  2122,  2122,  2122,  2122,
    2122,  2122,  2122,  2122,  2122,  2122,  2122,  2122,  2122,  2122,
    2122,  1855,  2122,   331,   539,   422,   491,   442,  -547,  -547,
     388,  1394,   425,   429,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,   424,
    -547,   432,   434,  -547,  1944,   175,  -547,  -547,  -547,  -547,
    2585,  1394,   433,   578,  -547,  -547,   491,  2606,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,   438,  -547,   439,
    -547,  -547,  -547,   407,   450,   460,   452,   463,   656,   656,
     656,   656,  1297,   656,  2786,  -547,   451,   472,  -547,   578,
    2122,  -547,   -36,   466,  2122,   457,   470,  2122,  -547,  -547,
      19,  -547,  -547,  -547,  -547,  1314,  2801,  2999,  2999,   683,
     683,   405,   405,  -547,  2623,  2816,  2831,  2956,   683,   683,
     169,   169,   123,   123,   123,  -547,  -547,    38,  2207,   467,
    -547,    19,   578,  1394,   464,  -547,   491,  1044,  -547,  -547,
    -547,  1766,  2640,   469,  -547,  -547,    19,  -547,   489,   490,
    1394,  3147,  3147,  3147,   137,   137,   137,   137,   474,    61,
     137,   656,   656,   656,   656,   656,   656,   656,   656,   656,
     656,   656,   656,   656,   656,   656,   656,   656,   656,   656,
    2033,  2122,  -547,   578,  -547,  2640,  -547,   477,   476,  -547,
     480,   123,  -547,   483,  2122,  -547,  -547,  -547,  1394,  -547,
     482,   491,    19,  -547,   484,   491,  -547,  -547,   486,   493,
     488,   494,   656,  -547,  1508,  2846,  3012,  3012,   766,   766,
     517,   517,  -547,  2769,  2971,  2986,   603,   448,   448,   137,
     137,   137,  -547,  -547,    71,  2237,  -547,  2122,  -547,  2122,
      16,  2640,  1394,   502,   491,    19,  -547,    19,   491,   506,
    -547,   508,   137,   656,  -547,  -547,   125,   130,  -547,   519,
     520,   491,    19,    19,  2122,  2122,  2786,  -547,  -547,  -547,
     491,    19,   143,   146,    19,  -547,  -547
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -547,  -547,  -159,  -547,   139,  -547,  -547,   461,  -547,  -547,
     -60,   196,  -547,  -547,  -547,  -107,  -181,  -547,  -547,  -547,
    -136,  -220,   475,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -502,  -547,  -547,   247,  -547,  -547,  -547,   248,   319,  -332,
    -547,  -351,  -547,   131,  -416,  -238,  -461,  -547,    95,  -331,
    -313,  -110,    -5,   504,   256,   -30,   -86,  -547,   -85,  -547,
    -547,  -547,   294,   -73,  -547,   -72,  -547,  -547,   373,   -13,
     103,  -547,  -547,  -547,     0,    20,  -547,  -547,   222,  -547,
     -15,  -547,  -427,   -90,   -16,   134,    70,  -546,  -547,  -547,
    -249,   431,  -134,    -1
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -234
static const yytype_int16 yytable[] =
{
       6,   214,   215,   129,    93,   224,   225,   226,   227,   106,
     229,   230,   231,   460,   216,   217,   582,   130,   742,   236,
     237,   191,   108,   240,   165,   166,   284,   362,   432,   576,
     785,   459,   242,   462,   597,   463,   165,   166,   157,   465,
     466,   467,   468,   632,   577,    69,   627,   268,   540,    99,
     359,   243,   165,   166,   486,   487,   176,   528,   529,   530,
     271,   272,   273,   274,   275,   242,   294,    94,   161,   228,
     163,   164,    35,   790,   218,   168,  -233,   165,   166,  -233,
      93,   238,   239,    95,   327,   165,   166,   220,   577,   169,
     367,   368,   369,   170,   112,   892,   370,   558,   581,   114,
     115,   116,   117,   563,   132,   214,   215,   752,   242,   893,
     571,   572,   573,   574,   575,   242,   559,   242,   216,   217,
     338,   633,   156,   584,   831,   107,   623,   754,   598,   171,
     276,   330,   371,   630,   755,   363,   798,    96,   266,   376,
     599,   958,   181,   318,   242,   161,   163,   164,   168,   177,
     786,   193,   141,   745,    97,   536,   176,   550,   552,    98,
     329,   165,   166,   895,   100,   787,   869,   242,   791,   176,
     176,   176,   176,   176,   179,   469,   470,   242,   218,   101,
     161,    93,   161,   804,     6,   102,   913,   414,   476,   477,
     219,   220,   172,   293,   583,   372,   954,   173,   141,   296,
     373,   109,   174,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   628,   267,   541,   456,   110,   542,
     456,   242,   785,   785,   785,   785,   242,   785,     1,     2,
       3,   111,   420,   421,   422,   153,   154,   155,   423,   242,
     967,   556,   242,   187,   846,   968,   113,   773,   185,   879,
     880,   881,   165,   166,   183,   456,   577,   774,   975,   176,
     184,   976,   792,   629,   470,   333,   336,   233,     6,   342,
     834,   188,   358,    93,   424,   357,   356,   150,   151,   152,
     366,   153,   154,   155,   219,   375,   759,     6,   533,   534,
     761,   189,   762,    42,   763,   764,   765,   241,   270,   749,
     276,   324,   325,   165,   166,   785,   785,   785,   785,   785,
     785,   785,   785,   785,   785,   785,   785,   785,   785,   785,
     785,   785,   785,   785,   902,   278,   336,    93,   456,   553,
     554,   555,    52,   788,   282,     6,   332,   425,   544,    54,
     356,   285,   426,   286,   429,   291,   453,   427,   565,   453,
     457,   292,    10,   457,   305,   375,   785,   309,   242,   375,
     375,   375,   375,   384,   310,    93,   886,   311,   475,   538,
     904,   539,   483,   312,   405,   406,   407,   300,   741,   301,
     531,   532,   537,   313,   453,   624,   398,   315,   457,   945,
     843,   314,   316,   947,   408,   533,   534,   785,   317,     6,
     533,   534,   625,    93,   319,   429,   320,    93,   593,   356,
     321,   624,   429,   429,   429,   429,   429,   579,   106,   322,
     339,   537,   594,   585,   141,   429,   533,   534,   748,   624,
     323,   108,   962,   343,   344,   300,   963,   301,   302,   303,
     377,   395,   429,   482,   533,   534,   829,   432,   396,   971,
     400,   537,   397,   375,   456,   399,   410,   453,   974,   333,
     402,   457,   411,   412,   418,   419,   458,   869,   483,   214,
     215,   464,   900,   473,   167,   478,   485,   560,   562,   564,
     543,    80,   216,   217,   178,   180,   570,   456,   586,   908,
     462,   589,   596,   744,   747,   588,   753,   186,   546,   546,
     546,   626,   470,   194,   746,   590,   591,   592,   743,   595,
     756,   148,   149,   150,   151,   152,   767,   153,   154,   155,
     768,   577,   770,   333,   772,   232,   789,   234,   235,   794,
     332,   799,   797,   749,   107,   830,   869,   943,   832,   482,
     838,   581,   218,   835,   836,    93,   793,   839,   795,   796,
     840,   844,   579,   848,   849,   220,   876,   877,   878,   429,
     879,   880,   881,   850,   851,   852,   333,   853,   883,   882,
     537,   887,   889,   537,   429,   890,   165,   166,   385,   901,
     897,   960,   386,   453,   905,   801,   906,   907,   537,   912,
     937,   938,   750,   939,   332,   827,   940,   944,   949,   951,
     946,   948,   757,   950,   566,   283,   740,   456,   863,   864,
     865,   866,   867,   868,   290,   801,   453,   961,   387,   964,
     457,   965,   869,   874,   875,   876,   877,   878,   297,   879,
     880,   881,   299,   281,   969,   970,   845,   332,   546,   307,
     308,   899,   546,   884,   546,   388,   546,   546,   546,     7,
       8,     9,    10,   936,    11,   568,   288,   569,   219,   416,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   389,   828,   803,   771,   289,   390,   587,   739,   456,
     837,   391,   139,   140,   888,   557,     0,   165,   166,   775,
     403,     0,   141,     0,   475,     0,   456,    18,     0,   874,
     875,   876,   877,   878,     0,   879,   880,   881,     0,   165,
     166,     0,     0,   382,     0,     0,     0,     0,     0,     0,
       0,   776,     0,   777,     0,     0,   453,    27,    42,     0,
     457,     0,   858,     0,     0,   801,     0,     0,     0,     0,
       0,     0,     0,     0,   456,   401,   859,     0,     0,   778,
      42,     0,     0,   779,   780,   413,     0,   781,     0,   782,
     415,     0,   417,   783,     0,   867,   868,    52,     0,     0,
       0,   537,     0,   544,    54,   869,     0,   545,    -2,   148,
     149,   150,   151,   152,     0,   153,   154,   155,   456,    52,
       0,     0,     0,     0,   842,   544,    54,     0,     0,   549,
       0,   909,   910,   911,     0,     0,     0,     0,   453,     0,
       0,     0,   457,     0,     0,   801,   548,   548,   548,     0,
     483,    70,     0,     0,     0,   453,     0,     0,     0,   457,
       0,     0,     0,    71,     0,     0,     0,     0,    72,     0,
     885,    73,     0,     0,   934,     0,     0,   891,     0,    74,
      75,     0,    76,     0,     0,     0,    77,    78,    79,     0,
       0,     0,   874,   875,   876,   877,   878,    80,   879,   880,
     881,    81,     0,   453,     0,    82,     0,   457,     0,     0,
     801,     0,     0,     0,   801,    83,     0,     0,   382,     0,
       0,   482,   854,   855,   856,   857,     0,   860,     0,     0,
       0,   956,     0,   957,   133,   134,   135,   136,   137,   138,
     139,   140,    39,     0,    40,    41,     0,   453,     0,     0,
     141,   457,     0,   801,     0,     0,     0,   801,   972,   973,
       0,   935,     0,     0,     0,    47,   162,    49,     0,     0,
     801,     0,   382,     0,   941,     0,     0,     0,     0,   801,
      50,    51,     0,     0,     0,   758,   548,   760,     0,     0,
     548,     0,   548,    55,   548,   548,   548,     0,     0,     0,
       0,   769,     0,     0,     0,   914,   915,   916,   917,   918,
     919,   920,   921,   922,   923,   924,   925,   926,   927,   928,
     929,   930,   931,   932,     0,     0,     0,     0,     0,     0,
       0,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,     0,   153,   154,   155,     0,     0,     0,   328,
       0,     0,     0,     0,     0,     0,   952,   634,   635,   636,
     637,   638,   639,   640,   641,     0,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,     0,     0,     0,
       0,     0,     0,   653,   654,   655,   656,   657,   658,   659,
     660,   661,   662,   663,   664,   665,   666,   966,     0,   667,
     668,   669,   670,   671,   672,   673,   674,   675,   676,     0,
     677,     0,   678,   679,   680,   681,   682,   683,   684,   685,
     686,   687,   688,   689,     0,     0,     0,   690,     0,   691,
       0,   692,   693,   694,   695,   696,   697,   698,   699,   700,
     701,   702,   703,     0,   704,   705,   706,   707,   708,   709,
     710,     0,   711,   712,   713,   714,     0,     0,     0,   715,
     716,   717,   718,   719,   720,   721,   722,   723,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,   734,   735,
     903,   736,   737,   634,   635,   636,   637,   638,   639,   640,
     641,     0,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,     0,     0,     0,     0,     0,     0,   653,
     654,   655,   656,   657,   658,   659,   660,   661,   662,   663,
     664,   665,   666,     0,     0,   667,   668,   669,   670,   671,
     672,   673,   674,   675,   676,     0,   677,     0,   678,   679,
     680,   681,   682,   683,   684,   685,   686,   687,   688,   689,
       0,     0,     0,   690,     0,   691,     0,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,     0,
     704,   705,   706,   707,   708,   709,   710,     0,   711,   712,
     713,   714,     0,     0,     0,   715,   716,   717,   718,   719,
     720,   721,   722,   723,   724,   725,   726,   727,   728,   729,
     730,   731,   732,   733,   734,   735,     0,   736,   737,     0,
       7,     8,     9,    10,     0,    11,   118,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   165,   166,     0,     0,     0,     0,     0,   134,   135,
     136,   137,   138,   139,   140,     0,     0,     0,     0,     0,
       0,     0,   119,   141,   120,   121,    42,    43,     0,   122,
      17,     0,     0,    45,     0,     0,     0,     0,    18,   123,
       0,     0,    42,     0,     0,   124,   125,    49,     0,     0,
       0,   959,    22,     0,     0,     0,     0,     0,     0,     0,
     126,   127,    25,     0,    26,    52,     0,     0,    27,     0,
       0,    53,    54,   128,     0,     0,    56,   433,   434,   435,
      10,    52,   436,    38,     0,     0,   437,   544,    54,     0,
      29,   551,     0,     0,    30,    31,     0,     0,    32,     0,
      33,     0,     0,     0,    34,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,     0,   153,   154,   155,    39,
       0,    40,    41,    42,   438,     0,    44,   439,     0,     0,
      45,     0,     0,     0,     0,   440,    46,     0,     0,     0,
       0,     0,    47,    48,    49,     0,     0,     0,     0,   441,
       0,     0,     0,     0,     0,     0,     0,    50,    51,   442,
       0,   443,    52,     0,     0,   444,     0,     0,    53,    54,
      55,     0,     0,    56,   433,   434,   435,    10,     0,   436,
      38,     0,     0,   802,     0,     0,     0,   445,     0,     0,
       0,   446,     0,     0,     0,   447,     0,   448,     0,     0,
       0,   449,   862,   863,   864,   865,   866,   867,   868,     0,
       0,     0,    39,     0,    40,    41,    39,   869,    40,    41,
      42,   438,     0,    44,   439,     0,     0,    45,     0,     0,
       0,     0,   440,    46,     0,    47,   162,    49,     0,    47,
      48,    49,     0,     0,     0,     0,   441,     0,     0,     0,
      50,    51,     0,     0,    50,    51,   442,     0,   443,    52,
       0,     0,   444,    55,     0,    53,    54,    55,     0,     0,
      56,     7,     8,     9,    10,     0,    11,    12,     0,     0,
       0,     0,     0,     0,   445,     0,     0,     0,   446,     0,
     109,     0,   447,     0,   448,     0,     0,     0,   449,   871,
     872,   873,     0,     0,   874,   875,   876,   877,   878,     0,
     879,   880,   881,    13,     0,    14,    15,     0,     0,     0,
      16,    17,     0,     0,     0,     0,     0,     0,     0,    18,
      19,     0,     0,     0,     0,     0,    20,    21,     0,     0,
       0,     0,     0,    22,     0,    39,     0,    40,    41,     0,
       0,    23,    24,    25,     0,    26,     0,     0,     0,    27,
       7,     8,     9,    10,    28,    11,    12,     0,    47,   162,
      49,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    29,     0,    50,    51,    30,    31,     0,     0,    32,
       0,    33,     0,   265,     0,    34,    55,     0,     0,     0,
       0,     0,    13,     0,    14,    15,     0,     0,     0,    16,
      17,     0,     0,     0,     0,     0,     0,     0,    18,    19,
       0,     0,     0,   110,     0,    20,    21,     0,   347,   348,
       0,     0,    22,     0,     0,     0,     0,     0,     0,     0,
      23,    24,    25,     0,    26,     0,     0,     0,    27,     7,
       8,     9,    10,    28,    11,    12,     0,     0,     0,     0,
       0,     0,   383,     0,     0,    39,     0,    40,    41,     0,
      29,     0,    44,     0,    30,    31,     0,     0,    32,     0,
      33,     0,    46,     0,    34,     0,     0,     0,    47,    48,
      49,    13,     0,    14,    15,     0,     0,     0,    16,    17,
       0,     0,     0,    50,    51,     0,     0,    18,    19,     0,
       0,     0,     0,     0,    20,    21,    55,     0,     0,    56,
       0,    22,     0,    39,     0,    40,    41,     0,     0,    23,
      24,    25,     0,    26,     0,     0,     0,    27,     7,     8,
       9,    10,    28,    11,    12,     0,    47,   162,    49,     0,
       0,   479,     0,     0,    39,     0,    40,    41,     0,    29,
       0,    50,    51,    30,    31,     0,     0,    32,     0,    33,
       0,   269,     0,    34,    55,     0,     0,    47,   162,    49,
      13,     0,    14,    15,     0,     0,     0,    16,    17,     0,
       0,     0,    50,    51,     0,     0,    18,    19,     0,     0,
       0,   113,     0,    20,    21,    55,     0,     0,     0,     0,
      22,     0,     0,     0,     0,     0,     0,     0,    23,    24,
      25,     0,    26,     0,     0,     0,    27,     7,     8,     9,
      10,    28,    11,    12,     0,     0,     0,     0,     0,     0,
      39,     0,    40,    41,     0,     0,     0,   158,    29,     0,
       0,     0,    30,    31,     0,     0,    32,   159,    33,     0,
     826,     0,    34,    47,   160,    49,     0,     0,     0,    13,
       0,    14,    15,     0,     0,     0,    16,    17,    50,    51,
       0,     0,     0,     0,     0,    18,    19,     0,     0,     0,
       0,    55,    20,    21,     0,     0,     0,     0,     0,    22,
       0,     0,     0,     0,     0,     0,     0,    23,    24,    25,
       0,    26,     0,     0,     0,    27,     7,     8,     9,    10,
      28,    11,    12,     0,     0,     0,     0,     0,     0,   841,
       0,     0,     0,     0,     0,     0,     0,    29,     0,     0,
       0,    30,    31,     0,     0,    32,     0,    33,     0,     0,
       0,    34,     0,     0,     0,     0,     0,     0,    13,     0,
      14,    15,     0,     0,     0,    16,    17,     0,     0,     0,
       0,     0,     0,     0,    18,    19,     0,     0,     0,     0,
       0,    20,    21,     0,     0,     0,     0,     0,    22,     0,
       0,     0,     0,     0,     0,     0,    23,    24,    25,     0,
      26,     0,     0,     0,    27,     7,     8,     9,    10,    28,
      11,    12,     0,     0,     0,     0,     0,     0,    39,     0,
      40,    41,     0,     0,     0,   158,    29,     0,     0,     0,
      30,    31,     0,     0,    32,   159,    33,     0,   933,     0,
      34,    47,   160,    49,     0,     0,     0,    13,     0,    14,
      15,     0,     0,     0,    16,    17,    50,    51,     0,     0,
       0,     0,     0,    18,    19,     0,     0,     0,     0,    55,
      20,    21,     0,     0,     0,     0,     0,    22,     0,     0,
       0,     0,     0,     0,     0,    23,    24,    25,     0,    26,
       0,     0,     0,    27,     0,     0,   102,     0,    28,     0,
     133,   134,   135,   136,   137,   138,   139,   140,     0,     0,
       0,     0,     0,     0,     0,    29,   141,     0,     0,    30,
      31,     0,     0,    32,     0,    33,     0,     0,     0,    34,
     133,   134,   135,   136,   137,   138,   139,   140,     0,     0,
       0,     0,     0,     0,     0,     0,   141,     0,     0,     0,
     488,   489,   490,   491,   492,   493,   494,   495,     0,     0,
       0,     0,     0,     0,     0,     0,   496,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     133,   134,   135,   136,   137,   138,   139,   140,   509,     0,
       0,     0,     0,     0,     0,     0,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,     0,   153,
     154,   155,   510,     0,     0,   896,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,     0,   153,
     154,   155,     0,   511,     0,   955,   512,     0,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,     0,
     524,   525,   195,   196,   526,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   326,     0,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,   197,    39,
       0,    40,    41,    42,   198,     0,    44,     0,     0,     0,
      45,   199,   200,   201,     0,     0,    46,     0,     0,     0,
       0,   202,    47,    48,    49,     0,     0,   203,   195,   196,
       0,   204,     0,     0,     0,   205,     0,    50,    51,     0,
     206,     0,    52,     0,     0,     0,     0,     0,   207,    54,
      55,     0,   208,    56,   209,     0,     0,     0,     0,   210,
       0,     0,     0,     0,   197,    39,     0,    40,    41,    42,
     287,     0,    44,     0,     0,   211,    45,   199,   200,   201,
       0,     0,    46,     0,     0,   195,   196,   202,    47,    48,
      49,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,     0,    50,    51,     0,   206,     0,    52,     0,
       0,     0,     0,     0,   207,    54,    55,     0,   208,    56,
     209,   197,    39,     0,    40,    41,    42,   198,     0,    44,
       0,     0,     0,    45,   199,   200,   201,     0,     0,    46,
       0,   211,     0,     0,   202,    47,    48,    49,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,     0,
      50,    51,     0,   206,     0,    52,     0,     0,     0,     0,
       0,   207,    54,    55,     0,   208,    56,   209,   133,   134,
     135,   136,   137,   138,   139,   140,     0,     0,     0,     0,
       0,     0,     0,     0,   141,     0,     0,     0,   211,   133,
     134,   135,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,     0,     0,     0,   141,   133,   134,   135,   136,
     137,   138,   139,   140,     0,     0,     0,     0,     0,     0,
       0,     0,   141,   133,   134,   135,   136,   137,   138,   139,
     140,     0,     0,     0,     0,     0,     0,     0,     0,   141,
     600,   601,   602,   603,   604,   605,   606,   607,     0,     0,
       0,     0,     0,     0,     0,     0,   608,     0,     0,     0,
       0,     0,   484,     0,     0,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,     0,   153,   154,   155,
       0,     0,   847,     0,     0,     0,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,     0,   153,   154,
     155,   894,     0,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,     0,   153,   154,   155,     0,     0,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,     0,   153,   154,   155,     0,     0,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,     0,   620,
     621,   622,   861,   862,   863,   864,   865,   866,   867,   868,
       0,     0,     0,     0,     0,     0,     0,     0,   869,   861,
     862,   863,   864,   865,   866,   867,   868,     0,     0,     0,
       0,     0,     0,     0,     0,   869,   135,   136,   137,   138,
     139,   140,     0,     0,     0,     0,     0,     0,     0,     0,
     141,   135,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,     0,     0,     0,   141,   135,   136,   137,   138,
     139,   140,     0,     0,     0,     0,     0,     0,     0,     0,
     141,   863,   864,   865,   866,   867,   868,     0,     0,     0,
       0,     0,     0,     0,     0,   869,     0,   953,     0,   870,
     871,   872,   873,     0,     0,   874,   875,   876,   877,   878,
       0,   879,   880,   881,     0,     0,   870,   871,   872,   873,
       0,     0,   874,   875,   876,   877,   878,     0,   879,   880,
     881,     0,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,     0,   153,   154,   155,     0,     0,   144,   145,
     146,   147,   148,   149,   150,   151,   152,     0,   153,   154,
     155,     0,     0,     0,   145,   146,   147,   148,   149,   150,
     151,   152,     0,   153,   154,   155,     0,   871,   872,   873,
       0,     0,   874,   875,   876,   877,   878,     0,   879,   880,
     881,   135,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,     0,     0,     0,   141,   863,   864,   865,   866,
     867,   868,     0,     0,     0,     0,     0,     0,     0,     0,
     869,   863,   864,   865,   866,   867,   868,     0,     0,     0,
       0,     0,     0,     0,     0,   869,   137,   138,   139,   140,
       0,     0,     0,     0,     0,     0,     0,     0,   141,   865,
     866,   867,   868,     0,     0,     0,     0,     0,     0,     0,
       0,   869,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,   154,
     155,     0,     0,   872,   873,     0,     0,   874,   875,   876,
     877,   878,     0,   879,   880,   881,     0,     0,     0,   873,
     347,   348,   874,   875,   876,   877,   878,     0,   879,   880,
     881,     0,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,   154,   155,     0,     0,     0,     0,   874,   875,
     876,   877,   878,     0,   879,   880,   881,    39,     0,    40,
      41,   349,   350,     0,    44,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    46,     0,    38,     0,     0,     0,
      47,    48,    49,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    50,    51,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   351,     0,    55,     0,
       0,    56,    39,     0,    40,    41,    42,    43,     0,    44,
       0,     0,     0,    45,     0,     0,     0,     0,     0,    46,
       0,    38,     0,     0,     0,    47,    48,    49,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      50,    51,     0,     0,     0,    52,     0,     0,     0,     0,
       0,    53,    54,    55,     0,     0,    56,    39,     0,    40,
      41,    42,   295,     0,    44,     0,     0,     0,    45,     0,
       0,     0,     0,     0,    46,     0,   103,     0,     0,     0,
      47,    48,    49,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    50,    51,     0,     0,     0,
      52,     0,     0,     0,     0,     0,    53,    54,    55,     0,
       0,    56,    39,     0,    40,    41,    42,     0,     0,    44,
       0,     0,     0,    45,     0,     0,     0,     0,     0,    46,
       0,    38,     0,     0,     0,    47,    48,    49,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      50,    51,     0,     0,     0,    52,     0,     0,     0,     0,
       0,   104,    54,    55,     0,     0,    56,    39,     0,    40,
      41,    42,     0,     0,    44,     0,     0,     0,    45,     0,
       0,     0,     0,     0,    46,     0,     0,     0,     0,     0,
      47,    48,    49,     0,     0,    70,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    50,    51,    71,     0,     0,
      52,     0,    72,     0,     0,    73,    53,    54,    55,     0,
       0,    56,     0,    74,    75,     0,    76,    70,     0,     0,
      77,    78,    79,     0,     0,     0,     0,     0,     0,    71,
       0,    80,     0,     0,    72,    81,     0,    73,     0,    82,
       0,     0,     0,     0,     0,    74,    75,     0,    76,    83,
       0,     0,    77,    78,    79,     0,     0,    70,     0,     0,
       0,     0,     0,    80,     0,     0,     0,    81,   345,    71,
       0,    82,     0,     0,    72,     0,     0,    73,     0,     0,
       0,    83,     0,     0,     0,    74,    75,     0,    76,    70,
       0,     0,    77,    78,    79,     0,     0,     0,     0,     0,
     404,    71,     0,    80,     0,     0,    72,    81,     0,    73,
       0,    82,     0,     0,     0,     0,     0,    74,    75,     0,
      76,    83,     0,     0,    77,    78,    79,     0,     0,    70,
       0,     0,     0,     0,     0,    80,     0,     0,     0,    81,
     471,    71,     0,    82,     0,     0,    72,     0,     0,    73,
       0,     0,     0,    83,     0,     0,     0,    74,    75,     0,
      76,    70,     0,     0,    77,    78,    79,     0,     0,     0,
       0,     0,   561,    71,     0,    80,     0,     0,    72,    81,
       0,    73,     0,    82,     0,     0,     0,     0,     0,    74,
      75,     0,    76,    83,     0,     0,    77,    78,    79,     0,
       0,     0,     0,     0,     0,     0,     0,    80,     0,     0,
       0,    81,   766,     0,     0,    82
};

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-547)))

#define yytable_value_is_error(Yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       1,    87,    87,    33,     5,    95,    96,    97,    98,    22,
     100,   101,   102,   364,    87,    87,   432,    33,   479,   109,
     110,    81,    22,   113,     8,     9,   185,    10,   360,   109,
     576,   363,   106,   365,    12,   366,     8,     9,    43,   370,
     371,   372,   373,   470,   124,     0,   462,   157,   399,   114,
     288,   125,     8,     9,   386,   387,    57,   389,   390,   391,
     170,   171,   172,   173,   174,   106,   200,   123,    48,    99,
      50,    51,     2,   109,    87,    55,   105,     8,     9,   108,
      81,   111,   112,   123,   125,     8,     9,    87,   124,    10,
       8,     9,    10,    14,   114,    76,    14,   106,   430,    29,
      30,    31,    32,   416,    34,   191,   191,   534,   106,    90,
     423,   424,   425,   426,   427,   106,   125,   106,   191,   191,
     279,   472,     6,   436,   626,    22,   458,   125,   106,    50,
     124,   125,    50,   464,   125,   118,   125,   123,   154,   298,
     453,   125,   108,   233,   106,   125,   126,   127,   128,   105,
     577,    74,    29,   485,   123,   393,   157,   406,   407,   123,
     270,     8,     9,   125,   123,   581,    29,   106,   584,   170,
     171,   172,   173,   174,   105,   123,   124,   106,   191,   123,
     160,   182,   162,   599,   185,   123,   125,   346,   105,   106,
      87,   191,   113,   198,   432,   113,   125,   118,    29,   204,
     118,   123,   123,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   462,   155,   106,   361,   123,   109,
     364,   106,   778,   779,   780,   781,   106,   783,   102,   103,
     104,   123,     8,     9,    10,   122,   123,   124,    14,   106,
     125,   410,   106,   108,   756,   125,   123,   570,   105,   122,
     123,   124,     8,     9,   123,   399,   124,   125,   125,   270,
     123,   125,   585,   123,   124,   276,   277,   123,   279,   280,
     631,   108,   287,   284,    50,   286,   286,   118,   119,   120,
     295,   122,   123,   124,   191,   296,   545,   298,   123,   124,
     549,   108,   551,    49,   553,   554,   555,   125,   118,     4,
     124,   241,   242,     8,     9,   861,   862,   863,   864,   865,
     866,   867,   868,   869,   870,   871,   872,   873,   874,   875,
     876,   877,   878,   879,   836,   105,   337,   338,   472,    78,
      79,    80,    88,   581,     8,   346,   276,   113,    94,    95,
     350,   105,   118,   114,   355,   123,   361,   123,   418,   364,
     361,   123,     6,   364,   107,   366,   912,   125,   106,   370,
     371,   372,   373,   303,   125,   376,   792,   125,   379,   395,
     841,   397,   383,   125,    78,    79,    80,   105,   478,   107,
     108,   109,   393,   125,   399,   108,   326,   125,   399,   901,
     751,   115,   125,   905,    98,   123,   124,   953,   125,   410,
     123,   124,   125,   414,   125,   416,   125,   418,   448,   419,
     125,   108,   423,   424,   425,   426,   427,   428,   441,   115,
     108,   432,   448,   438,    29,   436,   123,   124,   125,   108,
     125,   441,   944,   106,   106,   105,   948,   107,   108,   109,
     123,   123,   453,   383,   123,   124,   125,   789,   125,   961,
     128,   462,   123,   464,   598,   123,   105,   472,   970,   470,
     126,   472,   106,     8,   115,   106,   118,    29,   479,   565,
     565,   118,   833,   126,    53,   123,   118,   106,   109,   109,
     126,    89,   565,   565,    63,    64,   118,   631,   114,   850,
     832,   114,   125,   106,   128,   123,   106,    76,   405,   406,
     407,   125,   124,    82,   125,   445,   446,   447,   126,   449,
     125,   116,   117,   118,   119,   120,     8,   122,   123,   124,
     107,   124,   562,   534,   564,   104,   106,   106,   107,   123,
     470,    50,   125,     4,   441,   123,    29,   898,   106,   479,
     126,   883,   565,   128,   125,   556,   586,   125,   588,   589,
     126,   128,   563,   125,   125,   565,   118,   119,   120,   570,
     122,   123,   124,   123,   114,   123,   577,   114,   106,   128,
     581,   115,   125,   584,   585,   115,     8,     9,    10,   125,
     123,   942,    14,   598,   125,   596,   107,   107,   599,   125,
     123,   125,   532,   123,   534,   621,   123,   125,   115,   115,
     126,   125,   542,   125,   418,   184,   477,   751,    15,    16,
      17,    18,    19,    20,   193,   626,   631,   125,    50,   123,
     631,   123,    29,   116,   117,   118,   119,   120,   207,   122,
     123,   124,   211,   182,   125,   125,   753,   577,   545,   218,
     219,   832,   549,   789,   551,    77,   553,   554,   555,     3,
       4,     5,     6,   883,     8,   418,   191,   419,   565,   350,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   113,   622,   598,   563,   191,   118,   441,   476,   833,
     715,   123,    19,    20,   794,   411,    -1,     8,     9,    53,
     337,    -1,    29,    -1,   715,    -1,   850,    61,    -1,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,    -1,     8,
       9,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    85,    -1,    87,    -1,    -1,   751,    91,    49,    -1,
     751,    -1,   782,    -1,    -1,   756,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   898,   334,   782,    -1,    -1,   113,
      49,    -1,    -1,   117,   118,   344,    -1,   121,    -1,   123,
     349,    -1,   351,   127,    -1,    19,    20,    88,    -1,    -1,
      -1,   792,    -1,    94,    95,    29,    -1,    98,     0,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   942,    88,
      -1,    -1,    -1,    -1,   744,    94,    95,    -1,    -1,    98,
      -1,   851,   852,   853,    -1,    -1,    -1,    -1,   833,    -1,
      -1,    -1,   833,    -1,    -1,   836,   405,   406,   407,    -1,
     841,    43,    -1,    -1,    -1,   850,    -1,    -1,    -1,   850,
      -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    60,    -1,
     790,    63,    -1,    -1,   880,    -1,    -1,   797,    -1,    71,
      72,    -1,    74,    -1,    -1,    -1,    78,    79,    80,    -1,
      -1,    -1,   116,   117,   118,   119,   120,    89,   122,   123,
     124,    93,    -1,   898,    -1,    97,    -1,   898,    -1,    -1,
     901,    -1,    -1,    -1,   905,   107,    -1,    -1,   477,    -1,
      -1,   841,   778,   779,   780,   781,    -1,   783,    -1,    -1,
      -1,   937,    -1,   939,    13,    14,    15,    16,    17,    18,
      19,    20,    45,    -1,    47,    48,    -1,   942,    -1,    -1,
      29,   942,    -1,   944,    -1,    -1,    -1,   948,   964,   965,
      -1,   881,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,
     961,    -1,   531,    -1,   894,    -1,    -1,    -1,    -1,   970,
      83,    84,    -1,    -1,    -1,   544,   545,   546,    -1,    -1,
     549,    -1,   551,    96,   553,   554,   555,    -1,    -1,    -1,
      -1,   560,    -1,    -1,    -1,   861,   862,   863,   864,   865,
     866,   867,   868,   869,   870,   871,   872,   873,   874,   875,
     876,   877,   878,   879,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,    -1,    -1,    -1,    -1,   912,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,
      -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,   953,    -1,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
      56,    -1,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    -1,    -1,    73,    -1,    75,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    99,   100,   101,    -1,    -1,    -1,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    -1,    -1,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    -1,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      -1,    -1,    -1,    73,    -1,    75,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    93,    94,    95,    96,    -1,    98,    99,
     100,   101,    -1,    -1,    -1,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    14,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    29,    47,    48,    49,    50,    -1,    52,
      53,    -1,    -1,    56,    -1,    -1,    -1,    -1,    61,    62,
      -1,    -1,    49,    -1,    -1,    68,    69,    70,    -1,    -1,
      -1,   940,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      83,    84,    85,    -1,    87,    88,    -1,    -1,    91,    -1,
      -1,    94,    95,    96,    -1,    -1,    99,     3,     4,     5,
       6,    88,     8,     9,    -1,    -1,    12,    94,    95,    -1,
     113,    98,    -1,    -1,   117,   118,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,   127,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,    45,
      -1,    47,    48,    49,    50,    -1,    52,    53,    -1,    -1,
      56,    -1,    -1,    -1,    -1,    61,    62,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    -1,    -1,    -1,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    83,    84,    85,
      -1,    87,    88,    -1,    -1,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    99,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    12,    -1,    -1,    -1,   113,    -1,    -1,
      -1,   117,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,
      -1,   127,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    45,    -1,    47,    48,    45,    29,    47,    48,
      49,    50,    -1,    52,    53,    -1,    -1,    56,    -1,    -1,
      -1,    -1,    61,    62,    -1,    68,    69,    70,    -1,    68,
      69,    70,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,
      83,    84,    -1,    -1,    83,    84,    85,    -1,    87,    88,
      -1,    -1,    91,    96,    -1,    94,    95,    96,    -1,    -1,
      99,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,   113,    -1,    -1,    -1,   117,    -1,
     123,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,   111,
     112,   113,    -1,    -1,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,    45,    -1,    47,    48,    -1,    -1,    -1,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      62,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,
      -1,    -1,    -1,    75,    -1,    45,    -1,    47,    48,    -1,
      -1,    83,    84,    85,    -1,    87,    -1,    -1,    -1,    91,
       3,     4,     5,     6,    96,     8,     9,    -1,    68,    69,
      70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   113,    -1,    83,    84,   117,   118,    -1,    -1,   121,
      -1,   123,    -1,   125,    -1,   127,    96,    -1,    -1,    -1,
      -1,    -1,    45,    -1,    47,    48,    -1,    -1,    -1,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,
      -1,    -1,    -1,   123,    -1,    68,    69,    -1,     8,     9,
      -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      83,    84,    85,    -1,    87,    -1,    -1,    -1,    91,     3,
       4,     5,     6,    96,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,   105,    -1,    -1,    45,    -1,    47,    48,    -1,
     113,    -1,    52,    -1,   117,   118,    -1,    -1,   121,    -1,
     123,    -1,    62,    -1,   127,    -1,    -1,    -1,    68,    69,
      70,    45,    -1,    47,    48,    -1,    -1,    -1,    52,    53,
      -1,    -1,    -1,    83,    84,    -1,    -1,    61,    62,    -1,
      -1,    -1,    -1,    -1,    68,    69,    96,    -1,    -1,    99,
      -1,    75,    -1,    45,    -1,    47,    48,    -1,    -1,    83,
      84,    85,    -1,    87,    -1,    -1,    -1,    91,     3,     4,
       5,     6,    96,     8,     9,    -1,    68,    69,    70,    -1,
      -1,   105,    -1,    -1,    45,    -1,    47,    48,    -1,   113,
      -1,    83,    84,   117,   118,    -1,    -1,   121,    -1,   123,
      -1,    62,    -1,   127,    96,    -1,    -1,    68,    69,    70,
      45,    -1,    47,    48,    -1,    -1,    -1,    52,    53,    -1,
      -1,    -1,    83,    84,    -1,    -1,    61,    62,    -1,    -1,
      -1,   123,    -1,    68,    69,    96,    -1,    -1,    -1,    -1,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    83,    84,
      85,    -1,    87,    -1,    -1,    -1,    91,     3,     4,     5,
       6,    96,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    -1,    47,    48,    -1,    -1,    -1,    52,   113,    -1,
      -1,    -1,   117,   118,    -1,    -1,   121,    62,   123,    -1,
     125,    -1,   127,    68,    69,    70,    -1,    -1,    -1,    45,
      -1,    47,    48,    -1,    -1,    -1,    52,    53,    83,    84,
      -1,    -1,    -1,    -1,    -1,    61,    62,    -1,    -1,    -1,
      -1,    96,    68,    69,    -1,    -1,    -1,    -1,    -1,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    83,    84,    85,
      -1,    87,    -1,    -1,    -1,    91,     3,     4,     5,     6,
      96,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,   105,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,    -1,
      -1,   117,   118,    -1,    -1,   121,    -1,   123,    -1,    -1,
      -1,   127,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
      47,    48,    -1,    -1,    -1,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    61,    62,    -1,    -1,    -1,    -1,
      -1,    68,    69,    -1,    -1,    -1,    -1,    -1,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    83,    84,    85,    -1,
      87,    -1,    -1,    -1,    91,     3,     4,     5,     6,    96,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
      47,    48,    -1,    -1,    -1,    52,   113,    -1,    -1,    -1,
     117,   118,    -1,    -1,   121,    62,   123,    -1,   125,    -1,
     127,    68,    69,    70,    -1,    -1,    -1,    45,    -1,    47,
      48,    -1,    -1,    -1,    52,    53,    83,    84,    -1,    -1,
      -1,    -1,    -1,    61,    62,    -1,    -1,    -1,    -1,    96,
      68,    69,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    83,    84,    85,    -1,    87,
      -1,    -1,    -1,    91,    -1,    -1,   123,    -1,    96,    -1,
      13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   113,    29,    -1,    -1,   117,
     118,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,
      13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,
      13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      13,    14,    15,    16,    17,    18,    19,    20,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    29,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,    75,    -1,    -1,   128,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,    -1,   106,    -1,   128,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,     8,     9,   127,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,    -1,    -1,    -1,    -1,    -1,    -1,    44,    45,
      -1,    47,    48,    49,    50,    -1,    52,    -1,    -1,    -1,
      56,    57,    58,    59,    -1,    -1,    62,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,    -1,    -1,    73,     8,     9,
      -1,    77,    -1,    -1,    -1,    81,    -1,    83,    84,    -1,
      86,    -1,    88,    -1,    -1,    -1,    -1,    -1,    94,    95,
      96,    -1,    98,    99,   100,    -1,    -1,    -1,    -1,   105,
      -1,    -1,    -1,    -1,    44,    45,    -1,    47,    48,    49,
      50,    -1,    52,    -1,    -1,   121,    56,    57,    58,    59,
      -1,    -1,    62,    -1,    -1,     8,     9,    67,    68,    69,
      70,    -1,    -1,    73,    -1,    -1,    -1,    77,    -1,    -1,
      -1,    81,    -1,    83,    84,    -1,    86,    -1,    88,    -1,
      -1,    -1,    -1,    -1,    94,    95,    96,    -1,    98,    99,
     100,    44,    45,    -1,    47,    48,    49,    50,    -1,    52,
      -1,    -1,    -1,    56,    57,    58,    59,    -1,    -1,    62,
      -1,   121,    -1,    -1,    67,    68,    69,    70,    -1,    -1,
      73,    -1,    -1,    -1,    77,    -1,    -1,    -1,    81,    -1,
      83,    84,    -1,    86,    -1,    88,    -1,    -1,    -1,    -1,
      -1,    94,    95,    96,    -1,    98,    99,   100,    13,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,   121,    13,
      14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    13,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    29,    13,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
      13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,
      -1,    -1,   107,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
      -1,    -1,   106,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,    13,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,    13,
      14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      29,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      29,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    -1,   108,    -1,   110,
     111,   112,   113,    -1,    -1,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,    -1,    -1,   110,   111,   112,   113,
      -1,    -1,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,    -1,   111,   112,   113,
      -1,    -1,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      29,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,    -1,    -1,   112,   113,    -1,    -1,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,    -1,    -1,    -1,   113,
       8,     9,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,    -1,    -1,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,    -1,    -1,    -1,    -1,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,    45,    -1,    47,
      48,    49,    50,    -1,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    62,    -1,     9,    -1,    -1,    -1,
      68,    69,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    83,    84,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    94,    -1,    96,    -1,
      -1,    99,    45,    -1,    47,    48,    49,    50,    -1,    52,
      -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    62,
      -1,     9,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      83,    84,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,
      -1,    94,    95,    96,    -1,    -1,    99,    45,    -1,    47,
      48,    49,    50,    -1,    52,    -1,    -1,    -1,    56,    -1,
      -1,    -1,    -1,    -1,    62,    -1,     9,    -1,    -1,    -1,
      68,    69,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    83,    84,    -1,    -1,    -1,
      88,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,    -1,
      -1,    99,    45,    -1,    47,    48,    49,    -1,    -1,    52,
      -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    62,
      -1,     9,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      83,    84,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,
      -1,    94,    95,    96,    -1,    -1,    99,    45,    -1,    47,
      48,    49,    -1,    -1,    52,    -1,    -1,    -1,    56,    -1,
      -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    -1,    -1,    43,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    83,    84,    55,    -1,    -1,
      88,    -1,    60,    -1,    -1,    63,    94,    95,    96,    -1,
      -1,    99,    -1,    71,    72,    -1,    74,    43,    -1,    -1,
      78,    79,    80,    -1,    -1,    -1,    -1,    -1,    -1,    55,
      -1,    89,    -1,    -1,    60,    93,    -1,    63,    -1,    97,
      -1,    -1,    -1,    -1,    -1,    71,    72,    -1,    74,   107,
      -1,    -1,    78,    79,    80,    -1,    -1,    43,    -1,    -1,
      -1,    -1,    -1,    89,    -1,    -1,    -1,    93,   126,    55,
      -1,    97,    -1,    -1,    60,    -1,    -1,    63,    -1,    -1,
      -1,   107,    -1,    -1,    -1,    71,    72,    -1,    74,    43,
      -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,
     126,    55,    -1,    89,    -1,    -1,    60,    93,    -1,    63,
      -1,    97,    -1,    -1,    -1,    -1,    -1,    71,    72,    -1,
      74,   107,    -1,    -1,    78,    79,    80,    -1,    -1,    43,
      -1,    -1,    -1,    -1,    -1,    89,    -1,    -1,    -1,    93,
     126,    55,    -1,    97,    -1,    -1,    60,    -1,    -1,    63,
      -1,    -1,    -1,   107,    -1,    -1,    -1,    71,    72,    -1,
      74,    43,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,
      -1,    -1,   126,    55,    -1,    89,    -1,    -1,    60,    93,
      -1,    63,    -1,    97,    -1,    -1,    -1,    -1,    -1,    71,
      72,    -1,    74,   107,    -1,    -1,    78,    79,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    -1,
      -1,    93,   126,    -1,    -1,    97
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,   102,   103,   104,   130,   131,   222,     3,     4,     5,
       6,     8,     9,    45,    47,    48,    52,    53,    61,    62,
      68,    69,    75,    83,    84,    85,    87,    91,    96,   113,
     117,   118,   121,   123,   127,   215,   216,   221,     9,    45,
      47,    48,    49,    50,    52,    56,    62,    68,    69,    70,
      83,    84,    88,    94,    95,    96,    99,   181,   184,   185,
     187,   192,   194,   198,   199,   203,   204,   205,   206,     0,
      43,    55,    60,    63,    71,    72,    74,    78,    79,    80,
      89,    93,    97,   107,   134,   136,   137,   139,   140,   141,
     162,   200,   202,   222,   123,   123,   123,   123,   123,   114,
     123,   123,   123,     9,    94,   183,   198,   199,   203,   123,
     123,   123,   114,   123,   215,   215,   215,   215,     9,    45,
      47,    48,    52,    62,    68,    69,    83,    84,    96,   184,
     213,   215,   215,    13,    14,    15,    16,    17,    18,    19,
      20,    29,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   122,   123,   124,     6,   181,    52,    62,
      69,   204,    69,   204,   204,     8,     9,   220,   204,    10,
      14,    50,   113,   118,   123,   180,   222,   105,   220,   105,
     220,   108,   138,   123,   123,   105,   220,   108,   108,   108,
     163,   139,   146,    74,   220,     8,     9,    44,    50,    57,
      58,    59,    67,    73,    77,    81,    86,    94,    98,   100,
     105,   121,   151,   182,   185,   187,   192,   194,   198,   199,
     203,   212,   213,   222,   212,   212,   212,   212,   184,   212,
     212,   212,   220,   123,   220,   220,   212,   212,   184,   184,
     212,   125,   106,   125,   215,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   125,   213,   215,   180,    62,
     118,   180,   180,   180,   180,   180,   124,   193,   105,   186,
     188,   136,     8,   220,   131,   105,   114,    50,   151,   182,
     220,   123,   123,   181,   221,    50,   181,   220,   135,   220,
     105,   107,   108,   109,   174,   107,   142,   220,   220,   125,
     125,   125,   125,   125,   115,   125,   125,   125,   212,   125,
     125,   125,   115,   125,   215,   215,   108,   125,   128,   180,
     125,   211,   215,   222,   196,   197,   222,   195,   131,   108,
     189,   190,   222,   106,   106,   126,   201,     8,     9,    49,
      50,    94,   164,   165,   166,   167,   203,   222,   181,   174,
     147,   152,    10,   118,   153,   143,   181,     8,     9,    10,
      14,    50,   113,   118,   178,   222,   131,   123,   207,   208,
     132,   133,   220,   105,   215,    10,    14,    50,    77,   113,
     118,   123,   144,   168,   220,   123,   125,   123,   215,   123,
     128,   220,   126,   197,   126,    78,    79,    80,    98,   191,
     105,   106,     8,   220,   131,   220,   167,   220,   115,   106,
       8,     9,    10,    14,    50,   113,   118,   123,   179,   222,
     148,   149,   168,     3,     4,     5,     8,    12,    50,    53,
      61,    75,    85,    87,    91,   113,   117,   121,   123,   127,
     170,   171,   177,   181,   217,   218,   221,   222,   118,   168,
     170,   145,   168,   178,   118,   178,   178,   178,   178,   123,
     124,   126,   154,   126,   209,   222,   105,   106,   123,   105,
     175,   176,   215,   222,   107,   118,   168,   168,    13,    14,
      15,    16,    17,    18,    19,    20,    29,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    51,
      75,   106,   109,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   123,   124,   127,   160,   168,   168,
     168,   108,   109,   123,   124,   173,   174,   222,   213,   213,
     170,   106,   109,   126,    94,    98,   199,   219,   220,    98,
     219,    98,   219,    78,    79,    80,   131,   191,   106,   125,
     106,   126,   109,   179,   109,   139,   140,   161,   162,   166,
     118,   179,   179,   179,   179,   179,   109,   124,   172,   222,
     150,   168,   173,   174,   179,   181,   114,   183,   123,   114,
     215,   215,   215,   184,   213,   215,   125,    12,   106,   179,
      13,    14,    15,    16,    17,    18,    19,    20,    29,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     122,   123,   124,   168,   108,   125,   125,   173,   174,   123,
     178,   157,   211,   170,     3,     4,     5,     6,     7,     8,
       9,    10,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    56,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      73,    75,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    90,    91,    92,    93,    94,    95,
      96,    98,    99,   100,   101,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   127,   128,   210,   207,
     133,   212,   175,   126,   106,   168,   125,   128,   125,     4,
     215,   169,   211,   106,   125,   125,   125,   215,   220,   219,
     220,   219,   219,   219,   219,   219,   126,     8,   107,   220,
     184,   172,   184,   179,   125,    53,    85,    87,   113,   117,
     118,   121,   123,   127,   214,   216,   211,   173,   174,   106,
     109,   173,   179,   184,   123,   184,   184,   125,   125,    50,
     159,   222,    12,   177,   173,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   125,   213,   215,   125,
     123,   159,   106,   158,   170,   128,   125,   209,   126,   125,
     126,   105,   215,   170,   128,   144,   159,   106,   125,   125,
     123,   114,   123,   114,   214,   214,   214,   214,   184,   213,
     214,    13,    14,    15,    16,    17,    18,    19,    20,    29,
     110,   111,   112,   113,   116,   117,   118,   119,   120,   122,
     123,   124,   128,   106,   149,   215,   173,   115,   212,   125,
     115,   215,    76,    90,   108,   125,   128,   123,   155,   145,
     170,   125,   159,   126,   175,   125,   107,   107,   170,   184,
     184,   184,   125,   125,   214,   214,   214,   214,   214,   214,
     214,   214,   214,   214,   214,   214,   214,   214,   214,   214,
     214,   214,   214,   125,   213,   215,   150,   123,   125,   123,
     123,   215,   156,   170,   125,   159,   126,   159,   125,   115,
     125,   115,   214,   108,   125,   128,   213,   213,   125,   220,
     170,   125,   159,   159,   123,   123,   214,   125,   125,   125,
     125,   159,   213,   213,   159,   125,   125
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))

/* Error token number */
#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (YYID (N))                                                     \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (YYID (0))
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

__attribute__((__unused__))
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
#else
static unsigned
yy_location_print_ (yyo, yylocp)
    FILE *yyo;
    YYLTYPE const * const yylocp;
#endif
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += fprintf (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += fprintf (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += fprintf (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += fprintf (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += fprintf (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */
#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, &yylloc, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, &yylloc)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
        break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULL;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
        break;
    }
}




/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;


#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
static YYSTYPE yyval_default;
# define YY_INITIAL_VALUE(Value) = Value
#endif
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc = yyloc_default;


    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 3:
/* Line 1792 of yacc.c  */
#line 386 "dtool/src/cppparser/cppBison.yxx"
    {
  current_expr = (yyvsp[(2) - (2)].u.expr);
}
    break;

  case 4:
/* Line 1792 of yacc.c  */
#line 390 "dtool/src/cppparser/cppBison.yxx"
    {
  current_type = (yyvsp[(2) - (2)].u.type);
}
    break;

  case 10:
/* Line 1792 of yacc.c  */
#line 408 "dtool/src/cppparser/cppBison.yxx"
    {
  delete (yyvsp[(3) - (4)].u.expr);
}
    break;

  case 11:
/* Line 1792 of yacc.c  */
#line 420 "dtool/src/cppparser/cppBison.yxx"
    {
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) |
                     ((yyvsp[(1) - (2)].u.integer) & CPPInstance::SC_c_binding));
}
    break;

  case 12:
/* Line 1792 of yacc.c  */
#line 425 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 20:
/* Line 1792 of yacc.c  */
#line 439 "dtool/src/cppparser/cppBison.yxx"
    {
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = (yylsp[(1) - (1)]);
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
    break;

  case 21:
/* Line 1792 of yacc.c  */
#line 452 "dtool/src/cppparser/cppBison.yxx"
    {
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", (yylsp[(1) - (1)]));
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
    break;

  case 22:
/* Line 1792 of yacc.c  */
#line 461 "dtool/src/cppparser/cppBison.yxx"
    {
  current_scope->set_current_vis(V_published);
}
    break;

  case 23:
/* Line 1792 of yacc.c  */
#line 465 "dtool/src/cppparser/cppBison.yxx"
    {
  if (publish_nest_level > 0) {
    current_scope->set_current_vis(V_published);
  } else {
    current_scope->set_current_vis(V_public);
  }
}
    break;

  case 24:
/* Line 1792 of yacc.c  */
#line 473 "dtool/src/cppparser/cppBison.yxx"
    {
  current_scope->set_current_vis(V_protected);
}
    break;

  case 25:
/* Line 1792 of yacc.c  */
#line 477 "dtool/src/cppparser/cppBison.yxx"
    {
  current_scope->set_current_vis(V_private);
}
    break;

  case 26:
/* Line 1792 of yacc.c  */
#line 481 "dtool/src/cppparser/cppBison.yxx"
    {

  CPPDeclaration *getter = (yyvsp[(5) - (7)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(5) - (7)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (7)]));
  }

  CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[(3) - (7)].u.identifier), getter->as_function_group(), NULL, current_scope, (yylsp[(1) - (7)]).file);
  current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (7)]));
}
    break;

  case 27:
/* Line 1792 of yacc.c  */
#line 492 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *getter = (yyvsp[(5) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(5) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (9)]));
  }

  CPPDeclaration *setter = (yyvsp[(7) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid setter: " + (yyvsp[(7) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (9)]));
  }

  CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[(3) - (9)].u.identifier), getter->as_function_group(),
                                                           setter->as_function_group(),
                                                           current_scope, (yylsp[(1) - (9)]).file);
  current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (9)]));
}
    break;

  case 28:
/* Line 1792 of yacc.c  */
#line 509 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPMakeSeq *make_seq = new CPPMakeSeq((yyvsp[(3) - (9)].u.identifier)->get_simple_name(), (yyvsp[(5) - (9)].u.identifier)->get_simple_name(), (yyvsp[(7) - (9)].u.identifier)->get_simple_name(), (yylsp[(1) - (9)]).file);
  current_scope->add_declaration(make_seq, global_scope, current_lexer, (yylsp[(1) - (9)]));
}
    break;

  case 29:
/* Line 1792 of yacc.c  */
#line 517 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
    break;

  case 30:
/* Line 1792 of yacc.c  */
#line 523 "dtool/src/cppparser/cppBison.yxx"
    {
  delete current_scope;
  pop_scope();
}
    break;

  case 31:
/* Line 1792 of yacc.c  */
#line 532 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = 0;
}
    break;

  case 32:
/* Line 1792 of yacc.c  */
#line 536 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (2)].u.integer) | (int)CPPInstance::SC_extern;
}
    break;

  case 33:
/* Line 1792 of yacc.c  */
#line 540 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (3)].u.integer) | (int)CPPInstance::SC_extern;
  if ((yyvsp[(3) - (3)].str) == "C") {
    (yyval.u.integer) |= (int)CPPInstance::SC_c_binding;
  } else if ((yyvsp[(3) - (3)].str) == "C++") {
    (yyval.u.integer) &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + (yyvsp[(3) - (3)].str) + "\"", (yylsp[(3) - (3)]));
  }
}
    break;

  case 34:
/* Line 1792 of yacc.c  */
#line 551 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (2)].u.integer) | (int)CPPInstance::SC_static;
}
    break;

  case 35:
/* Line 1792 of yacc.c  */
#line 555 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (2)].u.integer) | (int)CPPInstance::SC_inline;
}
    break;

  case 36:
/* Line 1792 of yacc.c  */
#line 559 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (2)].u.integer) | (int)CPPInstance::SC_virtual;
}
    break;

  case 37:
/* Line 1792 of yacc.c  */
#line 563 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (2)].u.integer) | (int)CPPInstance::SC_explicit;
}
    break;

  case 38:
/* Line 1792 of yacc.c  */
#line 567 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (2)].u.integer) | (int)CPPInstance::SC_volatile;
}
    break;

  case 39:
/* Line 1792 of yacc.c  */
#line 571 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (2)].u.integer) | (int)CPPInstance::SC_mutable;
}
    break;

  case 40:
/* Line 1792 of yacc.c  */
#line 575 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (2)].u.integer) | (int)CPPInstance::SC_register;
}
    break;

  case 41:
/* Line 1792 of yacc.c  */
#line 579 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (2)].u.integer) | (int)CPPInstance::SC_blocking;
}
    break;

  case 42:
/* Line 1792 of yacc.c  */
#line 583 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (2)].u.integer) | (int)CPPInstance::SC_extension;
}
    break;

  case 43:
/* Line 1792 of yacc.c  */
#line 590 "dtool/src/cppparser/cppBison.yxx"
    {
  /* multiple_var_declaration adds itself to the scope. */
}
    break;

  case 44:
/* Line 1792 of yacc.c  */
#line 594 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration((yyvsp[(2) - (3)].u.decl), global_scope, current_lexer, (yylsp[(2) - (3)]));
}
    break;

  case 45:
/* Line 1792 of yacc.c  */
#line 603 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(2) - (3)].u.instance) != (CPPInstance *)NULL) {
    (yyvsp[(2) - (3)].u.instance)->_storage_class |= (current_storage_class | (yyvsp[(1) - (3)].u.integer));
    current_scope->add_declaration((yyvsp[(2) - (3)].u.instance), global_scope, current_lexer, (yylsp[(2) - (3)]));
    (yyvsp[(2) - (3)].u.instance)->set_initializer((yyvsp[(3) - (3)].u.expr));
  }
}
    break;

  case 46:
/* Line 1792 of yacc.c  */
#line 614 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[(2) - (2)].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type();
  }
  push_storage_class((yyvsp[(1) - (2)].u.integer));
}
    break;

  case 47:
/* Line 1792 of yacc.c  */
#line 625 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 48:
/* Line 1792 of yacc.c  */
#line 629 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  current_type = (yyvsp[(3) - (3)].u.type);
  push_storage_class((yyvsp[(1) - (3)].u.integer));
}
    break;

  case 49:
/* Line 1792 of yacc.c  */
#line 636 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 50:
/* Line 1792 of yacc.c  */
#line 647 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (2)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (2)]).file);
  inst->set_initializer((yyvsp[(2) - (2)].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(1) - (2)]));
}
    break;

  case 51:
/* Line 1792 of yacc.c  */
#line 655 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (4)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (4)]).file);
  inst->set_initializer((yyvsp[(2) - (4)].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(1) - (4)]));
}
    break;

  case 52:
/* Line 1792 of yacc.c  */
#line 666 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(1) - (2)].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (2)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (2)]).file);
  inst->set_initializer((yyvsp[(2) - (2)].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(1) - (2)]));
}
    break;

  case 53:
/* Line 1792 of yacc.c  */
#line 675 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(1) - (4)].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (4)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (4)]).file);
  inst->set_initializer((yyvsp[(2) - (4)].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(1) - (4)]));
}
    break;

  case 54:
/* Line 1792 of yacc.c  */
#line 688 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[(2) - (2)].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type();
  }
  push_storage_class((yyvsp[(1) - (2)].u.integer));
}
    break;

  case 55:
/* Line 1792 of yacc.c  */
#line 699 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 56:
/* Line 1792 of yacc.c  */
#line 703 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  current_type = (yyvsp[(3) - (3)].u.type);
  push_storage_class((yyvsp[(1) - (3)].u.integer));
}
    break;

  case 57:
/* Line 1792 of yacc.c  */
#line 710 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 58:
/* Line 1792 of yacc.c  */
#line 714 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(2) - (3)].u.instance) != (CPPDeclaration *)NULL) {
    CPPInstance *inst = (yyvsp[(2) - (3)].u.instance)->as_instance();
    if (inst != (CPPInstance *)NULL) {
      inst->_storage_class |= (current_storage_class | (yyvsp[(1) - (3)].u.integer));
      current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(2) - (3)]));
      current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, (yylsp[(2) - (3)]));
    }
  }
}
    break;

  case 59:
/* Line 1792 of yacc.c  */
#line 728 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (2)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (2)]).file);
  inst->set_initializer((yyvsp[(2) - (2)].u.expr));
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, (yylsp[(1) - (2)]));
}
    break;

  case 60:
/* Line 1792 of yacc.c  */
#line 736 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (4)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (4)]).file);
  inst->set_initializer((yyvsp[(2) - (4)].u.expr));
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, (yylsp[(1) - (4)]));
}
    break;

  case 61:
/* Line 1792 of yacc.c  */
#line 747 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(1) - (2)].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (2)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (2)]).file);
  inst->set_initializer((yyvsp[(2) - (2)].u.expr));
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, (yylsp[(1) - (2)]));
}
    break;

  case 62:
/* Line 1792 of yacc.c  */
#line 756 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(1) - (4)].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (4)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (4)]).file);
  inst->set_initializer((yyvsp[(2) - (4)].u.expr));
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, (yylsp[(1) - (4)]));
}
    break;

  case 63:
/* Line 1792 of yacc.c  */
#line 770 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(1) - (2)].u.identifier)->get_scope(current_scope, global_scope));
}
    break;

  case 64:
/* Line 1792 of yacc.c  */
#line 774 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  CPPType *type;
  if ((yyvsp[(1) - (6)].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[(1) - (6)].u.identifier));
  ii->add_func_modifier((yyvsp[(4) - (6)].u.param_list), (yyvsp[(6) - (6)].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (6)]).file);
}
    break;

  case 65:
/* Line 1792 of yacc.c  */
#line 792 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(1) - (2)].u.identifier)->get_scope(current_scope, global_scope));
}
    break;

  case 66:
/* Line 1792 of yacc.c  */
#line 796 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  CPPType *type;
  if ((yyvsp[(1) - (6)].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[(1) - (6)].u.identifier));
  ii->add_func_modifier((yyvsp[(4) - (6)].u.param_list), (yyvsp[(6) - (6)].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (6)]).file);
}
    break;

  case 67:
/* Line 1792 of yacc.c  */
#line 816 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(2) - (3)].u.identifier)->get_scope(current_scope, global_scope));
}
    break;

  case 68:
/* Line 1792 of yacc.c  */
#line 820 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  if ((yyvsp[(2) - (7)].u.identifier)->is_scoped()) {
    yyerror("Invalid destructor name: ~" + (yyvsp[(2) - (7)].u.identifier)->get_fully_scoped_name(), (yylsp[(2) - (7)]));
  } else {
    CPPIdentifier *ident =
      new CPPIdentifier("~" + (yyvsp[(2) - (7)].u.identifier)->get_simple_name(), (yylsp[(2) - (7)]).file);
    delete (yyvsp[(2) - (7)].u.identifier);

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);

    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier((yyvsp[(5) - (7)].u.param_list), (yyvsp[(7) - (7)].u.integer));

    (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(2) - (7)]).file);
  }
}
    break;

  case 69:
/* Line 1792 of yacc.c  */
#line 846 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(4) - (6)].u.inst_ident)->get_scope(current_scope, global_scope));
}
    break;

  case 70:
/* Line 1792 of yacc.c  */
#line 850 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  CPPType *type = (yyvsp[(1) - (10)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[(4) - (10)].u.inst_ident);
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier((yyvsp[(8) - (10)].u.param_list), (yyvsp[(10) - (10)].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (10)]).file);
}
    break;

  case 71:
/* Line 1792 of yacc.c  */
#line 861 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(5) - (7)].u.inst_ident)->get_scope(current_scope, global_scope));
}
    break;

  case 72:
/* Line 1792 of yacc.c  */
#line 865 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  CPPType *type = (yyvsp[(1) - (11)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[(5) - (11)].u.inst_ident);
  ii->add_scoped_pointer_modifier((yyvsp[(3) - (11)].u.identifier));
  ii->add_func_modifier((yyvsp[(9) - (11)].u.param_list), (yyvsp[(11) - (11)].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (11)]).file);
}
    break;

  case 73:
/* Line 1792 of yacc.c  */
#line 878 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (4)].u.identifier) != NULL) {
    push_scope((yyvsp[(1) - (4)].u.identifier)->get_scope(current_scope, global_scope));
  }
}
    break;

  case 74:
/* Line 1792 of yacc.c  */
#line 884 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (8)].u.identifier) != NULL) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give typecast operators the name "operator typecast <name>",
  // where <name> is a simple name of the type to be typecast.  Use
  // the method's return type to determine the full type description.
  string name = "operator typecast " + (yyvsp[(2) - (8)].u.type)->get_simple_name();
  CPPIdentifier *ident = (yyvsp[(1) - (8)].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier(name, (yylsp[(1) - (8)]).file);
  } else {
    ident->add_name(name);
  }
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[(2) - (8)].u.type), (yyvsp[(3) - (8)].u.inst_ident), 0, (yylsp[(3) - (8)]).file), ident, (yyvsp[(6) - (8)].u.param_list), (yyvsp[(8) - (8)].u.integer));
}
    break;

  case 75:
/* Line 1792 of yacc.c  */
#line 909 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (5)].u.identifier) != NULL) {
    push_scope((yyvsp[(1) - (5)].u.identifier)->get_scope(current_scope, global_scope));
  }
}
    break;

  case 76:
/* Line 1792 of yacc.c  */
#line 915 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (9)].u.identifier) != NULL) {
    pop_scope();
  }

  CPPIdentifier *ident = (yyvsp[(1) - (9)].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator typecast", (yylsp[(1) - (9)]).file);
  } else {
    ident->add_name("operator typecast");
  }
  (yyvsp[(4) - (9)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[(3) - (9)].u.type), (yyvsp[(4) - (9)].u.inst_ident), 0, (yylsp[(4) - (9)]).file), ident, (yyvsp[(7) - (9)].u.param_list), (yyvsp[(9) - (9)].u.integer));
}
    break;

  case 77:
/* Line 1792 of yacc.c  */
#line 935 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *decl =
    (yyvsp[(1) - (1)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != (CPPDeclaration *)NULL) {
    (yyval.u.instance) = decl->as_instance();
  } else {
    (yyval.u.instance) = (CPPInstance *)NULL;
  }
}
    break;

  case 78:
/* Line 1792 of yacc.c  */
#line 948 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = 0;
}
    break;

  case 79:
/* Line 1792 of yacc.c  */
#line 952 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (int)CPPFunctionType::F_const_method;
}
    break;

  case 80:
/* Line 1792 of yacc.c  */
#line 956 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (int)CPPFunctionType::F_noexcept;
}
    break;

  case 81:
/* Line 1792 of yacc.c  */
#line 960 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (4)].u.integer);
}
    break;

  case 82:
/* Line 1792 of yacc.c  */
#line 964 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (5)].u.integer);
}
    break;

  case 83:
/* Line 1792 of yacc.c  */
#line 971 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "!";
}
    break;

  case 84:
/* Line 1792 of yacc.c  */
#line 975 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "~";
}
    break;

  case 85:
/* Line 1792 of yacc.c  */
#line 979 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "*";
}
    break;

  case 86:
/* Line 1792 of yacc.c  */
#line 983 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "/";
}
    break;

  case 87:
/* Line 1792 of yacc.c  */
#line 987 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "%";
}
    break;

  case 88:
/* Line 1792 of yacc.c  */
#line 991 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "+";
}
    break;

  case 89:
/* Line 1792 of yacc.c  */
#line 995 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "-";
}
    break;

  case 90:
/* Line 1792 of yacc.c  */
#line 999 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "|";
}
    break;

  case 91:
/* Line 1792 of yacc.c  */
#line 1003 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "&";
}
    break;

  case 92:
/* Line 1792 of yacc.c  */
#line 1007 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "^";
}
    break;

  case 93:
/* Line 1792 of yacc.c  */
#line 1011 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "||";
}
    break;

  case 94:
/* Line 1792 of yacc.c  */
#line 1015 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "&&";
}
    break;

  case 95:
/* Line 1792 of yacc.c  */
#line 1019 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "==";
}
    break;

  case 96:
/* Line 1792 of yacc.c  */
#line 1023 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "!=";
}
    break;

  case 97:
/* Line 1792 of yacc.c  */
#line 1027 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<=";
}
    break;

  case 98:
/* Line 1792 of yacc.c  */
#line 1031 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">=";
}
    break;

  case 99:
/* Line 1792 of yacc.c  */
#line 1035 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<";
}
    break;

  case 100:
/* Line 1792 of yacc.c  */
#line 1039 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">";
}
    break;

  case 101:
/* Line 1792 of yacc.c  */
#line 1043 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<<";
}
    break;

  case 102:
/* Line 1792 of yacc.c  */
#line 1047 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">>";
}
    break;

  case 103:
/* Line 1792 of yacc.c  */
#line 1051 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "=";
}
    break;

  case 104:
/* Line 1792 of yacc.c  */
#line 1055 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ",";
}
    break;

  case 105:
/* Line 1792 of yacc.c  */
#line 1059 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "++";
}
    break;

  case 106:
/* Line 1792 of yacc.c  */
#line 1063 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "--";
}
    break;

  case 107:
/* Line 1792 of yacc.c  */
#line 1067 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "*=";
}
    break;

  case 108:
/* Line 1792 of yacc.c  */
#line 1071 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "/=";
}
    break;

  case 109:
/* Line 1792 of yacc.c  */
#line 1075 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "%=";
}
    break;

  case 110:
/* Line 1792 of yacc.c  */
#line 1079 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "+=";
}
    break;

  case 111:
/* Line 1792 of yacc.c  */
#line 1083 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "-=";
}
    break;

  case 112:
/* Line 1792 of yacc.c  */
#line 1087 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "|=";
}
    break;

  case 113:
/* Line 1792 of yacc.c  */
#line 1091 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "&=";
}
    break;

  case 114:
/* Line 1792 of yacc.c  */
#line 1095 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "^=";
}
    break;

  case 115:
/* Line 1792 of yacc.c  */
#line 1099 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<<=";
}
    break;

  case 116:
/* Line 1792 of yacc.c  */
#line 1103 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">>=";
}
    break;

  case 117:
/* Line 1792 of yacc.c  */
#line 1107 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "->";
}
    break;

  case 118:
/* Line 1792 of yacc.c  */
#line 1111 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "[]";
}
    break;

  case 119:
/* Line 1792 of yacc.c  */
#line 1115 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "()";
}
    break;

  case 120:
/* Line 1792 of yacc.c  */
#line 1119 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "new";
}
    break;

  case 121:
/* Line 1792 of yacc.c  */
#line 1123 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "delete";
}
    break;

  case 124:
/* Line 1792 of yacc.c  */
#line 1135 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope(new CPPTemplateScope(current_scope));
}
    break;

  case 125:
/* Line 1792 of yacc.c  */
#line 1139 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
}
    break;

  case 128:
/* Line 1792 of yacc.c  */
#line 1151 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[(1) - (1)].u.decl));
}
    break;

  case 129:
/* Line 1792 of yacc.c  */
#line 1157 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[(3) - (3)].u.decl));
}
    break;

  case 130:
/* Line 1792 of yacc.c  */
#line 1166 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 131:
/* Line 1792 of yacc.c  */
#line 1170 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[(2) - (4)].u.identifier), (yyvsp[(4) - (4)].u.type)));
}
    break;

  case 132:
/* Line 1792 of yacc.c  */
#line 1174 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 133:
/* Line 1792 of yacc.c  */
#line 1178 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[(2) - (4)].u.identifier), (yyvsp[(4) - (4)].u.type)));
}
    break;

  case 134:
/* Line 1792 of yacc.c  */
#line 1182 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance((yyvsp[(1) - (3)].u.type), (yyvsp[(2) - (3)].u.inst_ident), 0, (yylsp[(2) - (3)]).file);
  inst->set_initializer((yyvsp[(3) - (3)].u.expr));
  (yyval.u.decl) = inst;
}
    break;

  case 135:
/* Line 1792 of yacc.c  */
#line 1188 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(3) - (4)].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[(2) - (4)].u.type), (yyvsp[(3) - (4)].u.inst_ident), 0, (yylsp[(3) - (4)]).file);
  inst->set_initializer((yyvsp[(4) - (4)].u.expr));
  (yyval.u.decl) = inst;
}
    break;

  case 136:
/* Line 1792 of yacc.c  */
#line 1198 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 137:
/* Line 1792 of yacc.c  */
#line 1202 "dtool/src/cppparser/cppBison.yxx"
    {
  yywarning("Not a type: " + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
    break;

  case 138:
/* Line 1792 of yacc.c  */
#line 1207 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert((yyval.u.type) != NULL);
}
    break;

  case 139:
/* Line 1792 of yacc.c  */
#line 1216 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 140:
/* Line 1792 of yacc.c  */
#line 1220 "dtool/src/cppparser/cppBison.yxx"
    {
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = (yyvsp[(1) - (2)].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator "+(yyvsp[(2) - (2)].str), (yylsp[(2) - (2)]).file);
  } else {
    ident->_names.push_back("operator "+(yyvsp[(2) - (2)].str));
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
    break;

  case 141:
/* Line 1792 of yacc.c  */
#line 1234 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 142:
/* Line 1792 of yacc.c  */
#line 1239 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 143:
/* Line 1792 of yacc.c  */
#line 1244 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 144:
/* Line 1792 of yacc.c  */
#line 1249 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 145:
/* Line 1792 of yacc.c  */
#line 1254 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 146:
/* Line 1792 of yacc.c  */
#line 1259 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 147:
/* Line 1792 of yacc.c  */
#line 1264 "dtool/src/cppparser/cppBison.yxx"
    {
  // bitfield definition.  We ignore the bitfield for now.
  (yyval.u.inst_ident) = (yyvsp[(1) - (3)].u.inst_ident);
}
    break;

  case 148:
/* Line 1792 of yacc.c  */
#line 1269 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
    break;

  case 149:
/* Line 1792 of yacc.c  */
#line 1274 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(1) - (2)].u.inst_ident)->get_scope(current_scope, global_scope));
}
    break;

  case 150:
/* Line 1792 of yacc.c  */
#line 1278 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  (yyval.u.inst_ident) = (yyvsp[(1) - (6)].u.inst_ident);
  if ((yyvsp[(4) - (6)].u.param_list)->is_parameter_expr() && (yyvsp[(6) - (6)].u.integer) == 0) {
    // Oops, this must have been an instance declaration with a
    // parameter list, not a function prototype.
    (yyval.u.inst_ident)->add_initializer_modifier((yyvsp[(4) - (6)].u.param_list));

  } else {
    // This was (probably) a function prototype.
    (yyval.u.inst_ident)->add_func_modifier((yyvsp[(4) - (6)].u.param_list), (yyvsp[(6) - (6)].u.integer));
  }
}
    break;

  case 151:
/* Line 1792 of yacc.c  */
#line 1296 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
}
    break;

  case 152:
/* Line 1792 of yacc.c  */
#line 1300 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 153:
/* Line 1792 of yacc.c  */
#line 1305 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (1)].u.param_list);
}
    break;

  case 154:
/* Line 1792 of yacc.c  */
#line 1309 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (3)].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 155:
/* Line 1792 of yacc.c  */
#line 1314 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (2)].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 156:
/* Line 1792 of yacc.c  */
#line 1322 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[(1) - (1)].u.instance));
}
    break;

  case 157:
/* Line 1792 of yacc.c  */
#line 1327 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (3)].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[(3) - (3)].u.instance));
}
    break;

  case 158:
/* Line 1792 of yacc.c  */
#line 1335 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 159:
/* Line 1792 of yacc.c  */
#line 1339 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (2)].u.expr);
}
    break;

  case 160:
/* Line 1792 of yacc.c  */
#line 1346 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 161:
/* Line 1792 of yacc.c  */
#line 1350 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (2)].u.expr);
}
    break;

  case 162:
/* Line 1792 of yacc.c  */
#line 1357 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 163:
/* Line 1792 of yacc.c  */
#line 1361 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 164:
/* Line 1792 of yacc.c  */
#line 1365 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 165:
/* Line 1792 of yacc.c  */
#line 1369 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 166:
/* Line 1792 of yacc.c  */
#line 1373 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 170:
/* Line 1792 of yacc.c  */
#line 1386 "dtool/src/cppparser/cppBison.yxx"
    {
}
    break;

  case 174:
/* Line 1792 of yacc.c  */
#line 1395 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.instance) = new CPPInstance((yyvsp[(1) - (3)].u.type), (yyvsp[(2) - (3)].u.inst_ident), 0, (yylsp[(2) - (3)]).file);
  (yyval.u.instance)->set_initializer((yyvsp[(3) - (3)].u.expr));
}
    break;

  case 175:
/* Line 1792 of yacc.c  */
#line 1400 "dtool/src/cppparser/cppBison.yxx"
    {
  yywarning("Not a type: " + (yyvsp[(1) - (3)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (3)]));
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
  (yyval.u.instance) = new CPPInstance(type, (yyvsp[(2) - (3)].u.inst_ident), 0, (yylsp[(2) - (3)]).file);
  (yyval.u.instance)->set_initializer((yyvsp[(3) - (3)].u.expr));
}
    break;

  case 176:
/* Line 1792 of yacc.c  */
#line 1408 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(3) - (4)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[(2) - (4)].u.type), (yyvsp[(3) - (4)].u.inst_ident), 0, (yylsp[(3) - (4)]).file);
  (yyval.u.instance)->set_initializer((yyvsp[(4) - (4)].u.expr));
}
    break;

  case 177:
/* Line 1792 of yacc.c  */
#line 1414 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_parameter));
  (yyval.u.instance) = new CPPInstance(type, "expr");
  (yyval.u.instance)->set_initializer((yyvsp[(1) - (1)].u.expr));
}
    break;

  case 178:
/* Line 1792 of yacc.c  */
#line 1424 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 179:
/* Line 1792 of yacc.c  */
#line 1428 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 180:
/* Line 1792 of yacc.c  */
#line 1432 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 181:
/* Line 1792 of yacc.c  */
#line 1436 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 182:
/* Line 1792 of yacc.c  */
#line 1441 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 183:
/* Line 1792 of yacc.c  */
#line 1446 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 184:
/* Line 1792 of yacc.c  */
#line 1451 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 185:
/* Line 1792 of yacc.c  */
#line 1456 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 186:
/* Line 1792 of yacc.c  */
#line 1461 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 187:
/* Line 1792 of yacc.c  */
#line 1469 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 188:
/* Line 1792 of yacc.c  */
#line 1473 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 189:
/* Line 1792 of yacc.c  */
#line 1477 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 190:
/* Line 1792 of yacc.c  */
#line 1481 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 191:
/* Line 1792 of yacc.c  */
#line 1486 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 192:
/* Line 1792 of yacc.c  */
#line 1491 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 193:
/* Line 1792 of yacc.c  */
#line 1496 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 194:
/* Line 1792 of yacc.c  */
#line 1501 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 195:
/* Line 1792 of yacc.c  */
#line 1506 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 196:
/* Line 1792 of yacc.c  */
#line 1511 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (7)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[(5) - (7)].u.param_list), (yyvsp[(7) - (7)].u.integer));
}
    break;

  case 197:
/* Line 1792 of yacc.c  */
#line 1517 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
    break;

  case 198:
/* Line 1792 of yacc.c  */
#line 1525 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 199:
/* Line 1792 of yacc.c  */
#line 1529 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 200:
/* Line 1792 of yacc.c  */
#line 1534 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 201:
/* Line 1792 of yacc.c  */
#line 1539 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 202:
/* Line 1792 of yacc.c  */
#line 1544 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 203:
/* Line 1792 of yacc.c  */
#line 1549 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 204:
/* Line 1792 of yacc.c  */
#line 1554 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 205:
/* Line 1792 of yacc.c  */
#line 1559 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (7)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[(5) - (7)].u.param_list), (yyvsp[(7) - (7)].u.integer));
}
    break;

  case 206:
/* Line 1792 of yacc.c  */
#line 1568 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 207:
/* Line 1792 of yacc.c  */
#line 1572 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert((yyval.u.type) != NULL);
}
    break;

  case 208:
/* Line 1792 of yacc.c  */
#line 1577 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 209:
/* Line 1792 of yacc.c  */
#line 1581 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.struct_type));
}
    break;

  case 210:
/* Line 1792 of yacc.c  */
#line 1585 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.struct_type));
}
    break;

  case 211:
/* Line 1792 of yacc.c  */
#line 1589 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.enum_type));
}
    break;

  case 212:
/* Line 1792 of yacc.c  */
#line 1593 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.enum_type));
}
    break;

  case 213:
/* Line 1792 of yacc.c  */
#line 1597 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 214:
/* Line 1792 of yacc.c  */
#line 1613 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 215:
/* Line 1792 of yacc.c  */
#line 1632 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 216:
/* Line 1792 of yacc.c  */
#line 1636 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert((yyval.u.decl) != NULL);
}
    break;

  case 217:
/* Line 1792 of yacc.c  */
#line 1641 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 218:
/* Line 1792 of yacc.c  */
#line 1645 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[(1) - (1)].u.struct_type));
}
    break;

  case 219:
/* Line 1792 of yacc.c  */
#line 1649 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[(1) - (1)].u.struct_type)));
}
    break;

  case 220:
/* Line 1792 of yacc.c  */
#line 1653 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[(1) - (1)].u.enum_type));
}
    break;

  case 221:
/* Line 1792 of yacc.c  */
#line 1657 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[(1) - (1)].u.enum_type)));
}
    break;

  case 222:
/* Line 1792 of yacc.c  */
#line 1661 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
    break;

  case 223:
/* Line 1792 of yacc.c  */
#line 1677 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
    break;

  case 224:
/* Line 1792 of yacc.c  */
#line 1696 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 225:
/* Line 1792 of yacc.c  */
#line 1700 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert((yyval.u.type) != NULL);
}
    break;

  case 226:
/* Line 1792 of yacc.c  */
#line 1705 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 227:
/* Line 1792 of yacc.c  */
#line 1709 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 228:
/* Line 1792 of yacc.c  */
#line 1725 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 229:
/* Line 1792 of yacc.c  */
#line 1744 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance((yyvsp[(1) - (2)].u.type), (yyvsp[(2) - (2)].u.inst_ident), 0, (yylsp[(1) - (2)]).file);
  (yyval.u.type) = inst->_type;
  delete inst;
}
    break;

  case 230:
/* Line 1792 of yacc.c  */
#line 1750 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(3) - (3)].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[(2) - (3)].u.type), (yyvsp[(3) - (3)].u.inst_ident), 0, (yylsp[(1) - (3)]).file);
  (yyval.u.type) = inst->_type;
  delete inst;
}
    break;

  case 231:
/* Line 1792 of yacc.c  */
#line 1760 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPVisibility starting_vis =
  ((yyvsp[(1) - (2)].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType((yyvsp[(1) - (2)].u.extension_enum), NULL, current_scope,
                                        new_scope, (yylsp[(1) - (2)]).file);
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
    break;

  case 232:
/* Line 1792 of yacc.c  */
#line 1774 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
    break;

  case 233:
/* Line 1792 of yacc.c  */
#line 1784 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPVisibility starting_vis =
  ((yyvsp[(1) - (2)].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, (yyvsp[(2) - (2)].u.identifier)->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope,
                                        new_scope, (yylsp[(1) - (2)]).file);
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);

  push_scope(new_scope);
  push_struct(st);
}
    break;

  case 234:
/* Line 1792 of yacc.c  */
#line 1804 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
    break;

  case 239:
/* Line 1792 of yacc.c  */
#line 1824 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(2) - (2)].u.type), V_public, false);
}
    break;

  case 240:
/* Line 1792 of yacc.c  */
#line 1828 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(2) - (2)].u.type), V_protected, false);
}
    break;

  case 241:
/* Line 1792 of yacc.c  */
#line 1832 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(2) - (2)].u.type), V_private, false);
}
    break;

  case 242:
/* Line 1792 of yacc.c  */
#line 1836 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_public, true);
}
    break;

  case 243:
/* Line 1792 of yacc.c  */
#line 1840 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_protected, true);
}
    break;

  case 244:
/* Line 1792 of yacc.c  */
#line 1844 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_private, true);
}
    break;

  case 245:
/* Line 1792 of yacc.c  */
#line 1848 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_public, true);
}
    break;

  case 246:
/* Line 1792 of yacc.c  */
#line 1852 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_protected, true);
}
    break;

  case 247:
/* Line 1792 of yacc.c  */
#line 1856 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_private, true);
}
    break;

  case 248:
/* Line 1792 of yacc.c  */
#line 1863 "dtool/src/cppparser/cppBison.yxx"
    {
  current_enum = new CPPEnumType(NULL, current_scope, (yylsp[(1) - (2)]).file);
}
    break;

  case 249:
/* Line 1792 of yacc.c  */
#line 1867 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.enum_type) = current_enum;
  current_enum = NULL;
}
    break;

  case 250:
/* Line 1792 of yacc.c  */
#line 1875 "dtool/src/cppparser/cppBison.yxx"
    {
  current_enum = new CPPEnumType((yyvsp[(2) - (3)].u.identifier), current_scope, (yylsp[(1) - (3)]).file);
}
    break;

  case 251:
/* Line 1792 of yacc.c  */
#line 1879 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.enum_type) = current_enum;
  current_enum = NULL;
}
    break;

  case 253:
/* Line 1792 of yacc.c  */
#line 1888 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[(2) - (3)].u.identifier)->get_simple_name());
  current_scope->add_enum_value(inst, current_lexer, (yylsp[(2) - (3)]));
}
    break;

  case 254:
/* Line 1792 of yacc.c  */
#line 1894 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[(2) - (5)].u.identifier)->get_simple_name(), (yyvsp[(4) - (5)].u.expr));
  current_scope->add_enum_value(inst, current_lexer, (yylsp[(2) - (5)]));
}
    break;

  case 256:
/* Line 1792 of yacc.c  */
#line 1903 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[(2) - (2)].u.identifier)->get_simple_name());
  current_scope->add_enum_value(inst, current_lexer, (yylsp[(2) - (2)]));
}
    break;

  case 257:
/* Line 1792 of yacc.c  */
#line 1909 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[(2) - (4)].u.identifier)->get_simple_name(), (yyvsp[(4) - (4)].u.expr));
  current_scope->add_enum_value(inst, current_lexer, (yylsp[(2) - (4)]));
}
    break;

  case 258:
/* Line 1792 of yacc.c  */
#line 1918 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum;
}
    break;

  case 259:
/* Line 1792 of yacc.c  */
#line 1925 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_class;
}
    break;

  case 260:
/* Line 1792 of yacc.c  */
#line 1929 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_struct;
}
    break;

  case 261:
/* Line 1792 of yacc.c  */
#line 1933 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_union;
}
    break;

  case 262:
/* Line 1792 of yacc.c  */
#line 1940 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPScope *scope = (yyvsp[(2) - (3)].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[(2) - (3)].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[(2) - (3)].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[(2) - (3)].u.identifier), scope, (yylsp[(1) - (3)]).file);
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[(1) - (3)]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
    break;

  case 263:
/* Line 1792 of yacc.c  */
#line 1958 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
}
    break;

  case 265:
/* Line 1792 of yacc.c  */
#line 1966 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[(2) - (2)].u.identifier), false, (yylsp[(1) - (2)]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[(1) - (2)]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
    break;

  case 266:
/* Line 1792 of yacc.c  */
#line 1972 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[(3) - (3)].u.identifier), true, (yylsp[(1) - (3)]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[(1) - (3)]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
    break;

  case 270:
/* Line 1792 of yacc.c  */
#line 1987 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_bool);
}
    break;

  case 271:
/* Line 1792 of yacc.c  */
#line 1991 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char);
}
    break;

  case 272:
/* Line 1792 of yacc.c  */
#line 1995 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_wchar_t);
}
    break;

  case 273:
/* Line 1792 of yacc.c  */
#line 1999 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
    break;

  case 274:
/* Line 1792 of yacc.c  */
#line 2004 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
    break;

  case 275:
/* Line 1792 of yacc.c  */
#line 2009 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_longlong);
}
    break;

  case 276:
/* Line 1792 of yacc.c  */
#line 2014 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
    break;

  case 277:
/* Line 1792 of yacc.c  */
#line 2019 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
    break;

  case 278:
/* Line 1792 of yacc.c  */
#line 2024 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int);
}
    break;

  case 279:
/* Line 1792 of yacc.c  */
#line 2028 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_short;
}
    break;

  case 280:
/* Line 1792 of yacc.c  */
#line 2033 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  if ((yyval.u.simple_type)->_flags & CPPSimpleType::F_long) {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_longlong;
  } else {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_long;
  }
}
    break;

  case 281:
/* Line 1792 of yacc.c  */
#line 2042 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_unsigned;
}
    break;

  case 282:
/* Line 1792 of yacc.c  */
#line 2047 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_signed;
}
    break;

  case 283:
/* Line 1792 of yacc.c  */
#line 2055 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float);
}
    break;

  case 284:
/* Line 1792 of yacc.c  */
#line 2059 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float,
                         CPPSimpleType::F_long);
}
    break;

  case 285:
/* Line 1792 of yacc.c  */
#line 2064 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double);
}
    break;

  case 286:
/* Line 1792 of yacc.c  */
#line 2068 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float,
                         CPPSimpleType::F_longlong);
}
    break;

  case 287:
/* Line 1792 of yacc.c  */
#line 2073 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
    break;

  case 288:
/* Line 1792 of yacc.c  */
#line 2081 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_void);
}
    break;

  case 289:
/* Line 1792 of yacc.c  */
#line 2090 "dtool/src/cppparser/cppBison.yxx"
    {
  current_lexer->_resolve_identifiers = false;
}
    break;

  case 290:
/* Line 1792 of yacc.c  */
#line 2094 "dtool/src/cppparser/cppBison.yxx"
    {
  current_lexer->_resolve_identifiers = true;
}
    break;

  case 293:
/* Line 1792 of yacc.c  */
#line 2106 "dtool/src/cppparser/cppBison.yxx"
    {
}
    break;

  case 294:
/* Line 1792 of yacc.c  */
#line 2109 "dtool/src/cppparser/cppBison.yxx"
    {
}
    break;

  case 295:
/* Line 1792 of yacc.c  */
#line 2112 "dtool/src/cppparser/cppBison.yxx"
    {
}
    break;

  case 296:
/* Line 1792 of yacc.c  */
#line 2115 "dtool/src/cppparser/cppBison.yxx"
    {
}
    break;

  case 297:
/* Line 1792 of yacc.c  */
#line 2118 "dtool/src/cppparser/cppBison.yxx"
    {
}
    break;

  case 298:
/* Line 1792 of yacc.c  */
#line 2121 "dtool/src/cppparser/cppBison.yxx"
    {
}
    break;

  case 299:
/* Line 1792 of yacc.c  */
#line 2124 "dtool/src/cppparser/cppBison.yxx"
    {
}
    break;

  case 300:
/* Line 1792 of yacc.c  */
#line 2127 "dtool/src/cppparser/cppBison.yxx"
    {
}
    break;

  case 373:
/* Line 1792 of yacc.c  */
#line 2147 "dtool/src/cppparser/cppBison.yxx"
    {
}
    break;

  case 397:
/* Line 1792 of yacc.c  */
#line 2156 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 398:
/* Line 1792 of yacc.c  */
#line 2160 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 399:
/* Line 1792 of yacc.c  */
#line 2167 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 400:
/* Line 1792 of yacc.c  */
#line 2171 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 401:
/* Line 1792 of yacc.c  */
#line 2178 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 402:
/* Line 1792 of yacc.c  */
#line 2182 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(',', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 403:
/* Line 1792 of yacc.c  */
#line 2189 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 404:
/* Line 1792 of yacc.c  */
#line 2193 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(2) - (4)].u.type), (yyvsp[(4) - (4)].u.expr)));
}
    break;

  case 405:
/* Line 1792 of yacc.c  */
#line 2197 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr)));
}
    break;

  case 406:
/* Line 1792 of yacc.c  */
#line 2201 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr)));
}
    break;

  case 407:
/* Line 1792 of yacc.c  */
#line 2205 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 408:
/* Line 1792 of yacc.c  */
#line 2209 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 409:
/* Line 1792 of yacc.c  */
#line 2213 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 410:
/* Line 1792 of yacc.c  */
#line 2217 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(2) - (2)].u.expr)->_type == CPPExpression::T_integer) {
    (yyval.u.expr) = (yyvsp[(2) - (2)].u.expr);
    (yyval.u.expr)->_u._integer = -(yyval.u.expr)->_u._integer;
  } else if ((yyvsp[(2) - (2)].u.expr)->_type == CPPExpression::T_real) {
    (yyval.u.expr) = (yyvsp[(2) - (2)].u.expr);
    (yyval.u.expr)->_u._real = -(yyval.u.expr)->_u._real;
  } else {
    (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[(2) - (2)].u.expr));
  }
}
    break;

  case 411:
/* Line 1792 of yacc.c  */
#line 2229 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 412:
/* Line 1792 of yacc.c  */
#line 2233 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 413:
/* Line 1792 of yacc.c  */
#line 2237 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 414:
/* Line 1792 of yacc.c  */
#line 2241 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 415:
/* Line 1792 of yacc.c  */
#line 2245 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 416:
/* Line 1792 of yacc.c  */
#line 2249 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 417:
/* Line 1792 of yacc.c  */
#line 2253 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 418:
/* Line 1792 of yacc.c  */
#line 2257 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 419:
/* Line 1792 of yacc.c  */
#line 2261 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 420:
/* Line 1792 of yacc.c  */
#line 2265 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 421:
/* Line 1792 of yacc.c  */
#line 2269 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 422:
/* Line 1792 of yacc.c  */
#line 2273 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 423:
/* Line 1792 of yacc.c  */
#line 2277 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 424:
/* Line 1792 of yacc.c  */
#line 2281 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 425:
/* Line 1792 of yacc.c  */
#line 2285 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 426:
/* Line 1792 of yacc.c  */
#line 2289 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 427:
/* Line 1792 of yacc.c  */
#line 2293 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 428:
/* Line 1792 of yacc.c  */
#line 2297 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 429:
/* Line 1792 of yacc.c  */
#line 2301 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[(1) - (5)].u.expr), (yyvsp[(3) - (5)].u.expr), (yyvsp[(5) - (5)].u.expr));
}
    break;

  case 430:
/* Line 1792 of yacc.c  */
#line 2305 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 431:
/* Line 1792 of yacc.c  */
#line 2309 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 432:
/* Line 1792 of yacc.c  */
#line 2313 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (3)].u.expr));
}
    break;

  case 433:
/* Line 1792 of yacc.c  */
#line 2317 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 434:
/* Line 1792 of yacc.c  */
#line 2321 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 435:
/* Line 1792 of yacc.c  */
#line 2325 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 436:
/* Line 1792 of yacc.c  */
#line 2333 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 437:
/* Line 1792 of yacc.c  */
#line 2337 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(2) - (4)].u.type), (yyvsp[(4) - (4)].u.expr)));
}
    break;

  case 438:
/* Line 1792 of yacc.c  */
#line 2341 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr)));
}
    break;

  case 439:
/* Line 1792 of yacc.c  */
#line 2345 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr)));
}
    break;

  case 440:
/* Line 1792 of yacc.c  */
#line 2349 "dtool/src/cppparser/cppBison.yxx"
    {
  // A constructor call.
  CPPType *type = (yyvsp[(1) - (4)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert(type != NULL);
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 441:
/* Line 1792 of yacc.c  */
#line 2356 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 442:
/* Line 1792 of yacc.c  */
#line 2362 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 443:
/* Line 1792 of yacc.c  */
#line 2368 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_wchar_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 444:
/* Line 1792 of yacc.c  */
#line 2374 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 445:
/* Line 1792 of yacc.c  */
#line 2380 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 446:
/* Line 1792 of yacc.c  */
#line 2387 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 447:
/* Line 1792 of yacc.c  */
#line 2394 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 448:
/* Line 1792 of yacc.c  */
#line 2401 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 449:
/* Line 1792 of yacc.c  */
#line 2408 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 450:
/* Line 1792 of yacc.c  */
#line 2414 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 451:
/* Line 1792 of yacc.c  */
#line 2420 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 452:
/* Line 1792 of yacc.c  */
#line 2424 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (2)].u.type)));
}
    break;

  case 453:
/* Line 1792 of yacc.c  */
#line 2428 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (5)].u.type), (yyvsp[(4) - (5)].u.expr)));
}
    break;

  case 454:
/* Line 1792 of yacc.c  */
#line 2432 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 455:
/* Line 1792 of yacc.c  */
#line 2436 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 456:
/* Line 1792 of yacc.c  */
#line 2440 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(2) - (2)].u.expr)->_type == CPPExpression::T_integer) {
    (yyval.u.expr) = (yyvsp[(2) - (2)].u.expr);
    (yyval.u.expr)->_u._integer = -(yyval.u.expr)->_u._integer;
  } else if ((yyvsp[(2) - (2)].u.expr)->_type == CPPExpression::T_real) {
    (yyval.u.expr) = (yyvsp[(2) - (2)].u.expr);
    (yyval.u.expr)->_u._real = -(yyval.u.expr)->_u._real;
  } else {
    (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[(2) - (2)].u.expr));
  }
}
    break;

  case 457:
/* Line 1792 of yacc.c  */
#line 2452 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 458:
/* Line 1792 of yacc.c  */
#line 2456 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 459:
/* Line 1792 of yacc.c  */
#line 2460 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 460:
/* Line 1792 of yacc.c  */
#line 2464 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 461:
/* Line 1792 of yacc.c  */
#line 2468 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 462:
/* Line 1792 of yacc.c  */
#line 2472 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 463:
/* Line 1792 of yacc.c  */
#line 2476 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 464:
/* Line 1792 of yacc.c  */
#line 2480 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 465:
/* Line 1792 of yacc.c  */
#line 2484 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 466:
/* Line 1792 of yacc.c  */
#line 2488 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 467:
/* Line 1792 of yacc.c  */
#line 2492 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 468:
/* Line 1792 of yacc.c  */
#line 2496 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 469:
/* Line 1792 of yacc.c  */
#line 2500 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 470:
/* Line 1792 of yacc.c  */
#line 2504 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 471:
/* Line 1792 of yacc.c  */
#line 2508 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 472:
/* Line 1792 of yacc.c  */
#line 2512 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 473:
/* Line 1792 of yacc.c  */
#line 2516 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 474:
/* Line 1792 of yacc.c  */
#line 2520 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 475:
/* Line 1792 of yacc.c  */
#line 2524 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 476:
/* Line 1792 of yacc.c  */
#line 2528 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 477:
/* Line 1792 of yacc.c  */
#line 2532 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[(1) - (5)].u.expr), (yyvsp[(3) - (5)].u.expr), (yyvsp[(5) - (5)].u.expr));
}
    break;

  case 478:
/* Line 1792 of yacc.c  */
#line 2536 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 479:
/* Line 1792 of yacc.c  */
#line 2540 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 480:
/* Line 1792 of yacc.c  */
#line 2544 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (3)].u.expr));
}
    break;

  case 481:
/* Line 1792 of yacc.c  */
#line 2548 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 482:
/* Line 1792 of yacc.c  */
#line 2552 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 483:
/* Line 1792 of yacc.c  */
#line 2556 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 484:
/* Line 1792 of yacc.c  */
#line 2563 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 485:
/* Line 1792 of yacc.c  */
#line 2567 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(true);
}
    break;

  case 486:
/* Line 1792 of yacc.c  */
#line 2571 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(false);
}
    break;

  case 487:
/* Line 1792 of yacc.c  */
#line 2575 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 488:
/* Line 1792 of yacc.c  */
#line 2579 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.real));
}
    break;

  case 489:
/* Line 1792 of yacc.c  */
#line 2583 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].str));
}
    break;

  case 490:
/* Line 1792 of yacc.c  */
#line 2587 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.identifier), current_scope, global_scope, current_lexer);
}
    break;

  case 491:
/* Line 1792 of yacc.c  */
#line 2601 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 492:
/* Line 1792 of yacc.c  */
#line 2605 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(2) - (4)].u.type), (yyvsp[(4) - (4)].u.expr)));
}
    break;

  case 493:
/* Line 1792 of yacc.c  */
#line 2609 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr)));
}
    break;

  case 494:
/* Line 1792 of yacc.c  */
#line 2613 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr)));
}
    break;

  case 495:
/* Line 1792 of yacc.c  */
#line 2617 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 496:
/* Line 1792 of yacc.c  */
#line 2621 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (2)].u.type)));
}
    break;

  case 497:
/* Line 1792 of yacc.c  */
#line 2625 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (5)].u.type), (yyvsp[(4) - (5)].u.expr)));
}
    break;

  case 498:
/* Line 1792 of yacc.c  */
#line 2629 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 499:
/* Line 1792 of yacc.c  */
#line 2633 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 500:
/* Line 1792 of yacc.c  */
#line 2637 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(2) - (2)].u.expr)->_type == CPPExpression::T_integer) {
    (yyval.u.expr) = (yyvsp[(2) - (2)].u.expr);
    (yyval.u.expr)->_u._integer = -(yyval.u.expr)->_u._integer;
  } else if ((yyvsp[(2) - (2)].u.expr)->_type == CPPExpression::T_real) {
    (yyval.u.expr) = (yyvsp[(2) - (2)].u.expr);
    (yyval.u.expr)->_u._real = -(yyval.u.expr)->_u._real;
  } else {
    (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[(2) - (2)].u.expr));
  }
}
    break;

  case 501:
/* Line 1792 of yacc.c  */
#line 2649 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 502:
/* Line 1792 of yacc.c  */
#line 2653 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 503:
/* Line 1792 of yacc.c  */
#line 2657 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 504:
/* Line 1792 of yacc.c  */
#line 2661 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 505:
/* Line 1792 of yacc.c  */
#line 2665 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 506:
/* Line 1792 of yacc.c  */
#line 2669 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 507:
/* Line 1792 of yacc.c  */
#line 2673 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 508:
/* Line 1792 of yacc.c  */
#line 2677 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 509:
/* Line 1792 of yacc.c  */
#line 2681 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 510:
/* Line 1792 of yacc.c  */
#line 2685 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 511:
/* Line 1792 of yacc.c  */
#line 2689 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 512:
/* Line 1792 of yacc.c  */
#line 2693 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 513:
/* Line 1792 of yacc.c  */
#line 2697 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 514:
/* Line 1792 of yacc.c  */
#line 2701 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 515:
/* Line 1792 of yacc.c  */
#line 2705 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 516:
/* Line 1792 of yacc.c  */
#line 2709 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 517:
/* Line 1792 of yacc.c  */
#line 2713 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 518:
/* Line 1792 of yacc.c  */
#line 2717 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 519:
/* Line 1792 of yacc.c  */
#line 2721 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 520:
/* Line 1792 of yacc.c  */
#line 2725 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[(1) - (5)].u.expr), (yyvsp[(3) - (5)].u.expr), (yyvsp[(5) - (5)].u.expr));
}
    break;

  case 521:
/* Line 1792 of yacc.c  */
#line 2729 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 522:
/* Line 1792 of yacc.c  */
#line 2733 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 523:
/* Line 1792 of yacc.c  */
#line 2737 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (3)].u.expr));
}
    break;

  case 524:
/* Line 1792 of yacc.c  */
#line 2741 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 525:
/* Line 1792 of yacc.c  */
#line 2745 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 526:
/* Line 1792 of yacc.c  */
#line 2749 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 527:
/* Line 1792 of yacc.c  */
#line 2756 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 528:
/* Line 1792 of yacc.c  */
#line 2760 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(true);
}
    break;

  case 529:
/* Line 1792 of yacc.c  */
#line 2764 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(false);
}
    break;

  case 530:
/* Line 1792 of yacc.c  */
#line 2768 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 531:
/* Line 1792 of yacc.c  */
#line 2772 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.real));
}
    break;

  case 532:
/* Line 1792 of yacc.c  */
#line 2776 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].str));
}
    break;

  case 533:
/* Line 1792 of yacc.c  */
#line 2783 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, true);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[(1) - (1)].u.identifier)));
  }
  (yyval.u.type) = type;
}
    break;

  case 534:
/* Line 1792 of yacc.c  */
#line 2791 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, true, current_lexer);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
  }
  (yyval.u.type) = type;
}
    break;

  case 535:
/* Line 1792 of yacc.c  */
#line 2799 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 536:
/* Line 1792 of yacc.c  */
#line 2822 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = (yyvsp[(1) - (1)].u.identifier);
}
    break;

  case 537:
/* Line 1792 of yacc.c  */
#line 2826 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = (yyvsp[(1) - (1)].u.identifier);
}
    break;

  case 538:
/* Line 1792 of yacc.c  */
#line 2833 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = (yyvsp[(1) - (1)].str);
}
    break;

  case 539:
/* Line 1792 of yacc.c  */
#line 2837 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = (yyvsp[(1) - (2)].str) + (yyvsp[(2) - (2)].str);
}
    break;


/* Line 1792 of yacc.c  */
#line 7101 "built/tmp/cppBison.yxx.c"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


