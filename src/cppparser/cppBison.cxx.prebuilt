/* A Bison parser, made from cppBison.yxx
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse cppyyparse
#define yylex cppyylex
#define yyerror cppyyerror
#define yylval cppyylval
#define yychar cppyychar
#define yydebug cppyydebug
#define yynerrs cppyynerrs
#define YYLSP_NEEDED 1

# define	REAL	257
# define	INTEGER	258
# define	CHAR	259
# define	STRING	260
# define	SIMPLE_IDENTIFIER	261
# define	IDENTIFIER	262
# define	TYPENAME_IDENTIFIER	263
# define	SCOPING	264
# define	TYPEDEFNAME	265
# define	ELLIPSIS	266
# define	OROR	267
# define	ANDAND	268
# define	EQCOMPARE	269
# define	NECOMPARE	270
# define	LECOMPARE	271
# define	GECOMPARE	272
# define	LSHIFT	273
# define	RSHIFT	274
# define	POINTSAT_STAR	275
# define	DOT_STAR	276
# define	UNARY	277
# define	UNARY_NOT	278
# define	UNARY_NEGATE	279
# define	UNARY_MINUS	280
# define	UNARY_STAR	281
# define	UNARY_REF	282
# define	POINTSAT	283
# define	SCOPE	284
# define	PLUSPLUS	285
# define	MINUSMINUS	286
# define	TIMESEQUAL	287
# define	DIVIDEEQUAL	288
# define	MODEQUAL	289
# define	PLUSEQUAL	290
# define	MINUSEQUAL	291
# define	OREQUAL	292
# define	ANDEQUAL	293
# define	XOREQUAL	294
# define	LSHIFTEQUAL	295
# define	RSHIFTEQUAL	296
# define	TOKENPASTE	297
# define	KW_BEGIN_PUBLISH	298
# define	KW_BOOL	299
# define	KW_CATCH	300
# define	KW_CHAR	301
# define	KW_WCHAR_T	302
# define	KW_CLASS	303
# define	KW_CONST	304
# define	KW_DELETE	305
# define	KW_DOUBLE	306
# define	KW_DYNAMIC_CAST	307
# define	KW_ELSE	308
# define	KW_END_PUBLISH	309
# define	KW_ENUM	310
# define	KW_EXTERN	311
# define	KW_EXPLICIT	312
# define	KW_PUBLISHED	313
# define	KW_FALSE	314
# define	KW_FLOAT	315
# define	KW_FRIEND	316
# define	KW_FOR	317
# define	KW_GOTO	318
# define	KW_IF	319
# define	KW_INLINE	320
# define	KW_INT	321
# define	KW_LONG	322
# define	KW_LONGLONG	323
# define	KW_MUTABLE	324
# define	KW_NAMESPACE	325
# define	KW_NEW	326
# define	KW_OPERATOR	327
# define	KW_PRIVATE	328
# define	KW_PROTECTED	329
# define	KW_PUBLIC	330
# define	KW_REGISTER	331
# define	KW_RETURN	332
# define	KW_SHORT	333
# define	KW_SIGNED	334
# define	KW_SIZEOF	335
# define	KW_STATIC	336
# define	KW_STATIC_CAST	337
# define	KW_STRUCT	338
# define	KW_TEMPLATE	339
# define	KW_THROW	340
# define	KW_TRUE	341
# define	KW_TRY	342
# define	KW_TYPEDEF	343
# define	KW_TYPENAME	344
# define	KW_UNION	345
# define	KW_UNSIGNED	346
# define	KW_USING	347
# define	KW_VIRTUAL	348
# define	KW_VOID	349
# define	KW_VOLATILE	350
# define	KW_WHILE	351
# define	START_CPP	352
# define	START_CONST_EXPR	353
# define	START_TYPE	354

#line 6 "cppBison.yxx"


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedef.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = NULL;
CPPScope *global_scope = NULL;
CPPPreprocessor *current_lexer = NULL;

static CPPStructType *current_struct = NULL; 
static CPPEnumType *current_enum = NULL;
static int current_storage_class = 0;
static CPPType *current_type = NULL;
static CPPExpression *current_expr = NULL;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static vector<CPPScope *> last_scopes;
static vector<int> last_storage_classes;
static vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc.first_line, loc.first_column);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc.first_line, loc.first_column);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
    
}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = (CPPExpression *)NULL;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = (CPPType *)NULL;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;
  
  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != NULL) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}


#ifndef YYLTYPE
typedef struct yyltype
{
  int first_line;
  int first_column;

  int last_line;
  int last_column;
} yyltype;

# define YYLTYPE yyltype
# define YYLTYPE_IS_TRIVIAL 1
#endif

#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		941
#define	YYFLAG		-32768
#define	YYNTBASE	125

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 354 ? yytranslate[x] : 218)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   123,     2,     2,     2,   116,   109,     2,
     119,   121,   114,   112,   102,   113,   118,   115,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   104,   103,
     110,   105,   111,   106,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   120,     2,   124,   108,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   101,   107,   122,   117,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    17,    19,    23,
      28,    29,    35,    37,    39,    41,    43,    45,    47,    50,
      52,    54,    57,    60,    63,    66,    67,    71,    73,    76,
      80,    83,    86,    89,    92,    95,    98,   101,   103,   107,
     111,   112,   117,   118,   124,   127,   132,   135,   140,   141,
     146,   147,   153,   157,   160,   165,   168,   173,   174,   181,
     182,   189,   190,   198,   199,   210,   211,   223,   224,   233,
     234,   244,   246,   248,   250,   255,   261,   263,   265,   267,
     269,   271,   273,   275,   277,   279,   281,   283,   285,   287,
     289,   291,   293,   295,   297,   299,   301,   303,   305,   307,
     309,   311,   313,   315,   317,   319,   321,   323,   325,   327,
     329,   331,   334,   337,   339,   341,   343,   345,   346,   353,
     355,   357,   359,   363,   366,   371,   375,   380,   382,   384,
     386,   389,   391,   394,   397,   400,   403,   407,   412,   416,
     420,   421,   428,   430,   432,   434,   438,   441,   443,   447,
     449,   452,   454,   457,   459,   463,   469,   473,   478,   480,
     482,   485,   487,   491,   495,   501,   505,   509,   514,   516,
     518,   520,   522,   525,   528,   531,   535,   540,   542,   544,
     546,   549,   552,   555,   559,   564,   572,   576,   578,   581,
     584,   587,   591,   596,   604,   606,   608,   611,   613,   615,
     617,   619,   622,   625,   627,   629,   632,   634,   636,   638,
     640,   643,   646,   648,   650,   653,   656,   659,   662,   666,
     667,   673,   674,   682,   684,   686,   689,   693,   696,   699,
     702,   706,   710,   714,   718,   722,   726,   727,   733,   734,
     741,   743,   745,   748,   750,   754,   758,   764,   766,   768,
     770,   772,   773,   780,   785,   788,   792,   794,   796,   798,
     800,   802,   804,   806,   808,   810,   812,   814,   816,   819,
     822,   825,   828,   830,   833,   835,   839,   842,   844,   845,
     848,   850,   853,   855,   857,   859,   861,   863,   865,   867,
     869,   871,   873,   875,   877,   879,   881,   883,   885,   887,
     889,   891,   893,   895,   897,   899,   901,   903,   905,   907,
     909,   911,   913,   915,   917,   919,   921,   923,   925,   927,
     929,   931,   933,   935,   937,   939,   941,   943,   945,   947,
     949,   951,   953,   955,   957,   959,   961,   963,   965,   967,
     969,   971,   973,   975,   977,   979,   981,   983,   985,   987,
     989,   991,   993,   995,   997,   999,  1001,  1003,  1005,  1007,
    1009,  1011,  1013,  1015,  1017,  1019,  1021,  1023,  1025,  1027,
    1029,  1031,  1033,  1035,  1037,  1039,  1041,  1043,  1045,  1047,
    1049,  1051,  1053,  1055,  1057,  1059,  1061,  1065,  1067,  1069,
    1071,  1073,  1075,  1079,  1081,  1086,  1094,  1102,  1107,  1110,
    1113,  1116,  1119,  1122,  1126,  1130,  1134,  1138,  1142,  1146,
    1150,  1154,  1158,  1162,  1166,  1170,  1174,  1178,  1182,  1188,
    1193,  1198,  1202,  1206,  1210,  1214,  1216,  1221,  1229,  1237,
    1242,  1247,  1252,  1257,  1262,  1267,  1272,  1277,  1282,  1287,
    1292,  1297,  1300,  1306,  1309,  1312,  1315,  1318,  1321,  1325,
    1329,  1333,  1337,  1341,  1345,  1349,  1353,  1357,  1361,  1365,
    1369,  1373,  1377,  1381,  1385,  1389,  1395,  1400,  1405,  1409,
    1413,  1417,  1421,  1423,  1425,  1427,  1429,  1431,  1433,  1435,
    1437,  1442,  1450,  1458,  1463,  1466,  1472,  1475,  1478,  1481,
    1484,  1488,  1492,  1496,  1500,  1504,  1508,  1512,  1516,  1520,
    1524,  1528,  1532,  1536,  1540,  1544,  1548,  1552,  1558,  1563,
    1568,  1572,  1576,  1580,  1584,  1586,  1588,  1590,  1592,  1594,
    1596,  1598,  1601,  1604,  1606,  1608,  1610,  1613
};
static const short yyrhs[] =
{
      98,   126,     0,    99,   210,     0,   100,   179,     0,   217,
       0,   126,   103,     0,   126,   131,     0,   128,     0,   127,
     102,   128,     0,   215,   119,   207,   121,     0,     0,   134,
     101,   130,   126,   122,     0,   135,     0,   157,     0,   129,
       0,   195,     0,   197,     0,   132,     0,    89,   141,     0,
      44,     0,    55,     0,    59,   104,     0,    76,   104,     0,
      75,   104,     0,    74,   104,     0,     0,    62,   133,   131,
       0,   217,     0,   134,    57,     0,   134,    57,   216,     0,
     134,    82,     0,   134,    66,     0,   134,    94,     0,   134,
      58,     0,   134,    96,     0,   134,    70,     0,   134,    77,
       0,   136,     0,   134,   177,   103,     0,   134,   146,   169,
       0,     0,   134,   177,   137,   139,     0,     0,   134,    50,
     176,   138,   140,     0,   163,   169,     0,   163,   168,   102,
     139,     0,   163,   169,     0,   163,   168,   102,   140,     0,
       0,   134,   177,   142,   144,     0,     0,   134,    50,   176,
     143,   145,     0,   134,   146,   169,     0,   163,   169,     0,
     163,   168,   102,   144,     0,   163,   169,     0,   163,   168,
     102,   145,     0,     0,     8,   119,   147,   165,   121,   154,
       0,     0,     9,   119,   148,   165,   121,   154,     0,     0,
     117,   215,   119,   149,   165,   121,   154,     0,     0,     9,
     119,   114,   163,   121,   119,   150,   165,   121,   154,     0,
       0,     9,   119,    10,   114,   163,   121,   119,   151,   165,
     121,   154,     0,     0,    73,   176,   173,   119,   152,   165,
     121,   154,     0,     0,    73,    50,   176,   173,   119,   153,
     165,   121,   154,     0,     8,     0,   217,     0,    50,     0,
     154,    86,   119,   121,     0,   154,    86,   119,   215,   121,
       0,   123,     0,   117,     0,   114,     0,   115,     0,   116,
       0,   112,     0,   113,     0,   107,     0,   109,     0,   108,
       0,    13,     0,    14,     0,    15,     0,    16,     0,    17,
       0,    18,     0,   110,     0,   111,     0,    19,     0,    20,
       0,   105,     0,   102,     0,    31,     0,    32,     0,    33,
       0,    34,     0,    35,     0,    36,     0,    37,     0,    38,
       0,    39,     0,    40,     0,    41,     0,    42,     0,    29,
       0,   120,   124,     0,   119,   121,     0,    72,     0,    51,
       0,   135,     0,   157,     0,     0,    85,   158,   110,   159,
     111,   156,     0,   217,     0,   160,     0,   161,     0,   160,
     102,   161,     0,    49,   215,     0,    49,   215,   105,   179,
       0,   162,   174,   167,     0,    50,   162,   174,   167,     0,
     198,     0,     8,     0,     9,     0,    90,   215,     0,   215,
       0,    73,   155,     0,    50,   163,     0,   114,   163,     0,
     109,   163,     0,    10,   114,   163,     0,   163,   120,   206,
     124,     0,   163,   104,     4,     0,   119,   163,   121,     0,
       0,   163,   119,   164,   165,   121,   154,     0,   217,     0,
      12,     0,   166,     0,   166,   102,    12,     0,   166,    12,
       0,   172,     0,   166,   102,   172,     0,   217,     0,   105,
     209,     0,   217,     0,   105,   210,     0,   103,     0,   101,
     202,   122,     0,   104,   127,   101,   202,   122,     0,   105,
     210,   103,     0,   105,   101,   170,   122,     0,   217,     0,
     171,     0,   171,   102,     0,   210,     0,   101,   170,   122,
       0,   171,   102,   210,     0,   171,   102,   101,   170,   122,
       0,   176,   174,   168,     0,     8,   174,   168,     0,    50,
     176,   174,   168,     0,   212,     0,   217,     0,     8,     0,
       9,     0,    50,   173,     0,   114,   173,     0,   109,   173,
       0,    10,   114,   173,     0,   173,   120,   206,   124,     0,
     217,     0,     8,     0,     9,     0,    50,   174,     0,   114,
     174,     0,   109,   174,     0,    10,   114,   174,     0,   174,
     120,   206,   124,     0,   119,   174,   121,   119,   165,   121,
     154,     0,   119,   174,   121,     0,   217,     0,    50,   175,
       0,   114,   175,     0,   109,   175,     0,    10,   114,   175,
       0,   175,   120,   206,   124,     0,   119,   175,   121,   119,
     165,   121,   154,     0,   198,     0,     9,     0,    90,   215,
       0,   180,     0,   182,     0,   187,     0,   189,     0,   194,
     215,     0,   193,   215,     0,   198,     0,     9,     0,    90,
     215,     0,   180,     0,   182,     0,   187,     0,   189,     0,
     194,   215,     0,   193,   215,     0,   198,     0,     9,     0,
      90,   215,     0,   194,   215,     0,   193,   215,     0,   176,
     175,     0,    50,   176,   175,     0,     0,   194,   101,   181,
     126,   122,     0,     0,   194,   215,   183,   184,   101,   126,
     122,     0,   217,     0,   185,     0,   104,   186,     0,   185,
     102,   186,     0,    76,   214,     0,    75,   214,     0,    74,
     214,     0,    94,    76,   214,     0,    94,    75,   214,     0,
      94,    74,   214,     0,    76,    94,   214,     0,    75,    94,
     214,     0,    74,    94,   214,     0,     0,   193,   101,   188,
     191,   122,     0,     0,   193,   215,   101,   190,   191,   122,
       0,   217,     0,   192,     0,   192,   102,     0,   215,     0,
     215,   105,   210,     0,   192,   102,   215,     0,   192,   102,
     215,   105,   210,     0,    56,     0,    49,     0,    84,     0,
      91,     0,     0,    71,   215,   101,   196,   126,   122,     0,
      71,   101,   126,   122,     0,    93,   215,     0,    93,    71,
     215,     0,   199,     0,   200,     0,   201,     0,    45,     0,
      47,     0,    48,     0,    79,     0,    68,     0,    69,     0,
      92,     0,    80,     0,    67,     0,    79,   199,     0,    68,
     199,     0,    92,   199,     0,    80,   199,     0,    61,     0,
      68,    61,     0,    52,     0,    68,    68,    61,     0,    68,
      52,     0,    95,     0,     0,   203,   204,     0,   217,     0,
     204,   205,     0,     3,     0,     4,     0,     6,     0,     5,
       0,     8,     0,     9,     0,    10,     0,     7,     0,    12,
       0,    13,     0,    14,     0,    15,     0,    16,     0,    17,
       0,    18,     0,    19,     0,    20,     0,    21,     0,    22,
       0,    29,     0,    30,     0,    31,     0,    32,     0,    33,
       0,    34,     0,    35,     0,    36,     0,    37,     0,    38,
       0,    39,     0,    40,     0,    41,     0,    42,     0,    45,
       0,    46,     0,    47,     0,    48,     0,    49,     0,    50,
       0,    51,     0,    52,     0,    53,     0,    54,     0,    56,
       0,    57,     0,    58,     0,    60,     0,    61,     0,    62,
       0,    63,     0,    64,     0,    65,     0,    66,     0,    67,
       0,    68,     0,    70,     0,    72,     0,    74,     0,    75,
       0,    76,     0,    59,     0,    77,     0,    78,     0,    79,
       0,    80,     0,    81,     0,    82,     0,    83,     0,    84,
       0,    86,     0,    87,     0,    88,     0,    89,     0,    90,
       0,    91,     0,    92,     0,    94,     0,    95,     0,    96,
       0,    97,     0,    43,     0,    73,     0,   112,     0,   113,
       0,   114,     0,   115,     0,   109,     0,   107,     0,   108,
       0,   123,     0,   117,     0,   105,     0,   116,     0,   110,
       0,   111,     0,   119,     0,   121,     0,   118,     0,   102,
       0,   103,     0,   104,     0,   120,     0,   124,     0,   106,
       0,   101,   204,   122,     0,   217,     0,   210,     0,   217,
       0,   208,     0,   210,     0,   208,   102,   210,     0,   211,
       0,   119,   179,   121,   209,     0,    83,   110,   179,   111,
     119,   208,   121,     0,    53,   110,   179,   111,   119,   208,
     121,     0,    81,   119,   179,   121,     0,   123,   209,     0,
     117,   209,     0,   113,   209,     0,   114,   209,     0,   109,
     209,     0,   209,   114,   209,     0,   209,   115,   209,     0,
     209,   116,   209,     0,   209,   112,   209,     0,   209,   113,
     209,     0,   209,   107,   209,     0,   209,   109,   209,     0,
     209,    13,   209,     0,   209,    14,   209,     0,   209,    15,
     209,     0,   209,    16,   209,     0,   209,    17,   209,     0,
     209,    18,   209,     0,   209,    19,   209,     0,   209,    20,
     209,     0,   209,   106,   209,   104,   209,     0,   209,   120,
     210,   124,     0,   209,   119,   208,   121,     0,   209,   119,
     121,     0,   209,   118,   209,     0,   209,    29,   209,     0,
     119,   208,   121,     0,   211,     0,   119,   179,   121,   210,
       0,    83,   110,   179,   111,   119,   208,   121,     0,    53,
     110,   179,   111,   119,   208,   121,     0,     9,   119,   207,
     121,     0,    67,   119,   207,   121,     0,    47,   119,   207,
     121,     0,    48,   119,   207,   121,     0,    45,   119,   207,
     121,     0,    79,   119,   207,   121,     0,    68,   119,   207,
     121,     0,    92,   119,   207,   121,     0,    80,   119,   207,
     121,     0,    61,   119,   207,   121,     0,    52,   119,   207,
     121,     0,    81,   119,   179,   121,     0,    72,   178,     0,
      72,   178,   119,   207,   121,     0,   123,   210,     0,   117,
     210,     0,   113,   210,     0,   114,   210,     0,   109,   210,
       0,   210,   114,   210,     0,   210,   115,   210,     0,   210,
     116,   210,     0,   210,   112,   210,     0,   210,   113,   210,
       0,   210,   107,   210,     0,   210,   109,   210,     0,   210,
      13,   210,     0,   210,    14,   210,     0,   210,    15,   210,
       0,   210,    16,   210,     0,   210,    17,   210,     0,   210,
      18,   210,     0,   210,   110,   210,     0,   210,   111,   210,
       0,   210,    19,   210,     0,   210,    20,   210,     0,   210,
     106,   210,   104,   210,     0,   210,   120,   210,   124,     0,
     210,   119,   208,   121,     0,   210,   119,   121,     0,   210,
     118,   210,     0,   210,    29,   210,     0,   119,   208,   121,
       0,     4,     0,    87,     0,    60,     0,     5,     0,     3,
       0,   216,     0,     8,     0,   213,     0,   119,   179,   121,
     210,     0,    83,   110,   179,   111,   119,   208,   121,     0,
      53,   110,   179,   111,   119,   208,   121,     0,    81,   119,
     179,   121,     0,    72,   178,     0,    72,   178,   119,   207,
     121,     0,   123,   210,     0,   117,   210,     0,   113,   210,
       0,   109,   210,     0,   212,   114,   210,     0,   212,   115,
     210,     0,   212,   116,   210,     0,   212,   112,   210,     0,
     212,   113,   210,     0,   212,   107,   210,     0,   212,   109,
     210,     0,   212,    13,   210,     0,   212,    14,   210,     0,
     212,    15,   210,     0,   212,    16,   210,     0,   212,    17,
     210,     0,   212,    18,   210,     0,   212,   110,   210,     0,
     212,   111,   210,     0,   212,    19,   210,     0,   212,    20,
     210,     0,   212,   106,   210,   104,   210,     0,   212,   120,
     210,   124,     0,   212,   119,   208,   121,     0,   212,   119,
     121,     0,   212,   118,   210,     0,   212,    29,   210,     0,
     119,   208,   121,     0,     4,     0,    87,     0,    60,     0,
       5,     0,     3,     0,   216,     0,   215,     0,   194,   215,
       0,    90,   215,     0,     8,     0,     9,     0,     6,     0,
     216,     6,     0,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   377,   379,   383,   389,   391,   392,   395,   397,   400,
     412,   412,   424,   426,   427,   428,   429,   430,   431,   432,
     445,   454,   458,   462,   466,   472,   472,   487,   492,   496,
     507,   511,   515,   519,   523,   527,   531,   537,   542,   551,
     561,   561,   577,   577,   594,   603,   613,   623,   635,   635,
     651,   651,   662,   675,   684,   694,   704,   715,   715,   740,
     740,   764,   764,   794,   794,   809,   809,   826,   826,   857,
     857,   883,   895,   900,   904,   908,   914,   919,   923,   927,
     931,   935,   939,   943,   947,   951,   955,   959,   963,   967,
     971,   975,   979,   983,   987,   991,   995,   999,  1003,  1007,
    1011,  1015,  1019,  1023,  1027,  1031,  1035,  1039,  1043,  1047,
    1051,  1055,  1059,  1063,  1067,  1073,  1075,  1078,  1078,  1089,
    1091,  1094,  1101,  1109,  1114,  1118,  1124,  1133,  1138,  1143,
    1148,  1155,  1160,  1174,  1179,  1184,  1189,  1194,  1199,  1204,
    1209,  1209,  1230,  1235,  1240,  1244,  1249,  1256,  1262,  1269,
    1274,  1280,  1285,  1291,  1296,  1300,  1304,  1308,  1314,  1316,
    1317,  1320,  1324,  1325,  1326,  1329,  1335,  1343,  1349,  1358,
    1363,  1367,  1371,  1376,  1381,  1386,  1391,  1398,  1403,  1407,
    1411,  1416,  1421,  1426,  1431,  1436,  1442,  1449,  1454,  1459,
    1464,  1469,  1474,  1479,  1487,  1492,  1497,  1501,  1505,  1509,
    1513,  1517,  1533,  1551,  1556,  1561,  1565,  1569,  1573,  1577,
    1581,  1597,  1615,  1620,  1625,  1629,  1645,  1663,  1670,  1679,
    1679,  1703,  1703,  1733,  1735,  1738,  1740,  1743,  1748,  1752,
    1756,  1760,  1764,  1768,  1772,  1776,  1782,  1782,  1794,  1794,
    1806,  1808,  1809,  1812,  1818,  1823,  1828,  1835,  1842,  1847,
    1851,  1857,  1857,  1880,  1883,  1890,  1898,  1900,  1901,  1904,
    1909,  1913,  1917,  1922,  1927,  1932,  1937,  1942,  1946,  1951,
    1960,  1965,  1972,  1977,  1982,  1986,  1991,  1998,  2008,  2008,
    2018,  2020,  2023,  2027,  2030,  2033,  2036,  2039,  2042,  2045,
    2048,  2048,  2048,  2049,  2049,  2049,  2049,  2050,  2050,  2050,
    2050,  2050,  2051,  2051,  2051,  2052,  2052,  2052,  2052,  2052,
    2053,  2053,  2053,  2053,  2053,  2054,  2054,  2054,  2054,  2054,
    2054,  2055,  2055,  2055,  2055,  2055,  2056,  2056,  2056,  2057,
    2057,  2057,  2057,  2058,  2058,  2058,  2059,  2059,  2059,  2059,
    2059,  2060,  2060,  2060,  2060,  2061,  2061,  2061,  2061,  2061,
    2062,  2062,  2062,  2062,  2062,  2062,  2063,  2063,  2063,  2063,
    2063,  2064,  2064,  2065,  2068,  2068,  2068,  2068,  2068,  2068,
    2068,  2068,  2068,  2068,  2068,  2069,  2069,  2069,  2069,  2069,
    2069,  2069,  2069,  2069,  2069,  2070,  2070,  2073,  2078,  2084,
    2089,  2095,  2100,  2106,  2111,  2115,  2119,  2123,  2127,  2131,
    2135,  2147,  2151,  2155,  2159,  2163,  2167,  2171,  2175,  2179,
    2183,  2187,  2191,  2195,  2199,  2203,  2207,  2211,  2215,  2219,
    2223,  2227,  2231,  2235,  2239,  2246,  2251,  2255,  2259,  2263,
    2270,  2276,  2282,  2288,  2294,  2301,  2308,  2315,  2322,  2328,
    2334,  2338,  2342,  2346,  2350,  2354,  2366,  2370,  2374,  2378,
    2382,  2386,  2390,  2394,  2398,  2402,  2406,  2410,  2414,  2418,
    2422,  2426,  2430,  2434,  2438,  2442,  2446,  2450,  2454,  2458,
    2462,  2466,  2472,  2477,  2481,  2485,  2489,  2493,  2497,  2510,
    2515,  2519,  2523,  2527,  2531,  2535,  2539,  2543,  2547,  2559,
    2563,  2567,  2571,  2575,  2579,  2583,  2587,  2591,  2595,  2599,
    2603,  2607,  2611,  2615,  2619,  2623,  2627,  2631,  2635,  2639,
    2643,  2647,  2651,  2655,  2661,  2666,  2670,  2674,  2678,  2682,
    2688,  2697,  2705,  2727,  2732,  2738,  2743,  2749
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "REAL", "INTEGER", "CHAR", "STRING", 
  "SIMPLE_IDENTIFIER", "IDENTIFIER", "TYPENAME_IDENTIFIER", "SCOPING", 
  "TYPEDEFNAME", "ELLIPSIS", "OROR", "ANDAND", "EQCOMPARE", "NECOMPARE", 
  "LECOMPARE", "GECOMPARE", "LSHIFT", "RSHIFT", "POINTSAT_STAR", 
  "DOT_STAR", "UNARY", "UNARY_NOT", "UNARY_NEGATE", "UNARY_MINUS", 
  "UNARY_STAR", "UNARY_REF", "POINTSAT", "SCOPE", "PLUSPLUS", 
  "MINUSMINUS", "TIMESEQUAL", "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL", 
  "MINUSEQUAL", "OREQUAL", "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL", 
  "RSHIFTEQUAL", "TOKENPASTE", "KW_BEGIN_PUBLISH", "KW_BOOL", "KW_CATCH", 
  "KW_CHAR", "KW_WCHAR_T", "KW_CLASS", "KW_CONST", "KW_DELETE", 
  "KW_DOUBLE", "KW_DYNAMIC_CAST", "KW_ELSE", "KW_END_PUBLISH", "KW_ENUM", 
  "KW_EXTERN", "KW_EXPLICIT", "KW_PUBLISHED", "KW_FALSE", "KW_FLOAT", 
  "KW_FRIEND", "KW_FOR", "KW_GOTO", "KW_IF", "KW_INLINE", "KW_INT", 
  "KW_LONG", "KW_LONGLONG", "KW_MUTABLE", "KW_NAMESPACE", "KW_NEW", 
  "KW_OPERATOR", "KW_PRIVATE", "KW_PROTECTED", "KW_PUBLIC", "KW_REGISTER", 
  "KW_RETURN", "KW_SHORT", "KW_SIGNED", "KW_SIZEOF", "KW_STATIC", 
  "KW_STATIC_CAST", "KW_STRUCT", "KW_TEMPLATE", "KW_THROW", "KW_TRUE", 
  "KW_TRY", "KW_TYPEDEF", "KW_TYPENAME", "KW_UNION", "KW_UNSIGNED", 
  "KW_USING", "KW_VIRTUAL", "KW_VOID", "KW_VOLATILE", "KW_WHILE", 
  "START_CPP", "START_CONST_EXPR", "START_TYPE", "'{'", "','", "';'", 
  "':'", "'='", "'?'", "'|'", "'^'", "'&'", "'<'", "'>'", "'+'", "'-'", 
  "'*'", "'/'", "'%'", "'~'", "'.'", "'('", "'['", "')'", "'}'", "'!'", 
  "']'", "grammar", "cpp", "constructor_inits", "constructor_init", 
  "extern_c", "@1", "declaration", "friend_declaration", "@2", 
  "storage_class", "type_like_declaration", "multiple_var_declaration", 
  "@3", "@4", "multiple_instance_identifiers", 
  "multiple_const_instance_identifiers", "typedef_declaration", "@5", 
  "@6", "typedef_instance_identifiers", 
  "typedef_const_instance_identifiers", "function_prototype", "@7", "@8", 
  "@9", "@10", "@11", "@12", "@13", "function_post", "function_operator", 
  "more_template_declaration", "template_declaration", "@14", 
  "template_formal_parameters", "template_nonempty_formal_parameters", 
  "template_formal_parameter", "template_formal_parameter_type", 
  "instance_identifier", "@15", "formal_parameter_list", 
  "formal_parameters", "template_parameter_maybe_initialize", 
  "maybe_initialize", "maybe_initialize_or_function_body", 
  "structure_init", "structure_init_body", "formal_parameter", 
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier", 
  "empty_instance_identifier", "type", "type_decl", "predefined_type", 
  "full_type", "anonymous_struct", "@16", "named_struct", "@17", 
  "maybe_class_derivation", "class_derivation", "base_specification", 
  "anonymous_enum", "@18", "named_enum", "@19", "enum_body", 
  "enum_body_no_trailing_comma", "enum_keyword", "struct_keyword", 
  "namespace_declaration", "@20", "using_declaration", "simple_type", 
  "simple_int_type", "simple_float_type", "simple_void_type", "code", 
  "@21", "code_block", "element", "optional_const_expr", 
  "optional_const_expr_comma", "const_expr_comma", 
  "no_angle_bracket_const_expr", "const_expr", "const_operand", 
  "formal_const_expr", "formal_const_operand", "class_derivation_name", 
  "name", "string", "empty", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,   125,   125,   125,   126,   126,   126,   127,   127,   128,
     130,   129,   131,   131,   131,   131,   131,   131,   131,   131,
     131,   131,   131,   131,   131,   133,   132,   134,   134,   134,
     134,   134,   134,   134,   134,   134,   134,   135,   135,   135,
     137,   136,   138,   136,   139,   139,   140,   140,   142,   141,
     143,   141,   141,   144,   144,   145,   145,   147,   146,   148,
     146,   149,   146,   150,   146,   151,   146,   152,   146,   153,
     146,   146,   154,   154,   154,   154,   155,   155,   155,   155,
     155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
     155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
     155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
     155,   155,   155,   155,   155,   156,   156,   158,   157,   159,
     159,   160,   160,   161,   161,   161,   161,   162,   162,   162,
     162,   163,   163,   163,   163,   163,   163,   163,   163,   163,
     164,   163,   165,   165,   165,   165,   165,   166,   166,   167,
     167,   168,   168,   169,   169,   169,   169,   169,   170,   170,
     170,   171,   171,   171,   171,   172,   172,   172,   172,   173,
     173,   173,   173,   173,   173,   173,   173,   174,   174,   174,
     174,   174,   174,   174,   174,   174,   174,   175,   175,   175,
     175,   175,   175,   175,   176,   176,   176,   176,   176,   176,
     176,   176,   176,   177,   177,   177,   177,   177,   177,   177,
     177,   177,   178,   178,   178,   178,   178,   179,   179,   181,
     180,   183,   182,   184,   184,   185,   185,   186,   186,   186,
     186,   186,   186,   186,   186,   186,   188,   187,   190,   189,
     191,   191,   191,   192,   192,   192,   192,   193,   194,   194,
     194,   196,   195,   195,   197,   197,   198,   198,   198,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   200,   200,   200,   200,   200,   201,   203,   202,
     204,   204,   205,   205,   205,   205,   205,   205,   205,   205,
     205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
     205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
     205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
     205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
     205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
     205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
     205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
     205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
     205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
     205,   205,   205,   205,   205,   205,   205,   206,   206,   207,
     207,   208,   208,   209,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   209,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   211,   211,   211,   211,   211,   211,   211,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   213,   213,   213,   213,   213,   213,
     214,   214,   214,   215,   215,   216,   216,   217
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     2,     2,     2,     1,     2,     2,     1,     3,     4,
       0,     5,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     2,     2,     2,     2,     0,     3,     1,     2,     3,
       2,     2,     2,     2,     2,     2,     2,     1,     3,     3,
       0,     4,     0,     5,     2,     4,     2,     4,     0,     4,
       0,     5,     3,     2,     4,     2,     4,     0,     6,     0,
       6,     0,     7,     0,    10,     0,    11,     0,     8,     0,
       9,     1,     1,     1,     4,     5,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     1,     1,     1,     0,     6,     1,
       1,     1,     3,     2,     4,     3,     4,     1,     1,     1,
       2,     1,     2,     2,     2,     2,     3,     4,     3,     3,
       0,     6,     1,     1,     1,     3,     2,     1,     3,     1,
       2,     1,     2,     1,     3,     5,     3,     4,     1,     1,
       2,     1,     3,     3,     5,     3,     3,     4,     1,     1,
       1,     1,     2,     2,     2,     3,     4,     1,     1,     1,
       2,     2,     2,     3,     4,     7,     3,     1,     2,     2,
       2,     3,     4,     7,     1,     1,     2,     1,     1,     1,
       1,     2,     2,     1,     1,     2,     1,     1,     1,     1,
       2,     2,     1,     1,     2,     2,     2,     2,     3,     0,
       5,     0,     7,     1,     1,     2,     3,     2,     2,     2,
       3,     3,     3,     3,     3,     3,     0,     5,     0,     6,
       1,     1,     2,     1,     3,     3,     5,     1,     1,     1,
       1,     0,     6,     4,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       2,     2,     1,     2,     1,     3,     2,     1,     0,     2,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       1,     1,     3,     1,     4,     7,     7,     4,     2,     2,
       2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     5,     4,
       4,     3,     3,     3,     3,     1,     4,     7,     7,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
       4,     2,     5,     2,     2,     2,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     5,     4,     4,     3,     3,
       3,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     7,     7,     4,     2,     5,     2,     2,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     5,     4,     4,
       3,     3,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     1,     1,     2,     0
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,   527,     0,     0,   527,     4,   476,   472,   475,   525,
     478,     0,     0,     0,     0,     0,     0,   474,     0,     0,
       0,     0,     0,     0,     0,     0,   473,     0,     0,     0,
       0,     0,     0,     0,     2,   425,   477,   195,   259,   260,
     261,   248,     0,   274,   247,   272,   267,   263,   264,   262,
     266,   249,     0,   250,   265,   277,   527,     3,   197,   198,
     199,   200,     0,     0,   194,   256,   257,   258,    19,    20,
       0,    25,     0,     0,     0,     0,   117,   527,     0,     5,
      14,     6,    17,     0,    12,    37,    13,    15,    16,    27,
     527,   527,   527,   527,   527,     0,   527,   527,   527,   213,
       0,   441,     0,     0,   212,   527,   527,     0,     0,   527,
     447,   445,   446,   444,   195,   259,   260,   261,   274,   272,
     267,   263,   262,   266,   265,     0,     0,   391,   443,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   526,   527,   276,   273,   263,   269,   263,   268,   271,
     523,   524,   196,   270,     0,   527,   527,   527,   527,   217,
     187,   236,   202,   219,   201,    21,   527,   527,     0,    24,
      23,    22,     0,     0,    18,     0,   254,    71,   204,     0,
      28,    33,    31,    35,     0,    36,    30,     0,    32,    34,
      10,     0,     0,    40,   206,   207,   208,   209,     0,     0,
     203,     0,   390,   389,     0,     0,     0,     0,     0,     0,
       0,     0,   214,   527,   216,   215,     0,     0,     0,     0,
       0,     0,     0,   471,   455,   456,   457,   458,   459,   460,
     463,   464,   470,     0,   453,   454,   461,   462,   451,   452,
     448,   449,   450,   469,   468,     0,     0,   218,   275,   527,
     188,   190,   189,     0,   527,   527,   238,   527,   527,    26,
     527,   251,   527,     0,     0,    48,   255,    57,    59,    42,
      29,     0,   527,   205,   527,     0,   278,   153,     0,     0,
      39,    38,     0,   211,   210,   429,   433,   431,   432,   439,
       0,   438,   430,   435,     0,   434,   437,   440,     0,   436,
     426,   392,     0,   467,   466,   191,     0,     0,   388,   387,
       0,   241,   243,   240,   527,   527,     0,     0,   224,   223,
     253,   527,   128,   129,     0,     0,     0,     0,   120,   121,
     527,   127,   119,    50,    52,     0,   527,     0,     0,   527,
       0,   527,   170,   171,     0,   527,   527,   527,     0,   169,
     527,    61,     0,   527,     0,     7,     0,   527,     0,     0,
       0,     0,     0,     0,     0,    41,   527,   131,     0,   442,
       0,   465,   527,   192,   237,   242,     0,     0,   220,     0,
       0,     0,     0,   225,   527,     0,   527,   123,   527,   130,
     527,     0,   178,   179,     0,   527,   527,   527,   527,   527,
     177,     0,    49,   527,   518,   514,   517,   527,   143,     0,
       0,   516,     0,     0,     0,   515,     0,     0,     0,     0,
       0,     0,   144,   147,   527,   168,   479,   519,   142,     0,
       0,     0,    43,   527,     0,   527,   172,   174,   173,    67,
     527,    11,   527,   154,   279,   280,   278,     0,   527,   527,
       0,   159,   161,   158,   156,     0,   133,    86,    87,    88,
      89,    90,    91,    94,    95,   110,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   114,   113,
      97,    96,    83,    85,    84,    92,    93,    81,    82,    78,
      79,    80,    77,     0,     0,    76,   132,   135,   134,     0,
       0,     0,   140,   527,     0,    44,   151,     0,     0,     0,
     245,   244,   239,     0,     0,     0,   229,   520,     0,   228,
       0,   227,     0,     0,     0,   527,   226,   252,     0,   527,
       0,   115,   118,   116,   122,   527,   180,   182,   181,     0,
       0,   527,   125,   149,    51,   527,     0,    53,   527,   527,
       0,   484,     0,     0,   489,   488,   487,     0,     0,   486,
     527,   146,     0,   527,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   527,
       0,    46,    69,   175,   527,     0,     0,   282,   283,   285,
     284,   289,   286,   287,   288,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     362,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   342,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   363,   339,   340,   341,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   527,
     380,   381,   382,   373,   385,   369,   370,   368,   375,   376,
     364,   365,   366,   367,   374,   372,   379,   377,   383,   378,
     371,   384,   281,     0,     8,     0,     0,   157,   160,   136,
     112,   111,   139,   138,   152,   527,     0,     0,   428,   427,
     527,     0,   522,   235,   521,   234,   233,   232,   231,   230,
     222,   124,   126,   183,   186,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   150,   393,     0,     0,    55,     0,
       0,   166,   527,     0,   527,     0,     0,     0,   513,    73,
      58,    72,   145,   148,   165,   497,   498,   499,   500,   501,
     502,   505,   506,   512,     0,   495,   496,   503,   504,   493,
     494,   490,   491,   492,   511,   510,     0,     0,     0,    63,
      60,     0,   527,     0,   176,   527,     0,   155,     9,   162,
     527,   163,     0,   137,    45,   193,   246,   527,     0,     0,
       0,   402,   400,   401,   399,     0,     0,   398,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   184,     0,
      54,   152,   167,     0,     0,   483,     0,   480,     0,     0,
     509,   508,    65,   527,    47,     0,   527,    62,   386,     0,
     527,     0,     0,     0,     0,     0,   424,   410,   411,   412,
     413,   414,   415,   416,   417,   423,     0,   408,   409,   406,
     407,   403,   404,   405,   422,   421,     0,     0,    56,     0,
     485,     0,     0,   507,   527,     0,   527,    68,   164,   141,
     527,     0,   397,     0,   394,     0,   420,   419,     0,     0,
      74,     0,     0,   527,    70,   185,     0,     0,   418,   482,
     481,    75,   527,    64,     0,     0,    66,   396,   395,     0,
       0,     0
};

static const short yydefgoto[] =
{
     939,     4,   364,   365,    80,   284,    81,    82,   176,    83,
      84,    85,   292,   350,   375,   442,   184,   345,   411,   412,
     554,   202,   346,   349,   452,   863,   904,   604,   802,   770,
     506,   542,    86,   182,   337,   338,   339,   340,   376,   725,
     431,   432,   552,   514,   290,   460,   461,   433,   358,   409,
     169,    56,   203,   101,    57,    58,   267,    59,   268,   327,
     328,   393,    60,   265,    61,   324,   320,   321,    62,    63,
      87,   331,    88,    64,    65,    66,    67,   362,   363,   454,
     712,   317,   211,   212,   754,   127,    35,   435,   436,   526,
     377,    36,   213
};

static const short yypact[] =
{
     188,-32768,  2058,  3024,   853,-32768,-32768,-32768,-32768,-32768,
  -32768,   -76,   -55,   -45,   -28,   -19,   -72,-32768,     3,    55,
      58,  3122,    60,   113,   117,    63,-32768,   121,  2058,  2058,
    2058,  2058,  1269,  2058,  2626,-32768,   240,-32768,-32768,-32768,
  -32768,-32768,  3171,-32768,-32768,-32768,-32768,  2164,-32768,  1661,
    1661,-32768,    45,-32768,  1661,-32768,    38,-32768,-32768,-32768,
  -32768,-32768,    23,    52,-32768,-32768,-32768,-32768,-32768,-32768,
     143,-32768,    54,   150,   152,   153,-32768,-32768,    25,-32768,
  -32768,-32768,-32768,  2377,-32768,-32768,-32768,-32768,-32768,-32768,
    2058,  2058,  2058,  2058,  2058,  3024,  2058,  2058,  2058,-32768,
      45,   140,    45,    45,-32768,  2058,  2058,  3024,  3024,  2058,
      72,    72,    72,    72,   -76,   -55,   -45,   -28,   -19,     3,
      55,  3335,   613,  1451,  1576,   144,   -56,  2626,    72,  2058,
    2058,  2058,  2058,  2058,  2058,  2058,  2058,  2058,  2058,  2058,
    2058,  2058,  2058,  2058,  2058,  2058,  2058,  2058,  2058,  1548,
    2058,-32768,    38,-32768,-32768,  2054,-32768,  1661,-32768,-32768,
  -32768,-32768,-32768,-32768,   158,    38,    38,    38,    38,   170,
  -32768,-32768,   172,-32768,     9,-32768,  3346,-32768,   190,-32768,
  -32768,-32768,   196,  2432,-32768,    45,-32768,   207,   212,  3171,
     326,-32768,-32768,-32768,  3073,-32768,-32768,    45,-32768,-32768,
  -32768,    45,   210,   232,-32768,-32768,-32768,-32768,    23,    52,
  -32768,   222,   244,-32768,   237,   239,   242,   249,   250,   251,
     253,   261,-32768,  2058,-32768,-32768,   262,   263,   265,   260,
     267,  2058,  2058,-32768,  1472,  2782,   508,   508,   390,   390,
     471,   471,-32768,  2571,  2797,  2812,   390,   390,   367,   367,
      72,    72,    72,-32768,-32768,   -46,  2139,   170,-32768,    38,
     170,   170,   170,    -9,  2058,    45,-32768,-32768,   285,-32768,
    3182,-32768,  2946,  3171,   210,-32768,-32768,-32768,    12,-32768,
     240,  3171,    69,-32768,-32768,   271,-32768,-32768,    45,  1633,
  -32768,-32768,   370,   172,     9,-32768,-32768,-32768,-32768,-32768,
     273,-32768,-32768,-32768,   279,-32768,-32768,-32768,   275,-32768,
      72,  2626,  2058,-32768,-32768,   170,   296,   301,  2626,-32768,
     306,   324,   327,-32768,    45,  3221,    31,   328,   332,-32768,
  -32768,-32768,-32768,-32768,    45,  2301,    45,   325,   333,-32768,
     136,-32768,-32768,-32768,-32768,   370,  1362,   323,   370,  1362,
     370,    69,-32768,-32768,   331,    69,    69,    69,    51,-32768,
    3246,-32768,   316,-32768,   118,-32768,   321,  1718,  2592,   334,
     370,  2300,   370,   370,   370,-32768,   174,-32768,  2058,-32768,
    2058,  2626,  1362,-32768,-32768,    45,  2058,   319,-32768,   655,
     657,   729,   246,-32768,-32768,    31,  3271,   341,   136,-32768,
     368,  2946,-32768,-32768,   338,   136,   136,   136,   136,   -61,
  -32768,   370,-32768,   174,-32768,-32768,-32768,   136,-32768,  3171,
     344,-32768,  3122,   336,   347,-32768,  2058,  2058,  2058,  1269,
    2058,   339,    18,-32768,   136,  2643,-32768,   240,-32768,   370,
     178,   342,-32768,   174,   123,    69,   345,   345,   345,-32768,
    2058,-32768,  1362,-32768,  1147,-32768,-32768,    45,  2058,  1718,
     340,   362,  2626,-32768,-32768,   370,   142,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   348,   346,-32768,-32768,   142,   142,   197,
      78,  1633,-32768,  2058,   372,-32768,-32768,   -12,    33,   354,
     371,  2626,-32768,    45,   243,    45,-32768,-32768,   243,-32768,
     243,-32768,   243,   243,   243,  3296,-32768,-32768,  3024,   -61,
    2487,-32768,-32768,-32768,-32768,   136,   357,   357,   357,    19,
     304,  2058,-32768,-32768,-32768,   174,   378,-32768,    -6,   136,
    3024,   369,  3024,  3024,    72,    72,    72,   374,    35,    72,
     446,-32768,  1455,    -6,  2058,  2058,  2058,  2058,  2058,  2058,
    2058,  2058,  2058,  2058,  2058,  2058,  2058,  2058,  2058,  2058,
    2058,  2058,  2058,  2058,  1803,  2058,   248,   497,   388,   446,
     395,-32768,-32768,   345,  1362,   389,   397,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   400,-32768,   403,   408,-32768,  1888,   142,
  -32768,-32768,-32768,-32768,  2592,  1362,   407,   370,-32768,-32768,
     446,  2058,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   357,   413,   430,   422,   433,   304,   304,
     304,   304,  1269,   304,  1284,-32768,   423,   447,-32768,   370,
    2058,-32768,    -6,   437,  2058,   431,   440,  2058,-32768,-32768,
     467,-32768,-32768,-32768,-32768,  1472,  2782,   508,   508,   390,
     390,   471,   471,-32768,  2609,  2797,  2812,   390,   390,   367,
     367,    72,    72,    72,-32768,-32768,    48,  2169,   441,-32768,
     467,   370,  1362,   438,-32768,   446,  1025,-32768,-32768,-32768,
    1718,  2626,   443,-32768,-32768,   467,  2626,  1362,  3024,  3024,
    3024,   119,   119,   119,   119,   445,    59,   119,   304,   304,
     304,   304,   304,   304,   304,   304,   304,   304,   304,   304,
     304,   304,   304,   304,   304,   304,  1973,  2058,-32768,   370,
  -32768,  2626,-32768,   442,   449,-32768,   454,    72,   455,  2058,
  -32768,-32768,-32768,  1362,-32768,   457,   446,   467,-32768,   459,
     446,   458,   451,   461,   465,   304,-32768,  2767,  2827,   654,
     654,   872,   872,   596,   596,-32768,  2751,  2933,  2948,   401,
     401,   119,   119,   119,-32768,-32768,    61,  2188,-32768,  2058,
  -32768,  2058,    20,  2626,  1362,   473,   446,   467,-32768,   467,
     446,   469,-32768,   478,   119,   304,-32768,-32768,    66,   120,
  -32768,   479,   481,   446,   467,   467,  2058,  2058,  1284,-32768,
  -32768,-32768,   446,   467,   127,   132,   467,-32768,-32768,   568,
     604,-32768
};

static const short yypgoto[] =
{
  -32768,  -150,-32768,   149,-32768,-32768,   432,-32768,-32768,   -60,
     213,-32768,-32768,-32768,  -115,  -187,-32768,-32768,-32768,  -143,
    -220,   448,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -581,
  -32768,-32768,   230,-32768,-32768,-32768,   231,   298,  -303,-32768,
    -324,-32768,    95,  -340,  -255,  -445,-32768,    65,  -316,  -275,
    -116,    -5,   452,   214,   -27,   -81,-32768,   -79,-32768,-32768,
  -32768,   272,   -68,-32768,   -67,-32768,   351,-32768,   -11,    77,
  -32768,-32768,-32768,     2,   181,-32768,-32768,   206,-32768,   -21,
  -32768,  -424,   -85,   -31,     4,    64,   137,-32768,-32768,  -307,
     493,  -133,    -1
};


#define	YYLAST		3454


static const short yytable[] =
{
       5,   126,   204,    89,   205,   125,   214,   215,   216,   217,
     102,   219,   220,   221,   716,   206,   207,   183,   800,   344,
     226,   227,   347,   104,   230,   441,   605,   270,   160,   161,
     571,   160,   161,   160,   161,   444,   257,   152,    95,   446,
     447,   448,   413,    90,   550,   440,   232,   443,   164,   260,
     261,   262,   263,   160,   161,   170,   232,   280,   519,   551,
     160,   161,   160,   161,    91,   233,    34,   466,   218,   507,
     508,   509,   208,   556,    92,   313,    89,   352,   353,   354,
     228,   229,   723,   529,   531,   210,   160,   161,   165,   726,
     232,    93,   110,   111,   112,   113,   185,   128,   103,   760,
      94,   137,   204,   600,   205,   389,   390,   391,   555,   728,
    -221,   264,   316,  -221,   551,   206,   207,   325,   255,   355,
     572,   515,    96,   539,   171,   392,   348,   756,   606,   603,
     546,   547,   548,   549,   360,   232,   596,   232,   304,   551,
     744,   920,   558,   315,   402,   403,   404,   166,   836,   815,
     232,   170,   167,   173,   729,   177,   768,   168,   557,   573,
     209,   232,   719,   232,   170,   170,   170,   170,   232,   860,
     449,   450,   208,   108,    97,    89,     5,    98,   356,   105,
     876,   396,   916,   357,   279,   210,   405,   929,   601,   282,
     148,   149,   150,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   437,   256,   757,   437,   733,   761,   456,
     457,   735,   232,   736,   867,   737,   738,   739,   156,   232,
     158,   159,   106,   774,   232,   163,   107,   845,   846,   847,
     109,   930,   602,   450,   535,   406,   151,   175,   937,   437,
     407,   160,   161,   938,   179,   408,   180,   181,   170,   223,
     209,   512,   513,   319,   323,   231,     5,   329,   343,    89,
     743,   342,   259,   266,   341,   286,   351,   287,   510,   511,
     803,   359,   597,     5,   762,   907,     1,     2,     3,   909,
     264,   271,    41,   512,   513,   310,   311,   512,   513,   598,
     758,   597,   156,   158,   159,   163,   272,     6,     7,     8,
       9,   286,    10,   287,   288,   289,   512,   513,   722,   437,
     532,   533,   534,   323,    89,   924,   277,    51,   318,   925,
       5,   278,     9,   523,    53,   291,   156,   341,   156,   410,
     540,   434,   933,   295,   434,   438,   232,   517,   438,   518,
     359,   936,   597,   368,   359,   359,   359,   745,   296,    89,
     297,   300,   455,   298,    17,   869,   463,   512,   513,   798,
     299,   308,   301,   715,   302,   516,   381,   434,   160,   161,
     369,   438,   303,   305,   306,   746,   307,   747,   309,   326,
     361,    26,   378,     5,   380,    89,   137,   410,   568,    89,
     379,   812,   567,   341,   410,   410,   410,   410,   553,   135,
     136,   102,   516,   748,   559,   382,   410,   749,   750,   137,
     370,   751,   852,   752,   104,   383,   385,   753,   384,   394,
     836,   462,   386,   410,   395,   401,   400,   439,   453,   437,
     458,   522,   516,   371,   359,   445,   538,   434,   465,   319,
     521,   438,   545,    76,   560,   562,   413,   563,   463,   204,
     570,   205,   717,   599,   718,   450,   525,   525,   525,   720,
     721,   437,   206,   207,   727,   730,   731,   551,   865,   372,
     759,   145,   146,   147,   373,   148,   149,   150,   764,   374,
     564,   565,   566,   871,   569,   767,   769,   801,   443,   103,
     137,   723,   143,   144,   145,   146,   147,   799,   148,   149,
     150,   741,   319,   804,   318,   842,   843,   844,   805,   845,
     846,   847,   807,   462,   808,   133,   134,   135,   136,   208,
     809,   813,   817,   763,    89,   765,   766,   137,   553,   905,
     818,   819,   210,   820,   410,   162,   555,   848,   853,   849,
     319,   856,   855,   858,   516,   172,   174,   516,   410,   866,
     862,   899,   911,   796,   870,   178,   875,   434,   940,   771,
     900,   186,   516,   901,   902,   724,   913,   318,   906,   910,
     922,   908,   912,   143,   144,   145,   146,   147,   926,   148,
     149,   150,   437,   222,   923,   224,   225,   927,   771,   434,
     931,   525,   932,   438,   941,   525,   714,   525,   269,   525,
     525,   525,   814,   541,   864,   318,   850,   209,   141,   142,
     143,   144,   145,   146,   147,   836,   148,   149,   150,   898,
     543,   274,   544,   398,   742,   275,   561,   773,   775,   776,
     777,   778,   779,   780,   781,   782,   783,   784,   785,   786,
     787,   788,   789,   790,   791,   792,   793,   794,    38,   797,
      39,    40,   713,   160,   161,   160,   161,   536,   806,   437,
       0,   832,   833,   834,   835,   387,     0,     0,   276,   854,
      46,   157,    48,   836,   437,     0,     0,   755,   455,     0,
     283,     0,    49,    50,   285,     0,     0,     0,     0,     0,
       0,   293,   294,     0,    41,    54,    41,     0,   840,   841,
     842,   843,   844,     0,   845,   846,   847,     0,     0,     0,
     434,   826,     0,     0,   438,   825,     0,     0,     0,   771,
     437,     0,   105,     0,     0,     0,     0,   160,   161,    51,
       0,    51,     0,     0,     0,   523,    53,   523,    53,   524,
       0,   528,   821,   822,   823,   824,     0,   827,   322,     0,
       0,   516,     0,     0,     0,     0,   840,   841,   842,   843,
     844,   437,   845,   846,   847,     0,     0,     0,    41,     0,
       0,   366,   811,     0,     0,     0,     0,     0,     0,     0,
       0,   872,   873,   874,     0,   816,     0,   434,     0,     0,
       0,   438,     0,     0,   771,     0,     0,     0,     0,   463,
       0,     0,   434,    51,     0,   896,   438,   322,     0,   523,
      53,     0,     0,   530,   851,     0,     0,   397,     0,   399,
       0,   857,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
       0,     0,     0,    -1,     0,     0,     0,     0,   434,     0,
       0,     0,   438,     0,     0,   771,     0,     0,   918,   771,
     919,     0,     0,     0,   462,     0,     0,     0,   520,   914,
       0,     0,   527,   527,   527,   755,   755,   755,   755,     0,
     755,   834,   835,     0,     0,   934,   935,    68,     0,   434,
       0,   836,     0,   438,     0,   771,     0,     0,    69,   771,
       0,   897,    70,     0,     0,    71,     0,     0,     0,   928,
       0,     0,   771,   903,    72,     0,     0,    73,    74,    75,
       0,   771,     0,     0,     0,     0,     0,     0,    76,     0,
       0,     0,    77,     0,     0,     0,    78,     0,     0,     0,
     366,     0,     0,     0,     0,     0,    79,     0,     0,     0,
       0,     0,     0,     0,     0,   755,   755,   755,   755,   755,
     755,   755,   755,   755,   755,   755,   755,   755,   755,   755,
     755,   755,   755,     0,   840,   841,   842,   843,   844,     0,
     845,   846,   847,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   366,     0,     0,     0,     0,     0,     0,
       0,     0,   755,     0,     0,     0,   732,   527,   734,     0,
       0,   527,     0,   527,     0,   527,   527,   527,   607,   608,
     609,   610,   611,   612,   613,   614,     0,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,     0,     0,
       0,     0,   755,     0,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,     0,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
       0,   651,   652,   653,   654,   655,   656,   657,   658,   659,
     660,   661,   662,   663,     0,   664,     0,   665,   666,   667,
     668,   669,   670,   671,   672,   673,   674,   675,   676,   677,
       0,   678,   679,   680,   681,   682,   683,   684,     0,   685,
     686,   687,   688,     0,     0,     0,   689,   690,   691,   692,
     693,   694,   695,   696,   697,   698,   699,   700,   701,   702,
     703,   704,   705,   706,   707,   708,   709,   868,   710,   711,
     607,   608,   609,   610,   611,   612,   613,   614,     0,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
       0,     0,     0,     0,     0,     0,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,     0,   641,   642,   643,   644,   645,   646,   647,   648,
     649,   650,     0,   651,   652,   653,   654,   655,   656,   657,
     658,   659,   660,   661,   662,   663,     0,   664,     0,   665,
     666,   667,   668,   669,   670,   671,   672,   673,   674,   675,
     676,   677,     0,   678,   679,   680,   681,   682,   683,   684,
       0,   685,   686,   687,   688,     0,     0,     0,   689,   690,
     691,   692,   693,   694,   695,   696,   697,   698,   699,   700,
     701,   702,   703,   704,   705,   706,   707,   708,   709,     0,
     710,   711,     6,     7,     8,     9,     0,    10,   114,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   828,   829,   830,
     831,   832,   833,   834,   835,     0,     0,     0,     0,     0,
       0,     0,     0,   836,   115,     0,   116,   117,    41,    42,
       0,   118,    16,     0,     0,    44,     0,     0,     0,    17,
     119,     0,     0,     0,     0,     0,   120,   121,    48,     0,
       0,    21,     0,     0,     0,     0,     0,     0,   122,   123,
      24,     0,    25,    51,     0,     0,    26,     0,     0,    52,
      53,   124,     0,     0,    55,   414,   415,   416,     9,     0,
     417,    37,     0,     0,   418,     0,     0,     0,    28,     0,
       0,     0,    29,    30,     0,     0,    31,     0,    32,     0,
     837,   838,    33,   839,     0,   921,   840,   841,   842,   843,
     844,     0,   845,   846,   847,     0,     0,    38,     0,    39,
      40,    41,   419,     0,    43,   420,     0,     0,    44,     0,
       0,     0,   421,    45,     0,     0,     0,     0,     0,    46,
      47,    48,     0,     0,   422,     0,     0,     0,     0,     0,
       0,    49,    50,   423,     0,   424,    51,     0,     0,   425,
       0,     0,    52,    53,    54,     0,     0,    55,   414,   415,
     416,     9,     0,   417,    37,     0,     0,   772,     0,     0,
       0,   426,     0,     0,     0,   427,     0,     0,     0,   428,
       0,   429,     0,     0,     0,   430,   130,   131,   132,   133,
     134,   135,   136,     0,     0,     0,    38,     0,    39,    40,
      38,   137,    39,    40,    41,   419,     0,    43,   420,     0,
       0,    44,     0,     0,     0,   421,    45,     0,    46,   157,
      48,     0,    46,    47,    48,     0,     0,   422,     0,     0,
      49,    50,     0,     0,    49,    50,   423,     0,   424,    51,
       0,     0,   425,    54,     0,    52,    53,    54,     0,     0,
      55,     6,     7,     8,     9,     0,    10,    11,     0,     0,
       0,     0,     0,     0,   426,     0,     0,     0,   427,     0,
     106,     0,   428,     0,   429,     0,     0,     0,   430,   139,
       0,   140,   141,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,    12,     0,    13,    14,     0,     0,     0,
      15,    16,     0,     0,     0,     0,     0,     0,    17,    18,
       0,     0,     0,     0,     0,    19,    20,     0,     0,     0,
      21,    38,     0,    39,    40,     0,     0,    22,    23,    24,
       0,    25,     0,     0,     0,    26,     6,     7,     8,     9,
      27,    10,    11,    46,   157,    48,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    49,    50,    28,     0,     0,
       0,    29,    30,     0,     0,    31,     0,    32,    54,   254,
       0,    33,     0,     0,     0,     0,     0,     0,    12,     0,
      13,    14,     0,     0,     0,    15,    16,     0,     0,     0,
       0,     0,     0,    17,    18,   109,     0,     0,     0,     0,
      19,    20,     0,     0,     0,    21,    38,     0,    39,    40,
       0,     0,    22,    23,    24,     0,    25,     0,     0,     0,
      26,     6,     7,     8,     9,    27,    10,    11,    46,   157,
      48,     0,     0,     0,   367,     0,     0,     0,     0,     0,
      49,    50,    28,     0,     0,     0,    29,    30,     0,     0,
      31,     0,    32,    54,     0,     0,    33,     0,     0,     0,
       0,     0,     0,    12,     0,    13,    14,     0,     0,     0,
      15,    16,     0,     0,     0,     0,     0,     0,    17,    18,
       0,     0,     0,     0,     0,    19,    20,     0,     0,     0,
      21,     0,     0,     0,     0,     0,     0,    22,    23,    24,
       0,    25,     0,     0,     0,    26,     6,     7,     8,     9,
      27,    10,    11,     0,     0,     0,     0,     0,     0,   459,
       0,     0,     0,     0,     0,     0,     0,    28,     0,     0,
       0,    29,    30,     0,     0,    31,     0,    32,     0,     0,
       0,    33,     0,     0,     0,     0,     0,     0,    12,     0,
      13,    14,     0,     0,     0,    15,    16,     0,     0,     0,
       0,     0,     0,    17,    18,     0,     0,     0,     0,     0,
      19,    20,     0,     0,     0,    21,     0,     0,     0,     0,
       0,     0,    22,    23,    24,     0,    25,     0,     0,     0,
      26,     6,     7,     8,     9,    27,    10,    11,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    28,     0,     0,     0,    29,    30,     0,     0,
      31,     0,    32,     0,   795,     0,    33,     0,     0,     0,
       0,     0,     0,    12,     0,    13,    14,     0,     0,     0,
      15,    16,     0,     0,     0,     0,     0,     0,    17,    18,
       0,     0,     0,     0,     0,    19,    20,     0,     0,     0,
      21,     0,     0,     0,     0,     0,     0,    22,    23,    24,
       0,    25,     0,     0,     0,    26,     6,     7,     8,     9,
      27,    10,    11,     0,     0,     0,     0,     0,     0,   810,
       0,     0,     0,     0,     0,     0,     0,    28,     0,     0,
       0,    29,    30,     0,     0,    31,     0,    32,     0,     0,
       0,    33,     0,     0,     0,     0,     0,     0,    12,     0,
      13,    14,     0,     0,     0,    15,    16,     0,     0,     0,
       0,     0,     0,    17,    18,     0,     0,     0,     0,     0,
      19,    20,     0,     0,     0,    21,     0,     0,     0,     0,
       0,     0,    22,    23,    24,     0,    25,     0,     0,     0,
      26,     6,     7,     8,     9,    27,    10,    11,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    28,     0,     0,     0,    29,    30,     0,     0,
      31,     0,    32,     0,   895,     0,    33,     0,     0,    38,
       0,    39,    40,    12,     0,    13,    14,     0,     0,     0,
      15,    16,     0,     0,     0,   258,     0,     0,    17,    18,
       0,    46,   157,    48,     0,    19,    20,     0,     0,     0,
      21,     0,     0,    49,    50,     0,     0,    22,    23,    24,
       0,    25,     0,     0,     0,    26,    54,     0,     0,     0,
      27,     0,   129,   130,   131,   132,   133,   134,   135,   136,
       0,     0,     0,     0,     0,     0,     0,    28,   137,     0,
       0,    29,    30,     0,     0,    31,     0,    32,     0,     0,
       0,    33,   129,   130,   131,   132,   133,   134,   135,   136,
       0,     0,     0,     0,     0,     0,     0,     0,   137,     0,
       0,   129,   130,   131,   132,   133,   134,   135,   136,    38,
       0,    39,    40,     0,     0,     0,   153,   137,     0,     0,
       0,     0,     0,     0,     0,   154,     0,     0,     0,     0,
       0,    46,   155,    48,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    49,    50,   138,   139,     0,   140,   141,
     142,   143,   144,   145,   146,   147,    54,   148,   149,   150,
       0,     0,     0,   314,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   138,   139,     0,   140,   141,
     142,   143,   144,   145,   146,   147,     0,   148,   149,   150,
       0,     0,     0,   861,   138,   139,     0,   140,   141,   142,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   332,
     333,     0,   917,   467,   468,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,     0,     0,   475,
       0,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,     0,     0,     0,    38,     0,    39,    40,
       0,   488,     0,    43,     0,     0,     0,     0,     0,     0,
       0,     0,    45,     0,     0,     0,     0,     0,    46,    47,
      48,     0,   489,     0,     0,     0,     0,     0,     0,     0,
      49,    50,     0,     0,     0,   187,   188,     0,     0,     0,
       0,   336,     0,    54,     0,     0,    55,     0,     0,     0,
       0,     0,   490,     0,     0,   491,     0,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,     0,    38,   505,    39,    40,    41,   189,     0,    43,
       0,     0,     0,    44,   190,   191,     0,     0,    45,     0,
     187,   188,     0,   192,    46,    47,    48,   193,     0,     0,
     194,     0,     0,     0,   195,     0,    49,    50,     0,   196,
       0,    51,     0,     0,     0,     0,     0,   197,    53,    54,
       0,   198,    55,   199,     0,     0,     0,    38,   200,    39,
      40,    41,   273,     0,    43,     0,     0,     0,    44,   190,
     191,     0,     0,    45,   201,   187,   188,     0,   192,    46,
      47,    48,   193,     0,     0,   194,     0,     0,     0,   195,
       0,    49,    50,     0,   196,     0,    51,     0,     0,     0,
       0,     0,   197,    53,    54,     0,   198,    55,   199,     0,
       0,     0,    38,     0,    39,    40,    41,   189,     0,    43,
       0,     0,     0,    44,   190,   191,     0,     0,    45,   201,
       0,     0,     0,   192,    46,    47,    48,   193,     0,     0,
     194,     0,     0,     0,   195,     0,    49,    50,     0,   196,
       0,    51,     0,     0,     0,     0,     0,   197,    53,    54,
       0,   198,    55,   199,   129,   130,   131,   132,   133,   134,
     135,   136,     0,     0,     0,     0,     0,     0,     0,     0,
     137,     0,     0,     0,   201,   129,   130,   131,   132,   133,
     134,   135,   136,     0,     0,     0,     0,     0,     0,     0,
       0,   137,   129,   130,   131,   132,   133,   134,   135,   136,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   129,
     130,   131,   132,   133,   134,   135,   136,     0,     0,     0,
       0,     0,     0,     0,     0,   137,   574,   575,   576,   577,
     578,   579,   580,   581,     0,     0,     0,     0,     0,     0,
       0,     0,   582,     0,     0,   312,     0,   138,   139,     0,
     140,   141,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,     0,     0,     0,   464,     0,     0,   138,   139,
       0,   140,   141,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   859,     0,   138,   139,     0,   140,   141,
     142,   143,   144,   145,   146,   147,     0,   148,   149,   150,
       0,     0,   138,   139,     0,   140,   141,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,     0,     0,   583,
     584,     0,   585,   586,   587,   588,   589,   590,   591,   592,
       0,   593,   594,   595,   828,   829,   830,   831,   832,   833,
     834,   835,     0,     0,     0,     0,     0,     0,     0,     0,
     836,   829,   830,   831,   832,   833,   834,   835,     0,     0,
       0,     0,     0,     0,     0,     0,   836,   131,   132,   133,
     134,   135,   136,     0,     0,     0,     0,     0,     0,     0,
       0,   137,   131,   132,   133,   134,   135,   136,     0,     0,
       0,     0,     0,     0,     0,     0,   137,   131,   132,   133,
     134,   135,   136,     0,     0,     0,     0,     0,     0,     0,
       0,   137,   830,   831,   832,   833,   834,   835,     0,     0,
       0,     0,     0,     0,     0,   915,   836,   837,   838,     0,
     839,     0,     0,   840,   841,   842,   843,   844,     0,   845,
     846,   847,     0,     0,   838,     0,   839,     0,     0,   840,
     841,   842,   843,   844,     0,   845,   846,   847,     0,   139,
       0,   140,   141,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,     0,     0,     0,   140,   141,   142,   143,
     144,   145,   146,   147,     0,   148,   149,   150,     0,     0,
       0,     0,   141,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,     0,   838,     0,   839,     0,     0,   840,
     841,   842,   843,   844,     0,   845,   846,   847,   830,   831,
     832,   833,   834,   835,   332,   333,     0,     0,     0,     0,
       0,     0,   836,   830,   831,   832,   833,   834,   835,     0,
       0,     0,     0,     0,     0,     0,     0,   836,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    38,     0,    39,    40,   334,   335,     0,    43,     0,
       0,     0,     0,     0,     0,     0,     0,    45,     0,     0,
       0,     0,     0,    46,    47,    48,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    49,    50,     0,     0,     0,
       0,     0,     0,    37,     0,     0,   336,     0,    54,     0,
       0,    55,   839,     0,     0,   840,   841,   842,   843,   844,
       0,   845,   846,   847,     0,     0,     0,     0,     0,     0,
     840,   841,   842,   843,   844,     0,   845,   846,   847,    38,
       0,    39,    40,    41,    42,     0,    43,     0,     0,     0,
      44,     0,    37,     0,     0,    45,     0,     0,     0,     0,
       0,    46,    47,    48,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    49,    50,     0,     0,     0,    51,     0,
       0,     0,     0,     0,    52,    53,    54,     0,    38,    55,
      39,    40,    41,   281,     0,    43,     0,     0,     0,    44,
       0,    99,     0,     0,    45,     0,     0,     0,     0,     0,
      46,    47,    48,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    49,    50,     0,     0,     0,    51,     0,     0,
       0,     0,     0,    52,    53,    54,     0,    38,    55,    39,
      40,    41,     0,     0,    43,     0,     0,     0,    44,     0,
      37,     0,     0,    45,     0,     0,     0,     0,     0,    46,
      47,    48,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    49,    50,     0,     0,     0,    51,     0,     0,     0,
       0,     0,   100,    53,    54,     0,    38,    55,    39,    40,
      41,     0,     0,    43,     0,     0,    68,    44,     0,     0,
       0,     0,    45,     0,     0,     0,     0,    69,    46,    47,
      48,    70,     0,     0,    71,     0,     0,     0,     0,     0,
      49,    50,     0,    72,     0,    51,    73,    74,    75,     0,
       0,    52,    53,    54,     0,    68,    55,    76,     0,     0,
       0,    77,     0,     0,     0,    78,    69,     0,     0,     0,
      70,     0,     0,    71,     0,    79,     0,     0,     0,     0,
      68,     0,    72,     0,     0,    73,    74,    75,     0,     0,
       0,    69,     0,     0,   330,    70,    76,     0,    71,     0,
      77,     0,     0,     0,    78,    68,     0,    72,     0,     0,
      73,    74,    75,     0,    79,     0,    69,     0,     0,     0,
      70,    76,     0,    71,     0,    77,     0,     0,     0,    78,
      68,     0,    72,   388,     0,    73,    74,    75,     0,    79,
       0,    69,     0,     0,     0,    70,    76,     0,    71,     0,
      77,     0,     0,     0,    78,     0,     0,    72,   451,     0,
      73,    74,    75,     0,    79,     0,     0,     0,     0,     0,
      38,    76,    39,    40,     0,    77,     0,   153,     0,    78,
      68,     0,     0,   537,     0,     0,   154,     0,     0,    79,
       0,    69,    46,   155,    48,    70,     0,     0,    71,     0,
       0,     0,     0,     0,    49,    50,     0,    72,   740,     0,
      73,    74,    75,     0,     0,     0,     0,    54,     0,     0,
       0,    76,     0,     0,     0,    77,     0,     0,     0,    78,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    98
};

static const short yycheck[] =
{
       1,    32,    83,     4,    83,    32,    91,    92,    93,    94,
      21,    96,    97,    98,   459,    83,    83,    77,   599,   274,
     105,   106,    10,    21,   109,   349,   450,   177,     8,     9,
      12,     8,     9,     8,     9,   351,   152,    42,   110,   355,
     356,   357,   345,   119,   105,   348,   102,   350,    10,   165,
     166,   167,   168,     8,     9,    56,   102,   190,   382,   120,
       8,     9,     8,     9,   119,   121,     2,   370,    95,   372,
     373,   374,    83,   413,   119,   121,    77,     8,     9,    10,
     107,   108,     4,   390,   391,    83,     8,     9,    50,   513,
     102,   119,    28,    29,    30,    31,    71,    33,    21,   105,
     119,    29,   183,   443,   183,    74,    75,    76,   411,   121,
     101,   120,   121,   104,   120,   183,   183,   267,   149,    50,
     102,   376,   119,   398,   101,    94,   114,   551,   452,   445,
     405,   406,   407,   408,   284,   102,   439,   102,   223,   120,
     121,   121,   417,   259,     8,     9,    10,   109,    29,   730,
     102,   152,   114,   101,   121,   101,   121,   119,   413,   434,
      83,   102,   465,   102,   165,   166,   167,   168,   102,   121,
     119,   120,   183,   110,   119,   176,   177,   119,   109,   119,
     121,   331,   121,   114,   189,   183,    50,   121,   443,   194,
     118,   119,   120,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   346,   150,   555,   349,   524,   558,   101,
     102,   528,   102,   530,   805,   532,   533,   534,    47,   102,
      49,    50,   119,   573,   102,    54,   119,   118,   119,   120,
     119,   121,   119,   120,   394,   109,     6,   104,   121,   382,
     114,     8,     9,   121,   104,   119,   104,   104,   259,   119,
     183,   119,   120,   264,   265,   121,   267,   268,   273,   270,
     545,   272,   114,   101,   272,   101,   281,   103,   104,   105,
     604,   282,   104,   284,   559,   866,    98,    99,   100,   870,
     120,   101,    49,   119,   120,   231,   232,   119,   120,   121,
     555,   104,   121,   122,   123,   124,   110,     3,     4,     5,
       6,   101,     8,   103,   104,   105,   119,   120,   121,   452,
      74,    75,    76,   324,   325,   906,   119,    84,   264,   910,
     331,   119,     6,    90,    91,   103,   155,   335,   157,   340,
     400,   346,   923,   121,   349,   346,   102,   378,   349,   380,
     351,   932,   104,   289,   355,   356,   357,    53,   121,   360,
     121,   111,   363,   121,    60,   810,   367,   119,   120,   121,
     121,   111,   121,   458,   121,   376,   312,   382,     8,     9,
      10,   382,   121,   121,   121,    81,   121,    83,   121,   104,
     119,    87,   119,   394,   119,   396,    29,   398,   429,   400,
     121,   725,   429,   401,   405,   406,   407,   408,   409,    19,
      20,   422,   413,   109,   419,   119,   417,   113,   114,    29,
      50,   117,   762,   119,   422,   124,   102,   123,   122,   101,
      29,   367,   105,   434,   102,   102,   111,   114,   122,   572,
     119,   122,   443,    73,   445,   114,   105,   452,   114,   450,
     386,   452,   114,    85,   110,   119,   759,   110,   459,   540,
     121,   540,   122,   121,   102,   120,   389,   390,   391,   121,
     124,   604,   540,   540,   102,   121,   105,   120,   802,   109,
     102,   114,   115,   116,   114,   118,   119,   120,   119,   119,
     426,   427,   428,   817,   430,   121,    50,   102,   801,   422,
      29,     4,   112,   113,   114,   115,   116,   119,   118,   119,
     120,   538,   513,   124,   450,   114,   115,   116,   121,   118,
     119,   120,   122,   459,   121,    17,    18,    19,    20,   540,
     122,   124,   119,   560,   535,   562,   563,    29,   539,   863,
     110,   119,   540,   110,   545,    52,   849,   124,   111,   102,
     551,   111,   121,    86,   555,    62,    63,   558,   559,   121,
     119,   119,   111,   594,   121,    72,   121,   572,     0,   570,
     121,    78,   573,   119,   119,   511,   111,   513,   121,   121,
     904,   122,   121,   112,   113,   114,   115,   116,   119,   118,
     119,   120,   725,   100,   121,   102,   103,   119,   599,   604,
     121,   524,   121,   604,     0,   528,   457,   530,   176,   532,
     533,   534,   727,   400,   801,   551,   759,   540,   110,   111,
     112,   113,   114,   115,   116,    29,   118,   119,   120,   849,
     400,   183,   401,   335,   539,   183,   422,   572,   574,   575,
     576,   577,   578,   579,   580,   581,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,   593,    45,   595,
      47,    48,   456,     8,     9,     8,     9,   395,   689,   802,
      -1,    17,    18,    19,    20,   324,    -1,    -1,   185,   764,
      67,    68,    69,    29,   817,    -1,    -1,   550,   689,    -1,
     197,    -1,    79,    80,   201,    -1,    -1,    -1,    -1,    -1,
      -1,   208,   209,    -1,    49,    92,    49,    -1,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,    -1,    -1,    -1,
     725,   752,    -1,    -1,   725,   752,    -1,    -1,    -1,   730,
     863,    -1,   119,    -1,    -1,    -1,    -1,     8,     9,    84,
      -1,    84,    -1,    -1,    -1,    90,    91,    90,    91,    94,
      -1,    94,   748,   749,   750,   751,    -1,   753,   265,    -1,
      -1,   762,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   904,   118,   119,   120,    -1,    -1,    -1,    49,    -1,
      -1,   288,   718,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   818,   819,   820,    -1,   731,    -1,   802,    -1,    -1,
      -1,   802,    -1,    -1,   805,    -1,    -1,    -1,    -1,   810,
      -1,    -1,   817,    84,    -1,   846,   817,   324,    -1,    90,
      91,    -1,    -1,    94,   760,    -1,    -1,   334,    -1,   336,
      -1,   767,   828,   829,   830,   831,   832,   833,   834,   835,
     836,   837,   838,   839,   840,   841,   842,   843,   844,   845,
      -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,   863,    -1,
      -1,    -1,   863,    -1,    -1,   866,    -1,    -1,   899,   870,
     901,    -1,    -1,    -1,   810,    -1,    -1,    -1,   385,   875,
      -1,    -1,   389,   390,   391,   748,   749,   750,   751,    -1,
     753,    19,    20,    -1,    -1,   926,   927,    44,    -1,   904,
      -1,    29,    -1,   904,    -1,   906,    -1,    -1,    55,   910,
      -1,   847,    59,    -1,    -1,    62,    -1,    -1,    -1,   915,
      -1,    -1,   923,   859,    71,    -1,    -1,    74,    75,    76,
      -1,   932,    -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,
      -1,    -1,    89,    -1,    -1,    -1,    93,    -1,    -1,    -1,
     457,    -1,    -1,    -1,    -1,    -1,   103,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   828,   829,   830,   831,   832,
     833,   834,   835,   836,   837,   838,   839,   840,   841,   842,
     843,   844,   845,    -1,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   510,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   875,    -1,    -1,    -1,   523,   524,   525,    -1,
      -1,   528,    -1,   530,    -1,   532,   533,   534,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    -1,    -1,
      -1,    -1,   915,    -1,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    -1,    -1,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      -1,    -1,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    -1,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    -1,    -1,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    13,    14,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    29,    45,    -1,    47,    48,    49,    50,
      -1,    52,    53,    -1,    -1,    56,    -1,    -1,    -1,    60,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,    79,    80,
      81,    -1,    83,    84,    -1,    -1,    87,    -1,    -1,    90,
      91,    92,    -1,    -1,    95,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    12,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,    -1,    -1,   117,    -1,   119,    -1,
     106,   107,   123,   109,    -1,   902,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,    -1,    -1,    45,    -1,    47,
      48,    49,    50,    -1,    52,    53,    -1,    -1,    56,    -1,
      -1,    -1,    60,    61,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,
      -1,    79,    80,    81,    -1,    83,    84,    -1,    -1,    87,
      -1,    -1,    90,    91,    92,    -1,    -1,    95,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    12,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,    -1,    -1,    -1,   117,
      -1,   119,    -1,    -1,    -1,   123,    14,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    45,    -1,    47,    48,
      45,    29,    47,    48,    49,    50,    -1,    52,    53,    -1,
      -1,    56,    -1,    -1,    -1,    60,    61,    -1,    67,    68,
      69,    -1,    67,    68,    69,    -1,    -1,    72,    -1,    -1,
      79,    80,    -1,    -1,    79,    80,    81,    -1,    83,    84,
      -1,    -1,    87,    92,    -1,    90,    91,    92,    -1,    -1,
      95,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,    -1,
     119,    -1,   117,    -1,   119,    -1,    -1,    -1,   123,   107,
      -1,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,    45,    -1,    47,    48,    -1,    -1,    -1,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      72,    45,    -1,    47,    48,    -1,    -1,    79,    80,    81,
      -1,    83,    -1,    -1,    -1,    87,     3,     4,     5,     6,
      92,     8,     9,    67,    68,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    79,    80,   109,    -1,    -1,
      -1,   113,   114,    -1,    -1,   117,    -1,   119,    92,   121,
      -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
      47,    48,    -1,    -1,    -1,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    60,    61,   119,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    72,    45,    -1,    47,    48,
      -1,    -1,    79,    80,    81,    -1,    83,    -1,    -1,    -1,
      87,     3,     4,     5,     6,    92,     8,     9,    67,    68,
      69,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      79,    80,   109,    -1,    -1,    -1,   113,   114,    -1,    -1,
     117,    -1,   119,    92,    -1,    -1,   123,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    -1,    47,    48,    -1,    -1,    -1,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      72,    -1,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,
      -1,    83,    -1,    -1,    -1,    87,     3,     4,     5,     6,
      92,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,    -1,    -1,   117,    -1,   119,    -1,    -1,
      -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
      47,    48,    -1,    -1,    -1,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    60,    61,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,
      -1,    -1,    79,    80,    81,    -1,    83,    -1,    -1,    -1,
      87,     3,     4,     5,     6,    92,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,    -1,    -1,
     117,    -1,   119,    -1,   121,    -1,   123,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    -1,    47,    48,    -1,    -1,    -1,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      72,    -1,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,
      -1,    83,    -1,    -1,    -1,    87,     3,     4,     5,     6,
      92,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,    -1,    -1,   117,    -1,   119,    -1,    -1,
      -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
      47,    48,    -1,    -1,    -1,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    60,    61,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,
      -1,    -1,    79,    80,    81,    -1,    83,    -1,    -1,    -1,
      87,     3,     4,     5,     6,    92,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,    -1,    -1,
     117,    -1,   119,    -1,   121,    -1,   123,    -1,    -1,    45,
      -1,    47,    48,    45,    -1,    47,    48,    -1,    -1,    -1,
      52,    53,    -1,    -1,    -1,    61,    -1,    -1,    60,    61,
      -1,    67,    68,    69,    -1,    67,    68,    -1,    -1,    -1,
      72,    -1,    -1,    79,    80,    -1,    -1,    79,    80,    81,
      -1,    83,    -1,    -1,    -1,    87,    92,    -1,    -1,    -1,
      92,    -1,    13,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,    29,    -1,
      -1,   113,   114,    -1,    -1,   117,    -1,   119,    -1,    -1,
      -1,   123,    13,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,
      -1,    13,    14,    15,    16,    17,    18,    19,    20,    45,
      -1,    47,    48,    -1,    -1,    -1,    52,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    79,    80,   106,   107,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,    92,   118,   119,   120,
      -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
      -1,    -1,    -1,   124,   106,   107,    -1,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,     8,
       9,    -1,   124,    13,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    -1,    -1,    -1,    45,    -1,    47,    48,
      -1,    51,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      79,    80,    -1,    -1,    -1,     8,     9,    -1,    -1,    -1,
      -1,    90,    -1,    92,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,   102,    -1,    -1,   105,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
     120,    -1,    45,   123,    47,    48,    49,    50,    -1,    52,
      -1,    -1,    -1,    56,    57,    58,    -1,    -1,    61,    -1,
       8,     9,    -1,    66,    67,    68,    69,    70,    -1,    -1,
      73,    -1,    -1,    -1,    77,    -1,    79,    80,    -1,    82,
      -1,    84,    -1,    -1,    -1,    -1,    -1,    90,    91,    92,
      -1,    94,    95,    96,    -1,    -1,    -1,    45,   101,    47,
      48,    49,    50,    -1,    52,    -1,    -1,    -1,    56,    57,
      58,    -1,    -1,    61,   117,     8,     9,    -1,    66,    67,
      68,    69,    70,    -1,    -1,    73,    -1,    -1,    -1,    77,
      -1,    79,    80,    -1,    82,    -1,    84,    -1,    -1,    -1,
      -1,    -1,    90,    91,    92,    -1,    94,    95,    96,    -1,
      -1,    -1,    45,    -1,    47,    48,    49,    50,    -1,    52,
      -1,    -1,    -1,    56,    57,    58,    -1,    -1,    61,   117,
      -1,    -1,    -1,    66,    67,    68,    69,    70,    -1,    -1,
      73,    -1,    -1,    -1,    77,    -1,    79,    80,    -1,    82,
      -1,    84,    -1,    -1,    -1,    -1,    -1,    90,    91,    92,
      -1,    94,    95,    96,    13,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      29,    -1,    -1,    -1,   117,    13,    14,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    29,    13,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,    13,
      14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    13,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    29,    -1,    -1,   104,    -1,   106,   107,    -1,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,    -1,    -1,    -1,   103,    -1,    -1,   106,   107,
      -1,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   104,    -1,   106,   107,    -1,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
      -1,    -1,   106,   107,    -1,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,    -1,    -1,   106,
     107,    -1,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,   119,   120,    13,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      29,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    29,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    29,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    29,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    29,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,    29,   106,   107,    -1,
     109,    -1,    -1,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,    -1,    -1,   107,    -1,   109,    -1,    -1,   112,
     113,   114,   115,   116,    -1,   118,   119,   120,    -1,   107,
      -1,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,    -1,    -1,    -1,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,   119,   120,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,    -1,   107,    -1,   109,    -1,    -1,   112,
     113,   114,   115,   116,    -1,   118,   119,   120,    15,    16,
      17,    18,    19,    20,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    29,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    -1,    47,    48,    49,    50,    -1,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    79,    80,    -1,    -1,    -1,
      -1,    -1,    -1,     9,    -1,    -1,    90,    -1,    92,    -1,
      -1,    95,   109,    -1,    -1,   112,   113,   114,   115,   116,
      -1,   118,   119,   120,    -1,    -1,    -1,    -1,    -1,    -1,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,    45,
      -1,    47,    48,    49,    50,    -1,    52,    -1,    -1,    -1,
      56,    -1,     9,    -1,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    79,    80,    -1,    -1,    -1,    84,    -1,
      -1,    -1,    -1,    -1,    90,    91,    92,    -1,    45,    95,
      47,    48,    49,    50,    -1,    52,    -1,    -1,    -1,    56,
      -1,     9,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    79,    80,    -1,    -1,    -1,    84,    -1,    -1,
      -1,    -1,    -1,    90,    91,    92,    -1,    45,    95,    47,
      48,    49,    -1,    -1,    52,    -1,    -1,    -1,    56,    -1,
       9,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    79,    80,    -1,    -1,    -1,    84,    -1,    -1,    -1,
      -1,    -1,    90,    91,    92,    -1,    45,    95,    47,    48,
      49,    -1,    -1,    52,    -1,    -1,    44,    56,    -1,    -1,
      -1,    -1,    61,    -1,    -1,    -1,    -1,    55,    67,    68,
      69,    59,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,
      79,    80,    -1,    71,    -1,    84,    74,    75,    76,    -1,
      -1,    90,    91,    92,    -1,    44,    95,    85,    -1,    -1,
      -1,    89,    -1,    -1,    -1,    93,    55,    -1,    -1,    -1,
      59,    -1,    -1,    62,    -1,   103,    -1,    -1,    -1,    -1,
      44,    -1,    71,    -1,    -1,    74,    75,    76,    -1,    -1,
      -1,    55,    -1,    -1,   122,    59,    85,    -1,    62,    -1,
      89,    -1,    -1,    -1,    93,    44,    -1,    71,    -1,    -1,
      74,    75,    76,    -1,   103,    -1,    55,    -1,    -1,    -1,
      59,    85,    -1,    62,    -1,    89,    -1,    -1,    -1,    93,
      44,    -1,    71,   122,    -1,    74,    75,    76,    -1,   103,
      -1,    55,    -1,    -1,    -1,    59,    85,    -1,    62,    -1,
      89,    -1,    -1,    -1,    93,    -1,    -1,    71,   122,    -1,
      74,    75,    76,    -1,   103,    -1,    -1,    -1,    -1,    -1,
      45,    85,    47,    48,    -1,    89,    -1,    52,    -1,    93,
      44,    -1,    -1,   122,    -1,    -1,    61,    -1,    -1,   103,
      -1,    55,    67,    68,    69,    59,    -1,    -1,    62,    -1,
      -1,    -1,    -1,    -1,    79,    80,    -1,    71,   122,    -1,
      74,    75,    76,    -1,    -1,    -1,    -1,    92,    -1,    -1,
      -1,    85,    -1,    -1,    -1,    89,    -1,    -1,    -1,    93,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 2:
#line 380 "cppBison.yxx"
{
  current_expr = yyvsp[0].u.expr;
}
    break;
case 3:
#line 384 "cppBison.yxx"
{
  current_type = yyvsp[0].u.type;
}
    break;
case 9:
#line 402 "cppBison.yxx"
{
  delete yyvsp[-1].u.expr;
}
    break;
case 10:
#line 414 "cppBison.yxx"
{
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) | 
                     (yyvsp[-1].u.integer & CPPInstance::SC_c_binding));
}
    break;
case 11:
#line 419 "cppBison.yxx"
{
  pop_storage_class();
}
    break;
case 19:
#line 433 "cppBison.yxx"
{
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = yylsp[0];
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
    break;
case 20:
#line 446 "cppBison.yxx"
{
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", yylsp[0]);
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
    break;
case 21:
#line 455 "cppBison.yxx"
{
  current_scope->set_current_vis(V_published);
}
    break;
case 22:
#line 459 "cppBison.yxx"
{
  current_scope->set_current_vis(V_public);
}
    break;
case 23:
#line 463 "cppBison.yxx"
{
  current_scope->set_current_vis(V_protected);
}
    break;
case 24:
#line 467 "cppBison.yxx"
{
  current_scope->set_current_vis(V_private);
}
    break;
case 25:
#line 474 "cppBison.yxx"
{
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
    break;
case 26:
#line 480 "cppBison.yxx"
{
  delete current_scope;
  pop_scope();
}
    break;
case 27:
#line 489 "cppBison.yxx"
{
  yyval.u.integer = 0;
}
    break;
case 28:
#line 493 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_extern;
}
    break;
case 29:
#line 497 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-2].u.integer | (int)CPPInstance::SC_extern;
  if (yyvsp[0].str == "C") {
    yyval.u.integer |= (int)CPPInstance::SC_c_binding;
  } else if (yyvsp[0].str == "C++") {
    yyval.u.integer &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + yyvsp[0].str + "\"", yylsp[0]);
  }
}
    break;
case 30:
#line 508 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_static;
}
    break;
case 31:
#line 512 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_inline;
}
    break;
case 32:
#line 516 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_virtual;
}
    break;
case 33:
#line 520 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_explicit;
}
    break;
case 34:
#line 524 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_volatile;
}
    break;
case 35:
#line 528 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_mutable;
}
    break;
case 36:
#line 532 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-1].u.integer | (int)CPPInstance::SC_register;
}
    break;
case 37:
#line 539 "cppBison.yxx"
{
  /* multiple_var_declaration adds itself to the scope. */
}
    break;
case 38:
#line 543 "cppBison.yxx"
{
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration(yyvsp[-1].u.decl, global_scope, current_lexer, yylsp[-1]);
}
    break;
case 39:
#line 552 "cppBison.yxx"
{
  if (yyvsp[-1].u.instance != (CPPInstance *)NULL) {
    yyvsp[-1].u.instance->_storage_class |= (current_storage_class | yyvsp[-2].u.integer);
    current_scope->add_declaration(yyvsp[-1].u.instance, global_scope, current_lexer, yylsp[-1]);
    yyvsp[-1].u.instance->set_initializer(yyvsp[0].u.expr);
  }
}
    break;
case 40:
#line 563 "cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if (yyvsp[0].u.decl->as_type_declaration()) {
    current_type = yyvsp[0].u.decl->as_type_declaration()->_type;
  } else {
    current_type = yyvsp[0].u.decl->as_type();
  }
  push_storage_class(yyvsp[-1].u.integer);
}
    break;
case 41:
#line 574 "cppBison.yxx"
{
  pop_storage_class();
}
    break;
case 42:
#line 578 "cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  current_type = yyvsp[0].u.type;
  push_storage_class(yyvsp[-2].u.integer);
}
    break;
case 43:
#line 585 "cppBison.yxx"
{
  pop_storage_class();
}
    break;
case 44:
#line 596 "cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-1].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-1].file);
  inst->set_initializer(yyvsp[0].u.expr);
  current_scope->add_declaration(inst, global_scope, current_lexer, yylsp[-1]);
}
    break;
case 45:
#line 604 "cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-3].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-3].file);
  inst->set_initializer(yyvsp[-2].u.expr);
  current_scope->add_declaration(inst, global_scope, current_lexer, yylsp[-3]);
}
    break;
case 46:
#line 615 "cppBison.yxx"
{
  yyvsp[-1].u.inst_ident->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-1].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-1].file);
  inst->set_initializer(yyvsp[0].u.expr);
  current_scope->add_declaration(inst, global_scope, current_lexer, yylsp[-1]);
}
    break;
case 47:
#line 624 "cppBison.yxx"
{
  yyvsp[-3].u.inst_ident->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-3].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-3].file);
  inst->set_initializer(yyvsp[-2].u.expr);
  current_scope->add_declaration(inst, global_scope, current_lexer, yylsp[-3]);
}
    break;
case 48:
#line 637 "cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if (yyvsp[0].u.decl->as_type_declaration()) {
    current_type = yyvsp[0].u.decl->as_type_declaration()->_type;
  } else {
    current_type = yyvsp[0].u.decl->as_type();
  }
  push_storage_class(yyvsp[-1].u.integer);
}
    break;
case 49:
#line 648 "cppBison.yxx"
{
  pop_storage_class();
}
    break;
case 50:
#line 652 "cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  current_type = yyvsp[0].u.type;
  push_storage_class(yyvsp[-2].u.integer);
}
    break;
case 51:
#line 659 "cppBison.yxx"
{
  pop_storage_class();
}
    break;
case 52:
#line 663 "cppBison.yxx"
{
  if (yyvsp[-1].u.instance != (CPPDeclaration *)NULL) {
    CPPInstance *inst = yyvsp[-1].u.instance->as_instance();
    if (inst != (CPPInstance *)NULL) {
      inst->_storage_class |= (current_storage_class | yyvsp[-2].u.integer);
      current_scope->add_declaration(inst, global_scope, current_lexer, yylsp[-1]);
      current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, yylsp[-1]);
    }
  }
}
    break;
case 53:
#line 677 "cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-1].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-1].file);
  inst->set_initializer(yyvsp[0].u.expr);
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, yylsp[-1]);
}
    break;
case 54:
#line 685 "cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-3].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-3].file);
  inst->set_initializer(yyvsp[-2].u.expr);
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, yylsp[-3]);
}
    break;
case 55:
#line 696 "cppBison.yxx"
{
  yyvsp[-1].u.inst_ident->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-1].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-1].file);
  inst->set_initializer(yyvsp[0].u.expr);
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, yylsp[-1]);
}
    break;
case 56:
#line 705 "cppBison.yxx"
{
  yyvsp[-3].u.inst_ident->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, yyvsp[-3].u.inst_ident,
                                      current_storage_class,
                                      yylsp[-3].file);
  inst->set_initializer(yyvsp[-2].u.expr);
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, yylsp[-3]);
}
    break;
case 57:
#line 719 "cppBison.yxx"
{
  push_scope(yyvsp[-1].u.identifier->get_scope(current_scope, global_scope));
}
    break;
case 58:
#line 723 "cppBison.yxx"
{
  pop_scope();
  CPPType *type;
  if (yyvsp[-5].u.identifier->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(yyvsp[-5].u.identifier);
  ii->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);

  yyval.u.instance = new CPPInstance(type, ii, 0, yylsp[-5].file);
}
    break;
case 59:
#line 741 "cppBison.yxx"
{
  push_scope(yyvsp[-1].u.identifier->get_scope(current_scope, global_scope));
}
    break;
case 60:
#line 745 "cppBison.yxx"
{
  pop_scope();
  CPPType *type;
  if (yyvsp[-5].u.identifier->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(yyvsp[-5].u.identifier);
  ii->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);

  yyval.u.instance = new CPPInstance(type, ii, 0, yylsp[-5].file);
}
    break;
case 61:
#line 765 "cppBison.yxx"
{
  push_scope(yyvsp[-1].u.identifier->get_scope(current_scope, global_scope));
}
    break;
case 62:
#line 769 "cppBison.yxx"
{
  pop_scope();
  if (yyvsp[-5].u.identifier->is_scoped()) {
    yyerror("Invalid destructor name: ~" + yyvsp[-5].u.identifier->get_fully_scoped_name(), yylsp[-5]);
  } else {
    CPPIdentifier *ident = 
      new CPPIdentifier("~" + yyvsp[-5].u.identifier->get_simple_name(), yylsp[-5].file);
    delete yyvsp[-5].u.identifier;

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);
    
    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);

    yyval.u.instance = new CPPInstance(type, ii, 0, yylsp[-5].file);
  }
}
    break;
case 63:
#line 795 "cppBison.yxx"
{
  push_scope(yyvsp[-2].u.inst_ident->get_scope(current_scope, global_scope));
}
    break;
case 64:
#line 799 "cppBison.yxx"
{
  pop_scope();
  CPPType *type = yyvsp[-9].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(type != NULL);

  CPPInstanceIdentifier *ii = yyvsp[-6].u.inst_ident;
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);
  yyval.u.instance = new CPPInstance(type, ii, 0, yylsp[-9].file);
}
    break;
case 65:
#line 810 "cppBison.yxx"
{
  push_scope(yyvsp[-2].u.inst_ident->get_scope(current_scope, global_scope));
}
    break;
case 66:
#line 814 "cppBison.yxx"
{
  pop_scope();
  CPPType *type = yyvsp[-10].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(type != NULL);

  CPPInstanceIdentifier *ii = yyvsp[-6].u.inst_ident;
  ii->add_scoped_pointer_modifier(yyvsp[-8].u.identifier);
  ii->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);
  yyval.u.instance = new CPPInstance(type, ii, 0, yylsp[-10].file);
}
    break;
case 67:
#line 827 "cppBison.yxx"
{
  if (yyvsp[-3].u.identifier != NULL) {
    push_scope(yyvsp[-3].u.identifier->get_scope(current_scope, global_scope));
  }
}
    break;
case 68:
#line 833 "cppBison.yxx"
{
  if (yyvsp[-7].u.identifier != NULL) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give all typecast operators the name "operator typecast".
  // Only their return type will differentiate them.  (Naturally, this
  // violates actual C++ rules, but we're not an actual C++ compiler
  // so we don't care.  And this is the easiest way to do it.)
  CPPIdentifier *ident = yyvsp[-7].u.identifier;
  if (ident == NULL) {
    ident = new CPPIdentifier("operator typecast", yylsp[-7].file);
  } else {
    ident->add_name("operator typecast");
  }
  yyval.u.instance = CPPInstance::make_typecast_function
    (new CPPInstance(yyvsp[-6].u.type, yyvsp[-5].u.inst_ident, 0, yylsp[-5].file), ident, yyvsp[-2].u.param_list, yyvsp[0].u.integer);
}
    break;
case 69:
#line 858 "cppBison.yxx"
{
  if (yyvsp[-4].u.identifier != NULL) {
    push_scope(yyvsp[-4].u.identifier->get_scope(current_scope, global_scope));
  }
}
    break;
case 70:
#line 864 "cppBison.yxx"
{
  if (yyvsp[-8].u.identifier != NULL) {
    pop_scope();
  }

  CPPIdentifier *ident = yyvsp[-8].u.identifier;
  if (ident == NULL) {
    ident = new CPPIdentifier("operator typecast", yylsp[-8].file);
  } else {
    ident->add_name("operator typecast");
  }
  yyvsp[-5].u.inst_ident->add_modifier(IIT_const);
  yyval.u.instance = CPPInstance::make_typecast_function
    (new CPPInstance(yyvsp[-6].u.type, yyvsp[-5].u.inst_ident, 0, yylsp[-5].file), ident, yyvsp[-2].u.param_list, yyvsp[0].u.integer);
}
    break;
case 71:
#line 884 "cppBison.yxx"
{
  CPPDeclaration *decl = 
    yyvsp[0].u.identifier->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != (CPPDeclaration *)NULL) {
    yyval.u.instance = decl->as_instance();
  } else {
    yyval.u.instance = (CPPInstance *)NULL;
  }
}
    break;
case 72:
#line 897 "cppBison.yxx"
{
  yyval.u.integer = 0;
}
    break;
case 73:
#line 901 "cppBison.yxx"
{
  yyval.u.integer = (int)CPPFunctionType::F_const_method;
}
    break;
case 74:
#line 905 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-3].u.integer;
}
    break;
case 75:
#line 909 "cppBison.yxx"
{
  yyval.u.integer = yyvsp[-4].u.integer;
}
    break;
case 76:
#line 916 "cppBison.yxx"
{
  yyval.str = "!";
}
    break;
case 77:
#line 920 "cppBison.yxx"
{
  yyval.str = "~";
}
    break;
case 78:
#line 924 "cppBison.yxx"
{
  yyval.str = "*";
}
    break;
case 79:
#line 928 "cppBison.yxx"
{
  yyval.str = "/";
}
    break;
case 80:
#line 932 "cppBison.yxx"
{
  yyval.str = "%";
}
    break;
case 81:
#line 936 "cppBison.yxx"
{
  yyval.str = "+";
}
    break;
case 82:
#line 940 "cppBison.yxx"
{
  yyval.str = "-";
}
    break;
case 83:
#line 944 "cppBison.yxx"
{
  yyval.str = "|";
}
    break;
case 84:
#line 948 "cppBison.yxx"
{
  yyval.str = "&";
}
    break;
case 85:
#line 952 "cppBison.yxx"
{
  yyval.str = "^";
}
    break;
case 86:
#line 956 "cppBison.yxx"
{
  yyval.str = "||";
}
    break;
case 87:
#line 960 "cppBison.yxx"
{
  yyval.str = "&&";
}
    break;
case 88:
#line 964 "cppBison.yxx"
{
  yyval.str = "==";
}
    break;
case 89:
#line 968 "cppBison.yxx"
{
  yyval.str = "!=";
}
    break;
case 90:
#line 972 "cppBison.yxx"
{
  yyval.str = "<=";
}
    break;
case 91:
#line 976 "cppBison.yxx"
{
  yyval.str = ">=";
}
    break;
case 92:
#line 980 "cppBison.yxx"
{
  yyval.str = "<";
}
    break;
case 93:
#line 984 "cppBison.yxx"
{
  yyval.str = ">";
}
    break;
case 94:
#line 988 "cppBison.yxx"
{
  yyval.str = "<<";
}
    break;
case 95:
#line 992 "cppBison.yxx"
{
  yyval.str = ">>";
}
    break;
case 96:
#line 996 "cppBison.yxx"
{
  yyval.str = "=";
}
    break;
case 97:
#line 1000 "cppBison.yxx"
{
  yyval.str = ",";
}
    break;
case 98:
#line 1004 "cppBison.yxx"
{
  yyval.str = "++";
}
    break;
case 99:
#line 1008 "cppBison.yxx"
{
  yyval.str = "--";
}
    break;
case 100:
#line 1012 "cppBison.yxx"
{
  yyval.str = "*=";
}
    break;
case 101:
#line 1016 "cppBison.yxx"
{
  yyval.str = "/=";
}
    break;
case 102:
#line 1020 "cppBison.yxx"
{
  yyval.str = "%=";
}
    break;
case 103:
#line 1024 "cppBison.yxx"
{
  yyval.str = "+=";
}
    break;
case 104:
#line 1028 "cppBison.yxx"
{
  yyval.str = "-=";
}
    break;
case 105:
#line 1032 "cppBison.yxx"
{
  yyval.str = "|=";
}
    break;
case 106:
#line 1036 "cppBison.yxx"
{
  yyval.str = "&=";
}
    break;
case 107:
#line 1040 "cppBison.yxx"
{
  yyval.str = "^=";
}
    break;
case 108:
#line 1044 "cppBison.yxx"
{
  yyval.str = "<<=";
}
    break;
case 109:
#line 1048 "cppBison.yxx"
{
  yyval.str = ">>=";
}
    break;
case 110:
#line 1052 "cppBison.yxx"
{
  yyval.str = "->";
}
    break;
case 111:
#line 1056 "cppBison.yxx"
{
  yyval.str = "[]";
}
    break;
case 112:
#line 1060 "cppBison.yxx"
{
  yyval.str = "()";
}
    break;
case 113:
#line 1064 "cppBison.yxx"
{
  yyval.str = "new";
}
    break;
case 114:
#line 1068 "cppBison.yxx"
{
  yyval.str = "delete";
}
    break;
case 117:
#line 1080 "cppBison.yxx"
{
  push_scope(new CPPTemplateScope(current_scope));
}
    break;
case 118:
#line 1084 "cppBison.yxx"
{
  pop_scope();
}
    break;
case 121:
#line 1096 "cppBison.yxx"
{
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter(yyvsp[0].u.decl);
}
    break;
case 122:
#line 1102 "cppBison.yxx"
{
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter(yyvsp[0].u.decl);
}
    break;
case 123:
#line 1111 "cppBison.yxx"
{
  yyval.u.decl = CPPType::new_type(new CPPClassTemplateParameter(yyvsp[0].u.identifier));
}
    break;
case 124:
#line 1115 "cppBison.yxx"
{
  yyval.u.decl = CPPType::new_type(new CPPClassTemplateParameter(yyvsp[-2].u.identifier, yyvsp[0].u.type));
}
    break;
case 125:
#line 1119 "cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance(yyvsp[-2].u.type, yyvsp[-1].u.inst_ident, 0, yylsp[-1].file);
  inst->set_initializer(yyvsp[0].u.expr);
  yyval.u.decl = inst;
}
    break;
case 126:
#line 1125 "cppBison.yxx"
{
  yyvsp[-1].u.inst_ident->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(yyvsp[-2].u.type, yyvsp[-1].u.inst_ident, 0, yylsp[-1].file);
  inst->set_initializer(yyvsp[0].u.expr);
  yyval.u.decl = inst;
}
    break;
case 127:
#line 1135 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.simple_type);
}
    break;
case 128:
#line 1139 "cppBison.yxx"
{
  yywarning("Not a type: " + yyvsp[0].u.identifier->get_fully_scoped_name(), yylsp[0]);
  yyval.u.type = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
    break;
case 129:
#line 1144 "cppBison.yxx"
{
  yyval.u.type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(yyval.u.type != NULL);
}
    break;
case 130:
#line 1149 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
}
    break;
case 131:
#line 1157 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier(yyvsp[0].u.identifier);
}
    break;
case 132:
#line 1161 "cppBison.yxx"
{
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = yyvsp[-1].u.identifier;
  if (ident == NULL) {
    ident = new CPPIdentifier("operator "+yyvsp[0].str, yylsp[0].file);
  } else {
    ident->_names.push_back("operator "+yyvsp[0].str);
  }

  yyval.u.inst_ident = new CPPInstanceIdentifier(ident);
}
    break;
case 133:
#line 1175 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_const);
}
    break;
case 134:
#line 1180 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_pointer);
}
    break;
case 135:
#line 1185 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_reference);
}
    break;
case 136:
#line 1190 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_scoped_pointer_modifier(yyvsp[-2].u.identifier);
}
    break;
case 137:
#line 1195 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-3].u.inst_ident;
  yyval.u.inst_ident->add_array_modifier(yyvsp[-1].u.expr);
}
    break;
case 138:
#line 1200 "cppBison.yxx"
{
  // bitfield definition.  We ignore the bitfield for now.
  yyval.u.inst_ident = yyvsp[-2].u.inst_ident;
}
    break;
case 139:
#line 1205 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-1].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_paren);
}
    break;
case 140:
#line 1210 "cppBison.yxx"
{
  push_scope(yyvsp[-1].u.inst_ident->get_scope(current_scope, global_scope));
}
    break;
case 141:
#line 1214 "cppBison.yxx"
{
  pop_scope();
  yyval.u.inst_ident = yyvsp[-5].u.inst_ident;
  if (yyvsp[-2].u.param_list->is_parameter_expr() && yyvsp[0].u.integer == 0) {
    // Oops, this must have been an instance declaration with a
    // parameter list, not a function prototype.
    yyval.u.inst_ident->add_initializer_modifier(yyvsp[-2].u.param_list);

  } else {
    // This was (probably) a function prototype.
    yyval.u.inst_ident->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);
  }
}
    break;
case 142:
#line 1232 "cppBison.yxx"
{
  yyval.u.param_list = new CPPParameterList;
}
    break;
case 143:
#line 1236 "cppBison.yxx"
{
  yyval.u.param_list = new CPPParameterList;
  yyval.u.param_list->_includes_ellipsis = true;
}
    break;
case 144:
#line 1241 "cppBison.yxx"
{
  yyval.u.param_list = yyvsp[0].u.param_list;
}
    break;
case 145:
#line 1245 "cppBison.yxx"
{
  yyval.u.param_list = yyvsp[-2].u.param_list;
  yyval.u.param_list->_includes_ellipsis = true;
}
    break;
case 146:
#line 1250 "cppBison.yxx"
{
  yyval.u.param_list = yyvsp[-1].u.param_list;
  yyval.u.param_list->_includes_ellipsis = true;
}
    break;
case 147:
#line 1258 "cppBison.yxx"
{
  yyval.u.param_list = new CPPParameterList;
  yyval.u.param_list->_parameters.push_back(yyvsp[0].u.instance);
}
    break;
case 148:
#line 1263 "cppBison.yxx"
{
  yyval.u.param_list = yyvsp[-2].u.param_list;
  yyval.u.param_list->_parameters.push_back(yyvsp[0].u.instance);
}
    break;
case 149:
#line 1271 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 150:
#line 1275 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 151:
#line 1282 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 152:
#line 1286 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 153:
#line 1293 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 154:
#line 1297 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 155:
#line 1301 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 156:
#line 1305 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[-1].u.expr;
}
    break;
case 157:
#line 1309 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 161:
#line 1322 "cppBison.yxx"
{
}
    break;
case 165:
#line 1331 "cppBison.yxx"
{
  yyval.u.instance = new CPPInstance(yyvsp[-2].u.type, yyvsp[-1].u.inst_ident, 0, yylsp[-1].file);
  yyval.u.instance->set_initializer(yyvsp[0].u.expr);
}
    break;
case 166:
#line 1336 "cppBison.yxx"
{
  yywarning("Not a type: " + yyvsp[-2].u.identifier->get_fully_scoped_name(), yylsp[-2]);
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
  yyval.u.instance = new CPPInstance(type, yyvsp[-1].u.inst_ident, 0, yylsp[-1].file);
  yyval.u.instance->set_initializer(yyvsp[0].u.expr);
}
    break;
case 167:
#line 1344 "cppBison.yxx"
{
  yyvsp[-1].u.inst_ident->add_modifier(IIT_const);
  yyval.u.instance = new CPPInstance(yyvsp[-2].u.type, yyvsp[-1].u.inst_ident, 0, yylsp[-1].file);
  yyval.u.instance->set_initializer(yyvsp[0].u.expr);
}
    break;
case 168:
#line 1350 "cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_parameter));
  yyval.u.instance = new CPPInstance(type, "expr");
  yyval.u.instance->set_initializer(yyvsp[0].u.expr);
}
    break;
case 169:
#line 1360 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;
case 170:
#line 1364 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier(yyvsp[0].u.identifier);
}
    break;
case 171:
#line 1368 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier(yyvsp[0].u.identifier);
}
    break;
case 172:
#line 1372 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_const);
}
    break;
case 173:
#line 1377 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_pointer);
}
    break;
case 174:
#line 1382 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_reference);
}
    break;
case 175:
#line 1387 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_scoped_pointer_modifier(yyvsp[-2].u.identifier);
}
    break;
case 176:
#line 1392 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-3].u.inst_ident;
  yyval.u.inst_ident->add_array_modifier(yyvsp[-1].u.expr);
}
    break;
case 177:
#line 1400 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;
case 178:
#line 1404 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier(yyvsp[0].u.identifier);
}
    break;
case 179:
#line 1408 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier(yyvsp[0].u.identifier);
}
    break;
case 180:
#line 1412 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_const);
}
    break;
case 181:
#line 1417 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_pointer);
}
    break;
case 182:
#line 1422 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_reference);
}
    break;
case 183:
#line 1427 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_scoped_pointer_modifier(yyvsp[-2].u.identifier);
}
    break;
case 184:
#line 1432 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-3].u.inst_ident;
  yyval.u.inst_ident->add_array_modifier(yyvsp[-1].u.expr);
}
    break;
case 185:
#line 1437 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-5].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_paren);
  yyval.u.inst_ident->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);
}
    break;
case 186:
#line 1443 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-1].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_paren);
}
    break;
case 187:
#line 1451 "cppBison.yxx"
{
  yyval.u.inst_ident = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;
case 188:
#line 1455 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_const);
}
    break;
case 189:
#line 1460 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_pointer);
}
    break;
case 190:
#line 1465 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_reference);
}
    break;
case 191:
#line 1470 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[0].u.inst_ident;
  yyval.u.inst_ident->add_scoped_pointer_modifier(yyvsp[-2].u.identifier);
}
    break;
case 192:
#line 1475 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-3].u.inst_ident;
  yyval.u.inst_ident->add_array_modifier(yyvsp[-1].u.expr);
}
    break;
case 193:
#line 1480 "cppBison.yxx"
{
  yyval.u.inst_ident = yyvsp[-5].u.inst_ident;
  yyval.u.inst_ident->add_modifier(IIT_paren);
  yyval.u.inst_ident->add_func_modifier(yyvsp[-2].u.param_list, yyvsp[0].u.integer);
}
    break;
case 194:
#line 1489 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.simple_type);
}
    break;
case 195:
#line 1493 "cppBison.yxx"
{
  yyval.u.type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(yyval.u.type != NULL);
}
    break;
case 196:
#line 1498 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
}
    break;
case 197:
#line 1502 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.struct_type);
}
    break;
case 198:
#line 1506 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.struct_type);
}
    break;
case 199:
#line 1510 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.enum_type);
}
    break;
case 200:
#line 1514 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.enum_type);
}
    break;
case 201:
#line 1518 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    yyval.u.type = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope, yylsp[-1].file))
      ->as_extension_type();
    CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    yyval.u.type = et;
  }
}
    break;
case 202:
#line 1534 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    yyval.u.type = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope, yylsp[-1].file))
      ->as_extension_type();
    CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    yyval.u.type = et;
  }
}
    break;
case 203:
#line 1553 "cppBison.yxx"
{
  yyval.u.decl = CPPType::new_type(yyvsp[0].u.simple_type);
}
    break;
case 204:
#line 1557 "cppBison.yxx"
{
  yyval.u.decl = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(yyval.u.decl != NULL);
}
    break;
case 205:
#line 1562 "cppBison.yxx"
{
  yyval.u.decl = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
}
    break;
case 206:
#line 1566 "cppBison.yxx"
{
  yyval.u.decl = CPPType::new_type(yyvsp[0].u.struct_type);
}
    break;
case 207:
#line 1570 "cppBison.yxx"
{
  yyval.u.decl = new CPPTypeDeclaration(CPPType::new_type(yyvsp[0].u.struct_type));
}
    break;
case 208:
#line 1574 "cppBison.yxx"
{
  yyval.u.decl = CPPType::new_type(yyvsp[0].u.enum_type);
}
    break;
case 209:
#line 1578 "cppBison.yxx"
{
  yyval.u.decl = new CPPTypeDeclaration(CPPType::new_type(yyvsp[0].u.enum_type));
}
    break;
case 210:
#line 1582 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    yyval.u.decl = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope, yylsp[-1].file))
      ->as_extension_type();
    CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    yyval.u.decl = et;
  }
}
    break;
case 211:
#line 1598 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    yyval.u.decl = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope, yylsp[-1].file))
      ->as_extension_type();
    CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    yyval.u.decl = et;
  }
}
    break;
case 212:
#line 1617 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(yyvsp[0].u.simple_type);
}
    break;
case 213:
#line 1621 "cppBison.yxx"
{
  yyval.u.type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(yyval.u.type != NULL);
}
    break;
case 214:
#line 1626 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
}
    break;
case 215:
#line 1630 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    yyval.u.type = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope, yylsp[-1].file))
      ->as_extension_type();
    CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    yyval.u.type = et;
  }
}
    break;
case 216:
#line 1646 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    yyval.u.type = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope, yylsp[-1].file))
      ->as_extension_type();
    CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    yyval.u.type = et;
  }
}
    break;
case 217:
#line 1665 "cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance(yyvsp[-1].u.type, yyvsp[0].u.inst_ident, 0, yylsp[-1].file);
  yyval.u.type = inst->_type;
  delete inst;
}
    break;
case 218:
#line 1671 "cppBison.yxx"
{
  yyvsp[0].u.inst_ident->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(yyvsp[-1].u.type, yyvsp[0].u.inst_ident, 0, yylsp[-2].file);
  yyval.u.type = inst->_type;
  delete inst;
}
    break;
case 219:
#line 1681 "cppBison.yxx"
{
  CPPVisibility starting_vis = 
  (yyvsp[-1].u.extension_enum == CPPExtensionType::T_class) ? V_private : V_public;
  
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType(yyvsp[-1].u.extension_enum, NULL, current_scope,
                                        new_scope, yylsp[-1].file);
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
    break;
case 220:
#line 1695 "cppBison.yxx"
{
  yyval.u.struct_type = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
    break;
case 221:
#line 1705 "cppBison.yxx"
{
  CPPVisibility starting_vis = 
  (yyvsp[-1].u.extension_enum == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = yyvsp[0].u.identifier->get_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, yyvsp[0].u.identifier->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType(yyvsp[-1].u.extension_enum, yyvsp[0].u.identifier, current_scope,
                                        new_scope, yylsp[-1].file);
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);
  
  push_scope(new_scope);
  push_struct(st);
}
    break;
case 222:
#line 1725 "cppBison.yxx"
{
  yyval.u.struct_type = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
    break;
case 227:
#line 1745 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_public, false);
}
    break;
case 228:
#line 1749 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_protected, false);
}
    break;
case 229:
#line 1753 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_private, false);
}
    break;
case 230:
#line 1757 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_public, true);
}
    break;
case 231:
#line 1761 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_protected, true);
}
    break;
case 232:
#line 1765 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_private, true);
}
    break;
case 233:
#line 1769 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_public, true);
}
    break;
case 234:
#line 1773 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_protected, true);
}
    break;
case 235:
#line 1777 "cppBison.yxx"
{
  current_struct->append_derivation(yyvsp[0].u.type, V_private, true);
}
    break;
case 236:
#line 1784 "cppBison.yxx"
{
  current_enum = new CPPEnumType(NULL, current_scope, yylsp[-1].file);
}
    break;
case 237:
#line 1788 "cppBison.yxx"
{
  yyval.u.enum_type = current_enum;
  current_enum = NULL;
}
    break;
case 238:
#line 1796 "cppBison.yxx"
{
  current_enum = new CPPEnumType(yyvsp[-1].u.identifier, current_scope, yylsp[-2].file);
}
    break;
case 239:
#line 1800 "cppBison.yxx"
{
  yyval.u.enum_type = current_enum;
  current_enum = NULL;
}
    break;
case 243:
#line 1814 "cppBison.yxx"
{
  assert(current_enum != NULL);
  current_enum->add_element(yyvsp[0].u.identifier->get_simple_name(), current_scope);
}
    break;
case 244:
#line 1819 "cppBison.yxx"
{
  assert(current_enum != NULL);
  current_enum->add_element(yyvsp[-2].u.identifier->get_simple_name(), current_scope, yyvsp[0].u.expr);
}
    break;
case 245:
#line 1824 "cppBison.yxx"
{
  assert(current_enum != NULL);
  current_enum->add_element(yyvsp[0].u.identifier->get_simple_name(), current_scope);
}
    break;
case 246:
#line 1829 "cppBison.yxx"
{
  assert(current_enum != NULL);
  current_enum->add_element(yyvsp[-2].u.identifier->get_simple_name(), current_scope, yyvsp[0].u.expr);
}
    break;
case 247:
#line 1837 "cppBison.yxx"
{
  yyval.u.extension_enum = CPPExtensionType::T_enum;
}
    break;
case 248:
#line 1844 "cppBison.yxx"
{
  yyval.u.extension_enum = CPPExtensionType::T_class;
}
    break;
case 249:
#line 1848 "cppBison.yxx"
{
  yyval.u.extension_enum = CPPExtensionType::T_struct;
}
    break;
case 250:
#line 1852 "cppBison.yxx"
{
  yyval.u.extension_enum = CPPExtensionType::T_union;
}
    break;
case 251:
#line 1859 "cppBison.yxx"
{
  CPPScope *scope = yyvsp[-1].u.identifier->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope = 
      yyvsp[-1].u.identifier->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, yyvsp[-1].u.identifier->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace(yyvsp[-1].u.identifier, scope, yylsp[-2].file);
  current_scope->add_declaration(nspace, global_scope, current_lexer, yylsp[-2]);
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
    break;
case 252:
#line 1877 "cppBison.yxx"
{
  pop_scope();
}
    break;
case 254:
#line 1885 "cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing(yyvsp[0].u.identifier, false, yylsp[-1].file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, yylsp[-1]);
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
    break;
case 255:
#line 1891 "cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing(yyvsp[0].u.identifier, true, yylsp[-2].file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, yylsp[-2]);
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
    break;
case 259:
#line 1906 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_bool);
}
    break;
case 260:
#line 1910 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_char);
}
    break;
case 261:
#line 1914 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_wchar_t);
}
    break;
case 262:
#line 1918 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
    break;
case 263:
#line 1923 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
    break;
case 264:
#line 1928 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_longlong);
}
    break;
case 265:
#line 1933 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
    break;
case 266:
#line 1938 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
    break;
case 267:
#line 1943 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_int);
}
    break;
case 268:
#line 1947 "cppBison.yxx"
{
  yyval.u.simple_type = yyvsp[0].u.simple_type;
  yyval.u.simple_type->_flags |= CPPSimpleType::F_short;
}
    break;
case 269:
#line 1952 "cppBison.yxx"
{
  yyval.u.simple_type = yyvsp[0].u.simple_type;
  if (yyval.u.simple_type->_flags & CPPSimpleType::F_long) {
    yyval.u.simple_type->_flags |= CPPSimpleType::F_longlong;
  } else {
    yyval.u.simple_type->_flags |= CPPSimpleType::F_long;
  }
}
    break;
case 270:
#line 1961 "cppBison.yxx"
{
  yyval.u.simple_type = yyvsp[0].u.simple_type;
  yyval.u.simple_type->_flags |= CPPSimpleType::F_unsigned;
}
    break;
case 271:
#line 1966 "cppBison.yxx"
{
  yyval.u.simple_type = yyvsp[0].u.simple_type;
  yyval.u.simple_type->_flags |= CPPSimpleType::F_signed;
}
    break;
case 272:
#line 1974 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_float);
}
    break;
case 273:
#line 1978 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_float,
                         CPPSimpleType::F_long);
}
    break;
case 274:
#line 1983 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_double);
}
    break;
case 275:
#line 1987 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_float,
                         CPPSimpleType::F_longlong);
}
    break;
case 276:
#line 1992 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
    break;
case 277:
#line 2000 "cppBison.yxx"
{
  yyval.u.simple_type = new CPPSimpleType(CPPSimpleType::T_void);
}
    break;
case 278:
#line 2009 "cppBison.yxx"
{
  current_lexer->_resolve_identifiers = false;
}
    break;
case 279:
#line 2013 "cppBison.yxx"
{
  current_lexer->_resolve_identifiers = true;
}
    break;
case 282:
#line 2025 "cppBison.yxx"
{
}
    break;
case 283:
#line 2028 "cppBison.yxx"
{
}
    break;
case 284:
#line 2031 "cppBison.yxx"
{
}
    break;
case 285:
#line 2034 "cppBison.yxx"
{
}
    break;
case 286:
#line 2037 "cppBison.yxx"
{
}
    break;
case 287:
#line 2040 "cppBison.yxx"
{
}
    break;
case 288:
#line 2043 "cppBison.yxx"
{
}
    break;
case 289:
#line 2046 "cppBison.yxx"
{
}
    break;
case 363:
#line 2066 "cppBison.yxx"
{
}
    break;
case 387:
#line 2075 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 388:
#line 2079 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 389:
#line 2086 "cppBison.yxx"
{
  yyval.u.expr = (CPPExpression *)NULL;
}
    break;
case 390:
#line 2090 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 391:
#line 2097 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 392:
#line 2101 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(',', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 393:
#line 2108 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 394:
#line 2112 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-2].u.type, yyvsp[0].u.expr));
}
    break;
case 395:
#line 2116 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-4].u.type, yyvsp[-1].u.expr));
}
    break;
case 396:
#line 2120 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-4].u.type, yyvsp[-1].u.expr));
}
    break;
case 397:
#line 2124 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::sizeof_func(yyvsp[-1].u.type));
}
    break;
case 398:
#line 2128 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_NOT, yyvsp[0].u.expr);
}
    break;
case 399:
#line 2132 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_NEGATE, yyvsp[0].u.expr);
}
    break;
case 400:
#line 2136 "cppBison.yxx"
{
  if (yyvsp[0].u.expr->_type == CPPExpression::T_integer) {
    yyval.u.expr = yyvsp[0].u.expr;
    yyval.u.expr->_u._integer = -yyval.u.expr->_u._integer;
  } else if (yyvsp[0].u.expr->_type == CPPExpression::T_real) {
    yyval.u.expr = yyvsp[0].u.expr;
    yyval.u.expr->_u._real = -yyval.u.expr->_u._real;
  } else {
    yyval.u.expr = new CPPExpression(UNARY_MINUS, yyvsp[0].u.expr);
  }
}
    break;
case 401:
#line 2148 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_STAR, yyvsp[0].u.expr);
}
    break;
case 402:
#line 2152 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_REF, yyvsp[0].u.expr);
}
    break;
case 403:
#line 2156 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('*', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 404:
#line 2160 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('/', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 405:
#line 2164 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('%', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 406:
#line 2168 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('+', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 407:
#line 2172 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('-', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 408:
#line 2176 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('|', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 409:
#line 2180 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('&', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 410:
#line 2184 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(OROR, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 411:
#line 2188 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(ANDAND, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 412:
#line 2192 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(EQCOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 413:
#line 2196 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(NECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 414:
#line 2200 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(LECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 415:
#line 2204 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(GECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 416:
#line 2208 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(LSHIFT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 417:
#line 2212 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(RSHIFT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 418:
#line 2216 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('?', yyvsp[-4].u.expr, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 419:
#line 2220 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('[', yyvsp[-3].u.expr, yyvsp[-1].u.expr);
}
    break;
case 420:
#line 2224 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('f', yyvsp[-3].u.expr, yyvsp[-1].u.expr);
}
    break;
case 421:
#line 2228 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('f', yyvsp[-2].u.expr);
}
    break;
case 422:
#line 2232 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('.', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 423:
#line 2236 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(POINTSAT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 424:
#line 2240 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[-1].u.expr;
}
    break;
case 425:
#line 2248 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 426:
#line 2252 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-2].u.type, yyvsp[0].u.expr));
}
    break;
case 427:
#line 2256 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-4].u.type, yyvsp[-1].u.expr));
}
    break;
case 428:
#line 2260 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-4].u.type, yyvsp[-1].u.expr));
}
    break;
case 429:
#line 2264 "cppBison.yxx"
{
  // A constructor call.
  CPPType *type = yyvsp[-3].u.identifier->find_type(current_scope, global_scope, false, current_lexer);
  assert(type != NULL);
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 430:
#line 2271 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 431:
#line 2277 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 432:
#line 2283 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_wchar_t));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 433:
#line 2289 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 434:
#line 2295 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 435:
#line 2302 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 436:
#line 2309 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 437:
#line 2316 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 438:
#line 2323 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 439:
#line 2329 "cppBison.yxx"
{
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  yyval.u.expr = new CPPExpression(CPPExpression::construct_op(type, yyvsp[-1].u.expr));
}
    break;
case 440:
#line 2335 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::sizeof_func(yyvsp[-1].u.type));
}
    break;
case 441:
#line 2339 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::new_op(yyvsp[0].u.type));
}
    break;
case 442:
#line 2343 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::new_op(yyvsp[-3].u.type, yyvsp[-1].u.expr));
}
    break;
case 443:
#line 2347 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_NOT, yyvsp[0].u.expr);
}
    break;
case 444:
#line 2351 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_NEGATE, yyvsp[0].u.expr);
}
    break;
case 445:
#line 2355 "cppBison.yxx"
{
  if (yyvsp[0].u.expr->_type == CPPExpression::T_integer) {
    yyval.u.expr = yyvsp[0].u.expr;
    yyval.u.expr->_u._integer = -yyval.u.expr->_u._integer;
  } else if (yyvsp[0].u.expr->_type == CPPExpression::T_real) {
    yyval.u.expr = yyvsp[0].u.expr;
    yyval.u.expr->_u._real = -yyval.u.expr->_u._real;
  } else {
    yyval.u.expr = new CPPExpression(UNARY_MINUS, yyvsp[0].u.expr);
  }
}
    break;
case 446:
#line 2367 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_STAR, yyvsp[0].u.expr);
}
    break;
case 447:
#line 2371 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_REF, yyvsp[0].u.expr);
}
    break;
case 448:
#line 2375 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('*', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 449:
#line 2379 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('/', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 450:
#line 2383 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('%', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 451:
#line 2387 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('+', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 452:
#line 2391 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('-', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 453:
#line 2395 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('|', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 454:
#line 2399 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('&', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 455:
#line 2403 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(OROR, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 456:
#line 2407 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(ANDAND, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 457:
#line 2411 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(EQCOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 458:
#line 2415 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(NECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 459:
#line 2419 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(LECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 460:
#line 2423 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(GECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 461:
#line 2427 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('<', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 462:
#line 2431 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('>', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 463:
#line 2435 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(LSHIFT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 464:
#line 2439 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(RSHIFT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 465:
#line 2443 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('?', yyvsp[-4].u.expr, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 466:
#line 2447 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('[', yyvsp[-3].u.expr, yyvsp[-1].u.expr);
}
    break;
case 467:
#line 2451 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('f', yyvsp[-3].u.expr, yyvsp[-1].u.expr);
}
    break;
case 468:
#line 2455 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('f', yyvsp[-2].u.expr);
}
    break;
case 469:
#line 2459 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('.', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 470:
#line 2463 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(POINTSAT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 471:
#line 2467 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[-1].u.expr;
}
    break;
case 472:
#line 2474 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].u.integer);
}
    break;
case 473:
#line 2478 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(true);
}
    break;
case 474:
#line 2482 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(false);
}
    break;
case 475:
#line 2486 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].u.integer);
}
    break;
case 476:
#line 2490 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].u.real);
}
    break;
case 477:
#line 2494 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].str);
}
    break;
case 478:
#line 2498 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].u.identifier, current_scope, global_scope, current_lexer);
}
    break;
case 479:
#line 2512 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[0].u.expr;
}
    break;
case 480:
#line 2516 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-2].u.type, yyvsp[0].u.expr));
}
    break;
case 481:
#line 2520 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-4].u.type, yyvsp[-1].u.expr));
}
    break;
case 482:
#line 2524 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::typecast_op(yyvsp[-4].u.type, yyvsp[-1].u.expr));
}
    break;
case 483:
#line 2528 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::sizeof_func(yyvsp[-1].u.type));
}
    break;
case 484:
#line 2532 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::new_op(yyvsp[0].u.type));
}
    break;
case 485:
#line 2536 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(CPPExpression::new_op(yyvsp[-3].u.type, yyvsp[-1].u.expr));
}
    break;
case 486:
#line 2540 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_NOT, yyvsp[0].u.expr);
}
    break;
case 487:
#line 2544 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_NEGATE, yyvsp[0].u.expr);
}
    break;
case 488:
#line 2548 "cppBison.yxx"
{
  if (yyvsp[0].u.expr->_type == CPPExpression::T_integer) {
    yyval.u.expr = yyvsp[0].u.expr;
    yyval.u.expr->_u._integer = -yyval.u.expr->_u._integer;
  } else if (yyvsp[0].u.expr->_type == CPPExpression::T_real) {
    yyval.u.expr = yyvsp[0].u.expr;
    yyval.u.expr->_u._real = -yyval.u.expr->_u._real;
  } else {
    yyval.u.expr = new CPPExpression(UNARY_MINUS, yyvsp[0].u.expr);
  }
}
    break;
case 489:
#line 2560 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(UNARY_REF, yyvsp[0].u.expr);
}
    break;
case 490:
#line 2564 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('*', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 491:
#line 2568 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('/', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 492:
#line 2572 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('%', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 493:
#line 2576 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('+', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 494:
#line 2580 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('-', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 495:
#line 2584 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('|', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 496:
#line 2588 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('&', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 497:
#line 2592 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(OROR, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 498:
#line 2596 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(ANDAND, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 499:
#line 2600 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(EQCOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 500:
#line 2604 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(NECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 501:
#line 2608 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(LECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 502:
#line 2612 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(GECOMPARE, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 503:
#line 2616 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('<', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 504:
#line 2620 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('>', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 505:
#line 2624 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(LSHIFT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 506:
#line 2628 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(RSHIFT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 507:
#line 2632 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('?', yyvsp[-4].u.expr, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 508:
#line 2636 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('[', yyvsp[-3].u.expr, yyvsp[-1].u.expr);
}
    break;
case 509:
#line 2640 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('f', yyvsp[-3].u.expr, yyvsp[-1].u.expr);
}
    break;
case 510:
#line 2644 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('f', yyvsp[-2].u.expr);
}
    break;
case 511:
#line 2648 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression('.', yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 512:
#line 2652 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(POINTSAT, yyvsp[-2].u.expr, yyvsp[0].u.expr);
}
    break;
case 513:
#line 2656 "cppBison.yxx"
{
  yyval.u.expr = yyvsp[-1].u.expr;
}
    break;
case 514:
#line 2663 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].u.integer);
}
    break;
case 515:
#line 2667 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(true);
}
    break;
case 516:
#line 2671 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(false);
}
    break;
case 517:
#line 2675 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].u.integer);
}
    break;
case 518:
#line 2679 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].u.real);
}
    break;
case 519:
#line 2683 "cppBison.yxx"
{
  yyval.u.expr = new CPPExpression(yyvsp[0].str);
}
    break;
case 520:
#line 2690 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, true);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
  }
  yyval.u.type = type;
}
    break;
case 521:
#line 2698 "cppBison.yxx"
{
  CPPType *type = yyvsp[0].u.identifier->find_type(current_scope, global_scope, true, current_lexer);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
  }
  yyval.u.type = type;
}
    break;
case 522:
#line 2706 "cppBison.yxx"
{
  yyval.u.type = CPPType::new_type(new CPPTBDType(yyvsp[0].u.identifier));
}
    break;
case 523:
#line 2729 "cppBison.yxx"
{
  yyval.u.identifier = yyvsp[0].u.identifier;
}
    break;
case 524:
#line 2733 "cppBison.yxx"
{
  yyval.u.identifier = yyvsp[0].u.identifier;
}
    break;
case 525:
#line 2740 "cppBison.yxx"
{
  yyval.str = yyvsp[0].str;
}
    break;
case 526:
#line 2744 "cppBison.yxx"
{
  yyval.str = yyvsp[-1].str + yyvsp[0].str;
}
    break;
}

#line 705 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 2751 "cppBison.yxx"
