// Filename: classBuilderPythonObj.cxx
// Created by:  drose (17Sep01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://www.panda3d.org/license.txt .
//
// To contact the maintainers of this program write to
// panda3d@yahoogroups.com .
//
////////////////////////////////////////////////////////////////////

#include "classBuilderPythonObj.h"
#include "cppStructType.h"
#include "interrogateBuilder.h"
#include "interrogate.h"

#include "interrogateType.h"
#include "interrogateDatabase.h"

////////////////////////////////////////////////////////////////////
//     Function: ClassBuilderPythonObj::set_class
//       Access: Public, Virtual
//  Description: Sets the class that will be generated by this
//               ClassBuilder.  Returns true on success, false if the
//               class cannot be output for some reason.
////////////////////////////////////////////////////////////////////
bool ClassBuilderPythonObj::
set_class(TypeIndex type_index, CPPStructType *struct_type) {
  if (!ClassBuilder::set_class(type_index, struct_type)) {
    return false;
  }

  _name = get_builder_name(_struct_type);

  InterrogateDatabase *idb = InterrogateDatabase::get_ptr();
  const InterrogateType &itype = idb->get_type(_type_index);
  int num_methods = itype.number_of_methods();
  cerr << "    // index = " << _type_index << " methods = " << num_methods
      << " type = " << itype.get_name() << "\n";
  for (int i = 0; i < num_methods; i++) {
    FunctionIndex fi = itype.get_method(i);
    const InterrogateFunction &func = idb->get_function(fi);

    cerr << "    // " << func.get_name() << "\n";
  }

  return true;
}

////////////////////////////////////////////////////////////////////
//     Function: ClassBuilderPythonObj::write_prototype
//       Access: Public, Virtual
//  Description: Generates prototypes for whatever functions will be
//               generated by write_code().
////////////////////////////////////////////////////////////////////
void ClassBuilderPythonObj::
write_prototype(ostream &out) const {
  out << "PyObject *" << _name << "();\n";
}

////////////////////////////////////////////////////////////////////
//     Function: ClassBuilderPythonObj::write_code
//       Access: Public, Virtual
//  Description: Generates whatever code is appropriate for this
//               class.
////////////////////////////////////////////////////////////////////
void ClassBuilderPythonObj::
write_code(ostream &out) const {
  out << "PyObject *\n"
      << _name << "() {\n"
      << "  static PyObject *wrapper = (PyObject *)NULL;\n"
      << "  static PyMethodDef methods[] = {\n";

  out << "  };\n"
      << "  if (wrapper == (PyObject *)NULL) {\n"
      << "    PyObject *bases = PyTuple_New(0);\n"
      << "    PyObject *dict = PyDict_New();\n"
      << "    PyObject *name = PyString_FromString(\"" 
      << InterrogateBuilder::clean_identifier(_struct_type->get_simple_name())
      << "\");\n"
      << "    wrapper = PyClass_New(bases, dict, name);\n"
      << "  }\n"
      << "  return wrapper;\n"
      << "}\n\n";
}

////////////////////////////////////////////////////////////////////
//     Function: ClassBuilderPythonObj::get_builder_name
//       Access: Public, Static
//  Description: Returns the name of the ClassBuilder function
//               generated for the indicated struct type.
////////////////////////////////////////////////////////////////////
string ClassBuilderPythonObj::
get_builder_name(CPPType *struct_type) {
  return "get_python_class_" + 
    InterrogateBuilder::clean_identifier(struct_type->get_local_name(&parser));
}
